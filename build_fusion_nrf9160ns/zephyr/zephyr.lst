
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	2002db50 	.word	0x2002db50
    c004:	000140cd 	.word	0x000140cd
    c008:	000242c7 	.word	0x000242c7
    c00c:	000140fd 	.word	0x000140fd
    c010:	000140fd 	.word	0x000140fd
    c014:	000140fd 	.word	0x000140fd
    c018:	000140fd 	.word	0x000140fd
    c01c:	000140fd 	.word	0x000140fd
	...
    c02c:	0001403d 	.word	0x0001403d
    c030:	000140fd 	.word	0x000140fd
    c034:	00000000 	.word	0x00000000
    c038:	00013f99 	.word	0x00013f99
    c03c:	000241ff 	.word	0x000241ff

0000c040 <_irq_vector_table>:
    c040:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c050:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c060:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c070:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c080:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c090:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c0a0:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c0b0:	00015a5d 0002576d 0001408d 0001408d     ]Z..mW...@...@..
    c0c0:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c0d0:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c0e0:	0001408d 0001408d 0002578b 0001408d     .@...@...W...@..
    c0f0:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c100:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c110:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c120:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c130:	0001408d 0001408d 0001408d 0001408d     .@...@...@...@..
    c140:	0001408d                                .@..

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0001f374 00000001 0000c000 0000c000     t...............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__aeabi_uldivmod>:
    c5b8:	b953      	cbnz	r3, c5d0 <__aeabi_uldivmod+0x18>
    c5ba:	b94a      	cbnz	r2, c5d0 <__aeabi_uldivmod+0x18>
    c5bc:	2900      	cmp	r1, #0
    c5be:	bf08      	it	eq
    c5c0:	2800      	cmpeq	r0, #0
    c5c2:	bf1c      	itt	ne
    c5c4:	f04f 31ff 	movne.w	r1, #4294967295
    c5c8:	f04f 30ff 	movne.w	r0, #4294967295
    c5cc:	f000 b96c 	b.w	c8a8 <__aeabi_idiv0>
    c5d0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5d8:	f000 f806 	bl	c5e8 <__udivmoddi4>
    c5dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5e4:	b004      	add	sp, #16
    c5e6:	4770      	bx	lr

0000c5e8 <__udivmoddi4>:
    c5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5ec:	9d08      	ldr	r5, [sp, #32]
    c5ee:	4604      	mov	r4, r0
    c5f0:	4688      	mov	r8, r1
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	d17d      	bne.n	c6f2 <__udivmoddi4+0x10a>
    c5f6:	428a      	cmp	r2, r1
    c5f8:	4617      	mov	r7, r2
    c5fa:	d93f      	bls.n	c67c <__udivmoddi4+0x94>
    c5fc:	fab2 f282 	clz	r2, r2
    c600:	b142      	cbz	r2, c614 <__udivmoddi4+0x2c>
    c602:	f1c2 0020 	rsb	r0, r2, #32
    c606:	4091      	lsls	r1, r2
    c608:	4097      	lsls	r7, r2
    c60a:	fa24 f000 	lsr.w	r0, r4, r0
    c60e:	4094      	lsls	r4, r2
    c610:	ea40 0801 	orr.w	r8, r0, r1
    c614:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c618:	0c23      	lsrs	r3, r4, #16
    c61a:	fa1f fe87 	uxth.w	lr, r7
    c61e:	fbb8 f6fc 	udiv	r6, r8, ip
    c622:	fb0c 8116 	mls	r1, ip, r6, r8
    c626:	fb06 f00e 	mul.w	r0, r6, lr
    c62a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c62e:	4298      	cmp	r0, r3
    c630:	d905      	bls.n	c63e <__udivmoddi4+0x56>
    c632:	18fb      	adds	r3, r7, r3
    c634:	d202      	bcs.n	c63c <__udivmoddi4+0x54>
    c636:	4298      	cmp	r0, r3
    c638:	f200 8124 	bhi.w	c884 <__udivmoddi4+0x29c>
    c63c:	3e01      	subs	r6, #1
    c63e:	1a19      	subs	r1, r3, r0
    c640:	b2a3      	uxth	r3, r4
    c642:	fbb1 f0fc 	udiv	r0, r1, ip
    c646:	fb0c 1110 	mls	r1, ip, r0, r1
    c64a:	fb00 fe0e 	mul.w	lr, r0, lr
    c64e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c652:	45a6      	cmp	lr, r4
    c654:	d905      	bls.n	c662 <__udivmoddi4+0x7a>
    c656:	193c      	adds	r4, r7, r4
    c658:	d202      	bcs.n	c660 <__udivmoddi4+0x78>
    c65a:	45a6      	cmp	lr, r4
    c65c:	f200 810f 	bhi.w	c87e <__udivmoddi4+0x296>
    c660:	3801      	subs	r0, #1
    c662:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c666:	eba4 040e 	sub.w	r4, r4, lr
    c66a:	2600      	movs	r6, #0
    c66c:	b11d      	cbz	r5, c676 <__udivmoddi4+0x8e>
    c66e:	40d4      	lsrs	r4, r2
    c670:	2300      	movs	r3, #0
    c672:	e9c5 4300 	strd	r4, r3, [r5]
    c676:	4631      	mov	r1, r6
    c678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c67c:	b902      	cbnz	r2, c680 <__udivmoddi4+0x98>
    c67e:	deff      	udf	#255	; 0xff
    c680:	fab2 f282 	clz	r2, r2
    c684:	2a00      	cmp	r2, #0
    c686:	d150      	bne.n	c72a <__udivmoddi4+0x142>
    c688:	1bcb      	subs	r3, r1, r7
    c68a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c68e:	fa1f f887 	uxth.w	r8, r7
    c692:	2601      	movs	r6, #1
    c694:	0c21      	lsrs	r1, r4, #16
    c696:	fbb3 fcfe 	udiv	ip, r3, lr
    c69a:	fb0e 301c 	mls	r0, lr, ip, r3
    c69e:	460b      	mov	r3, r1
    c6a0:	fb08 f90c 	mul.w	r9, r8, ip
    c6a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c6a8:	4589      	cmp	r9, r1
    c6aa:	d90a      	bls.n	c6c2 <__udivmoddi4+0xda>
    c6ac:	1879      	adds	r1, r7, r1
    c6ae:	bf2c      	ite	cs
    c6b0:	2301      	movcs	r3, #1
    c6b2:	2300      	movcc	r3, #0
    c6b4:	4589      	cmp	r9, r1
    c6b6:	d902      	bls.n	c6be <__udivmoddi4+0xd6>
    c6b8:	2b00      	cmp	r3, #0
    c6ba:	f000 80d9 	beq.w	c870 <__udivmoddi4+0x288>
    c6be:	f10c 3cff 	add.w	ip, ip, #4294967295
    c6c2:	eba1 0109 	sub.w	r1, r1, r9
    c6c6:	b2a3      	uxth	r3, r4
    c6c8:	fbb1 f0fe 	udiv	r0, r1, lr
    c6cc:	fb0e 1110 	mls	r1, lr, r0, r1
    c6d0:	fb08 f800 	mul.w	r8, r8, r0
    c6d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c6d8:	45a0      	cmp	r8, r4
    c6da:	d905      	bls.n	c6e8 <__udivmoddi4+0x100>
    c6dc:	193c      	adds	r4, r7, r4
    c6de:	d202      	bcs.n	c6e6 <__udivmoddi4+0xfe>
    c6e0:	45a0      	cmp	r8, r4
    c6e2:	f200 80c9 	bhi.w	c878 <__udivmoddi4+0x290>
    c6e6:	3801      	subs	r0, #1
    c6e8:	eba4 0408 	sub.w	r4, r4, r8
    c6ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c6f0:	e7bc      	b.n	c66c <__udivmoddi4+0x84>
    c6f2:	428b      	cmp	r3, r1
    c6f4:	d909      	bls.n	c70a <__udivmoddi4+0x122>
    c6f6:	2d00      	cmp	r5, #0
    c6f8:	f000 80b1 	beq.w	c85e <__udivmoddi4+0x276>
    c6fc:	2600      	movs	r6, #0
    c6fe:	e9c5 0100 	strd	r0, r1, [r5]
    c702:	4630      	mov	r0, r6
    c704:	4631      	mov	r1, r6
    c706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c70a:	fab3 f683 	clz	r6, r3
    c70e:	2e00      	cmp	r6, #0
    c710:	d146      	bne.n	c7a0 <__udivmoddi4+0x1b8>
    c712:	428b      	cmp	r3, r1
    c714:	f0c0 80a6 	bcc.w	c864 <__udivmoddi4+0x27c>
    c718:	4282      	cmp	r2, r0
    c71a:	f240 80a3 	bls.w	c864 <__udivmoddi4+0x27c>
    c71e:	4630      	mov	r0, r6
    c720:	2d00      	cmp	r5, #0
    c722:	d0a8      	beq.n	c676 <__udivmoddi4+0x8e>
    c724:	e9c5 4800 	strd	r4, r8, [r5]
    c728:	e7a5      	b.n	c676 <__udivmoddi4+0x8e>
    c72a:	4097      	lsls	r7, r2
    c72c:	f1c2 0320 	rsb	r3, r2, #32
    c730:	fa01 f002 	lsl.w	r0, r1, r2
    c734:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c738:	40d9      	lsrs	r1, r3
    c73a:	fa24 f303 	lsr.w	r3, r4, r3
    c73e:	fa1f f887 	uxth.w	r8, r7
    c742:	4094      	lsls	r4, r2
    c744:	4303      	orrs	r3, r0
    c746:	fbb1 f0fe 	udiv	r0, r1, lr
    c74a:	0c1e      	lsrs	r6, r3, #16
    c74c:	fb0e 1110 	mls	r1, lr, r0, r1
    c750:	fb00 fc08 	mul.w	ip, r0, r8
    c754:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    c758:	458c      	cmp	ip, r1
    c75a:	d909      	bls.n	c770 <__udivmoddi4+0x188>
    c75c:	1879      	adds	r1, r7, r1
    c75e:	bf2c      	ite	cs
    c760:	2601      	movcs	r6, #1
    c762:	2600      	movcc	r6, #0
    c764:	458c      	cmp	ip, r1
    c766:	d902      	bls.n	c76e <__udivmoddi4+0x186>
    c768:	2e00      	cmp	r6, #0
    c76a:	f000 8093 	beq.w	c894 <__udivmoddi4+0x2ac>
    c76e:	3801      	subs	r0, #1
    c770:	eba1 010c 	sub.w	r1, r1, ip
    c774:	b29b      	uxth	r3, r3
    c776:	fbb1 f6fe 	udiv	r6, r1, lr
    c77a:	fb0e 1116 	mls	r1, lr, r6, r1
    c77e:	fb06 fc08 	mul.w	ip, r6, r8
    c782:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    c786:	458c      	cmp	ip, r1
    c788:	d905      	bls.n	c796 <__udivmoddi4+0x1ae>
    c78a:	1879      	adds	r1, r7, r1
    c78c:	d202      	bcs.n	c794 <__udivmoddi4+0x1ac>
    c78e:	458c      	cmp	ip, r1
    c790:	f200 8087 	bhi.w	c8a2 <__udivmoddi4+0x2ba>
    c794:	3e01      	subs	r6, #1
    c796:	eba1 030c 	sub.w	r3, r1, ip
    c79a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    c79e:	e779      	b.n	c694 <__udivmoddi4+0xac>
    c7a0:	f1c6 0720 	rsb	r7, r6, #32
    c7a4:	fa03 f406 	lsl.w	r4, r3, r6
    c7a8:	fa02 fc06 	lsl.w	ip, r2, r6
    c7ac:	fa01 fe06 	lsl.w	lr, r1, r6
    c7b0:	40fa      	lsrs	r2, r7
    c7b2:	fa20 f807 	lsr.w	r8, r0, r7
    c7b6:	40f9      	lsrs	r1, r7
    c7b8:	fa00 f306 	lsl.w	r3, r0, r6
    c7bc:	4322      	orrs	r2, r4
    c7be:	ea48 040e 	orr.w	r4, r8, lr
    c7c2:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c7c6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    c7ca:	fa1f f982 	uxth.w	r9, r2
    c7ce:	fbb1 faf8 	udiv	sl, r1, r8
    c7d2:	fb08 111a 	mls	r1, r8, sl, r1
    c7d6:	fb0a f009 	mul.w	r0, sl, r9
    c7da:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    c7de:	4570      	cmp	r0, lr
    c7e0:	d90a      	bls.n	c7f8 <__udivmoddi4+0x210>
    c7e2:	eb12 0e0e 	adds.w	lr, r2, lr
    c7e6:	bf2c      	ite	cs
    c7e8:	2101      	movcs	r1, #1
    c7ea:	2100      	movcc	r1, #0
    c7ec:	4570      	cmp	r0, lr
    c7ee:	d901      	bls.n	c7f4 <__udivmoddi4+0x20c>
    c7f0:	2900      	cmp	r1, #0
    c7f2:	d052      	beq.n	c89a <__udivmoddi4+0x2b2>
    c7f4:	f10a 3aff 	add.w	sl, sl, #4294967295
    c7f8:	ebae 0e00 	sub.w	lr, lr, r0
    c7fc:	b2a4      	uxth	r4, r4
    c7fe:	fbbe f0f8 	udiv	r0, lr, r8
    c802:	fb08 ee10 	mls	lr, r8, r0, lr
    c806:	fb00 f909 	mul.w	r9, r0, r9
    c80a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    c80e:	45f1      	cmp	r9, lr
    c810:	d905      	bls.n	c81e <__udivmoddi4+0x236>
    c812:	eb12 0e0e 	adds.w	lr, r2, lr
    c816:	d201      	bcs.n	c81c <__udivmoddi4+0x234>
    c818:	45f1      	cmp	r9, lr
    c81a:	d838      	bhi.n	c88e <__udivmoddi4+0x2a6>
    c81c:	3801      	subs	r0, #1
    c81e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c822:	ebae 0e09 	sub.w	lr, lr, r9
    c826:	fba0 890c 	umull	r8, r9, r0, ip
    c82a:	45ce      	cmp	lr, r9
    c82c:	4641      	mov	r1, r8
    c82e:	464c      	mov	r4, r9
    c830:	d302      	bcc.n	c838 <__udivmoddi4+0x250>
    c832:	d106      	bne.n	c842 <__udivmoddi4+0x25a>
    c834:	4543      	cmp	r3, r8
    c836:	d204      	bcs.n	c842 <__udivmoddi4+0x25a>
    c838:	3801      	subs	r0, #1
    c83a:	ebb8 010c 	subs.w	r1, r8, ip
    c83e:	eb69 0402 	sbc.w	r4, r9, r2
    c842:	b315      	cbz	r5, c88a <__udivmoddi4+0x2a2>
    c844:	1a5a      	subs	r2, r3, r1
    c846:	eb6e 0e04 	sbc.w	lr, lr, r4
    c84a:	40f2      	lsrs	r2, r6
    c84c:	fa0e f707 	lsl.w	r7, lr, r7
    c850:	fa2e f306 	lsr.w	r3, lr, r6
    c854:	2600      	movs	r6, #0
    c856:	4317      	orrs	r7, r2
    c858:	e9c5 7300 	strd	r7, r3, [r5]
    c85c:	e70b      	b.n	c676 <__udivmoddi4+0x8e>
    c85e:	462e      	mov	r6, r5
    c860:	4628      	mov	r0, r5
    c862:	e708      	b.n	c676 <__udivmoddi4+0x8e>
    c864:	1a84      	subs	r4, r0, r2
    c866:	eb61 0103 	sbc.w	r1, r1, r3
    c86a:	2001      	movs	r0, #1
    c86c:	4688      	mov	r8, r1
    c86e:	e757      	b.n	c720 <__udivmoddi4+0x138>
    c870:	f1ac 0c02 	sub.w	ip, ip, #2
    c874:	4439      	add	r1, r7
    c876:	e724      	b.n	c6c2 <__udivmoddi4+0xda>
    c878:	3802      	subs	r0, #2
    c87a:	443c      	add	r4, r7
    c87c:	e734      	b.n	c6e8 <__udivmoddi4+0x100>
    c87e:	3802      	subs	r0, #2
    c880:	443c      	add	r4, r7
    c882:	e6ee      	b.n	c662 <__udivmoddi4+0x7a>
    c884:	3e02      	subs	r6, #2
    c886:	443b      	add	r3, r7
    c888:	e6d9      	b.n	c63e <__udivmoddi4+0x56>
    c88a:	462e      	mov	r6, r5
    c88c:	e6f3      	b.n	c676 <__udivmoddi4+0x8e>
    c88e:	3802      	subs	r0, #2
    c890:	4496      	add	lr, r2
    c892:	e7c4      	b.n	c81e <__udivmoddi4+0x236>
    c894:	3802      	subs	r0, #2
    c896:	4439      	add	r1, r7
    c898:	e76a      	b.n	c770 <__udivmoddi4+0x188>
    c89a:	f1aa 0a02 	sub.w	sl, sl, #2
    c89e:	4496      	add	lr, r2
    c8a0:	e7aa      	b.n	c7f8 <__udivmoddi4+0x210>
    c8a2:	3e02      	subs	r6, #2
    c8a4:	4439      	add	r1, r7
    c8a6:	e776      	b.n	c796 <__udivmoddi4+0x1ae>

0000c8a8 <__aeabi_idiv0>:
    c8a8:	4770      	bx	lr
    c8aa:	bf00      	nop

0000c8ac <__aeabi_dmul>:
    c8ac:	b570      	push	{r4, r5, r6, lr}
    c8ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c8b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c8b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c8ba:	bf1d      	ittte	ne
    c8bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c8c0:	ea94 0f0c 	teqne	r4, ip
    c8c4:	ea95 0f0c 	teqne	r5, ip
    c8c8:	f000 f8de 	bleq	ca88 <__aeabi_dmul+0x1dc>
    c8cc:	442c      	add	r4, r5
    c8ce:	ea81 0603 	eor.w	r6, r1, r3
    c8d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c8d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c8da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c8de:	bf18      	it	ne
    c8e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c8e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c8e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c8ec:	d038      	beq.n	c960 <__aeabi_dmul+0xb4>
    c8ee:	fba0 ce02 	umull	ip, lr, r0, r2
    c8f2:	f04f 0500 	mov.w	r5, #0
    c8f6:	fbe1 e502 	umlal	lr, r5, r1, r2
    c8fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c8fe:	fbe0 e503 	umlal	lr, r5, r0, r3
    c902:	f04f 0600 	mov.w	r6, #0
    c906:	fbe1 5603 	umlal	r5, r6, r1, r3
    c90a:	f09c 0f00 	teq	ip, #0
    c90e:	bf18      	it	ne
    c910:	f04e 0e01 	orrne.w	lr, lr, #1
    c914:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c918:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c91c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c920:	d204      	bcs.n	c92c <__aeabi_dmul+0x80>
    c922:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c926:	416d      	adcs	r5, r5
    c928:	eb46 0606 	adc.w	r6, r6, r6
    c92c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c930:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c934:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c938:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c93c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c940:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c944:	bf88      	it	hi
    c946:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c94a:	d81e      	bhi.n	c98a <__aeabi_dmul+0xde>
    c94c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c950:	bf08      	it	eq
    c952:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c956:	f150 0000 	adcs.w	r0, r0, #0
    c95a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c95e:	bd70      	pop	{r4, r5, r6, pc}
    c960:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c964:	ea46 0101 	orr.w	r1, r6, r1
    c968:	ea40 0002 	orr.w	r0, r0, r2
    c96c:	ea81 0103 	eor.w	r1, r1, r3
    c970:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c974:	bfc2      	ittt	gt
    c976:	ebd4 050c 	rsbsgt	r5, r4, ip
    c97a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c97e:	bd70      	popgt	{r4, r5, r6, pc}
    c980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c984:	f04f 0e00 	mov.w	lr, #0
    c988:	3c01      	subs	r4, #1
    c98a:	f300 80ab 	bgt.w	cae4 <__aeabi_dmul+0x238>
    c98e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c992:	bfde      	ittt	le
    c994:	2000      	movle	r0, #0
    c996:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c99a:	bd70      	pople	{r4, r5, r6, pc}
    c99c:	f1c4 0400 	rsb	r4, r4, #0
    c9a0:	3c20      	subs	r4, #32
    c9a2:	da35      	bge.n	ca10 <__aeabi_dmul+0x164>
    c9a4:	340c      	adds	r4, #12
    c9a6:	dc1b      	bgt.n	c9e0 <__aeabi_dmul+0x134>
    c9a8:	f104 0414 	add.w	r4, r4, #20
    c9ac:	f1c4 0520 	rsb	r5, r4, #32
    c9b0:	fa00 f305 	lsl.w	r3, r0, r5
    c9b4:	fa20 f004 	lsr.w	r0, r0, r4
    c9b8:	fa01 f205 	lsl.w	r2, r1, r5
    c9bc:	ea40 0002 	orr.w	r0, r0, r2
    c9c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c9c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c9c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c9cc:	fa21 f604 	lsr.w	r6, r1, r4
    c9d0:	eb42 0106 	adc.w	r1, r2, r6
    c9d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c9d8:	bf08      	it	eq
    c9da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c9de:	bd70      	pop	{r4, r5, r6, pc}
    c9e0:	f1c4 040c 	rsb	r4, r4, #12
    c9e4:	f1c4 0520 	rsb	r5, r4, #32
    c9e8:	fa00 f304 	lsl.w	r3, r0, r4
    c9ec:	fa20 f005 	lsr.w	r0, r0, r5
    c9f0:	fa01 f204 	lsl.w	r2, r1, r4
    c9f4:	ea40 0002 	orr.w	r0, r0, r2
    c9f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c9fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ca00:	f141 0100 	adc.w	r1, r1, #0
    ca04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ca08:	bf08      	it	eq
    ca0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ca0e:	bd70      	pop	{r4, r5, r6, pc}
    ca10:	f1c4 0520 	rsb	r5, r4, #32
    ca14:	fa00 f205 	lsl.w	r2, r0, r5
    ca18:	ea4e 0e02 	orr.w	lr, lr, r2
    ca1c:	fa20 f304 	lsr.w	r3, r0, r4
    ca20:	fa01 f205 	lsl.w	r2, r1, r5
    ca24:	ea43 0302 	orr.w	r3, r3, r2
    ca28:	fa21 f004 	lsr.w	r0, r1, r4
    ca2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ca30:	fa21 f204 	lsr.w	r2, r1, r4
    ca34:	ea20 0002 	bic.w	r0, r0, r2
    ca38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    ca3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ca40:	bf08      	it	eq
    ca42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ca46:	bd70      	pop	{r4, r5, r6, pc}
    ca48:	f094 0f00 	teq	r4, #0
    ca4c:	d10f      	bne.n	ca6e <__aeabi_dmul+0x1c2>
    ca4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    ca52:	0040      	lsls	r0, r0, #1
    ca54:	eb41 0101 	adc.w	r1, r1, r1
    ca58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ca5c:	bf08      	it	eq
    ca5e:	3c01      	subeq	r4, #1
    ca60:	d0f7      	beq.n	ca52 <__aeabi_dmul+0x1a6>
    ca62:	ea41 0106 	orr.w	r1, r1, r6
    ca66:	f095 0f00 	teq	r5, #0
    ca6a:	bf18      	it	ne
    ca6c:	4770      	bxne	lr
    ca6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    ca72:	0052      	lsls	r2, r2, #1
    ca74:	eb43 0303 	adc.w	r3, r3, r3
    ca78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    ca7c:	bf08      	it	eq
    ca7e:	3d01      	subeq	r5, #1
    ca80:	d0f7      	beq.n	ca72 <__aeabi_dmul+0x1c6>
    ca82:	ea43 0306 	orr.w	r3, r3, r6
    ca86:	4770      	bx	lr
    ca88:	ea94 0f0c 	teq	r4, ip
    ca8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ca90:	bf18      	it	ne
    ca92:	ea95 0f0c 	teqne	r5, ip
    ca96:	d00c      	beq.n	cab2 <__aeabi_dmul+0x206>
    ca98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ca9c:	bf18      	it	ne
    ca9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    caa2:	d1d1      	bne.n	ca48 <__aeabi_dmul+0x19c>
    caa4:	ea81 0103 	eor.w	r1, r1, r3
    caa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    caac:	f04f 0000 	mov.w	r0, #0
    cab0:	bd70      	pop	{r4, r5, r6, pc}
    cab2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cab6:	bf06      	itte	eq
    cab8:	4610      	moveq	r0, r2
    caba:	4619      	moveq	r1, r3
    cabc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cac0:	d019      	beq.n	caf6 <__aeabi_dmul+0x24a>
    cac2:	ea94 0f0c 	teq	r4, ip
    cac6:	d102      	bne.n	cace <__aeabi_dmul+0x222>
    cac8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    cacc:	d113      	bne.n	caf6 <__aeabi_dmul+0x24a>
    cace:	ea95 0f0c 	teq	r5, ip
    cad2:	d105      	bne.n	cae0 <__aeabi_dmul+0x234>
    cad4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    cad8:	bf1c      	itt	ne
    cada:	4610      	movne	r0, r2
    cadc:	4619      	movne	r1, r3
    cade:	d10a      	bne.n	caf6 <__aeabi_dmul+0x24a>
    cae0:	ea81 0103 	eor.w	r1, r1, r3
    cae4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cae8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    caec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    caf0:	f04f 0000 	mov.w	r0, #0
    caf4:	bd70      	pop	{r4, r5, r6, pc}
    caf6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cafa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    cafe:	bd70      	pop	{r4, r5, r6, pc}

0000cb00 <__aeabi_ddiv>:
    cb00:	b570      	push	{r4, r5, r6, lr}
    cb02:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cb06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cb0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cb0e:	bf1d      	ittte	ne
    cb10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cb14:	ea94 0f0c 	teqne	r4, ip
    cb18:	ea95 0f0c 	teqne	r5, ip
    cb1c:	f000 f8a7 	bleq	cc6e <__aeabi_ddiv+0x16e>
    cb20:	eba4 0405 	sub.w	r4, r4, r5
    cb24:	ea81 0e03 	eor.w	lr, r1, r3
    cb28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cb2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cb30:	f000 8088 	beq.w	cc44 <__aeabi_ddiv+0x144>
    cb34:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cb38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cb3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    cb40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    cb44:	ea4f 2202 	mov.w	r2, r2, lsl #8
    cb48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    cb4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    cb50:	ea4f 2600 	mov.w	r6, r0, lsl #8
    cb54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    cb58:	429d      	cmp	r5, r3
    cb5a:	bf08      	it	eq
    cb5c:	4296      	cmpeq	r6, r2
    cb5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    cb62:	f504 7440 	add.w	r4, r4, #768	; 0x300
    cb66:	d202      	bcs.n	cb6e <__aeabi_ddiv+0x6e>
    cb68:	085b      	lsrs	r3, r3, #1
    cb6a:	ea4f 0232 	mov.w	r2, r2, rrx
    cb6e:	1ab6      	subs	r6, r6, r2
    cb70:	eb65 0503 	sbc.w	r5, r5, r3
    cb74:	085b      	lsrs	r3, r3, #1
    cb76:	ea4f 0232 	mov.w	r2, r2, rrx
    cb7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    cb7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    cb82:	ebb6 0e02 	subs.w	lr, r6, r2
    cb86:	eb75 0e03 	sbcs.w	lr, r5, r3
    cb8a:	bf22      	ittt	cs
    cb8c:	1ab6      	subcs	r6, r6, r2
    cb8e:	4675      	movcs	r5, lr
    cb90:	ea40 000c 	orrcs.w	r0, r0, ip
    cb94:	085b      	lsrs	r3, r3, #1
    cb96:	ea4f 0232 	mov.w	r2, r2, rrx
    cb9a:	ebb6 0e02 	subs.w	lr, r6, r2
    cb9e:	eb75 0e03 	sbcs.w	lr, r5, r3
    cba2:	bf22      	ittt	cs
    cba4:	1ab6      	subcs	r6, r6, r2
    cba6:	4675      	movcs	r5, lr
    cba8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    cbac:	085b      	lsrs	r3, r3, #1
    cbae:	ea4f 0232 	mov.w	r2, r2, rrx
    cbb2:	ebb6 0e02 	subs.w	lr, r6, r2
    cbb6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbba:	bf22      	ittt	cs
    cbbc:	1ab6      	subcs	r6, r6, r2
    cbbe:	4675      	movcs	r5, lr
    cbc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cbc4:	085b      	lsrs	r3, r3, #1
    cbc6:	ea4f 0232 	mov.w	r2, r2, rrx
    cbca:	ebb6 0e02 	subs.w	lr, r6, r2
    cbce:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbd2:	bf22      	ittt	cs
    cbd4:	1ab6      	subcs	r6, r6, r2
    cbd6:	4675      	movcs	r5, lr
    cbd8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    cbdc:	ea55 0e06 	orrs.w	lr, r5, r6
    cbe0:	d018      	beq.n	cc14 <__aeabi_ddiv+0x114>
    cbe2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    cbe6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    cbea:	ea4f 1606 	mov.w	r6, r6, lsl #4
    cbee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    cbf2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    cbf6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    cbfa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    cbfe:	d1c0      	bne.n	cb82 <__aeabi_ddiv+0x82>
    cc00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cc04:	d10b      	bne.n	cc1e <__aeabi_ddiv+0x11e>
    cc06:	ea41 0100 	orr.w	r1, r1, r0
    cc0a:	f04f 0000 	mov.w	r0, #0
    cc0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    cc12:	e7b6      	b.n	cb82 <__aeabi_ddiv+0x82>
    cc14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cc18:	bf04      	itt	eq
    cc1a:	4301      	orreq	r1, r0
    cc1c:	2000      	moveq	r0, #0
    cc1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cc22:	bf88      	it	hi
    cc24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cc28:	f63f aeaf 	bhi.w	c98a <__aeabi_dmul+0xde>
    cc2c:	ebb5 0c03 	subs.w	ip, r5, r3
    cc30:	bf04      	itt	eq
    cc32:	ebb6 0c02 	subseq.w	ip, r6, r2
    cc36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cc3a:	f150 0000 	adcs.w	r0, r0, #0
    cc3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cc42:	bd70      	pop	{r4, r5, r6, pc}
    cc44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cc48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cc4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cc50:	bfc2      	ittt	gt
    cc52:	ebd4 050c 	rsbsgt	r5, r4, ip
    cc56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cc5a:	bd70      	popgt	{r4, r5, r6, pc}
    cc5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cc60:	f04f 0e00 	mov.w	lr, #0
    cc64:	3c01      	subs	r4, #1
    cc66:	e690      	b.n	c98a <__aeabi_dmul+0xde>
    cc68:	ea45 0e06 	orr.w	lr, r5, r6
    cc6c:	e68d      	b.n	c98a <__aeabi_dmul+0xde>
    cc6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cc72:	ea94 0f0c 	teq	r4, ip
    cc76:	bf08      	it	eq
    cc78:	ea95 0f0c 	teqeq	r5, ip
    cc7c:	f43f af3b 	beq.w	caf6 <__aeabi_dmul+0x24a>
    cc80:	ea94 0f0c 	teq	r4, ip
    cc84:	d10a      	bne.n	cc9c <__aeabi_ddiv+0x19c>
    cc86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cc8a:	f47f af34 	bne.w	caf6 <__aeabi_dmul+0x24a>
    cc8e:	ea95 0f0c 	teq	r5, ip
    cc92:	f47f af25 	bne.w	cae0 <__aeabi_dmul+0x234>
    cc96:	4610      	mov	r0, r2
    cc98:	4619      	mov	r1, r3
    cc9a:	e72c      	b.n	caf6 <__aeabi_dmul+0x24a>
    cc9c:	ea95 0f0c 	teq	r5, ip
    cca0:	d106      	bne.n	ccb0 <__aeabi_ddiv+0x1b0>
    cca2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cca6:	f43f aefd 	beq.w	caa4 <__aeabi_dmul+0x1f8>
    ccaa:	4610      	mov	r0, r2
    ccac:	4619      	mov	r1, r3
    ccae:	e722      	b.n	caf6 <__aeabi_dmul+0x24a>
    ccb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ccb4:	bf18      	it	ne
    ccb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ccba:	f47f aec5 	bne.w	ca48 <__aeabi_dmul+0x19c>
    ccbe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ccc2:	f47f af0d 	bne.w	cae0 <__aeabi_dmul+0x234>
    ccc6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ccca:	f47f aeeb 	bne.w	caa4 <__aeabi_dmul+0x1f8>
    ccce:	e712      	b.n	caf6 <__aeabi_dmul+0x24a>

0000ccd0 <__gedf2>:
    ccd0:	f04f 3cff 	mov.w	ip, #4294967295
    ccd4:	e006      	b.n	cce4 <__cmpdf2+0x4>
    ccd6:	bf00      	nop

0000ccd8 <__ledf2>:
    ccd8:	f04f 0c01 	mov.w	ip, #1
    ccdc:	e002      	b.n	cce4 <__cmpdf2+0x4>
    ccde:	bf00      	nop

0000cce0 <__cmpdf2>:
    cce0:	f04f 0c01 	mov.w	ip, #1
    cce4:	f84d cd04 	str.w	ip, [sp, #-4]!
    cce8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ccec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ccf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ccf4:	bf18      	it	ne
    ccf6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    ccfa:	d01b      	beq.n	cd34 <__cmpdf2+0x54>
    ccfc:	b001      	add	sp, #4
    ccfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    cd02:	bf0c      	ite	eq
    cd04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    cd08:	ea91 0f03 	teqne	r1, r3
    cd0c:	bf02      	ittt	eq
    cd0e:	ea90 0f02 	teqeq	r0, r2
    cd12:	2000      	moveq	r0, #0
    cd14:	4770      	bxeq	lr
    cd16:	f110 0f00 	cmn.w	r0, #0
    cd1a:	ea91 0f03 	teq	r1, r3
    cd1e:	bf58      	it	pl
    cd20:	4299      	cmppl	r1, r3
    cd22:	bf08      	it	eq
    cd24:	4290      	cmpeq	r0, r2
    cd26:	bf2c      	ite	cs
    cd28:	17d8      	asrcs	r0, r3, #31
    cd2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cd2e:	f040 0001 	orr.w	r0, r0, #1
    cd32:	4770      	bx	lr
    cd34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cd38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd3c:	d102      	bne.n	cd44 <__cmpdf2+0x64>
    cd3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cd42:	d107      	bne.n	cd54 <__cmpdf2+0x74>
    cd44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cd48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd4c:	d1d6      	bne.n	ccfc <__cmpdf2+0x1c>
    cd4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cd52:	d0d3      	beq.n	ccfc <__cmpdf2+0x1c>
    cd54:	f85d 0b04 	ldr.w	r0, [sp], #4
    cd58:	4770      	bx	lr
    cd5a:	bf00      	nop

0000cd5c <__aeabi_cdrcmple>:
    cd5c:	4684      	mov	ip, r0
    cd5e:	4610      	mov	r0, r2
    cd60:	4662      	mov	r2, ip
    cd62:	468c      	mov	ip, r1
    cd64:	4619      	mov	r1, r3
    cd66:	4663      	mov	r3, ip
    cd68:	e000      	b.n	cd6c <__aeabi_cdcmpeq>
    cd6a:	bf00      	nop

0000cd6c <__aeabi_cdcmpeq>:
    cd6c:	b501      	push	{r0, lr}
    cd6e:	f7ff ffb7 	bl	cce0 <__cmpdf2>
    cd72:	2800      	cmp	r0, #0
    cd74:	bf48      	it	mi
    cd76:	f110 0f00 	cmnmi.w	r0, #0
    cd7a:	bd01      	pop	{r0, pc}

0000cd7c <__aeabi_dcmpeq>:
    cd7c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd80:	f7ff fff4 	bl	cd6c <__aeabi_cdcmpeq>
    cd84:	bf0c      	ite	eq
    cd86:	2001      	moveq	r0, #1
    cd88:	2000      	movne	r0, #0
    cd8a:	f85d fb08 	ldr.w	pc, [sp], #8
    cd8e:	bf00      	nop

0000cd90 <__aeabi_dcmplt>:
    cd90:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd94:	f7ff ffea 	bl	cd6c <__aeabi_cdcmpeq>
    cd98:	bf34      	ite	cc
    cd9a:	2001      	movcc	r0, #1
    cd9c:	2000      	movcs	r0, #0
    cd9e:	f85d fb08 	ldr.w	pc, [sp], #8
    cda2:	bf00      	nop

0000cda4 <__aeabi_dcmple>:
    cda4:	f84d ed08 	str.w	lr, [sp, #-8]!
    cda8:	f7ff ffe0 	bl	cd6c <__aeabi_cdcmpeq>
    cdac:	bf94      	ite	ls
    cdae:	2001      	movls	r0, #1
    cdb0:	2000      	movhi	r0, #0
    cdb2:	f85d fb08 	ldr.w	pc, [sp], #8
    cdb6:	bf00      	nop

0000cdb8 <__aeabi_dcmpge>:
    cdb8:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdbc:	f7ff ffce 	bl	cd5c <__aeabi_cdrcmple>
    cdc0:	bf94      	ite	ls
    cdc2:	2001      	movls	r0, #1
    cdc4:	2000      	movhi	r0, #0
    cdc6:	f85d fb08 	ldr.w	pc, [sp], #8
    cdca:	bf00      	nop

0000cdcc <__aeabi_dcmpgt>:
    cdcc:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdd0:	f7ff ffc4 	bl	cd5c <__aeabi_cdrcmple>
    cdd4:	bf34      	ite	cc
    cdd6:	2001      	movcc	r0, #1
    cdd8:	2000      	movcs	r0, #0
    cdda:	f85d fb08 	ldr.w	pc, [sp], #8
    cdde:	bf00      	nop

0000cde0 <__aeabi_dcmpun>:
    cde0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cde4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cde8:	d102      	bne.n	cdf0 <__aeabi_dcmpun+0x10>
    cdea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cdee:	d10a      	bne.n	ce06 <__aeabi_dcmpun+0x26>
    cdf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cdf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cdf8:	d102      	bne.n	ce00 <__aeabi_dcmpun+0x20>
    cdfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cdfe:	d102      	bne.n	ce06 <__aeabi_dcmpun+0x26>
    ce00:	f04f 0000 	mov.w	r0, #0
    ce04:	4770      	bx	lr
    ce06:	f04f 0001 	mov.w	r0, #1
    ce0a:	4770      	bx	lr

0000ce0c <__aeabi_d2iz>:
    ce0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    ce10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    ce14:	d215      	bcs.n	ce42 <__aeabi_d2iz+0x36>
    ce16:	d511      	bpl.n	ce3c <__aeabi_d2iz+0x30>
    ce18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    ce1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    ce20:	d912      	bls.n	ce48 <__aeabi_d2iz+0x3c>
    ce22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ce26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ce2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    ce2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ce32:	fa23 f002 	lsr.w	r0, r3, r2
    ce36:	bf18      	it	ne
    ce38:	4240      	negne	r0, r0
    ce3a:	4770      	bx	lr
    ce3c:	f04f 0000 	mov.w	r0, #0
    ce40:	4770      	bx	lr
    ce42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    ce46:	d105      	bne.n	ce54 <__aeabi_d2iz+0x48>
    ce48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    ce4c:	bf08      	it	eq
    ce4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    ce52:	4770      	bx	lr
    ce54:	f04f 0000 	mov.w	r0, #0
    ce58:	4770      	bx	lr
    ce5a:	bf00      	nop

0000ce5c <strcmp>:
    ce5c:	f810 2b01 	ldrb.w	r2, [r0], #1
    ce60:	f811 3b01 	ldrb.w	r3, [r1], #1
    ce64:	2a01      	cmp	r2, #1
    ce66:	bf28      	it	cs
    ce68:	429a      	cmpcs	r2, r3
    ce6a:	d0f7      	beq.n	ce5c <strcmp>
    ce6c:	1ad0      	subs	r0, r2, r3
    ce6e:	4770      	bx	lr

0000ce70 <strlen>:
    ce70:	4603      	mov	r3, r0
    ce72:	f813 2b01 	ldrb.w	r2, [r3], #1
    ce76:	2a00      	cmp	r2, #0
    ce78:	d1fb      	bne.n	ce72 <strlen+0x2>
    ce7a:	1a18      	subs	r0, r3, r0
    ce7c:	3801      	subs	r0, #1
    ce7e:	4770      	bx	lr

0000ce80 <_dtoa_r>:
    ce80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce84:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ce86:	4604      	mov	r4, r0
    ce88:	ed2d 8b02 	vpush	{d8}
    ce8c:	b095      	sub	sp, #84	; 0x54
    ce8e:	ec57 6b10 	vmov	r6, r7, d0
    ce92:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    ce96:	9105      	str	r1, [sp, #20]
    ce98:	9209      	str	r2, [sp, #36]	; 0x24
    ce9a:	930f      	str	r3, [sp, #60]	; 0x3c
    ce9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    cea0:	b93d      	cbnz	r5, ceb2 <_dtoa_r+0x32>
    cea2:	2010      	movs	r0, #16
    cea4:	f015 fe00 	bl	22aa8 <malloc>
    cea8:	6260      	str	r0, [r4, #36]	; 0x24
    ceaa:	6005      	str	r5, [r0, #0]
    ceac:	60c5      	str	r5, [r0, #12]
    ceae:	e9c0 5501 	strd	r5, r5, [r0, #4]
    ceb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ceb4:	6819      	ldr	r1, [r3, #0]
    ceb6:	b151      	cbz	r1, cece <_dtoa_r+0x4e>
    ceb8:	685a      	ldr	r2, [r3, #4]
    ceba:	2301      	movs	r3, #1
    cebc:	4620      	mov	r0, r4
    cebe:	4093      	lsls	r3, r2
    cec0:	604a      	str	r2, [r1, #4]
    cec2:	608b      	str	r3, [r1, #8]
    cec4:	f01a f910 	bl	270e8 <_Bfree>
    cec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ceca:	2200      	movs	r2, #0
    cecc:	601a      	str	r2, [r3, #0]
    cece:	1e3b      	subs	r3, r7, #0
    ced0:	bfb7      	itett	lt
    ced2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    ced6:	2300      	movge	r3, #0
    ced8:	2201      	movlt	r2, #1
    ceda:	9303      	strlt	r3, [sp, #12]
    cedc:	bfa8      	it	ge
    cede:	f8c8 3000 	strge.w	r3, [r8]
    cee2:	f8dd 900c 	ldr.w	r9, [sp, #12]
    cee6:	4bb6      	ldr	r3, [pc, #728]	; (d1c0 <_dtoa_r+0x340>)
    cee8:	bfb8      	it	lt
    ceea:	f8c8 2000 	strlt.w	r2, [r8]
    ceee:	ea33 0309 	bics.w	r3, r3, r9
    cef2:	d11b      	bne.n	cf2c <_dtoa_r+0xac>
    cef4:	f242 730f 	movw	r3, #9999	; 0x270f
    cef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cefa:	6013      	str	r3, [r2, #0]
    cefc:	f3c9 0313 	ubfx	r3, r9, #0, #20
    cf00:	4333      	orrs	r3, r6
    cf02:	f000 8572 	beq.w	d9ea <_dtoa_r+0xb6a>
    cf06:	9b21      	ldr	r3, [sp, #132]	; 0x84
    cf08:	b963      	cbnz	r3, cf24 <_dtoa_r+0xa4>
    cf0a:	4bae      	ldr	r3, [pc, #696]	; (d1c4 <_dtoa_r+0x344>)
    cf0c:	e025      	b.n	cf5a <_dtoa_r+0xda>
    cf0e:	4bae      	ldr	r3, [pc, #696]	; (d1c8 <_dtoa_r+0x348>)
    cf10:	9300      	str	r3, [sp, #0]
    cf12:	3308      	adds	r3, #8
    cf14:	9a21      	ldr	r2, [sp, #132]	; 0x84
    cf16:	6013      	str	r3, [r2, #0]
    cf18:	9800      	ldr	r0, [sp, #0]
    cf1a:	b015      	add	sp, #84	; 0x54
    cf1c:	ecbd 8b02 	vpop	{d8}
    cf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf24:	4ba7      	ldr	r3, [pc, #668]	; (d1c4 <_dtoa_r+0x344>)
    cf26:	9300      	str	r3, [sp, #0]
    cf28:	3303      	adds	r3, #3
    cf2a:	e7f3      	b.n	cf14 <_dtoa_r+0x94>
    cf2c:	ed9d 7b02 	vldr	d7, [sp, #8]
    cf30:	2200      	movs	r2, #0
    cf32:	2300      	movs	r3, #0
    cf34:	ec51 0b17 	vmov	r0, r1, d7
    cf38:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    cf3c:	f7ff ff1e 	bl	cd7c <__aeabi_dcmpeq>
    cf40:	4680      	mov	r8, r0
    cf42:	b160      	cbz	r0, cf5e <_dtoa_r+0xde>
    cf44:	2301      	movs	r3, #1
    cf46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cf48:	6013      	str	r3, [r2, #0]
    cf4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	f000 8549 	beq.w	d9e4 <_dtoa_r+0xb64>
    cf52:	4b9e      	ldr	r3, [pc, #632]	; (d1cc <_dtoa_r+0x34c>)
    cf54:	9a21      	ldr	r2, [sp, #132]	; 0x84
    cf56:	6013      	str	r3, [r2, #0]
    cf58:	3b01      	subs	r3, #1
    cf5a:	9300      	str	r3, [sp, #0]
    cf5c:	e7dc      	b.n	cf18 <_dtoa_r+0x98>
    cf5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
    cf62:	aa12      	add	r2, sp, #72	; 0x48
    cf64:	a913      	add	r1, sp, #76	; 0x4c
    cf66:	4620      	mov	r0, r4
    cf68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    cf6c:	f01a fafe 	bl	2756c <__d2b>
    cf70:	4682      	mov	sl, r0
    cf72:	2d00      	cmp	r5, #0
    cf74:	d07c      	beq.n	d070 <_dtoa_r+0x1f0>
    cf76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    cf7c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    cf80:	f3c3 0313 	ubfx	r3, r3, #0, #20
    cf84:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    cf88:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
    cf8c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
    cf90:	2200      	movs	r2, #0
    cf92:	4b8f      	ldr	r3, [pc, #572]	; (d1d0 <_dtoa_r+0x350>)
    cf94:	4630      	mov	r0, r6
    cf96:	4639      	mov	r1, r7
    cf98:	f7ff f956 	bl	c248 <__aeabi_dsub>
    cf9c:	a382      	add	r3, pc, #520	; (adr r3, d1a8 <_dtoa_r+0x328>)
    cf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfa2:	f7ff fc83 	bl	c8ac <__aeabi_dmul>
    cfa6:	a382      	add	r3, pc, #520	; (adr r3, d1b0 <_dtoa_r+0x330>)
    cfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfac:	f7ff f94e 	bl	c24c <__adddf3>
    cfb0:	4606      	mov	r6, r0
    cfb2:	460f      	mov	r7, r1
    cfb4:	4628      	mov	r0, r5
    cfb6:	f7ff fa95 	bl	c4e4 <__aeabi_i2d>
    cfba:	a37f      	add	r3, pc, #508	; (adr r3, d1b8 <_dtoa_r+0x338>)
    cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfc0:	f7ff fc74 	bl	c8ac <__aeabi_dmul>
    cfc4:	4602      	mov	r2, r0
    cfc6:	460b      	mov	r3, r1
    cfc8:	4630      	mov	r0, r6
    cfca:	4639      	mov	r1, r7
    cfcc:	f7ff f93e 	bl	c24c <__adddf3>
    cfd0:	4606      	mov	r6, r0
    cfd2:	460f      	mov	r7, r1
    cfd4:	f7ff ff1a 	bl	ce0c <__aeabi_d2iz>
    cfd8:	2200      	movs	r2, #0
    cfda:	4681      	mov	r9, r0
    cfdc:	2300      	movs	r3, #0
    cfde:	4630      	mov	r0, r6
    cfe0:	4639      	mov	r1, r7
    cfe2:	f7ff fed5 	bl	cd90 <__aeabi_dcmplt>
    cfe6:	b148      	cbz	r0, cffc <_dtoa_r+0x17c>
    cfe8:	4648      	mov	r0, r9
    cfea:	f7ff fa7b 	bl	c4e4 <__aeabi_i2d>
    cfee:	4632      	mov	r2, r6
    cff0:	463b      	mov	r3, r7
    cff2:	f7ff fec3 	bl	cd7c <__aeabi_dcmpeq>
    cff6:	b908      	cbnz	r0, cffc <_dtoa_r+0x17c>
    cff8:	f109 39ff 	add.w	r9, r9, #4294967295
    cffc:	f1b9 0f16 	cmp.w	r9, #22
    d000:	d855      	bhi.n	d0ae <_dtoa_r+0x22e>
    d002:	4b74      	ldr	r3, [pc, #464]	; (d1d4 <_dtoa_r+0x354>)
    d004:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    d008:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d010:	f7ff febe 	bl	cd90 <__aeabi_dcmplt>
    d014:	2800      	cmp	r0, #0
    d016:	d04c      	beq.n	d0b2 <_dtoa_r+0x232>
    d018:	f109 39ff 	add.w	r9, r9, #4294967295
    d01c:	2300      	movs	r3, #0
    d01e:	930e      	str	r3, [sp, #56]	; 0x38
    d020:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d022:	1b5d      	subs	r5, r3, r5
    d024:	1e6b      	subs	r3, r5, #1
    d026:	9304      	str	r3, [sp, #16]
    d028:	bf45      	ittet	mi
    d02a:	2300      	movmi	r3, #0
    d02c:	f1c5 0801 	rsbmi	r8, r5, #1
    d030:	f04f 0800 	movpl.w	r8, #0
    d034:	9304      	strmi	r3, [sp, #16]
    d036:	f1b9 0f00 	cmp.w	r9, #0
    d03a:	db3c      	blt.n	d0b6 <_dtoa_r+0x236>
    d03c:	9b04      	ldr	r3, [sp, #16]
    d03e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    d042:	444b      	add	r3, r9
    d044:	9304      	str	r3, [sp, #16]
    d046:	2300      	movs	r3, #0
    d048:	9306      	str	r3, [sp, #24]
    d04a:	9b05      	ldr	r3, [sp, #20]
    d04c:	2b09      	cmp	r3, #9
    d04e:	f200 8099 	bhi.w	d184 <_dtoa_r+0x304>
    d052:	2b05      	cmp	r3, #5
    d054:	bfc5      	ittet	gt
    d056:	3b04      	subgt	r3, #4
    d058:	2500      	movgt	r5, #0
    d05a:	2501      	movle	r5, #1
    d05c:	9305      	strgt	r3, [sp, #20]
    d05e:	9b05      	ldr	r3, [sp, #20]
    d060:	3b02      	subs	r3, #2
    d062:	2b03      	cmp	r3, #3
    d064:	f200 809a 	bhi.w	d19c <_dtoa_r+0x31c>
    d068:	e8df f003 	tbb	[pc, r3]
    d06c:	8a7c7e2d 	.word	0x8a7c7e2d
    d070:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
    d074:	441d      	add	r5, r3
    d076:	f205 4332 	addw	r3, r5, #1074	; 0x432
    d07a:	2b20      	cmp	r3, #32
    d07c:	bfc6      	itte	gt
    d07e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    d082:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
    d086:	f1c3 0320 	rsble	r3, r3, #32
    d08a:	f105 35ff 	add.w	r5, r5, #4294967295
    d08e:	bfc5      	ittet	gt
    d090:	fa09 f303 	lslgt.w	r3, r9, r3
    d094:	fa26 f000 	lsrgt.w	r0, r6, r0
    d098:	fa06 f003 	lslle.w	r0, r6, r3
    d09c:	4318      	orrgt	r0, r3
    d09e:	f7ff fa11 	bl	c4c4 <__aeabi_ui2d>
    d0a2:	2301      	movs	r3, #1
    d0a4:	4606      	mov	r6, r0
    d0a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
    d0aa:	9310      	str	r3, [sp, #64]	; 0x40
    d0ac:	e770      	b.n	cf90 <_dtoa_r+0x110>
    d0ae:	2301      	movs	r3, #1
    d0b0:	e7b5      	b.n	d01e <_dtoa_r+0x19e>
    d0b2:	900e      	str	r0, [sp, #56]	; 0x38
    d0b4:	e7b4      	b.n	d020 <_dtoa_r+0x1a0>
    d0b6:	f1c9 0300 	rsb	r3, r9, #0
    d0ba:	eba8 0809 	sub.w	r8, r8, r9
    d0be:	9306      	str	r3, [sp, #24]
    d0c0:	2300      	movs	r3, #0
    d0c2:	930d      	str	r3, [sp, #52]	; 0x34
    d0c4:	e7c1      	b.n	d04a <_dtoa_r+0x1ca>
    d0c6:	2300      	movs	r3, #0
    d0c8:	9308      	str	r3, [sp, #32]
    d0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	f300 8085 	bgt.w	d1dc <_dtoa_r+0x35c>
    d0d2:	f04f 0b01 	mov.w	fp, #1
    d0d6:	465b      	mov	r3, fp
    d0d8:	f8cd b004 	str.w	fp, [sp, #4]
    d0dc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    d0e0:	2200      	movs	r2, #0
    d0e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    d0e4:	6072      	str	r2, [r6, #4]
    d0e6:	2204      	movs	r2, #4
    d0e8:	f102 0014 	add.w	r0, r2, #20
    d0ec:	6871      	ldr	r1, [r6, #4]
    d0ee:	4298      	cmp	r0, r3
    d0f0:	d97a      	bls.n	d1e8 <_dtoa_r+0x368>
    d0f2:	4620      	mov	r0, r4
    d0f4:	f019 ffc4 	bl	27080 <_Balloc>
    d0f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d0fa:	6030      	str	r0, [r6, #0]
    d0fc:	681b      	ldr	r3, [r3, #0]
    d0fe:	9300      	str	r3, [sp, #0]
    d100:	9b01      	ldr	r3, [sp, #4]
    d102:	2b0e      	cmp	r3, #14
    d104:	f200 80f5 	bhi.w	d2f2 <_dtoa_r+0x472>
    d108:	2d00      	cmp	r5, #0
    d10a:	f000 80f2 	beq.w	d2f2 <_dtoa_r+0x472>
    d10e:	f1b9 0f00 	cmp.w	r9, #0
    d112:	dd7d      	ble.n	d210 <_dtoa_r+0x390>
    d114:	f009 030f 	and.w	r3, r9, #15
    d118:	4a2e      	ldr	r2, [pc, #184]	; (d1d4 <_dtoa_r+0x354>)
    d11a:	f419 7f80 	tst.w	r9, #256	; 0x100
    d11e:	ea4f 1729 	mov.w	r7, r9, asr #4
    d122:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d126:	ed93 7b00 	vldr	d7, [r3]
    d12a:	eeb0 8a47 	vmov.f32	s16, s14
    d12e:	eef0 8a67 	vmov.f32	s17, s15
    d132:	d05d      	beq.n	d1f0 <_dtoa_r+0x370>
    d134:	4b28      	ldr	r3, [pc, #160]	; (d1d8 <_dtoa_r+0x358>)
    d136:	f007 070f 	and.w	r7, r7, #15
    d13a:	2503      	movs	r5, #3
    d13c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    d140:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d144:	f7ff fcdc 	bl	cb00 <__aeabi_ddiv>
    d148:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d14c:	4e22      	ldr	r6, [pc, #136]	; (d1d8 <_dtoa_r+0x358>)
    d14e:	2f00      	cmp	r7, #0
    d150:	d150      	bne.n	d1f4 <_dtoa_r+0x374>
    d152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d156:	ec53 2b18 	vmov	r2, r3, d8
    d15a:	f7ff fcd1 	bl	cb00 <__aeabi_ddiv>
    d15e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d162:	e06f      	b.n	d244 <_dtoa_r+0x3c4>
    d164:	2301      	movs	r3, #1
    d166:	e7af      	b.n	d0c8 <_dtoa_r+0x248>
    d168:	2300      	movs	r3, #0
    d16a:	9308      	str	r3, [sp, #32]
    d16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d16e:	eb09 0b03 	add.w	fp, r9, r3
    d172:	f10b 0301 	add.w	r3, fp, #1
    d176:	2b01      	cmp	r3, #1
    d178:	9301      	str	r3, [sp, #4]
    d17a:	bfb8      	it	lt
    d17c:	2301      	movlt	r3, #1
    d17e:	e7af      	b.n	d0e0 <_dtoa_r+0x260>
    d180:	2301      	movs	r3, #1
    d182:	e7f2      	b.n	d16a <_dtoa_r+0x2ea>
    d184:	2501      	movs	r5, #1
    d186:	2300      	movs	r3, #0
    d188:	9508      	str	r5, [sp, #32]
    d18a:	9305      	str	r3, [sp, #20]
    d18c:	f04f 3bff 	mov.w	fp, #4294967295
    d190:	2200      	movs	r2, #0
    d192:	2312      	movs	r3, #18
    d194:	f8cd b004 	str.w	fp, [sp, #4]
    d198:	9209      	str	r2, [sp, #36]	; 0x24
    d19a:	e7a1      	b.n	d0e0 <_dtoa_r+0x260>
    d19c:	2301      	movs	r3, #1
    d19e:	9308      	str	r3, [sp, #32]
    d1a0:	e7f4      	b.n	d18c <_dtoa_r+0x30c>
    d1a2:	bf00      	nop
    d1a4:	f3af 8000 	nop.w
    d1a8:	636f4361 	.word	0x636f4361
    d1ac:	3fd287a7 	.word	0x3fd287a7
    d1b0:	8b60c8b3 	.word	0x8b60c8b3
    d1b4:	3fc68a28 	.word	0x3fc68a28
    d1b8:	509f79fb 	.word	0x509f79fb
    d1bc:	3fd34413 	.word	0x3fd34413
    d1c0:	7ff00000 	.word	0x7ff00000
    d1c4:	0002aaea 	.word	0x0002aaea
    d1c8:	0002aae1 	.word	0x0002aae1
    d1cc:	00028d84 	.word	0x00028d84
    d1d0:	3ff80000 	.word	0x3ff80000
    d1d4:	00027c80 	.word	0x00027c80
    d1d8:	00027c58 	.word	0x00027c58
    d1dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    d1e0:	465b      	mov	r3, fp
    d1e2:	f8cd b004 	str.w	fp, [sp, #4]
    d1e6:	e77b      	b.n	d0e0 <_dtoa_r+0x260>
    d1e8:	3101      	adds	r1, #1
    d1ea:	0052      	lsls	r2, r2, #1
    d1ec:	6071      	str	r1, [r6, #4]
    d1ee:	e77b      	b.n	d0e8 <_dtoa_r+0x268>
    d1f0:	2502      	movs	r5, #2
    d1f2:	e7ab      	b.n	d14c <_dtoa_r+0x2cc>
    d1f4:	07f9      	lsls	r1, r7, #31
    d1f6:	d508      	bpl.n	d20a <_dtoa_r+0x38a>
    d1f8:	3501      	adds	r5, #1
    d1fa:	ec51 0b18 	vmov	r0, r1, d8
    d1fe:	e9d6 2300 	ldrd	r2, r3, [r6]
    d202:	f7ff fb53 	bl	c8ac <__aeabi_dmul>
    d206:	ec41 0b18 	vmov	d8, r0, r1
    d20a:	107f      	asrs	r7, r7, #1
    d20c:	3608      	adds	r6, #8
    d20e:	e79e      	b.n	d14e <_dtoa_r+0x2ce>
    d210:	f000 80ab 	beq.w	d36a <_dtoa_r+0x4ea>
    d214:	f1c9 0600 	rsb	r6, r9, #0
    d218:	4baa      	ldr	r3, [pc, #680]	; (d4c4 <_dtoa_r+0x644>)
    d21a:	4fab      	ldr	r7, [pc, #684]	; (d4c8 <_dtoa_r+0x648>)
    d21c:	2502      	movs	r5, #2
    d21e:	f006 020f 	and.w	r2, r6, #15
    d222:	1136      	asrs	r6, r6, #4
    d224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d228:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d230:	f7ff fb3c 	bl	c8ac <__aeabi_dmul>
    d234:	2300      	movs	r3, #0
    d236:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d23a:	2e00      	cmp	r6, #0
    d23c:	f040 808a 	bne.w	d354 <_dtoa_r+0x4d4>
    d240:	2b00      	cmp	r3, #0
    d242:	d18c      	bne.n	d15e <_dtoa_r+0x2de>
    d244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d246:	2b00      	cmp	r3, #0
    d248:	f000 8091 	beq.w	d36e <_dtoa_r+0x4ee>
    d24c:	2200      	movs	r2, #0
    d24e:	4b9f      	ldr	r3, [pc, #636]	; (d4cc <_dtoa_r+0x64c>)
    d250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d254:	4630      	mov	r0, r6
    d256:	4639      	mov	r1, r7
    d258:	f7ff fd9a 	bl	cd90 <__aeabi_dcmplt>
    d25c:	2800      	cmp	r0, #0
    d25e:	f000 8086 	beq.w	d36e <_dtoa_r+0x4ee>
    d262:	9b01      	ldr	r3, [sp, #4]
    d264:	2b00      	cmp	r3, #0
    d266:	f000 8082 	beq.w	d36e <_dtoa_r+0x4ee>
    d26a:	f1bb 0f00 	cmp.w	fp, #0
    d26e:	dd3c      	ble.n	d2ea <_dtoa_r+0x46a>
    d270:	f109 33ff 	add.w	r3, r9, #4294967295
    d274:	3501      	adds	r5, #1
    d276:	2200      	movs	r2, #0
    d278:	4630      	mov	r0, r6
    d27a:	9307      	str	r3, [sp, #28]
    d27c:	4639      	mov	r1, r7
    d27e:	4b94      	ldr	r3, [pc, #592]	; (d4d0 <_dtoa_r+0x650>)
    d280:	f7ff fb14 	bl	c8ac <__aeabi_dmul>
    d284:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    d288:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d28c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d290:	4628      	mov	r0, r5
    d292:	f7ff f927 	bl	c4e4 <__aeabi_i2d>
    d296:	4632      	mov	r2, r6
    d298:	463b      	mov	r3, r7
    d29a:	f7ff fb07 	bl	c8ac <__aeabi_dmul>
    d29e:	4b8d      	ldr	r3, [pc, #564]	; (d4d4 <_dtoa_r+0x654>)
    d2a0:	2200      	movs	r2, #0
    d2a2:	f7fe ffd3 	bl	c24c <__adddf3>
    d2a6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    d2aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d2ae:	9303      	str	r3, [sp, #12]
    d2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2b2:	2b00      	cmp	r3, #0
    d2b4:	d160      	bne.n	d378 <_dtoa_r+0x4f8>
    d2b6:	2200      	movs	r2, #0
    d2b8:	4b87      	ldr	r3, [pc, #540]	; (d4d8 <_dtoa_r+0x658>)
    d2ba:	4630      	mov	r0, r6
    d2bc:	4639      	mov	r1, r7
    d2be:	f7fe ffc3 	bl	c248 <__aeabi_dsub>
    d2c2:	4606      	mov	r6, r0
    d2c4:	460f      	mov	r7, r1
    d2c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d2ca:	f7ff fd7f 	bl	cdcc <__aeabi_dcmpgt>
    d2ce:	2800      	cmp	r0, #0
    d2d0:	f040 8297 	bne.w	d802 <_dtoa_r+0x982>
    d2d4:	4630      	mov	r0, r6
    d2d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    d2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    d2de:	4639      	mov	r1, r7
    d2e0:	f7ff fd56 	bl	cd90 <__aeabi_dcmplt>
    d2e4:	2800      	cmp	r0, #0
    d2e6:	f040 8289 	bne.w	d7fc <_dtoa_r+0x97c>
    d2ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    d2ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    d2f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d2f4:	2b00      	cmp	r3, #0
    d2f6:	f2c0 815b 	blt.w	d5b0 <_dtoa_r+0x730>
    d2fa:	f1b9 0f0e 	cmp.w	r9, #14
    d2fe:	f300 8157 	bgt.w	d5b0 <_dtoa_r+0x730>
    d302:	4b70      	ldr	r3, [pc, #448]	; (d4c4 <_dtoa_r+0x644>)
    d304:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    d308:	ed93 7b00 	vldr	d7, [r3]
    d30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d30e:	2b00      	cmp	r3, #0
    d310:	eeb0 8a47 	vmov.f32	s16, s14
    d314:	eef0 8a67 	vmov.f32	s17, s15
    d318:	f280 80e2 	bge.w	d4e0 <_dtoa_r+0x660>
    d31c:	9b01      	ldr	r3, [sp, #4]
    d31e:	2b00      	cmp	r3, #0
    d320:	f300 80de 	bgt.w	d4e0 <_dtoa_r+0x660>
    d324:	f040 826a 	bne.w	d7fc <_dtoa_r+0x97c>
    d328:	2200      	movs	r2, #0
    d32a:	4b6b      	ldr	r3, [pc, #428]	; (d4d8 <_dtoa_r+0x658>)
    d32c:	ec51 0b17 	vmov	r0, r1, d7
    d330:	f7ff fabc 	bl	c8ac <__aeabi_dmul>
    d334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d338:	f7ff fd3e 	bl	cdb8 <__aeabi_dcmpge>
    d33c:	9e01      	ldr	r6, [sp, #4]
    d33e:	4637      	mov	r7, r6
    d340:	2800      	cmp	r0, #0
    d342:	f040 8240 	bne.w	d7c6 <_dtoa_r+0x946>
    d346:	9d00      	ldr	r5, [sp, #0]
    d348:	2331      	movs	r3, #49	; 0x31
    d34a:	f109 0901 	add.w	r9, r9, #1
    d34e:	f805 3b01 	strb.w	r3, [r5], #1
    d352:	e23c      	b.n	d7ce <_dtoa_r+0x94e>
    d354:	07f2      	lsls	r2, r6, #31
    d356:	d505      	bpl.n	d364 <_dtoa_r+0x4e4>
    d358:	3501      	adds	r5, #1
    d35a:	e9d7 2300 	ldrd	r2, r3, [r7]
    d35e:	f7ff faa5 	bl	c8ac <__aeabi_dmul>
    d362:	2301      	movs	r3, #1
    d364:	1076      	asrs	r6, r6, #1
    d366:	3708      	adds	r7, #8
    d368:	e767      	b.n	d23a <_dtoa_r+0x3ba>
    d36a:	2502      	movs	r5, #2
    d36c:	e76a      	b.n	d244 <_dtoa_r+0x3c4>
    d36e:	9b01      	ldr	r3, [sp, #4]
    d370:	f8cd 901c 	str.w	r9, [sp, #28]
    d374:	930c      	str	r3, [sp, #48]	; 0x30
    d376:	e789      	b.n	d28c <_dtoa_r+0x40c>
    d378:	9900      	ldr	r1, [sp, #0]
    d37a:	980c      	ldr	r0, [sp, #48]	; 0x30
    d37c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d37e:	4401      	add	r1, r0
    d380:	4b50      	ldr	r3, [pc, #320]	; (d4c4 <_dtoa_r+0x644>)
    d382:	ed9d 7b02 	vldr	d7, [sp, #8]
    d386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d38a:	9102      	str	r1, [sp, #8]
    d38c:	9908      	ldr	r1, [sp, #32]
    d38e:	eeb0 8a47 	vmov.f32	s16, s14
    d392:	eef0 8a67 	vmov.f32	s17, s15
    d396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    d39a:	2900      	cmp	r1, #0
    d39c:	d045      	beq.n	d42a <_dtoa_r+0x5aa>
    d39e:	2000      	movs	r0, #0
    d3a0:	494e      	ldr	r1, [pc, #312]	; (d4dc <_dtoa_r+0x65c>)
    d3a2:	f7ff fbad 	bl	cb00 <__aeabi_ddiv>
    d3a6:	ec53 2b18 	vmov	r2, r3, d8
    d3aa:	f7fe ff4d 	bl	c248 <__aeabi_dsub>
    d3ae:	9d00      	ldr	r5, [sp, #0]
    d3b0:	ec41 0b18 	vmov	d8, r0, r1
    d3b4:	4639      	mov	r1, r7
    d3b6:	4630      	mov	r0, r6
    d3b8:	f7ff fd28 	bl	ce0c <__aeabi_d2iz>
    d3bc:	900c      	str	r0, [sp, #48]	; 0x30
    d3be:	f7ff f891 	bl	c4e4 <__aeabi_i2d>
    d3c2:	4602      	mov	r2, r0
    d3c4:	460b      	mov	r3, r1
    d3c6:	4630      	mov	r0, r6
    d3c8:	4639      	mov	r1, r7
    d3ca:	f7fe ff3d 	bl	c248 <__aeabi_dsub>
    d3ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d3d0:	4606      	mov	r6, r0
    d3d2:	460f      	mov	r7, r1
    d3d4:	3330      	adds	r3, #48	; 0x30
    d3d6:	f805 3b01 	strb.w	r3, [r5], #1
    d3da:	ec53 2b18 	vmov	r2, r3, d8
    d3de:	f7ff fcd7 	bl	cd90 <__aeabi_dcmplt>
    d3e2:	2800      	cmp	r0, #0
    d3e4:	d164      	bne.n	d4b0 <_dtoa_r+0x630>
    d3e6:	4632      	mov	r2, r6
    d3e8:	463b      	mov	r3, r7
    d3ea:	2000      	movs	r0, #0
    d3ec:	4937      	ldr	r1, [pc, #220]	; (d4cc <_dtoa_r+0x64c>)
    d3ee:	f7fe ff2b 	bl	c248 <__aeabi_dsub>
    d3f2:	ec53 2b18 	vmov	r2, r3, d8
    d3f6:	f7ff fccb 	bl	cd90 <__aeabi_dcmplt>
    d3fa:	2800      	cmp	r0, #0
    d3fc:	f040 80b8 	bne.w	d570 <_dtoa_r+0x6f0>
    d400:	9b02      	ldr	r3, [sp, #8]
    d402:	429d      	cmp	r5, r3
    d404:	f43f af71 	beq.w	d2ea <_dtoa_r+0x46a>
    d408:	2200      	movs	r2, #0
    d40a:	4b31      	ldr	r3, [pc, #196]	; (d4d0 <_dtoa_r+0x650>)
    d40c:	ec51 0b18 	vmov	r0, r1, d8
    d410:	f7ff fa4c 	bl	c8ac <__aeabi_dmul>
    d414:	2200      	movs	r2, #0
    d416:	4b2e      	ldr	r3, [pc, #184]	; (d4d0 <_dtoa_r+0x650>)
    d418:	ec41 0b18 	vmov	d8, r0, r1
    d41c:	4630      	mov	r0, r6
    d41e:	4639      	mov	r1, r7
    d420:	f7ff fa44 	bl	c8ac <__aeabi_dmul>
    d424:	4606      	mov	r6, r0
    d426:	460f      	mov	r7, r1
    d428:	e7c4      	b.n	d3b4 <_dtoa_r+0x534>
    d42a:	ec51 0b17 	vmov	r0, r1, d7
    d42e:	f7ff fa3d 	bl	c8ac <__aeabi_dmul>
    d432:	9b02      	ldr	r3, [sp, #8]
    d434:	9d00      	ldr	r5, [sp, #0]
    d436:	930c      	str	r3, [sp, #48]	; 0x30
    d438:	ec41 0b18 	vmov	d8, r0, r1
    d43c:	4639      	mov	r1, r7
    d43e:	4630      	mov	r0, r6
    d440:	f7ff fce4 	bl	ce0c <__aeabi_d2iz>
    d444:	9011      	str	r0, [sp, #68]	; 0x44
    d446:	f7ff f84d 	bl	c4e4 <__aeabi_i2d>
    d44a:	4602      	mov	r2, r0
    d44c:	460b      	mov	r3, r1
    d44e:	4630      	mov	r0, r6
    d450:	4639      	mov	r1, r7
    d452:	f7fe fef9 	bl	c248 <__aeabi_dsub>
    d456:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d458:	4606      	mov	r6, r0
    d45a:	460f      	mov	r7, r1
    d45c:	3330      	adds	r3, #48	; 0x30
    d45e:	2200      	movs	r2, #0
    d460:	f805 3b01 	strb.w	r3, [r5], #1
    d464:	9b02      	ldr	r3, [sp, #8]
    d466:	429d      	cmp	r5, r3
    d468:	d125      	bne.n	d4b6 <_dtoa_r+0x636>
    d46a:	4b1c      	ldr	r3, [pc, #112]	; (d4dc <_dtoa_r+0x65c>)
    d46c:	ec51 0b18 	vmov	r0, r1, d8
    d470:	f7fe feec 	bl	c24c <__adddf3>
    d474:	4602      	mov	r2, r0
    d476:	460b      	mov	r3, r1
    d478:	4630      	mov	r0, r6
    d47a:	4639      	mov	r1, r7
    d47c:	f7ff fca6 	bl	cdcc <__aeabi_dcmpgt>
    d480:	2800      	cmp	r0, #0
    d482:	d175      	bne.n	d570 <_dtoa_r+0x6f0>
    d484:	2000      	movs	r0, #0
    d486:	4915      	ldr	r1, [pc, #84]	; (d4dc <_dtoa_r+0x65c>)
    d488:	ec53 2b18 	vmov	r2, r3, d8
    d48c:	f7fe fedc 	bl	c248 <__aeabi_dsub>
    d490:	4602      	mov	r2, r0
    d492:	460b      	mov	r3, r1
    d494:	4630      	mov	r0, r6
    d496:	4639      	mov	r1, r7
    d498:	f7ff fc7a 	bl	cd90 <__aeabi_dcmplt>
    d49c:	2800      	cmp	r0, #0
    d49e:	f43f af24 	beq.w	d2ea <_dtoa_r+0x46a>
    d4a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d4a4:	1e6b      	subs	r3, r5, #1
    d4a6:	930c      	str	r3, [sp, #48]	; 0x30
    d4a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d4ac:	2b30      	cmp	r3, #48	; 0x30
    d4ae:	d0f8      	beq.n	d4a2 <_dtoa_r+0x622>
    d4b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
    d4b4:	e04a      	b.n	d54c <_dtoa_r+0x6cc>
    d4b6:	4b06      	ldr	r3, [pc, #24]	; (d4d0 <_dtoa_r+0x650>)
    d4b8:	f7ff f9f8 	bl	c8ac <__aeabi_dmul>
    d4bc:	4606      	mov	r6, r0
    d4be:	460f      	mov	r7, r1
    d4c0:	e7bc      	b.n	d43c <_dtoa_r+0x5bc>
    d4c2:	bf00      	nop
    d4c4:	00027c80 	.word	0x00027c80
    d4c8:	00027c58 	.word	0x00027c58
    d4cc:	3ff00000 	.word	0x3ff00000
    d4d0:	40240000 	.word	0x40240000
    d4d4:	401c0000 	.word	0x401c0000
    d4d8:	40140000 	.word	0x40140000
    d4dc:	3fe00000 	.word	0x3fe00000
    d4e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d4e4:	9d00      	ldr	r5, [sp, #0]
    d4e6:	4630      	mov	r0, r6
    d4e8:	4639      	mov	r1, r7
    d4ea:	ec53 2b18 	vmov	r2, r3, d8
    d4ee:	f7ff fb07 	bl	cb00 <__aeabi_ddiv>
    d4f2:	f7ff fc8b 	bl	ce0c <__aeabi_d2iz>
    d4f6:	4680      	mov	r8, r0
    d4f8:	f7fe fff4 	bl	c4e4 <__aeabi_i2d>
    d4fc:	ec53 2b18 	vmov	r2, r3, d8
    d500:	f7ff f9d4 	bl	c8ac <__aeabi_dmul>
    d504:	4602      	mov	r2, r0
    d506:	4630      	mov	r0, r6
    d508:	f108 0630 	add.w	r6, r8, #48	; 0x30
    d50c:	460b      	mov	r3, r1
    d50e:	4639      	mov	r1, r7
    d510:	f7fe fe9a 	bl	c248 <__aeabi_dsub>
    d514:	f805 6b01 	strb.w	r6, [r5], #1
    d518:	9e00      	ldr	r6, [sp, #0]
    d51a:	4602      	mov	r2, r0
    d51c:	9f01      	ldr	r7, [sp, #4]
    d51e:	460b      	mov	r3, r1
    d520:	1bae      	subs	r6, r5, r6
    d522:	42b7      	cmp	r7, r6
    d524:	d137      	bne.n	d596 <_dtoa_r+0x716>
    d526:	f7fe fe91 	bl	c24c <__adddf3>
    d52a:	4606      	mov	r6, r0
    d52c:	460f      	mov	r7, r1
    d52e:	ec53 2b18 	vmov	r2, r3, d8
    d532:	f7ff fc4b 	bl	cdcc <__aeabi_dcmpgt>
    d536:	b9c8      	cbnz	r0, d56c <_dtoa_r+0x6ec>
    d538:	4630      	mov	r0, r6
    d53a:	4639      	mov	r1, r7
    d53c:	ec53 2b18 	vmov	r2, r3, d8
    d540:	f7ff fc1c 	bl	cd7c <__aeabi_dcmpeq>
    d544:	b110      	cbz	r0, d54c <_dtoa_r+0x6cc>
    d546:	f018 0f01 	tst.w	r8, #1
    d54a:	d10f      	bne.n	d56c <_dtoa_r+0x6ec>
    d54c:	4620      	mov	r0, r4
    d54e:	4651      	mov	r1, sl
    d550:	f019 fdca 	bl	270e8 <_Bfree>
    d554:	2300      	movs	r3, #0
    d556:	f109 0001 	add.w	r0, r9, #1
    d55a:	702b      	strb	r3, [r5, #0]
    d55c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d55e:	6018      	str	r0, [r3, #0]
    d560:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d562:	2b00      	cmp	r3, #0
    d564:	f43f acd8 	beq.w	cf18 <_dtoa_r+0x98>
    d568:	601d      	str	r5, [r3, #0]
    d56a:	e4d5      	b.n	cf18 <_dtoa_r+0x98>
    d56c:	f8cd 901c 	str.w	r9, [sp, #28]
    d570:	462b      	mov	r3, r5
    d572:	461d      	mov	r5, r3
    d574:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    d578:	2a39      	cmp	r2, #57	; 0x39
    d57a:	d108      	bne.n	d58e <_dtoa_r+0x70e>
    d57c:	9a00      	ldr	r2, [sp, #0]
    d57e:	429a      	cmp	r2, r3
    d580:	d1f7      	bne.n	d572 <_dtoa_r+0x6f2>
    d582:	9a07      	ldr	r2, [sp, #28]
    d584:	9900      	ldr	r1, [sp, #0]
    d586:	3201      	adds	r2, #1
    d588:	9207      	str	r2, [sp, #28]
    d58a:	2230      	movs	r2, #48	; 0x30
    d58c:	700a      	strb	r2, [r1, #0]
    d58e:	781a      	ldrb	r2, [r3, #0]
    d590:	3201      	adds	r2, #1
    d592:	701a      	strb	r2, [r3, #0]
    d594:	e78c      	b.n	d4b0 <_dtoa_r+0x630>
    d596:	2200      	movs	r2, #0
    d598:	4b9c      	ldr	r3, [pc, #624]	; (d80c <_dtoa_r+0x98c>)
    d59a:	f7ff f987 	bl	c8ac <__aeabi_dmul>
    d59e:	2200      	movs	r2, #0
    d5a0:	2300      	movs	r3, #0
    d5a2:	4606      	mov	r6, r0
    d5a4:	460f      	mov	r7, r1
    d5a6:	f7ff fbe9 	bl	cd7c <__aeabi_dcmpeq>
    d5aa:	2800      	cmp	r0, #0
    d5ac:	d09b      	beq.n	d4e6 <_dtoa_r+0x666>
    d5ae:	e7cd      	b.n	d54c <_dtoa_r+0x6cc>
    d5b0:	9a08      	ldr	r2, [sp, #32]
    d5b2:	2a00      	cmp	r2, #0
    d5b4:	f000 80c4 	beq.w	d740 <_dtoa_r+0x8c0>
    d5b8:	9a05      	ldr	r2, [sp, #20]
    d5ba:	2a01      	cmp	r2, #1
    d5bc:	f300 80a9 	bgt.w	d712 <_dtoa_r+0x892>
    d5c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d5c2:	2a00      	cmp	r2, #0
    d5c4:	f000 80a1 	beq.w	d70a <_dtoa_r+0x88a>
    d5c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
    d5cc:	9e06      	ldr	r6, [sp, #24]
    d5ce:	4645      	mov	r5, r8
    d5d0:	9a04      	ldr	r2, [sp, #16]
    d5d2:	2101      	movs	r1, #1
    d5d4:	4620      	mov	r0, r4
    d5d6:	4498      	add	r8, r3
    d5d8:	441a      	add	r2, r3
    d5da:	9204      	str	r2, [sp, #16]
    d5dc:	f019 fe2a 	bl	27234 <__i2b>
    d5e0:	4607      	mov	r7, r0
    d5e2:	2d00      	cmp	r5, #0
    d5e4:	dd0b      	ble.n	d5fe <_dtoa_r+0x77e>
    d5e6:	9b04      	ldr	r3, [sp, #16]
    d5e8:	2b00      	cmp	r3, #0
    d5ea:	dd08      	ble.n	d5fe <_dtoa_r+0x77e>
    d5ec:	42ab      	cmp	r3, r5
    d5ee:	9a04      	ldr	r2, [sp, #16]
    d5f0:	bfa8      	it	ge
    d5f2:	462b      	movge	r3, r5
    d5f4:	eba8 0803 	sub.w	r8, r8, r3
    d5f8:	1aed      	subs	r5, r5, r3
    d5fa:	1ad3      	subs	r3, r2, r3
    d5fc:	9304      	str	r3, [sp, #16]
    d5fe:	9b06      	ldr	r3, [sp, #24]
    d600:	b1fb      	cbz	r3, d642 <_dtoa_r+0x7c2>
    d602:	9b08      	ldr	r3, [sp, #32]
    d604:	2b00      	cmp	r3, #0
    d606:	f000 809f 	beq.w	d748 <_dtoa_r+0x8c8>
    d60a:	2e00      	cmp	r6, #0
    d60c:	dd11      	ble.n	d632 <_dtoa_r+0x7b2>
    d60e:	4639      	mov	r1, r7
    d610:	4632      	mov	r2, r6
    d612:	4620      	mov	r0, r4
    d614:	f015 fa50 	bl	22ab8 <__pow5mult>
    d618:	4652      	mov	r2, sl
    d61a:	4601      	mov	r1, r0
    d61c:	4607      	mov	r7, r0
    d61e:	4620      	mov	r0, r4
    d620:	f019 fe11 	bl	27246 <__multiply>
    d624:	4651      	mov	r1, sl
    d626:	9007      	str	r0, [sp, #28]
    d628:	4620      	mov	r0, r4
    d62a:	f019 fd5d 	bl	270e8 <_Bfree>
    d62e:	9b07      	ldr	r3, [sp, #28]
    d630:	469a      	mov	sl, r3
    d632:	9b06      	ldr	r3, [sp, #24]
    d634:	1b9a      	subs	r2, r3, r6
    d636:	d004      	beq.n	d642 <_dtoa_r+0x7c2>
    d638:	4651      	mov	r1, sl
    d63a:	4620      	mov	r0, r4
    d63c:	f015 fa3c 	bl	22ab8 <__pow5mult>
    d640:	4682      	mov	sl, r0
    d642:	2101      	movs	r1, #1
    d644:	4620      	mov	r0, r4
    d646:	f019 fdf5 	bl	27234 <__i2b>
    d64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d64c:	4606      	mov	r6, r0
    d64e:	2b00      	cmp	r3, #0
    d650:	dd7c      	ble.n	d74c <_dtoa_r+0x8cc>
    d652:	461a      	mov	r2, r3
    d654:	4601      	mov	r1, r0
    d656:	4620      	mov	r0, r4
    d658:	f015 fa2e 	bl	22ab8 <__pow5mult>
    d65c:	9b05      	ldr	r3, [sp, #20]
    d65e:	4606      	mov	r6, r0
    d660:	2b01      	cmp	r3, #1
    d662:	dd76      	ble.n	d752 <_dtoa_r+0x8d2>
    d664:	2300      	movs	r3, #0
    d666:	9306      	str	r3, [sp, #24]
    d668:	6933      	ldr	r3, [r6, #16]
    d66a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    d66e:	6918      	ldr	r0, [r3, #16]
    d670:	f019 fd90 	bl	27194 <__hi0bits>
    d674:	f1c0 0020 	rsb	r0, r0, #32
    d678:	9b04      	ldr	r3, [sp, #16]
    d67a:	4418      	add	r0, r3
    d67c:	f010 001f 	ands.w	r0, r0, #31
    d680:	f000 8086 	beq.w	d790 <_dtoa_r+0x910>
    d684:	f1c0 0320 	rsb	r3, r0, #32
    d688:	2b04      	cmp	r3, #4
    d68a:	dd7f      	ble.n	d78c <_dtoa_r+0x90c>
    d68c:	f1c0 001c 	rsb	r0, r0, #28
    d690:	9b04      	ldr	r3, [sp, #16]
    d692:	4480      	add	r8, r0
    d694:	4405      	add	r5, r0
    d696:	4403      	add	r3, r0
    d698:	9304      	str	r3, [sp, #16]
    d69a:	f1b8 0f00 	cmp.w	r8, #0
    d69e:	dd05      	ble.n	d6ac <_dtoa_r+0x82c>
    d6a0:	4651      	mov	r1, sl
    d6a2:	4642      	mov	r2, r8
    d6a4:	4620      	mov	r0, r4
    d6a6:	f019 fe69 	bl	2737c <__lshift>
    d6aa:	4682      	mov	sl, r0
    d6ac:	9b04      	ldr	r3, [sp, #16]
    d6ae:	2b00      	cmp	r3, #0
    d6b0:	dd05      	ble.n	d6be <_dtoa_r+0x83e>
    d6b2:	4631      	mov	r1, r6
    d6b4:	461a      	mov	r2, r3
    d6b6:	4620      	mov	r0, r4
    d6b8:	f019 fe60 	bl	2737c <__lshift>
    d6bc:	4606      	mov	r6, r0
    d6be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d067      	beq.n	d794 <_dtoa_r+0x914>
    d6c4:	4631      	mov	r1, r6
    d6c6:	4650      	mov	r0, sl
    d6c8:	f019 feb7 	bl	2743a <__mcmp>
    d6cc:	2800      	cmp	r0, #0
    d6ce:	da61      	bge.n	d794 <_dtoa_r+0x914>
    d6d0:	2300      	movs	r3, #0
    d6d2:	4651      	mov	r1, sl
    d6d4:	220a      	movs	r2, #10
    d6d6:	4620      	mov	r0, r4
    d6d8:	f019 fd1d 	bl	27116 <__multadd>
    d6dc:	9b08      	ldr	r3, [sp, #32]
    d6de:	f109 39ff 	add.w	r9, r9, #4294967295
    d6e2:	4682      	mov	sl, r0
    d6e4:	2b00      	cmp	r3, #0
    d6e6:	f000 8187 	beq.w	d9f8 <_dtoa_r+0xb78>
    d6ea:	4639      	mov	r1, r7
    d6ec:	2300      	movs	r3, #0
    d6ee:	220a      	movs	r2, #10
    d6f0:	4620      	mov	r0, r4
    d6f2:	f019 fd10 	bl	27116 <__multadd>
    d6f6:	f1bb 0f00 	cmp.w	fp, #0
    d6fa:	4607      	mov	r7, r0
    d6fc:	f300 808e 	bgt.w	d81c <_dtoa_r+0x99c>
    d700:	9b05      	ldr	r3, [sp, #20]
    d702:	2b02      	cmp	r3, #2
    d704:	f340 808a 	ble.w	d81c <_dtoa_r+0x99c>
    d708:	e04c      	b.n	d7a4 <_dtoa_r+0x924>
    d70a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d70c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    d710:	e75c      	b.n	d5cc <_dtoa_r+0x74c>
    d712:	9b01      	ldr	r3, [sp, #4]
    d714:	1e5e      	subs	r6, r3, #1
    d716:	9b06      	ldr	r3, [sp, #24]
    d718:	42b3      	cmp	r3, r6
    d71a:	bfb7      	itett	lt
    d71c:	9b06      	ldrlt	r3, [sp, #24]
    d71e:	1b9e      	subge	r6, r3, r6
    d720:	9606      	strlt	r6, [sp, #24]
    d722:	1af2      	sublt	r2, r6, r3
    d724:	bfbf      	itttt	lt
    d726:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
    d728:	2600      	movlt	r6, #0
    d72a:	189b      	addlt	r3, r3, r2
    d72c:	930d      	strlt	r3, [sp, #52]	; 0x34
    d72e:	9b01      	ldr	r3, [sp, #4]
    d730:	2b00      	cmp	r3, #0
    d732:	bfb5      	itete	lt
    d734:	eba8 0503 	sublt.w	r5, r8, r3
    d738:	4645      	movge	r5, r8
    d73a:	2300      	movlt	r3, #0
    d73c:	9b01      	ldrge	r3, [sp, #4]
    d73e:	e747      	b.n	d5d0 <_dtoa_r+0x750>
    d740:	9e06      	ldr	r6, [sp, #24]
    d742:	4645      	mov	r5, r8
    d744:	9f08      	ldr	r7, [sp, #32]
    d746:	e74c      	b.n	d5e2 <_dtoa_r+0x762>
    d748:	9a06      	ldr	r2, [sp, #24]
    d74a:	e775      	b.n	d638 <_dtoa_r+0x7b8>
    d74c:	9b05      	ldr	r3, [sp, #20]
    d74e:	2b01      	cmp	r3, #1
    d750:	dc18      	bgt.n	d784 <_dtoa_r+0x904>
    d752:	9b02      	ldr	r3, [sp, #8]
    d754:	b9b3      	cbnz	r3, d784 <_dtoa_r+0x904>
    d756:	9b03      	ldr	r3, [sp, #12]
    d758:	f3c3 0313 	ubfx	r3, r3, #0, #20
    d75c:	b9a3      	cbnz	r3, d788 <_dtoa_r+0x908>
    d75e:	9b03      	ldr	r3, [sp, #12]
    d760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d764:	0d1b      	lsrs	r3, r3, #20
    d766:	051b      	lsls	r3, r3, #20
    d768:	b12b      	cbz	r3, d776 <_dtoa_r+0x8f6>
    d76a:	9b04      	ldr	r3, [sp, #16]
    d76c:	f108 0801 	add.w	r8, r8, #1
    d770:	3301      	adds	r3, #1
    d772:	9304      	str	r3, [sp, #16]
    d774:	2301      	movs	r3, #1
    d776:	9306      	str	r3, [sp, #24]
    d778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d77a:	2b00      	cmp	r3, #0
    d77c:	f47f af74 	bne.w	d668 <_dtoa_r+0x7e8>
    d780:	2001      	movs	r0, #1
    d782:	e779      	b.n	d678 <_dtoa_r+0x7f8>
    d784:	2300      	movs	r3, #0
    d786:	e7f6      	b.n	d776 <_dtoa_r+0x8f6>
    d788:	9b02      	ldr	r3, [sp, #8]
    d78a:	e7f4      	b.n	d776 <_dtoa_r+0x8f6>
    d78c:	d085      	beq.n	d69a <_dtoa_r+0x81a>
    d78e:	4618      	mov	r0, r3
    d790:	301c      	adds	r0, #28
    d792:	e77d      	b.n	d690 <_dtoa_r+0x810>
    d794:	9b01      	ldr	r3, [sp, #4]
    d796:	2b00      	cmp	r3, #0
    d798:	dc3a      	bgt.n	d810 <_dtoa_r+0x990>
    d79a:	9b05      	ldr	r3, [sp, #20]
    d79c:	2b02      	cmp	r3, #2
    d79e:	dd37      	ble.n	d810 <_dtoa_r+0x990>
    d7a0:	f8dd b004 	ldr.w	fp, [sp, #4]
    d7a4:	f1bb 0f00 	cmp.w	fp, #0
    d7a8:	d10d      	bne.n	d7c6 <_dtoa_r+0x946>
    d7aa:	4631      	mov	r1, r6
    d7ac:	465b      	mov	r3, fp
    d7ae:	2205      	movs	r2, #5
    d7b0:	4620      	mov	r0, r4
    d7b2:	f019 fcb0 	bl	27116 <__multadd>
    d7b6:	4601      	mov	r1, r0
    d7b8:	4606      	mov	r6, r0
    d7ba:	4650      	mov	r0, sl
    d7bc:	f019 fe3d 	bl	2743a <__mcmp>
    d7c0:	2800      	cmp	r0, #0
    d7c2:	f73f adc0 	bgt.w	d346 <_dtoa_r+0x4c6>
    d7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d7c8:	9d00      	ldr	r5, [sp, #0]
    d7ca:	ea6f 0903 	mvn.w	r9, r3
    d7ce:	f04f 0800 	mov.w	r8, #0
    d7d2:	4631      	mov	r1, r6
    d7d4:	4620      	mov	r0, r4
    d7d6:	f019 fc87 	bl	270e8 <_Bfree>
    d7da:	2f00      	cmp	r7, #0
    d7dc:	f43f aeb6 	beq.w	d54c <_dtoa_r+0x6cc>
    d7e0:	f1b8 0f00 	cmp.w	r8, #0
    d7e4:	d005      	beq.n	d7f2 <_dtoa_r+0x972>
    d7e6:	45b8      	cmp	r8, r7
    d7e8:	d003      	beq.n	d7f2 <_dtoa_r+0x972>
    d7ea:	4641      	mov	r1, r8
    d7ec:	4620      	mov	r0, r4
    d7ee:	f019 fc7b 	bl	270e8 <_Bfree>
    d7f2:	4639      	mov	r1, r7
    d7f4:	4620      	mov	r0, r4
    d7f6:	f019 fc77 	bl	270e8 <_Bfree>
    d7fa:	e6a7      	b.n	d54c <_dtoa_r+0x6cc>
    d7fc:	2600      	movs	r6, #0
    d7fe:	4637      	mov	r7, r6
    d800:	e7e1      	b.n	d7c6 <_dtoa_r+0x946>
    d802:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    d804:	f8dd 901c 	ldr.w	r9, [sp, #28]
    d808:	4637      	mov	r7, r6
    d80a:	e59c      	b.n	d346 <_dtoa_r+0x4c6>
    d80c:	40240000 	.word	0x40240000
    d810:	9b08      	ldr	r3, [sp, #32]
    d812:	f8dd b004 	ldr.w	fp, [sp, #4]
    d816:	2b00      	cmp	r3, #0
    d818:	f000 80f5 	beq.w	da06 <_dtoa_r+0xb86>
    d81c:	2d00      	cmp	r5, #0
    d81e:	dd05      	ble.n	d82c <_dtoa_r+0x9ac>
    d820:	4639      	mov	r1, r7
    d822:	462a      	mov	r2, r5
    d824:	4620      	mov	r0, r4
    d826:	f019 fda9 	bl	2737c <__lshift>
    d82a:	4607      	mov	r7, r0
    d82c:	9b06      	ldr	r3, [sp, #24]
    d82e:	2b00      	cmp	r3, #0
    d830:	d055      	beq.n	d8de <_dtoa_r+0xa5e>
    d832:	6879      	ldr	r1, [r7, #4]
    d834:	4620      	mov	r0, r4
    d836:	f019 fc23 	bl	27080 <_Balloc>
    d83a:	693a      	ldr	r2, [r7, #16]
    d83c:	4605      	mov	r5, r0
    d83e:	f107 010c 	add.w	r1, r7, #12
    d842:	3202      	adds	r2, #2
    d844:	300c      	adds	r0, #12
    d846:	0092      	lsls	r2, r2, #2
    d848:	f019 f8dd 	bl	26a06 <memcpy>
    d84c:	2201      	movs	r2, #1
    d84e:	4629      	mov	r1, r5
    d850:	4620      	mov	r0, r4
    d852:	f019 fd93 	bl	2737c <__lshift>
    d856:	9b00      	ldr	r3, [sp, #0]
    d858:	46b8      	mov	r8, r7
    d85a:	4607      	mov	r7, r0
    d85c:	3301      	adds	r3, #1
    d85e:	9301      	str	r3, [sp, #4]
    d860:	9b00      	ldr	r3, [sp, #0]
    d862:	445b      	add	r3, fp
    d864:	9307      	str	r3, [sp, #28]
    d866:	9b02      	ldr	r3, [sp, #8]
    d868:	f003 0301 	and.w	r3, r3, #1
    d86c:	9306      	str	r3, [sp, #24]
    d86e:	9b01      	ldr	r3, [sp, #4]
    d870:	4631      	mov	r1, r6
    d872:	4650      	mov	r0, sl
    d874:	f103 3bff 	add.w	fp, r3, #4294967295
    d878:	f019 fafd 	bl	26e76 <quorem>
    d87c:	4603      	mov	r3, r0
    d87e:	4641      	mov	r1, r8
    d880:	9002      	str	r0, [sp, #8]
    d882:	4650      	mov	r0, sl
    d884:	3330      	adds	r3, #48	; 0x30
    d886:	9308      	str	r3, [sp, #32]
    d888:	f019 fdd7 	bl	2743a <__mcmp>
    d88c:	463a      	mov	r2, r7
    d88e:	9004      	str	r0, [sp, #16]
    d890:	4631      	mov	r1, r6
    d892:	4620      	mov	r0, r4
    d894:	f019 fded 	bl	27472 <__mdiff>
    d898:	68c2      	ldr	r2, [r0, #12]
    d89a:	4605      	mov	r5, r0
    d89c:	9b08      	ldr	r3, [sp, #32]
    d89e:	bb02      	cbnz	r2, d8e2 <_dtoa_r+0xa62>
    d8a0:	4601      	mov	r1, r0
    d8a2:	4650      	mov	r0, sl
    d8a4:	f019 fdc9 	bl	2743a <__mcmp>
    d8a8:	9b08      	ldr	r3, [sp, #32]
    d8aa:	4602      	mov	r2, r0
    d8ac:	4629      	mov	r1, r5
    d8ae:	4620      	mov	r0, r4
    d8b0:	e9cd 3208 	strd	r3, r2, [sp, #32]
    d8b4:	f019 fc18 	bl	270e8 <_Bfree>
    d8b8:	9b05      	ldr	r3, [sp, #20]
    d8ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d8bc:	9d01      	ldr	r5, [sp, #4]
    d8be:	ea43 0102 	orr.w	r1, r3, r2
    d8c2:	9b06      	ldr	r3, [sp, #24]
    d8c4:	430b      	orrs	r3, r1
    d8c6:	9b08      	ldr	r3, [sp, #32]
    d8c8:	d10d      	bne.n	d8e6 <_dtoa_r+0xa66>
    d8ca:	2b39      	cmp	r3, #57	; 0x39
    d8cc:	d027      	beq.n	d91e <_dtoa_r+0xa9e>
    d8ce:	9a04      	ldr	r2, [sp, #16]
    d8d0:	2a00      	cmp	r2, #0
    d8d2:	dd01      	ble.n	d8d8 <_dtoa_r+0xa58>
    d8d4:	9b02      	ldr	r3, [sp, #8]
    d8d6:	3331      	adds	r3, #49	; 0x31
    d8d8:	f88b 3000 	strb.w	r3, [fp]
    d8dc:	e779      	b.n	d7d2 <_dtoa_r+0x952>
    d8de:	4638      	mov	r0, r7
    d8e0:	e7b9      	b.n	d856 <_dtoa_r+0x9d6>
    d8e2:	2201      	movs	r2, #1
    d8e4:	e7e2      	b.n	d8ac <_dtoa_r+0xa2c>
    d8e6:	9904      	ldr	r1, [sp, #16]
    d8e8:	2900      	cmp	r1, #0
    d8ea:	db04      	blt.n	d8f6 <_dtoa_r+0xa76>
    d8ec:	9805      	ldr	r0, [sp, #20]
    d8ee:	4301      	orrs	r1, r0
    d8f0:	9806      	ldr	r0, [sp, #24]
    d8f2:	4301      	orrs	r1, r0
    d8f4:	d120      	bne.n	d938 <_dtoa_r+0xab8>
    d8f6:	2a00      	cmp	r2, #0
    d8f8:	ddee      	ble.n	d8d8 <_dtoa_r+0xa58>
    d8fa:	4651      	mov	r1, sl
    d8fc:	2201      	movs	r2, #1
    d8fe:	4620      	mov	r0, r4
    d900:	9301      	str	r3, [sp, #4]
    d902:	f019 fd3b 	bl	2737c <__lshift>
    d906:	4631      	mov	r1, r6
    d908:	4682      	mov	sl, r0
    d90a:	f019 fd96 	bl	2743a <__mcmp>
    d90e:	2800      	cmp	r0, #0
    d910:	9b01      	ldr	r3, [sp, #4]
    d912:	dc02      	bgt.n	d91a <_dtoa_r+0xa9a>
    d914:	d1e0      	bne.n	d8d8 <_dtoa_r+0xa58>
    d916:	07da      	lsls	r2, r3, #31
    d918:	d5de      	bpl.n	d8d8 <_dtoa_r+0xa58>
    d91a:	2b39      	cmp	r3, #57	; 0x39
    d91c:	d1da      	bne.n	d8d4 <_dtoa_r+0xa54>
    d91e:	2339      	movs	r3, #57	; 0x39
    d920:	f88b 3000 	strb.w	r3, [fp]
    d924:	462b      	mov	r3, r5
    d926:	461d      	mov	r5, r3
    d928:	3b01      	subs	r3, #1
    d92a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    d92e:	2a39      	cmp	r2, #57	; 0x39
    d930:	d050      	beq.n	d9d4 <_dtoa_r+0xb54>
    d932:	3201      	adds	r2, #1
    d934:	701a      	strb	r2, [r3, #0]
    d936:	e74c      	b.n	d7d2 <_dtoa_r+0x952>
    d938:	2a00      	cmp	r2, #0
    d93a:	dd03      	ble.n	d944 <_dtoa_r+0xac4>
    d93c:	2b39      	cmp	r3, #57	; 0x39
    d93e:	d0ee      	beq.n	d91e <_dtoa_r+0xa9e>
    d940:	3301      	adds	r3, #1
    d942:	e7c9      	b.n	d8d8 <_dtoa_r+0xa58>
    d944:	9a01      	ldr	r2, [sp, #4]
    d946:	9907      	ldr	r1, [sp, #28]
    d948:	f802 3c01 	strb.w	r3, [r2, #-1]
    d94c:	428a      	cmp	r2, r1
    d94e:	d02a      	beq.n	d9a6 <_dtoa_r+0xb26>
    d950:	4651      	mov	r1, sl
    d952:	2300      	movs	r3, #0
    d954:	220a      	movs	r2, #10
    d956:	4620      	mov	r0, r4
    d958:	f019 fbdd 	bl	27116 <__multadd>
    d95c:	45b8      	cmp	r8, r7
    d95e:	4682      	mov	sl, r0
    d960:	f04f 0300 	mov.w	r3, #0
    d964:	f04f 020a 	mov.w	r2, #10
    d968:	4641      	mov	r1, r8
    d96a:	4620      	mov	r0, r4
    d96c:	d107      	bne.n	d97e <_dtoa_r+0xafe>
    d96e:	f019 fbd2 	bl	27116 <__multadd>
    d972:	4680      	mov	r8, r0
    d974:	4607      	mov	r7, r0
    d976:	9b01      	ldr	r3, [sp, #4]
    d978:	3301      	adds	r3, #1
    d97a:	9301      	str	r3, [sp, #4]
    d97c:	e777      	b.n	d86e <_dtoa_r+0x9ee>
    d97e:	f019 fbca 	bl	27116 <__multadd>
    d982:	4639      	mov	r1, r7
    d984:	4680      	mov	r8, r0
    d986:	2300      	movs	r3, #0
    d988:	220a      	movs	r2, #10
    d98a:	4620      	mov	r0, r4
    d98c:	f019 fbc3 	bl	27116 <__multadd>
    d990:	4607      	mov	r7, r0
    d992:	e7f0      	b.n	d976 <_dtoa_r+0xaf6>
    d994:	f1bb 0f00 	cmp.w	fp, #0
    d998:	9a00      	ldr	r2, [sp, #0]
    d99a:	f04f 0800 	mov.w	r8, #0
    d99e:	bfcc      	ite	gt
    d9a0:	465d      	movgt	r5, fp
    d9a2:	2501      	movle	r5, #1
    d9a4:	4415      	add	r5, r2
    d9a6:	4651      	mov	r1, sl
    d9a8:	2201      	movs	r2, #1
    d9aa:	4620      	mov	r0, r4
    d9ac:	9301      	str	r3, [sp, #4]
    d9ae:	f019 fce5 	bl	2737c <__lshift>
    d9b2:	4631      	mov	r1, r6
    d9b4:	4682      	mov	sl, r0
    d9b6:	f019 fd40 	bl	2743a <__mcmp>
    d9ba:	2800      	cmp	r0, #0
    d9bc:	dcb2      	bgt.n	d924 <_dtoa_r+0xaa4>
    d9be:	d102      	bne.n	d9c6 <_dtoa_r+0xb46>
    d9c0:	9b01      	ldr	r3, [sp, #4]
    d9c2:	07db      	lsls	r3, r3, #31
    d9c4:	d4ae      	bmi.n	d924 <_dtoa_r+0xaa4>
    d9c6:	462b      	mov	r3, r5
    d9c8:	461d      	mov	r5, r3
    d9ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    d9ce:	2a30      	cmp	r2, #48	; 0x30
    d9d0:	d0fa      	beq.n	d9c8 <_dtoa_r+0xb48>
    d9d2:	e6fe      	b.n	d7d2 <_dtoa_r+0x952>
    d9d4:	9a00      	ldr	r2, [sp, #0]
    d9d6:	429a      	cmp	r2, r3
    d9d8:	d1a5      	bne.n	d926 <_dtoa_r+0xaa6>
    d9da:	2331      	movs	r3, #49	; 0x31
    d9dc:	f109 0901 	add.w	r9, r9, #1
    d9e0:	7013      	strb	r3, [r2, #0]
    d9e2:	e6f6      	b.n	d7d2 <_dtoa_r+0x952>
    d9e4:	4b12      	ldr	r3, [pc, #72]	; (da30 <_dtoa_r+0xbb0>)
    d9e6:	f7ff bab8 	b.w	cf5a <_dtoa_r+0xda>
    d9ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d9ec:	2b00      	cmp	r3, #0
    d9ee:	f47f aa8e 	bne.w	cf0e <_dtoa_r+0x8e>
    d9f2:	4b10      	ldr	r3, [pc, #64]	; (da34 <_dtoa_r+0xbb4>)
    d9f4:	f7ff bab1 	b.w	cf5a <_dtoa_r+0xda>
    d9f8:	f1bb 0f00 	cmp.w	fp, #0
    d9fc:	dc03      	bgt.n	da06 <_dtoa_r+0xb86>
    d9fe:	9b05      	ldr	r3, [sp, #20]
    da00:	2b02      	cmp	r3, #2
    da02:	f73f aecf 	bgt.w	d7a4 <_dtoa_r+0x924>
    da06:	9d00      	ldr	r5, [sp, #0]
    da08:	4631      	mov	r1, r6
    da0a:	4650      	mov	r0, sl
    da0c:	f019 fa33 	bl	26e76 <quorem>
    da10:	9a00      	ldr	r2, [sp, #0]
    da12:	f100 0330 	add.w	r3, r0, #48	; 0x30
    da16:	f805 3b01 	strb.w	r3, [r5], #1
    da1a:	1aaa      	subs	r2, r5, r2
    da1c:	4593      	cmp	fp, r2
    da1e:	ddb9      	ble.n	d994 <_dtoa_r+0xb14>
    da20:	4651      	mov	r1, sl
    da22:	2300      	movs	r3, #0
    da24:	220a      	movs	r2, #10
    da26:	4620      	mov	r0, r4
    da28:	f019 fb75 	bl	27116 <__multadd>
    da2c:	4682      	mov	sl, r0
    da2e:	e7eb      	b.n	da08 <_dtoa_r+0xb88>
    da30:	00028d83 	.word	0x00028d83
    da34:	0002aae1 	.word	0x0002aae1

0000da38 <gpio_callback>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    da38:	4907      	ldr	r1, [pc, #28]	; (da58 <gpio_callback+0x20>)
    da3a:	e8d1 3fef 	ldaex	r3, [r1]
    da3e:	f043 0201 	orr.w	r2, r3, #1
    da42:	e8c1 2fe0 	stlex	r0, r2, [r1]
    da46:	2800      	cmp	r0, #0
    da48:	d1f7      	bne.n	da3a <gpio_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    da4a:	07db      	lsls	r3, r3, #31
    da4c:	d403      	bmi.n	da56 <gpio_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    da4e:	4803      	ldr	r0, [pc, #12]	; (da5c <gpio_callback+0x24>)
    da50:	3908      	subs	r1, #8
    da52:	f018 bcb8 	b.w	263c6 <k_queue_append>

static void gpio_callback(struct device *dev,
		     struct gpio_callback *gpio_cb, u32_t pins)
{
	k_work_submit_to_queue(&slm_work_q, &exit_idle_work);
}
    da56:	4770      	bx	lr
    da58:	200213e0 	.word	0x200213e0
    da5c:	200213f8 	.word	0x200213f8

0000da60 <exit_idle>:
{
    da60:	b538      	push	{r3, r4, r5, lr}
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    da62:	4b15      	ldr	r3, [pc, #84]	; (dab8 <exit_idle+0x58>)
    da64:	4c15      	ldr	r4, [pc, #84]	; (dabc <exit_idle+0x5c>)
	gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
    da66:	4d16      	ldr	r5, [pc, #88]	; (dac0 <exit_idle+0x60>)
    da68:	1ae4      	subs	r4, r4, r3
    da6a:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Exit Idle");
    da6c:	01a4      	lsls	r4, r4, #6
    da6e:	4815      	ldr	r0, [pc, #84]	; (dac4 <exit_idle+0x64>)
    da70:	f044 0103 	orr.w	r1, r4, #3
    da74:	f015 fe8f 	bl	23796 <log_0>
	gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
    da78:	6828      	ldr	r0, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    da7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    da7e:	211e      	movs	r1, #30
    da80:	f015 fab0 	bl	22fe4 <z_impl_gpio_pin_interrupt_configure>
	gpio_remove_callback(gpio_dev, &gpio_cb);
    da84:	6828      	ldr	r0, [r5, #0]
				       struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    da86:	6883      	ldr	r3, [r0, #8]
    da88:	69db      	ldr	r3, [r3, #28]
    da8a:	b113      	cbz	r3, da92 <exit_idle+0x32>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, false);
    da8c:	2200      	movs	r2, #0
    da8e:	490e      	ldr	r1, [pc, #56]	; (dac8 <exit_idle+0x68>)
    da90:	4798      	blx	r3
	gpio_pin_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN, GPIO_INPUT);
    da92:	211e      	movs	r1, #30
    da94:	f44f 7280 	mov.w	r2, #256	; 0x100
    da98:	6828      	ldr	r0, [r5, #0]
    da9a:	f015 fab7 	bl	2300c <gpio_pin_configure>
	err = slm_at_host_init();
    da9e:	f000 faf1 	bl	e084 <slm_at_host_init>
	if (err) {
    daa2:	4601      	mov	r1, r0
    daa4:	b130      	cbz	r0, dab4 <exit_idle+0x54>
		LOG_ERR("Failed to init at_host: %d", err);
    daa6:	f044 0201 	orr.w	r2, r4, #1
    daaa:	4808      	ldr	r0, [pc, #32]	; (dacc <exit_idle+0x6c>)
}
    daac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to init at_host: %d", err);
    dab0:	f015 be80 	b.w	237b4 <log_1>
}
    dab4:	bd38      	pop	{r3, r4, r5, pc}
    dab6:	bf00      	nop
    dab8:	00027b20 	.word	0x00027b20
    dabc:	00027b20 	.word	0x00027b20
    dac0:	200213f0 	.word	0x200213f0
    dac4:	000285b4 	.word	0x000285b4
    dac8:	200213e4 	.word	0x200213e4
    dacc:	000285be 	.word	0x000285be

0000dad0 <bsd_recoverable_error_handler>:
    dad0:	4a05      	ldr	r2, [pc, #20]	; (dae8 <bsd_recoverable_error_handler+0x18>)
    dad2:	4b06      	ldr	r3, [pc, #24]	; (daec <bsd_recoverable_error_handler+0x1c>)
{
    dad4:	4601      	mov	r1, r0
    dad6:	1ad2      	subs	r2, r2, r3
    dad8:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("bsdlib recoverable error: %u", err);
    dada:	0192      	lsls	r2, r2, #6
    dadc:	4804      	ldr	r0, [pc, #16]	; (daf0 <bsd_recoverable_error_handler+0x20>)
    dade:	f042 0201 	orr.w	r2, r2, #1
    dae2:	f015 be67 	b.w	237b4 <log_1>
    dae6:	bf00      	nop
    dae8:	00027b20 	.word	0x00027b20
    daec:	00027b20 	.word	0x00027b20
    daf0:	000285d9 	.word	0x000285d9

0000daf4 <enter_idle>:

void enter_idle(void)
{
    daf4:	b538      	push	{r3, r4, r5, lr}
    daf6:	4b23      	ldr	r3, [pc, #140]	; (db84 <enter_idle+0x90>)
    daf8:	4c23      	ldr	r4, [pc, #140]	; (db88 <enter_idle+0x94>)
	LOG_INF("Enter Idle");
    dafa:	4824      	ldr	r0, [pc, #144]	; (db8c <enter_idle+0x98>)
    dafc:	1ae4      	subs	r4, r4, r3
    dafe:	08e4      	lsrs	r4, r4, #3
    db00:	01a4      	lsls	r4, r4, #6
    db02:	f044 0103 	orr.w	r1, r4, #3
    db06:	f015 fe46 	bl	23796 <log_0>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    db0a:	4821      	ldr	r0, [pc, #132]	; (db90 <enter_idle+0x9c>)
    db0c:	f012 fc08 	bl	20320 <z_impl_device_get_binding>
	int err;

	gpio_dev = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0)));
    db10:	4d20      	ldr	r5, [pc, #128]	; (db94 <enter_idle+0xa0>)
    db12:	6028      	str	r0, [r5, #0]
	if (gpio_dev == NULL) {
    db14:	b930      	cbnz	r0, db24 <enter_idle+0x30>
		LOG_ERR("GPIO_0 bind error");
    db16:	f044 0101 	orr.w	r1, r4, #1
    db1a:	481f      	ldr	r0, [pc, #124]	; (db98 <enter_idle+0xa4>)
	err = gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
					   GPIO_INT_LEVEL_LOW);
	if (err) {
		LOG_ERR("GPIO_0 enable callback error: %d", err);
	}
}
    db1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("GPIO_0 bind error");
    db20:	f015 be39 	b.w	23796 <log_0>
	err = gpio_pin_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
    db24:	211e      	movs	r1, #30
    db26:	f44f 7288 	mov.w	r2, #272	; 0x110
    db2a:	f015 fa6f 	bl	2300c <gpio_pin_configure>
	if (err) {
    db2e:	4601      	mov	r1, r0
    db30:	b130      	cbz	r0, db40 <enter_idle+0x4c>
		LOG_ERR("GPIO_0 config error: %d", err);
    db32:	481a      	ldr	r0, [pc, #104]	; (db9c <enter_idle+0xa8>)
    db34:	f044 0201 	orr.w	r2, r4, #1
}
    db38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("GPIO_0 enable callback error: %d", err);
    db3c:	f015 be3a 	b.w	237b4 <log_1>
	callback->handler = handler;
    db40:	4917      	ldr	r1, [pc, #92]	; (dba0 <enter_idle+0xac>)
    db42:	4b18      	ldr	r3, [pc, #96]	; (dba4 <enter_idle+0xb0>)
	err = gpio_add_callback(gpio_dev, &gpio_cb);
    db44:	6828      	ldr	r0, [r5, #0]
    db46:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    db48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    db4c:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
    db4e:	6883      	ldr	r3, [r0, #8]
    db50:	69db      	ldr	r3, [r3, #28]
    db52:	b13b      	cbz	r3, db64 <enter_idle+0x70>
	return api->manage_callback(port, callback, true);
    db54:	2201      	movs	r2, #1
    db56:	4798      	blx	r3
	if (err) {
    db58:	4601      	mov	r1, r0
    db5a:	b130      	cbz	r0, db6a <enter_idle+0x76>
		LOG_ERR("GPIO_0 add callback error: %d", err);
    db5c:	4812      	ldr	r0, [pc, #72]	; (dba8 <enter_idle+0xb4>)
    db5e:	f044 0201 	orr.w	r2, r4, #1
    db62:	e7e9      	b.n	db38 <enter_idle+0x44>
		return -ENOTSUP;
    db64:	f06f 0185 	mvn.w	r1, #133	; 0x85
    db68:	e7f8      	b.n	db5c <enter_idle+0x68>
	err = gpio_pin_interrupt_configure(gpio_dev, CONFIG_SLM_INTERFACE_PIN,
    db6a:	6828      	ldr	r0, [r5, #0]
    db6c:	211e      	movs	r1, #30
    db6e:	f44f 3210 	mov.w	r2, #147456	; 0x24000
    db72:	f015 fa37 	bl	22fe4 <z_impl_gpio_pin_interrupt_configure>
	if (err) {
    db76:	4601      	mov	r1, r0
    db78:	b118      	cbz	r0, db82 <enter_idle+0x8e>
		LOG_ERR("GPIO_0 enable callback error: %d", err);
    db7a:	480c      	ldr	r0, [pc, #48]	; (dbac <enter_idle+0xb8>)
    db7c:	f044 0201 	orr.w	r2, r4, #1
    db80:	e7da      	b.n	db38 <enter_idle+0x44>
}
    db82:	bd38      	pop	{r3, r4, r5, pc}
    db84:	00027b20 	.word	0x00027b20
    db88:	00027b20 	.word	0x00027b20
    db8c:	000285f6 	.word	0x000285f6
    db90:	00028601 	.word	0x00028601
    db94:	200213f0 	.word	0x200213f0
    db98:	00028608 	.word	0x00028608
    db9c:	0002861a 	.word	0x0002861a
    dba0:	200213e4 	.word	0x200213e4
    dba4:	0000da39 	.word	0x0000da39
    dba8:	00028632 	.word	0x00028632
    dbac:	00028650 	.word	0x00028650

0000dbb0 <enter_sleep>:
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    dbb0:	220c      	movs	r2, #12

void enter_sleep(void)
{
    dbb2:	b508      	push	{r3, lr}
    dbb4:	4b0a      	ldr	r3, [pc, #40]	; (dbe0 <enter_sleep+0x30>)
    dbb6:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    dbba:	f8d3 2278 	ldr.w	r2, [r3, #632]	; 0x278

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    dbbe:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    dbc2:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	 * to respond that it actually has stopped as there may be a
	 * delay until modem is disconnected from the network.
	 * Refer to https://infocenter.nordicsemi.com/topic/ps_nrf9160/
	 * pmu.html?cp=2_0_0_4_0_0_1#system_off_mode
	 */
	lte_lc_power_off();
    dbc6:	f009 f91d 	bl	16e04 <lte_lc_power_off>
	bsd_shutdown();
    dbca:	f010 fa65 	bl	1e098 <bsd_shutdown>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    dbce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dbd2:	2201      	movs	r2, #1
    dbd4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    dbd8:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    dbdc:	bf20      	wfe
    while (true)
    dbde:	e7fd      	b.n	dbdc <enter_sleep+0x2c>
    dbe0:	40842500 	.word	0x40842500

0000dbe4 <start_execute>:
	nrf_regulators_system_off(NRF_REGULATORS_NS);
}

void start_execute(void)
{
    dbe4:	b538      	push	{r3, r4, r5, lr}
    dbe6:	4b1c      	ldr	r3, [pc, #112]	; (dc58 <start_execute+0x74>)
    dbe8:	4c1c      	ldr	r4, [pc, #112]	; (dc5c <start_execute+0x78>)
	int err;

	LOG_INF("Serial LTE Modem");
    dbea:	481d      	ldr	r0, [pc, #116]	; (dc60 <start_execute+0x7c>)
    dbec:	1ae4      	subs	r4, r4, r3
    dbee:	08e4      	lsrs	r4, r4, #3
    dbf0:	01a4      	lsls	r4, r4, #6
    dbf2:	f044 0103 	orr.w	r1, r4, #3
    dbf6:	f015 fdce 	bl	23796 <log_0>

	err = modem_info_init();
    dbfa:	f009 fa79 	bl	170f0 <modem_info_init>
	if (err) {
    dbfe:	4601      	mov	r1, r0
    dc00:	b130      	cbz	r0, dc10 <start_execute+0x2c>
		LOG_ERR("Modem info could not be established: %d", err);
    dc02:	4818      	ldr	r0, [pc, #96]	; (dc64 <start_execute+0x80>)
    dc04:	f044 0201 	orr.w	r2, r4, #1
	}

	k_work_q_start(&slm_work_q, slm_wq_stack_area,
		K_THREAD_STACK_SIZEOF(slm_wq_stack_area), SLM_WQ_PRIORITY);
	k_work_init(&exit_idle_work, exit_idle);
}
    dc08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to init at_host: %d", err);
    dc0c:	f015 bdd2 	b.w	237b4 <log_1>
	modem_info_params_init(&modem_param);
    dc10:	4815      	ldr	r0, [pc, #84]	; (dc68 <start_execute+0x84>)
    dc12:	f009 fab1 	bl	17178 <modem_info_params_init>
	err = at_params_list_init(&at_param_list, CONFIG_SLM_AT_MAX_PARAM);
    dc16:	2108      	movs	r1, #8
    dc18:	4814      	ldr	r0, [pc, #80]	; (dc6c <start_execute+0x88>)
    dc1a:	f018 f95c 	bl	25ed6 <at_params_list_init>
	if (err) {
    dc1e:	4601      	mov	r1, r0
    dc20:	b118      	cbz	r0, dc2a <start_execute+0x46>
		LOG_ERR("Failed to init AT Parser: %d", err);
    dc22:	4813      	ldr	r0, [pc, #76]	; (dc70 <start_execute+0x8c>)
    dc24:	f044 0201 	orr.w	r2, r4, #1
    dc28:	e7ee      	b.n	dc08 <start_execute+0x24>
	err = slm_at_host_init();
    dc2a:	f000 fa2b 	bl	e084 <slm_at_host_init>
	if (err) {
    dc2e:	4605      	mov	r5, r0
    dc30:	b120      	cbz	r0, dc3c <start_execute+0x58>
		LOG_ERR("Failed to init at_host: %d", err);
    dc32:	4601      	mov	r1, r0
    dc34:	f044 0201 	orr.w	r2, r4, #1
    dc38:	480e      	ldr	r0, [pc, #56]	; (dc74 <start_execute+0x90>)
    dc3a:	e7e5      	b.n	dc08 <start_execute+0x24>
	k_work_q_start(&slm_work_q, slm_wq_stack_area,
    dc3c:	230e      	movs	r3, #14
    dc3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dc42:	490d      	ldr	r1, [pc, #52]	; (dc78 <start_execute+0x94>)
    dc44:	480d      	ldr	r0, [pc, #52]	; (dc7c <start_execute+0x98>)
    dc46:	f013 fc25 	bl	21494 <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    dc4a:	4b0d      	ldr	r3, [pc, #52]	; (dc80 <start_execute+0x9c>)
    dc4c:	4a0d      	ldr	r2, [pc, #52]	; (dc84 <start_execute+0xa0>)
    dc4e:	601d      	str	r5, [r3, #0]
    dc50:	e9c3 2501 	strd	r2, r5, [r3, #4]
}
    dc54:	bd38      	pop	{r3, r4, r5, pc}
    dc56:	bf00      	nop
    dc58:	00027b20 	.word	0x00027b20
    dc5c:	00027b20 	.word	0x00027b20
    dc60:	00028671 	.word	0x00028671
    dc64:	00028682 	.word	0x00028682
    dc68:	20020880 	.word	0x20020880
    dc6c:	200213d0 	.word	0x200213d0
    dc70:	000286aa 	.word	0x000286aa
    dc74:	000285be 	.word	0x000285be
    dc78:	2002a210 	.word	0x2002a210
    dc7c:	200213f8 	.word	0x200213f8
    dc80:	200213d8 	.word	0x200213d8
    dc84:	0000da61 	.word	0x0000da61

0000dc88 <main>:

#if defined(CONFIG_SLM_GPIO_WAKEUP)
void main(void)
{
    dc88:	b510      	push	{r4, lr}
    dc8a:	4816      	ldr	r0, [pc, #88]	; (dce4 <main+0x5c>)
    dc8c:	f012 fb48 	bl	20320 <z_impl_device_get_binding>
        led_dev = device_get_binding("GPIO_0");
    dc90:	4c15      	ldr	r4, [pc, #84]	; (dce8 <main+0x60>)
        gpio_pin_configure(led_dev, 23, GPIO_OUTPUT);
    dc92:	2117      	movs	r1, #23
    dc94:	f44f 7200 	mov.w	r2, #512	; 0x200
        led_dev = device_get_binding("GPIO_0");
    dc98:	6020      	str	r0, [r4, #0]
        gpio_pin_configure(led_dev, 23, GPIO_OUTPUT);
    dc9a:	f015 f9b7 	bl	2300c <gpio_pin_configure>
        gpio_pin_set(led_dev, 23, 0);
    dc9e:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    dca0:	68c3      	ldr	r3, [r0, #12]
    dca2:	681b      	ldr	r3, [r3, #0]
    dca4:	0219      	lsls	r1, r3, #8
	return api->port_clear_bits_raw(port, pins);
    dca6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    dca8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
	return api->port_clear_bits_raw(port, pins);
    dcac:	bf54      	ite	pl
    dcae:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
    dcb0:	68db      	ldrmi	r3, [r3, #12]
    dcb2:	4798      	blx	r3
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
    dcb4:	4b0d      	ldr	r3, [pc, #52]	; (dcec <main+0x64>)
    dcb6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

	u32_t rr = nrf_power_resetreas_get(NRF_POWER_NS);

	LOG_DBG("RR: 0x%08x", rr);
	if (rr & NRF_POWER_RESETREAS_OFF_MASK) {
    dcba:	0752      	lsls	r2, r2, #29
    dcbc:	d506      	bpl.n	dccc <main+0x44>
		start_execute();
	} else {
		LOG_INF("Sleep");
		enter_sleep();
	}
}
    dcbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

NRF_STATIC_INLINE void nrf_power_resetreas_clear(NRF_POWER_Type * p_reg, uint32_t mask)
{
    p_reg->RESETREAS = mask;
    dcc2:	4a0b      	ldr	r2, [pc, #44]	; (dcf0 <main+0x68>)
    dcc4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		start_execute();
    dcc8:	f7ff bf8c 	b.w	dbe4 <start_execute>
    dccc:	4b09      	ldr	r3, [pc, #36]	; (dcf4 <main+0x6c>)
    dcce:	490a      	ldr	r1, [pc, #40]	; (dcf8 <main+0x70>)
		LOG_INF("Sleep");
    dcd0:	480a      	ldr	r0, [pc, #40]	; (dcfc <main+0x74>)
    dcd2:	1ac9      	subs	r1, r1, r3
    dcd4:	08c9      	lsrs	r1, r1, #3
    dcd6:	0189      	lsls	r1, r1, #6
    dcd8:	f041 0103 	orr.w	r1, r1, #3
    dcdc:	f015 fd5b 	bl	23796 <log_0>
		enter_sleep();
    dce0:	f7ff ff66 	bl	dbb0 <enter_sleep>
    dce4:	00028601 	.word	0x00028601
    dce8:	200213f4 	.word	0x200213f4
    dcec:	40005000 	.word	0x40005000
    dcf0:	00070017 	.word	0x00070017
    dcf4:	00027b20 	.word	0x00027b20
    dcf8:	00027b20 	.word	0x00027b20
    dcfc:	000286c7 	.word	0x000286c7

0000dd00 <slm_util_casecmp>:

/**
 * @brief Compare string ignoring case
 */
bool slm_util_casecmp(const char *str1, const char *str2)
{
    dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd02:	4605      	mov	r5, r0
	int str2_len = strlen(str2);
    dd04:	4608      	mov	r0, r1
{
    dd06:	460e      	mov	r6, r1
	int str2_len = strlen(str2);
    dd08:	f7ff f8b2 	bl	ce70 <strlen>
    dd0c:	4604      	mov	r4, r0

	if (strlen(str1) != str2_len) {
    dd0e:	4628      	mov	r0, r5
    dd10:	f7ff f8ae 	bl	ce70 <strlen>
    dd14:	4284      	cmp	r4, r0
    dd16:	d117      	bne.n	dd48 <slm_util_casecmp+0x48>
		return false;
	}

	for (int i = 0; i < str2_len; i++) {
    dd18:	2300      	movs	r3, #0
		if (toupper((int)*(str1 + i)) != toupper((int)*(str2 + i))) {
    dd1a:	4f0c      	ldr	r7, [pc, #48]	; (dd4c <slm_util_casecmp+0x4c>)
	for (int i = 0; i < str2_len; i++) {
    dd1c:	42a3      	cmp	r3, r4
    dd1e:	db01      	blt.n	dd24 <slm_util_casecmp+0x24>
			return false;
		}
	}

	return true;
    dd20:	2001      	movs	r0, #1
}
    dd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (toupper((int)*(str1 + i)) != toupper((int)*(str2 + i))) {
    dd24:	5ce9      	ldrb	r1, [r5, r3]
    dd26:	5dca      	ldrb	r2, [r1, r7]
    dd28:	f002 0203 	and.w	r2, r2, #3
    dd2c:	2a02      	cmp	r2, #2
    dd2e:	5cf2      	ldrb	r2, [r6, r3]
    dd30:	bf08      	it	eq
    dd32:	3920      	subeq	r1, #32
    dd34:	5cb8      	ldrb	r0, [r7, r2]
    dd36:	f000 0003 	and.w	r0, r0, #3
    dd3a:	2802      	cmp	r0, #2
    dd3c:	bf08      	it	eq
    dd3e:	3a20      	subeq	r2, #32
    dd40:	4291      	cmp	r1, r2
    dd42:	d101      	bne.n	dd48 <slm_util_casecmp+0x48>
	for (int i = 0; i < str2_len; i++) {
    dd44:	3301      	adds	r3, #1
    dd46:	e7e9      	b.n	dd1c <slm_util_casecmp+0x1c>
		return false;
    dd48:	2000      	movs	r0, #0
    dd4a:	e7ea      	b.n	dd22 <slm_util_casecmp+0x22>
    dd4c:	0002a974 	.word	0x0002a974

0000dd50 <slm_util_cmd_casecmp>:

/**
 * @brief Compare name of AT command ignoring case
 */
bool slm_util_cmd_casecmp(const char *cmd, const char *slm_cmd)
{
    dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd52:	4606      	mov	r6, r0
	int i;
	int slm_cmd_len = strlen(slm_cmd);
    dd54:	4608      	mov	r0, r1
{
    dd56:	460f      	mov	r7, r1
	int slm_cmd_len = strlen(slm_cmd);
    dd58:	f7ff f88a 	bl	ce70 <strlen>
    dd5c:	4604      	mov	r4, r0

	if (strlen(cmd) < slm_cmd_len) {
    dd5e:	4630      	mov	r0, r6
    dd60:	f7ff f886 	bl	ce70 <strlen>
    dd64:	4284      	cmp	r4, r0
    dd66:	d823      	bhi.n	ddb0 <slm_util_cmd_casecmp+0x60>
		return false;
	}

	for (i = 0; i < slm_cmd_len; i++) {
    dd68:	2500      	movs	r5, #0
		if (toupper((int)*(cmd + i)) != toupper((int)*(slm_cmd + i))) {
    dd6a:	4813      	ldr	r0, [pc, #76]	; (ddb8 <slm_util_cmd_casecmp+0x68>)
	for (i = 0; i < slm_cmd_len; i++) {
    dd6c:	42a5      	cmp	r5, r4
    dd6e:	db0d      	blt.n	dd8c <slm_util_cmd_casecmp+0x3c>
			return false;
		}
	}
#if defined(CONFIG_SLM_CR_LF_TERMINATION)
	if (strlen(cmd) > (slm_cmd_len + 2)) {
    dd70:	4630      	mov	r0, r6
    dd72:	f7ff f87d 	bl	ce70 <strlen>
    dd76:	3402      	adds	r4, #2
    dd78:	42a0      	cmp	r0, r4
    dd7a:	d91b      	bls.n	ddb4 <slm_util_cmd_casecmp+0x64>
#else
	if (strlen(cmd) > (slm_cmd_len + 1)) {
#endif
		char ch = *(cmd + i);
		/* With parameter, SET TEST, "="; READ, "?" */
		return ((ch == '=') || (ch == '?'));
    dd7c:	5d70      	ldrb	r0, [r6, r5]
    dd7e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    dd82:	f1a0 033d 	sub.w	r3, r0, #61	; 0x3d
    dd86:	4258      	negs	r0, r3
    dd88:	4158      	adcs	r0, r3
	}

	return true;
}
    dd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (toupper((int)*(cmd + i)) != toupper((int)*(slm_cmd + i))) {
    dd8c:	5d72      	ldrb	r2, [r6, r5]
    dd8e:	5c13      	ldrb	r3, [r2, r0]
    dd90:	f003 0303 	and.w	r3, r3, #3
    dd94:	2b02      	cmp	r3, #2
    dd96:	5d7b      	ldrb	r3, [r7, r5]
    dd98:	bf08      	it	eq
    dd9a:	3a20      	subeq	r2, #32
    dd9c:	5cc1      	ldrb	r1, [r0, r3]
    dd9e:	f001 0103 	and.w	r1, r1, #3
    dda2:	2902      	cmp	r1, #2
    dda4:	bf08      	it	eq
    dda6:	3b20      	subeq	r3, #32
    dda8:	429a      	cmp	r2, r3
    ddaa:	d101      	bne.n	ddb0 <slm_util_cmd_casecmp+0x60>
	for (i = 0; i < slm_cmd_len; i++) {
    ddac:	3501      	adds	r5, #1
    ddae:	e7dd      	b.n	dd6c <slm_util_cmd_casecmp+0x1c>
		return false;
    ddb0:	2000      	movs	r0, #0
    ddb2:	e7ea      	b.n	dd8a <slm_util_cmd_casecmp+0x3a>
	return true;
    ddb4:	2001      	movs	r0, #1
    ddb6:	e7e8      	b.n	dd8a <slm_util_cmd_casecmp+0x3a>
    ddb8:	0002a974 	.word	0x0002a974

0000ddbc <slm_util_htoa>:
/**
 * @brief Encode hex array to hexdecimal string (ASCII text)
 */
int slm_util_htoa(const u8_t *hex, u16_t hex_len,
		char *ascii, u16_t ascii_len)
{
    ddbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ddc0:	460d      	mov	r5, r1
    ddc2:	4690      	mov	r8, r2
	if (hex == NULL || ascii == NULL) {
    ddc4:	4607      	mov	r7, r0
    ddc6:	b1a8      	cbz	r0, ddf4 <slm_util_htoa+0x38>
    ddc8:	b1a2      	cbz	r2, ddf4 <slm_util_htoa+0x38>
		return -EINVAL;
	}
	if (ascii_len < (hex_len * 2)) {
    ddca:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
    ddce:	ea4f 0641 	mov.w	r6, r1, lsl #1
    ddd2:	db0f      	blt.n	ddf4 <slm_util_htoa+0x38>
		return -EINVAL;
	}

	for (int i = 0; i < hex_len; i++) {
    ddd4:	2400      	movs	r4, #0
		sprintf(ascii + (i * 2), "%02X", *(hex + i));
    ddd6:	f8df 9024 	ldr.w	r9, [pc, #36]	; ddfc <slm_util_htoa+0x40>
	for (int i = 0; i < hex_len; i++) {
    ddda:	42a5      	cmp	r5, r4
    dddc:	dc02      	bgt.n	dde4 <slm_util_htoa+0x28>
	}

	return (hex_len * 2);
}
    ddde:	4630      	mov	r0, r6
    dde0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sprintf(ascii + (i * 2), "%02X", *(hex + i));
    dde4:	5d3a      	ldrb	r2, [r7, r4]
    dde6:	eb08 0044 	add.w	r0, r8, r4, lsl #1
    ddea:	4649      	mov	r1, r9
    ddec:	f014 fa60 	bl	222b0 <siprintf>
	for (int i = 0; i < hex_len; i++) {
    ddf0:	3401      	adds	r4, #1
    ddf2:	e7f2      	b.n	ddda <slm_util_htoa+0x1e>
		return -EINVAL;
    ddf4:	f06f 0615 	mvn.w	r6, #21
    ddf8:	e7f1      	b.n	ddde <slm_util_htoa+0x22>
    ddfa:	bf00      	nop
    ddfc:	000286d1 	.word	0x000286d1

0000de00 <uart_callback>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void uart_callback(struct uart_event *evt, void *user_data)
{
    de00:	b570      	push	{r4, r5, r6, lr}
    de02:	7803      	ldrb	r3, [r0, #0]
    de04:	2b06      	cmp	r3, #6
    de06:	d862      	bhi.n	dece <uart_callback+0xce>
    de08:	e8df f003 	tbb	[pc, r3]
    de0c:	9f200d04 	.word	0x9f200d04
    de10:	6161      	.short	0x6161
    de12:	bb          	.byte	0xbb
    de13:	00          	.byte	0x00

	ARG_UNUSED(user_data);

	switch (evt->type) {
	case UART_TX_DONE:
		k_free(uart_tx_buf);
    de14:	4b60      	ldr	r3, [pc, #384]	; (df98 <uart_callback+0x198>)
    de16:	6818      	ldr	r0, [r3, #0]
    de18:	f018 fa3a 	bl	26290 <k_free>
		LOG_DBG("RX_DISABLED");
		break;
	default:
		break;
	}
}
    de1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    de20:	485e      	ldr	r0, [pc, #376]	; (df9c <uart_callback+0x19c>)
    de22:	f013 ba01 	b.w	21228 <z_impl_k_sem_give>
		k_free(uart_tx_buf);
    de26:	4b5c      	ldr	r3, [pc, #368]	; (df98 <uart_callback+0x198>)
    de28:	6818      	ldr	r0, [r3, #0]
    de2a:	f018 fa31 	bl	26290 <k_free>
    de2e:	485b      	ldr	r0, [pc, #364]	; (df9c <uart_callback+0x19c>)
    de30:	f013 f9fa 	bl	21228 <z_impl_k_sem_give>
}
    de34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    de38:	4959      	ldr	r1, [pc, #356]	; (dfa0 <uart_callback+0x1a0>)
    de3a:	4b5a      	ldr	r3, [pc, #360]	; (dfa4 <uart_callback+0x1a4>)
		LOG_INF("TX_ABORTED");
    de3c:	485a      	ldr	r0, [pc, #360]	; (dfa8 <uart_callback+0x1a8>)
    de3e:	1ac9      	subs	r1, r1, r3
    de40:	08c9      	lsrs	r1, r1, #3
    de42:	0189      	lsls	r1, r1, #6
    de44:	f041 0103 	orr.w	r1, r1, #3
    de48:	f015 bca5 	b.w	23796 <log_0>
	cmd_len += 1;
    de4c:	4d57      	ldr	r5, [pc, #348]	; (dfac <uart_callback+0x1ac>)
		uart_rx_handler(evt->data.rx.buf[0]);
    de4e:	6843      	ldr	r3, [r0, #4]
	cmd_len += 1;
    de50:	682a      	ldr	r2, [r5, #0]
		uart_rx_handler(evt->data.rx.buf[0]);
    de52:	781b      	ldrb	r3, [r3, #0]
	cmd_len += 1;
    de54:	1c54      	adds	r4, r2, #1
	switch (character) {
    de56:	2b22      	cmp	r3, #34	; 0x22
	cmd_len += 1;
    de58:	602c      	str	r4, [r5, #0]
	switch (character) {
    de5a:	d023      	beq.n	dea4 <uart_callback+0xa4>
    de5c:	2b7f      	cmp	r3, #127	; 0x7f
    de5e:	d001      	beq.n	de64 <uart_callback+0x64>
    de60:	2b08      	cmp	r3, #8
    de62:	d124      	bne.n	deae <uart_callback+0xae>
		pos = pos ? pos - 1 : 0;
    de64:	b102      	cbz	r2, de68 <uart_callback+0x68>
    de66:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    de68:	2c02      	cmp	r4, #2
    de6a:	bf38      	it	cc
    de6c:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    de6e:	2000      	movs	r0, #0
    de70:	494f      	ldr	r1, [pc, #316]	; (dfb0 <uart_callback+0x1b0>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    de72:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    de74:	5488      	strb	r0, [r1, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    de76:	602c      	str	r4, [r5, #0]
	if (inside_quotes) {
    de78:	494e      	ldr	r1, [pc, #312]	; (dfb4 <uart_callback+0x1b4>)
    de7a:	7809      	ldrb	r1, [r1, #0]
    de7c:	bb39      	cbnz	r1, dece <uart_callback+0xce>
	switch (term_mode) {
    de7e:	494e      	ldr	r1, [pc, #312]	; (dfb8 <uart_callback+0x1b8>)
    de80:	7809      	ldrb	r1, [r1, #0]
    de82:	2902      	cmp	r1, #2
    de84:	d052      	beq.n	df2c <uart_callback+0x12c>
    de86:	d934      	bls.n	def2 <uart_callback+0xf2>
    de88:	2903      	cmp	r1, #3
    de8a:	d057      	beq.n	df3c <uart_callback+0x13c>
    de8c:	4a44      	ldr	r2, [pc, #272]	; (dfa0 <uart_callback+0x1a0>)
    de8e:	4b45      	ldr	r3, [pc, #276]	; (dfa4 <uart_callback+0x1a4>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    de90:	484a      	ldr	r0, [pc, #296]	; (dfbc <uart_callback+0x1bc>)
    de92:	1ad2      	subs	r2, r2, r3
    de94:	08d2      	lsrs	r2, r2, #3
    de96:	0192      	lsls	r2, r2, #6
    de98:	f042 0201 	orr.w	r2, r2, #1
}
    de9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("RX_STOPPED (%d)", evt->data.rx_stop.reason);
    dea0:	f015 bc88 	b.w	237b4 <log_1>
		inside_quotes = !inside_quotes;
    dea4:	4843      	ldr	r0, [pc, #268]	; (dfb4 <uart_callback+0x1b4>)
    dea6:	7801      	ldrb	r1, [r0, #0]
    dea8:	f081 0101 	eor.w	r1, r1, #1
    deac:	7001      	strb	r1, [r0, #0]
		if (cmd_len > AT_MAX_CMD_LEN) {
    deae:	f640 268c 	movw	r6, #2700	; 0xa8c
    deb2:	42b4      	cmp	r4, r6
    deb4:	d90c      	bls.n	ded0 <uart_callback+0xd0>
    deb6:	493b      	ldr	r1, [pc, #236]	; (dfa4 <uart_callback+0x1a4>)
    deb8:	4a39      	ldr	r2, [pc, #228]	; (dfa0 <uart_callback+0x1a0>)
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    deba:	4841      	ldr	r0, [pc, #260]	; (dfc0 <uart_callback+0x1c0>)
    debc:	1a52      	subs	r2, r2, r1
    debe:	08d2      	lsrs	r2, r2, #3
    dec0:	0192      	lsls	r2, r2, #6
    dec2:	4619      	mov	r1, r3
    dec4:	f042 0201 	orr.w	r2, r2, #1
    dec8:	f015 fc74 	bl	237b4 <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    decc:	602e      	str	r6, [r5, #0]
}
    dece:	bd70      	pop	{r4, r5, r6, pc}
		} else if (cmd_len < 1) {
    ded0:	b964      	cbnz	r4, deec <uart_callback+0xec>
    ded2:	4b34      	ldr	r3, [pc, #208]	; (dfa4 <uart_callback+0x1a4>)
    ded4:	4a32      	ldr	r2, [pc, #200]	; (dfa0 <uart_callback+0x1a0>)
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    ded6:	4621      	mov	r1, r4
    ded8:	1ad2      	subs	r2, r2, r3
    deda:	08d2      	lsrs	r2, r2, #3
    dedc:	0192      	lsls	r2, r2, #6
    dede:	4839      	ldr	r0, [pc, #228]	; (dfc4 <uart_callback+0x1c4>)
    dee0:	f042 0201 	orr.w	r2, r2, #1
    dee4:	f015 fc66 	bl	237b4 <log_1>
			cmd_len = 0;
    dee8:	602c      	str	r4, [r5, #0]
			return;
    deea:	e7f0      	b.n	dece <uart_callback+0xce>
		at_buf[pos] = character;
    deec:	4930      	ldr	r1, [pc, #192]	; (dfb0 <uart_callback+0x1b0>)
    deee:	548b      	strb	r3, [r1, r2]
		break;
    def0:	e7c2      	b.n	de78 <uart_callback+0x78>
		if (character == termination[term_mode]) {
    def2:	4a35      	ldr	r2, [pc, #212]	; (dfc8 <uart_callback+0x1c8>)
    def4:	5c52      	ldrb	r2, [r2, r1]
    def6:	429a      	cmp	r2, r3
		if ((at_buf[pos - 1]) &&
    def8:	d1e9      	bne.n	dece <uart_callback+0xce>
	uart_rx_disable(uart_dev);
    defa:	4b34      	ldr	r3, [pc, #208]	; (dfcc <uart_callback+0x1cc>)
    defc:	6818      	ldr	r0, [r3, #0]
    defe:	f015 f8da 	bl	230b6 <uart_rx_disable>
    df02:	4933      	ldr	r1, [pc, #204]	; (dfd0 <uart_callback+0x1d0>)
    df04:	e8d1 3fef 	ldaex	r3, [r1]
    df08:	f043 0201 	orr.w	r2, r3, #1
    df0c:	e8c1 2fe0 	stlex	r0, r2, [r1]
    df10:	2800      	cmp	r0, #0
    df12:	d1f7      	bne.n	df04 <uart_callback+0x104>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    df14:	07db      	lsls	r3, r3, #31
    df16:	d403      	bmi.n	df20 <uart_callback+0x120>
		k_queue_append(&work_q->queue, work);
    df18:	482e      	ldr	r0, [pc, #184]	; (dfd4 <uart_callback+0x1d4>)
    df1a:	3908      	subs	r1, #8
    df1c:	f018 fa53 	bl	263c6 <k_queue_append>
	at_buf_len = cmd_len;
    df20:	682a      	ldr	r2, [r5, #0]
    df22:	4b2d      	ldr	r3, [pc, #180]	; (dfd8 <uart_callback+0x1d8>)
    df24:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    df26:	2300      	movs	r3, #0
    df28:	602b      	str	r3, [r5, #0]
    df2a:	e7d0      	b.n	dece <uart_callback+0xce>
		if ((at_buf[pos - 1]) &&
    df2c:	4920      	ldr	r1, [pc, #128]	; (dfb0 <uart_callback+0x1b0>)
    df2e:	440a      	add	r2, r1
    df30:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    df34:	2a00      	cmp	r2, #0
    df36:	d0ca      	beq.n	dece <uart_callback+0xce>
    df38:	2b0a      	cmp	r3, #10
    df3a:	e7dd      	b.n	def8 <uart_callback+0xf8>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    df3c:	491c      	ldr	r1, [pc, #112]	; (dfb0 <uart_callback+0x1b0>)
    df3e:	440a      	add	r2, r1
    df40:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    df44:	2a0d      	cmp	r2, #13
    df46:	d1c2      	bne.n	dece <uart_callback+0xce>
    df48:	e7f6      	b.n	df38 <uart_callback+0x138>
		err = uart_rx_buf_rsp(uart_dev, &uart_rx_buf[buf_num], 1);
    df4a:	4b20      	ldr	r3, [pc, #128]	; (dfcc <uart_callback+0x1cc>)
    df4c:	4c23      	ldr	r4, [pc, #140]	; (dfdc <uart_callback+0x1dc>)
    df4e:	6818      	ldr	r0, [r3, #0]
    df50:	7821      	ldrb	r1, [r4, #0]
static inline int uart_rx_buf_rsp(struct device *dev, u8_t *buf, size_t len)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->driver_api;

	return api->rx_buf_rsp(dev, buf, len);
    df52:	6883      	ldr	r3, [r0, #8]
    df54:	4d22      	ldr	r5, [pc, #136]	; (dfe0 <uart_callback+0x1e0>)
    df56:	2201      	movs	r2, #1
    df58:	4429      	add	r1, r5
    df5a:	691b      	ldr	r3, [r3, #16]
    df5c:	4798      	blx	r3
		if (err) {
    df5e:	4601      	mov	r1, r0
    df60:	b148      	cbz	r0, df76 <uart_callback+0x176>
    df62:	4a0f      	ldr	r2, [pc, #60]	; (dfa0 <uart_callback+0x1a0>)
    df64:	4b0f      	ldr	r3, [pc, #60]	; (dfa4 <uart_callback+0x1a4>)
			LOG_WRN("UART RX buf rsp: %d", err);
    df66:	481f      	ldr	r0, [pc, #124]	; (dfe4 <uart_callback+0x1e4>)
    df68:	1ad2      	subs	r2, r2, r3
    df6a:	08d2      	lsrs	r2, r2, #3
    df6c:	0192      	lsls	r2, r2, #6
    df6e:	f042 0202 	orr.w	r2, r2, #2
    df72:	f015 fc1f 	bl	237b4 <log_1>
		buf_num++;
    df76:	7823      	ldrb	r3, [r4, #0]
    df78:	3301      	adds	r3, #1
		buf_num %= UART_RX_LEN;
    df7a:	f003 0307 	and.w	r3, r3, #7
    df7e:	7023      	strb	r3, [r4, #0]
		break;
    df80:	e7a5      	b.n	dece <uart_callback+0xce>
    df82:	4a07      	ldr	r2, [pc, #28]	; (dfa0 <uart_callback+0x1a0>)
    df84:	4b07      	ldr	r3, [pc, #28]	; (dfa4 <uart_callback+0x1a4>)
		LOG_WRN("RX_STOPPED (%d)", evt->data.rx_stop.reason);
    df86:	7901      	ldrb	r1, [r0, #4]
    df88:	1ad2      	subs	r2, r2, r3
    df8a:	08d2      	lsrs	r2, r2, #3
    df8c:	0192      	lsls	r2, r2, #6
    df8e:	4816      	ldr	r0, [pc, #88]	; (dfe8 <uart_callback+0x1e8>)
    df90:	f042 0202 	orr.w	r2, r2, #2
    df94:	e782      	b.n	de9c <uart_callback+0x9c>
    df96:	bf00      	nop
    df98:	200214e0 	.word	0x200214e0
    df9c:	20020708 	.word	0x20020708
    dfa0:	00027b30 	.word	0x00027b30
    dfa4:	00027b20 	.word	0x00027b20
    dfa8:	000286d6 	.word	0x000286d6
    dfac:	200214cc 	.word	0x200214cc
    dfb0:	20027932 	.word	0x20027932
    dfb4:	20028e4b 	.word	0x20028e4b
    dfb8:	20028e4c 	.word	0x20028e4c
    dfbc:	0002871f 	.word	0x0002871f
    dfc0:	000286e1 	.word	0x000286e1
    dfc4:	00028701 	.word	0x00028701
    dfc8:	00028ad1 	.word	0x00028ad1
    dfcc:	200214dc 	.word	0x200214dc
    dfd0:	200214d8 	.word	0x200214d8
    dfd4:	20026d88 	.word	0x20026d88
    dfd8:	200214c8 	.word	0x200214c8
    dfdc:	20028e4a 	.word	0x20028e4a
    dfe0:	20028e4d 	.word	0x20028e4d
    dfe4:	0002873c 	.word	0x0002873c
    dfe8:	00028750 	.word	0x00028750

0000dfec <rsp_send>:
{
    dfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dfee:	4607      	mov	r7, r0
    dff0:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    dff2:	f04f 32ff 	mov.w	r2, #4294967295
    dff6:	f04f 33ff 	mov.w	r3, #4294967295
    dffa:	481b      	ldr	r0, [pc, #108]	; (e068 <rsp_send+0x7c>)
    dffc:	f013 f93a 	bl	21274 <z_impl_k_sem_take>
	uart_tx_buf = k_malloc(len);
    e000:	4628      	mov	r0, r5
    e002:	f012 fb9f 	bl	20744 <k_malloc>
    e006:	4e19      	ldr	r6, [pc, #100]	; (e06c <rsp_send+0x80>)
    e008:	4604      	mov	r4, r0
    e00a:	6030      	str	r0, [r6, #0]
	if (uart_tx_buf == NULL) {
    e00c:	b970      	cbnz	r0, e02c <rsp_send+0x40>
    e00e:	4918      	ldr	r1, [pc, #96]	; (e070 <rsp_send+0x84>)
    e010:	4b18      	ldr	r3, [pc, #96]	; (e074 <rsp_send+0x88>)
		LOG_WRN("No ram buffer");
    e012:	4819      	ldr	r0, [pc, #100]	; (e078 <rsp_send+0x8c>)
    e014:	1ac9      	subs	r1, r1, r3
    e016:	08c9      	lsrs	r1, r1, #3
    e018:	0189      	lsls	r1, r1, #6
    e01a:	f041 0102 	orr.w	r1, r1, #2
    e01e:	f015 fbba 	bl	23796 <log_0>
}
    e022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
    e026:	4810      	ldr	r0, [pc, #64]	; (e068 <rsp_send+0x7c>)
    e028:	f013 b8fe 	b.w	21228 <z_impl_k_sem_give>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e02c:	462a      	mov	r2, r5
    e02e:	4639      	mov	r1, r7
    e030:	f018 fce9 	bl	26a06 <memcpy>
	ret = uart_tx(uart_dev, uart_tx_buf, len, SYS_FOREVER_MS);
    e034:	4b11      	ldr	r3, [pc, #68]	; (e07c <rsp_send+0x90>)
    e036:	6818      	ldr	r0, [r3, #0]
	return api->tx(dev, buf, len, timeout);
    e038:	6883      	ldr	r3, [r0, #8]
    e03a:	4621      	mov	r1, r4
    e03c:	685f      	ldr	r7, [r3, #4]
    e03e:	462a      	mov	r2, r5
    e040:	f04f 33ff 	mov.w	r3, #4294967295
    e044:	47b8      	blx	r7
	if (ret) {
    e046:	4601      	mov	r1, r0
    e048:	b168      	cbz	r0, e066 <rsp_send+0x7a>
    e04a:	4b0a      	ldr	r3, [pc, #40]	; (e074 <rsp_send+0x88>)
    e04c:	4a08      	ldr	r2, [pc, #32]	; (e070 <rsp_send+0x84>)
		LOG_WRN("uart_tx failed: %d", ret);
    e04e:	480c      	ldr	r0, [pc, #48]	; (e080 <rsp_send+0x94>)
    e050:	1ad2      	subs	r2, r2, r3
    e052:	08d2      	lsrs	r2, r2, #3
    e054:	0192      	lsls	r2, r2, #6
    e056:	f042 0202 	orr.w	r2, r2, #2
    e05a:	f015 fbab 	bl	237b4 <log_1>
		k_free(uart_tx_buf);
    e05e:	6830      	ldr	r0, [r6, #0]
    e060:	f018 f916 	bl	26290 <k_free>
    e064:	e7dd      	b.n	e022 <rsp_send+0x36>
}
    e066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e068:	20020708 	.word	0x20020708
    e06c:	200214e0 	.word	0x200214e0
    e070:	00027b30 	.word	0x00027b30
    e074:	00027b20 	.word	0x00027b20
    e078:	00028760 	.word	0x00028760
    e07c:	200214dc 	.word	0x200214dc
    e080:	0002876e 	.word	0x0002876e

0000e084 <slm_at_host_init>:

int slm_at_host_init(void)
{
    e084:	e92d 48ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, fp, lr}
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;
	u32_t start_time;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    e088:	2203      	movs	r2, #3
    e08a:	4b76      	ldr	r3, [pc, #472]	; (e264 <slm_at_host_init+0x1e0>)
    e08c:	701a      	strb	r2, [r3, #0]
    e08e:	4876      	ldr	r0, [pc, #472]	; (e268 <slm_at_host_init+0x1e4>)
    e090:	f012 f946 	bl	20320 <z_impl_device_get_binding>
#else
	LOG_ERR("Unsupported UART instance");
	return -EINVAL;
#endif
	/* Initialize the UART module */
	uart_dev = device_get_binding(uart_dev_name);
    e094:	4c75      	ldr	r4, [pc, #468]	; (e26c <slm_at_host_init+0x1e8>)
    e096:	6020      	str	r0, [r4, #0]
	if (uart_dev == NULL) {
    e098:	b980      	cbnz	r0, e0bc <slm_at_host_init+0x38>
    e09a:	4b75      	ldr	r3, [pc, #468]	; (e270 <slm_at_host_init+0x1ec>)
    e09c:	4a75      	ldr	r2, [pc, #468]	; (e274 <slm_at_host_init+0x1f0>)
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    e09e:	4972      	ldr	r1, [pc, #456]	; (e268 <slm_at_host_init+0x1e4>)
    e0a0:	1ad2      	subs	r2, r2, r3
    e0a2:	08d2      	lsrs	r2, r2, #3
    e0a4:	0192      	lsls	r2, r2, #6
    e0a6:	4874      	ldr	r0, [pc, #464]	; (e278 <slm_at_host_init+0x1f4>)
    e0a8:	f042 0201 	orr.w	r2, r2, #1
    e0ac:	f015 fb82 	bl	237b4 <log_1>
		return -EINVAL;
    e0b0:	f06f 0415 	mvn.w	r4, #21
	k_sem_give(&tx_done);
	rsp_send(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);

	LOG_DBG("at_host init done");
	return err;
}
    e0b4:	4620      	mov	r0, r4
    e0b6:	b004      	add	sp, #16
    e0b8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	return z_impl_k_uptime_ticks();
    e0bc:	f018 fb21 	bl	26702 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    e0c0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    e0c4:	460b      	mov	r3, r1
    e0c6:	fba0 0106 	umull	r0, r1, r0, r6
    e0ca:	fb06 1103 	mla	r1, r6, r3, r1
    e0ce:	0bc7      	lsrs	r7, r0, #15
    e0d0:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
		err = uart_err_check(uart_dev);
    e0d4:	6820      	ldr	r0, [r4, #0]
static inline int z_impl_uart_err_check(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->err_check != NULL) {
    e0d6:	6883      	ldr	r3, [r0, #8]
    e0d8:	6a1b      	ldr	r3, [r3, #32]
    e0da:	2b00      	cmp	r3, #0
    e0dc:	f000 80aa 	beq.w	e234 <slm_at_host_init+0x1b0>
		return api->err_check(dev);
    e0e0:	4798      	blx	r3
		if (err) {
    e0e2:	4605      	mov	r5, r0
    e0e4:	2800      	cmp	r0, #0
    e0e6:	f000 80a5 	beq.w	e234 <slm_at_host_init+0x1b0>
    e0ea:	f018 fb0a 	bl	26702 <z_impl_k_uptime_ticks>
    e0ee:	fba0 bc06 	umull	fp, ip, r0, r6
    e0f2:	fb06 cc01 	mla	ip, r6, r1, ip
    e0f6:	ea4f 32db 	mov.w	r2, fp, lsr #15
    e0fa:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
			if (k_uptime_get_32() - start_time > 500) {
    e0fe:	1bd2      	subs	r2, r2, r7
    e100:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    e104:	d9e6      	bls.n	e0d4 <slm_at_host_init+0x50>
    e106:	4b5a      	ldr	r3, [pc, #360]	; (e270 <slm_at_host_init+0x1ec>)
    e108:	4a5a      	ldr	r2, [pc, #360]	; (e274 <slm_at_host_init+0x1f0>)
				LOG_ERR("UART check failed: %d. "
    e10a:	4629      	mov	r1, r5
    e10c:	1ad2      	subs	r2, r2, r3
    e10e:	08d2      	lsrs	r2, r2, #3
    e110:	0192      	lsls	r2, r2, #6
    e112:	485a      	ldr	r0, [pc, #360]	; (e27c <slm_at_host_init+0x1f8>)
    e114:	f042 0201 	orr.w	r2, r2, #1
    e118:	f015 fb4c 	bl	237b4 <log_1>
				return -EIO;
    e11c:	f06f 0404 	mvn.w	r4, #4
    e120:	e7c8      	b.n	e0b4 <slm_at_host_init+0x30>
	device_set_power_state(uart_dev, DEVICE_PM_ACTIVE_STATE,
    e122:	2501      	movs	r5, #1
    e124:	6820      	ldr	r0, [r4, #0]
 */
static inline int device_set_power_state(struct device *device,
					 u32_t device_power_state,
					 device_pm_cb cb, void *arg)
{
	return device->device_pm_control(device,
    e126:	9300      	str	r3, [sp, #0]
    e128:	4629      	mov	r1, r5
    e12a:	6906      	ldr	r6, [r0, #16]
    e12c:	9503      	str	r5, [sp, #12]
    e12e:	aa03      	add	r2, sp, #12
    e130:	47b0      	blx	r6
	buf_num = 1U;
    e132:	4b53      	ldr	r3, [pc, #332]	; (e280 <slm_at_host_init+0x1fc>)
	err = uart_rx_enable(uart_dev, &uart_rx_buf[0], 1, SYS_FOREVER_MS);
    e134:	6820      	ldr	r0, [r4, #0]
	buf_num = 1U;
    e136:	701d      	strb	r5, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
    e138:	6883      	ldr	r3, [r0, #8]
    e13a:	4952      	ldr	r1, [pc, #328]	; (e284 <slm_at_host_init+0x200>)
    e13c:	68dc      	ldr	r4, [r3, #12]
    e13e:	462a      	mov	r2, r5
    e140:	f04f 33ff 	mov.w	r3, #4294967295
    e144:	47a0      	blx	r4
	if (err) {
    e146:	4601      	mov	r1, r0
    e148:	b138      	cbz	r0, e15a <slm_at_host_init+0xd6>
    e14a:	4a4a      	ldr	r2, [pc, #296]	; (e274 <slm_at_host_init+0x1f0>)
    e14c:	4b48      	ldr	r3, [pc, #288]	; (e270 <slm_at_host_init+0x1ec>)
		LOG_ERR("Cannot enable rx: %d", err);
    e14e:	484e      	ldr	r0, [pc, #312]	; (e288 <slm_at_host_init+0x204>)
    e150:	1ad2      	subs	r2, r2, r3
    e152:	08d2      	lsrs	r2, r2, #3
    e154:	0192      	lsls	r2, r2, #6
    e156:	432a      	orrs	r2, r5
    e158:	e07f      	b.n	e25a <slm_at_host_init+0x1d6>
	err = at_notif_register_handler(NULL, response_handler);
    e15a:	494c      	ldr	r1, [pc, #304]	; (e28c <slm_at_host_init+0x208>)
    e15c:	f008 fba8 	bl	168b0 <at_notif_register_handler>
	if (err) {
    e160:	4604      	mov	r4, r0
    e162:	b158      	cbz	r0, e17c <slm_at_host_init+0xf8>
    e164:	4b42      	ldr	r3, [pc, #264]	; (e270 <slm_at_host_init+0x1ec>)
    e166:	4a43      	ldr	r2, [pc, #268]	; (e274 <slm_at_host_init+0x1f0>)
		LOG_ERR("Can't register handler err=%d", err);
    e168:	4601      	mov	r1, r0
    e16a:	1ad2      	subs	r2, r2, r3
    e16c:	08d2      	lsrs	r2, r2, #3
    e16e:	0192      	lsls	r2, r2, #6
    e170:	4847      	ldr	r0, [pc, #284]	; (e290 <slm_at_host_init+0x20c>)
    e172:	f042 0201 	orr.w	r2, r2, #1
    e176:	f015 fb1d 	bl	237b4 <log_1>
		return err;
    e17a:	e79b      	b.n	e0b4 <slm_at_host_init+0x30>
	err = slm_at_tcpip_init();
    e17c:	f001 fddc 	bl	fd38 <slm_at_tcpip_init>
	if (err) {
    e180:	4601      	mov	r1, r0
    e182:	b140      	cbz	r0, e196 <slm_at_host_init+0x112>
    e184:	4a3b      	ldr	r2, [pc, #236]	; (e274 <slm_at_host_init+0x1f0>)
    e186:	4b3a      	ldr	r3, [pc, #232]	; (e270 <slm_at_host_init+0x1ec>)
		LOG_ERR("TCPIP could not be initialized: %d", err);
    e188:	4842      	ldr	r0, [pc, #264]	; (e294 <slm_at_host_init+0x210>)
    e18a:	1ad2      	subs	r2, r2, r3
    e18c:	08d2      	lsrs	r2, r2, #3
    e18e:	0192      	lsls	r2, r2, #6
    e190:	f042 0201 	orr.w	r2, r2, #1
    e194:	e061      	b.n	e25a <slm_at_host_init+0x1d6>
	err = slm_at_udp_proxy_init();
    e196:	f004 f91d 	bl	123d4 <slm_at_udp_proxy_init>
	if (err) {
    e19a:	4601      	mov	r1, r0
    e19c:	b140      	cbz	r0, e1b0 <slm_at_host_init+0x12c>
    e19e:	4a35      	ldr	r2, [pc, #212]	; (e274 <slm_at_host_init+0x1f0>)
    e1a0:	4b33      	ldr	r3, [pc, #204]	; (e270 <slm_at_host_init+0x1ec>)
		LOG_ERR("UDP Server could not be initialized: %d", err);
    e1a2:	483d      	ldr	r0, [pc, #244]	; (e298 <slm_at_host_init+0x214>)
    e1a4:	1ad2      	subs	r2, r2, r3
    e1a6:	08d2      	lsrs	r2, r2, #3
    e1a8:	0192      	lsls	r2, r2, #6
    e1aa:	f042 0201 	orr.w	r2, r2, #1
    e1ae:	e054      	b.n	e25a <slm_at_host_init+0x1d6>
	err = slm_at_icmp_init();
    e1b0:	f002 f8f2 	bl	10398 <slm_at_icmp_init>
	if (err) {
    e1b4:	4601      	mov	r1, r0
    e1b6:	b140      	cbz	r0, e1ca <slm_at_host_init+0x146>
    e1b8:	4a2e      	ldr	r2, [pc, #184]	; (e274 <slm_at_host_init+0x1f0>)
    e1ba:	4b2d      	ldr	r3, [pc, #180]	; (e270 <slm_at_host_init+0x1ec>)
		LOG_ERR("ICMP could not be initialized: %d", err);
    e1bc:	4837      	ldr	r0, [pc, #220]	; (e29c <slm_at_host_init+0x218>)
    e1be:	1ad2      	subs	r2, r2, r3
    e1c0:	08d2      	lsrs	r2, r2, #3
    e1c2:	0192      	lsls	r2, r2, #6
    e1c4:	f042 0201 	orr.w	r2, r2, #1
    e1c8:	e047      	b.n	e25a <slm_at_host_init+0x1d6>
	err = slm_at_gps_init();
    e1ca:	f002 fbfb 	bl	109c4 <slm_at_gps_init>
	if (err) {
    e1ce:	4601      	mov	r1, r0
    e1d0:	b140      	cbz	r0, e1e4 <slm_at_host_init+0x160>
    e1d2:	4a28      	ldr	r2, [pc, #160]	; (e274 <slm_at_host_init+0x1f0>)
    e1d4:	4b26      	ldr	r3, [pc, #152]	; (e270 <slm_at_host_init+0x1ec>)
		LOG_ERR("GPS could not be initialized: %d", err);
    e1d6:	4832      	ldr	r0, [pc, #200]	; (e2a0 <slm_at_host_init+0x21c>)
    e1d8:	1ad2      	subs	r2, r2, r3
    e1da:	08d2      	lsrs	r2, r2, #3
    e1dc:	0192      	lsls	r2, r2, #6
    e1de:	f042 0201 	orr.w	r2, r2, #1
    e1e2:	e03a      	b.n	e25a <slm_at_host_init+0x1d6>
	err = slm_at_mqtt_init();
    e1e4:	f014 ffaa 	bl	2313c <slm_at_mqtt_init>
	if (err) {
    e1e8:	4601      	mov	r1, r0
    e1ea:	b140      	cbz	r0, e1fe <slm_at_host_init+0x17a>
    e1ec:	4a21      	ldr	r2, [pc, #132]	; (e274 <slm_at_host_init+0x1f0>)
    e1ee:	4b20      	ldr	r3, [pc, #128]	; (e270 <slm_at_host_init+0x1ec>)
		LOG_ERR("MQTT could not be initialized: %d", err);
    e1f0:	482c      	ldr	r0, [pc, #176]	; (e2a4 <slm_at_host_init+0x220>)
    e1f2:	1ad2      	subs	r2, r2, r3
    e1f4:	08d2      	lsrs	r2, r2, #3
    e1f6:	0192      	lsls	r2, r2, #6
    e1f8:	f042 0201 	orr.w	r2, r2, #1
    e1fc:	e02d      	b.n	e25a <slm_at_host_init+0x1d6>
	err = slm_at_ftp_init();
    e1fe:	f003 fb85 	bl	1190c <slm_at_ftp_init>
	if (err) {
    e202:	4604      	mov	r4, r0
    e204:	b148      	cbz	r0, e21a <slm_at_host_init+0x196>
    e206:	4a1b      	ldr	r2, [pc, #108]	; (e274 <slm_at_host_init+0x1f0>)
    e208:	4b19      	ldr	r3, [pc, #100]	; (e270 <slm_at_host_init+0x1ec>)
		LOG_ERR("FTP could not be initialized: %d", err);
    e20a:	4601      	mov	r1, r0
    e20c:	1ad2      	subs	r2, r2, r3
    e20e:	08d2      	lsrs	r2, r2, #3
    e210:	0192      	lsls	r2, r2, #6
    e212:	4825      	ldr	r0, [pc, #148]	; (e2a8 <slm_at_host_init+0x224>)
    e214:	f042 0201 	orr.w	r2, r2, #1
    e218:	e01f      	b.n	e25a <slm_at_host_init+0x1d6>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e21a:	4b24      	ldr	r3, [pc, #144]	; (e2ac <slm_at_host_init+0x228>)
    e21c:	4a24      	ldr	r2, [pc, #144]	; (e2b0 <slm_at_host_init+0x22c>)
    e21e:	6018      	str	r0, [r3, #0]
    e220:	e9c3 2001 	strd	r2, r0, [r3, #4]
	z_impl_k_sem_give(sem);
    e224:	4823      	ldr	r0, [pc, #140]	; (e2b4 <slm_at_host_init+0x230>)
    e226:	f012 ffff 	bl	21228 <z_impl_k_sem_give>
	rsp_send(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    e22a:	2107      	movs	r1, #7
    e22c:	4822      	ldr	r0, [pc, #136]	; (e2b8 <slm_at_host_init+0x234>)
    e22e:	f7ff fedd 	bl	dfec <rsp_send>
	return err;
    e232:	e73f      	b.n	e0b4 <slm_at_host_init+0x30>
	err = uart_callback_set(uart_dev, uart_callback, NULL);
    e234:	6820      	ldr	r0, [r4, #0]
	return api->callback_set(dev, callback, user_data);
    e236:	2200      	movs	r2, #0
    e238:	6883      	ldr	r3, [r0, #8]
    e23a:	4920      	ldr	r1, [pc, #128]	; (e2bc <slm_at_host_init+0x238>)
    e23c:	681b      	ldr	r3, [r3, #0]
    e23e:	4798      	blx	r3
	if (err) {
    e240:	4603      	mov	r3, r0
    e242:	2800      	cmp	r0, #0
    e244:	f43f af6d 	beq.w	e122 <slm_at_host_init+0x9e>
    e248:	4909      	ldr	r1, [pc, #36]	; (e270 <slm_at_host_init+0x1ec>)
    e24a:	4a0a      	ldr	r2, [pc, #40]	; (e274 <slm_at_host_init+0x1f0>)
		LOG_ERR("Cannot set callback: %d", err);
    e24c:	481c      	ldr	r0, [pc, #112]	; (e2c0 <slm_at_host_init+0x23c>)
    e24e:	1a52      	subs	r2, r2, r1
    e250:	4619      	mov	r1, r3
    e252:	08d2      	lsrs	r2, r2, #3
    e254:	0192      	lsls	r2, r2, #6
    e256:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("FTP could not be initialized: %d", err);
    e25a:	f015 faab 	bl	237b4 <log_1>
		return -EFAULT;
    e25e:	f06f 040d 	mvn.w	r4, #13
    e262:	e727      	b.n	e0b4 <slm_at_host_init+0x30>
    e264:	20028e4c 	.word	0x20028e4c
    e268:	00028781 	.word	0x00028781
    e26c:	200214dc 	.word	0x200214dc
    e270:	00027b20 	.word	0x00027b20
    e274:	00027b30 	.word	0x00027b30
    e278:	00028788 	.word	0x00028788
    e27c:	00028798 	.word	0x00028798
    e280:	20028e4a 	.word	0x20028e4a
    e284:	20028e4d 	.word	0x20028e4d
    e288:	000287e6 	.word	0x000287e6
    e28c:	000230bd 	.word	0x000230bd
    e290:	000287fb 	.word	0x000287fb
    e294:	00028819 	.word	0x00028819
    e298:	0002883c 	.word	0x0002883c
    e29c:	00028864 	.word	0x00028864
    e2a0:	00028886 	.word	0x00028886
    e2a4:	000288a7 	.word	0x000288a7
    e2a8:	000288c9 	.word	0x000288c9
    e2ac:	200214d0 	.word	0x200214d0
    e2b0:	0000e401 	.word	0x0000e401
    e2b4:	20020708 	.word	0x20020708
    e2b8:	000288ea 	.word	0x000288ea
    e2bc:	0000de01 	.word	0x0000de01
    e2c0:	000287ce 	.word	0x000287ce

0000e2c4 <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
    e2c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	err = slm_at_tcpip_uninit();
    e2c6:	f014 ff06 	bl	230d6 <slm_at_tcpip_uninit>
	if (err) {
    e2ca:	4601      	mov	r1, r0
    e2cc:	b148      	cbz	r0, e2e2 <slm_at_host_uninit+0x1e>
    e2ce:	4a40      	ldr	r2, [pc, #256]	; (e3d0 <slm_at_host_uninit+0x10c>)
    e2d0:	4b40      	ldr	r3, [pc, #256]	; (e3d4 <slm_at_host_uninit+0x110>)
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
    e2d2:	4841      	ldr	r0, [pc, #260]	; (e3d8 <slm_at_host_uninit+0x114>)
    e2d4:	1ad2      	subs	r2, r2, r3
    e2d6:	08d2      	lsrs	r2, r2, #3
    e2d8:	0192      	lsls	r2, r2, #6
    e2da:	f042 0202 	orr.w	r2, r2, #2
    e2de:	f015 fa69 	bl	237b4 <log_1>
	if (err) {
		LOG_WRN("TCP Server could not be uninitialized: %d", err);
	}
#endif
#if defined(CONFIG_SLM_UDP_PROXY)
	err = slm_at_udp_proxy_uninit();
    e2e2:	f004 f887 	bl	123f4 <slm_at_udp_proxy_uninit>
	if (err) {
    e2e6:	4601      	mov	r1, r0
    e2e8:	b148      	cbz	r0, e2fe <slm_at_host_uninit+0x3a>
    e2ea:	4a39      	ldr	r2, [pc, #228]	; (e3d0 <slm_at_host_uninit+0x10c>)
    e2ec:	4b39      	ldr	r3, [pc, #228]	; (e3d4 <slm_at_host_uninit+0x110>)
		LOG_WRN("UDP Server could not be uninitialized: %d", err);
    e2ee:	483b      	ldr	r0, [pc, #236]	; (e3dc <slm_at_host_uninit+0x118>)
    e2f0:	1ad2      	subs	r2, r2, r3
    e2f2:	08d2      	lsrs	r2, r2, #3
    e2f4:	0192      	lsls	r2, r2, #6
    e2f6:	f042 0202 	orr.w	r2, r2, #2
    e2fa:	f015 fa5b 	bl	237b4 <log_1>
	}
#endif
	err = slm_at_icmp_uninit();
    e2fe:	f014 ff1b 	bl	23138 <slm_at_icmp_uninit>
	if (err) {
    e302:	4601      	mov	r1, r0
    e304:	b148      	cbz	r0, e31a <slm_at_host_uninit+0x56>
    e306:	4a32      	ldr	r2, [pc, #200]	; (e3d0 <slm_at_host_uninit+0x10c>)
    e308:	4b32      	ldr	r3, [pc, #200]	; (e3d4 <slm_at_host_uninit+0x110>)
		LOG_WRN("ICMP could not be uninitialized: %d", err);
    e30a:	4835      	ldr	r0, [pc, #212]	; (e3e0 <slm_at_host_uninit+0x11c>)
    e30c:	1ad2      	subs	r2, r2, r3
    e30e:	08d2      	lsrs	r2, r2, #3
    e310:	0192      	lsls	r2, r2, #6
    e312:	f042 0202 	orr.w	r2, r2, #2
    e316:	f015 fa4d 	bl	237b4 <log_1>
	}
	err = slm_at_gps_uninit();
    e31a:	f002 fb61 	bl	109e0 <slm_at_gps_uninit>
	if (err) {
    e31e:	4601      	mov	r1, r0
    e320:	b148      	cbz	r0, e336 <slm_at_host_uninit+0x72>
    e322:	4a2b      	ldr	r2, [pc, #172]	; (e3d0 <slm_at_host_uninit+0x10c>)
    e324:	4b2b      	ldr	r3, [pc, #172]	; (e3d4 <slm_at_host_uninit+0x110>)
		LOG_WRN("GPS could not be uninitialized: %d", err);
    e326:	482f      	ldr	r0, [pc, #188]	; (e3e4 <slm_at_host_uninit+0x120>)
    e328:	1ad2      	subs	r2, r2, r3
    e32a:	08d2      	lsrs	r2, r2, #3
    e32c:	0192      	lsls	r2, r2, #6
    e32e:	f042 0202 	orr.w	r2, r2, #2
    e332:	f015 fa3f 	bl	237b4 <log_1>
	}
	err = slm_at_mqtt_uninit();
    e336:	f002 fe6d 	bl	11014 <slm_at_mqtt_uninit>
	if (err) {
    e33a:	4601      	mov	r1, r0
    e33c:	b148      	cbz	r0, e352 <slm_at_host_uninit+0x8e>
    e33e:	4a24      	ldr	r2, [pc, #144]	; (e3d0 <slm_at_host_uninit+0x10c>)
    e340:	4b24      	ldr	r3, [pc, #144]	; (e3d4 <slm_at_host_uninit+0x110>)
		LOG_WRN("MQTT could not be uninitialized: %d", err);
    e342:	4829      	ldr	r0, [pc, #164]	; (e3e8 <slm_at_host_uninit+0x124>)
    e344:	1ad2      	subs	r2, r2, r3
    e346:	08d2      	lsrs	r2, r2, #3
    e348:	0192      	lsls	r2, r2, #6
    e34a:	f042 0202 	orr.w	r2, r2, #2
    e34e:	f015 fa31 	bl	237b4 <log_1>
	}
	err = slm_at_ftp_uninit();
    e352:	f014 ff23 	bl	2319c <slm_at_ftp_uninit>
	if (err) {
    e356:	4601      	mov	r1, r0
    e358:	b148      	cbz	r0, e36e <slm_at_host_uninit+0xaa>
    e35a:	4a1d      	ldr	r2, [pc, #116]	; (e3d0 <slm_at_host_uninit+0x10c>)
    e35c:	4b1d      	ldr	r3, [pc, #116]	; (e3d4 <slm_at_host_uninit+0x110>)
		LOG_WRN("FTP could not be uninitialized: %d", err);
    e35e:	4823      	ldr	r0, [pc, #140]	; (e3ec <slm_at_host_uninit+0x128>)
    e360:	1ad2      	subs	r2, r2, r3
    e362:	08d2      	lsrs	r2, r2, #3
    e364:	0192      	lsls	r2, r2, #6
    e366:	f042 0202 	orr.w	r2, r2, #2
    e36a:	f015 fa23 	bl	237b4 <log_1>
	}
	err = at_notif_deregister_handler(NULL, response_handler);
    e36e:	4920      	ldr	r1, [pc, #128]	; (e3f0 <slm_at_host_uninit+0x12c>)
    e370:	2000      	movs	r0, #0
    e372:	f008 fae7 	bl	16944 <at_notif_deregister_handler>
	if (err) {
    e376:	4601      	mov	r1, r0
    e378:	b148      	cbz	r0, e38e <slm_at_host_uninit+0xca>
    e37a:	4a15      	ldr	r2, [pc, #84]	; (e3d0 <slm_at_host_uninit+0x10c>)
    e37c:	4b15      	ldr	r3, [pc, #84]	; (e3d4 <slm_at_host_uninit+0x110>)
		LOG_WRN("Can't deregister handler: %d", err);
    e37e:	481d      	ldr	r0, [pc, #116]	; (e3f4 <slm_at_host_uninit+0x130>)
    e380:	1ad2      	subs	r2, r2, r3
    e382:	08d2      	lsrs	r2, r2, #3
    e384:	0192      	lsls	r2, r2, #6
    e386:	f042 0202 	orr.w	r2, r2, #2
    e38a:	f015 fa13 	bl	237b4 <log_1>
	}

	/* Power off UART module */
	uart_rx_disable(uart_dev);
    e38e:	4c1a      	ldr	r4, [pc, #104]	; (e3f8 <slm_at_host_uninit+0x134>)
    e390:	6820      	ldr	r0, [r4, #0]
    e392:	f014 fe90 	bl	230b6 <uart_rx_disable>
	return z_impl_k_sleep(timeout);
    e396:	2100      	movs	r1, #0
    e398:	f640 40cd 	movw	r0, #3277	; 0xccd
    e39c:	f012 feda 	bl	21154 <z_impl_k_sleep>
	k_sleep(K_MSEC(100));
	err = device_set_power_state(uart_dev, DEVICE_PM_OFF_STATE,
    e3a0:	2305      	movs	r3, #5
    e3a2:	9303      	str	r3, [sp, #12]
    e3a4:	2300      	movs	r3, #0
    e3a6:	6820      	ldr	r0, [r4, #0]
    e3a8:	9300      	str	r3, [sp, #0]
    e3aa:	2101      	movs	r1, #1
    e3ac:	6904      	ldr	r4, [r0, #16]
    e3ae:	aa03      	add	r2, sp, #12
    e3b0:	47a0      	blx	r4
				NULL, NULL);
	if (err) {
    e3b2:	4601      	mov	r1, r0
    e3b4:	b148      	cbz	r0, e3ca <slm_at_host_uninit+0x106>
    e3b6:	4a06      	ldr	r2, [pc, #24]	; (e3d0 <slm_at_host_uninit+0x10c>)
    e3b8:	4b06      	ldr	r3, [pc, #24]	; (e3d4 <slm_at_host_uninit+0x110>)
		LOG_WRN("Can't power off uart: %d", err);
    e3ba:	4810      	ldr	r0, [pc, #64]	; (e3fc <slm_at_host_uninit+0x138>)
    e3bc:	1ad2      	subs	r2, r2, r3
    e3be:	08d2      	lsrs	r2, r2, #3
    e3c0:	0192      	lsls	r2, r2, #6
    e3c2:	f042 0202 	orr.w	r2, r2, #2
    e3c6:	f015 f9f5 	bl	237b4 <log_1>
	}

	LOG_DBG("at_host uninit done");
}
    e3ca:	b004      	add	sp, #16
    e3cc:	bd10      	pop	{r4, pc}
    e3ce:	bf00      	nop
    e3d0:	00027b30 	.word	0x00027b30
    e3d4:	00027b20 	.word	0x00027b20
    e3d8:	000288f2 	.word	0x000288f2
    e3dc:	00028917 	.word	0x00028917
    e3e0:	00028941 	.word	0x00028941
    e3e4:	00028965 	.word	0x00028965
    e3e8:	00028988 	.word	0x00028988
    e3ec:	000289ac 	.word	0x000289ac
    e3f0:	000230bd 	.word	0x000230bd
    e3f4:	000289cf 	.word	0x000289cf
    e3f8:	200214dc 	.word	0x200214dc
    e3fc:	000289ec 	.word	0x000289ec

0000e400 <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    e400:	f640 228b 	movw	r2, #2699	; 0xa8b
    e404:	4b97      	ldr	r3, [pc, #604]	; (e664 <cmd_send+0x264>)
{
    e406:	b570      	push	{r4, r5, r6, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    e408:	681b      	ldr	r3, [r3, #0]
    e40a:	4c97      	ldr	r4, [pc, #604]	; (e668 <cmd_send+0x268>)
    e40c:	4293      	cmp	r3, r2
    e40e:	bf28      	it	cs
    e410:	4613      	movcs	r3, r2
    e412:	2200      	movs	r2, #0
{
    e414:	b094      	sub	sp, #80	; 0x50
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
    e416:	4620      	mov	r0, r4
    e418:	4994      	ldr	r1, [pc, #592]	; (e66c <cmd_send+0x26c>)
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    e41a:	54e2      	strb	r2, [r4, r3]
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLMVER)) {
    e41c:	f7ff fc98 	bl	dd50 <slm_util_cmd_casecmp>
    e420:	b120      	cbz	r0, e42c <cmd_send+0x2c>
		rsp_send(SLM_VERSION, sizeof(SLM_VERSION) - 1);
    e422:	210f      	movs	r1, #15
    e424:	4892      	ldr	r0, [pc, #584]	; (e670 <cmd_send+0x270>)
		rsp_send(buf, strlen(buf));
    e426:	f7ff fde1 	bl	dfec <rsp_send>
		rsp_send(OK_STR, sizeof(OK_STR) - 1);
    e42a:	e02a      	b.n	e482 <cmd_send+0x82>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_CLAC)) {
    e42c:	4620      	mov	r0, r4
    e42e:	4991      	ldr	r1, [pc, #580]	; (e674 <cmd_send+0x274>)
    e430:	f7ff fc8e 	bl	dd50 <slm_util_cmd_casecmp>
    e434:	4605      	mov	r5, r0
    e436:	2800      	cmp	r0, #0
    e438:	d049      	beq.n	e4ce <cmd_send+0xce>
	rsp_send(AT_CMD_SLMVER, sizeof(AT_CMD_SLMVER) - 1);
    e43a:	210a      	movs	r1, #10
    e43c:	488b      	ldr	r0, [pc, #556]	; (e66c <cmd_send+0x26c>)
    e43e:	f7ff fdd5 	bl	dfec <rsp_send>
	rsp_send("\r\n", 2);
    e442:	2102      	movs	r1, #2
    e444:	488c      	ldr	r0, [pc, #560]	; (e678 <cmd_send+0x278>)
    e446:	f7ff fdd1 	bl	dfec <rsp_send>
	rsp_send(AT_CMD_SLEEP, sizeof(AT_CMD_SLEEP) - 1);
    e44a:	2109      	movs	r1, #9
    e44c:	488b      	ldr	r0, [pc, #556]	; (e67c <cmd_send+0x27c>)
    e44e:	f7ff fdcd 	bl	dfec <rsp_send>
	rsp_send("\r\n", 2);
    e452:	2102      	movs	r1, #2
    e454:	4888      	ldr	r0, [pc, #544]	; (e678 <cmd_send+0x278>)
    e456:	f7ff fdc9 	bl	dfec <rsp_send>
	rsp_send(AT_CMD_CLAC, sizeof(AT_CMD_CLAC) - 1);
    e45a:	2108      	movs	r1, #8
    e45c:	4885      	ldr	r0, [pc, #532]	; (e674 <cmd_send+0x274>)
    e45e:	f7ff fdc5 	bl	dfec <rsp_send>
	rsp_send("\r\n", 2);
    e462:	2102      	movs	r1, #2
    e464:	4884      	ldr	r0, [pc, #528]	; (e678 <cmd_send+0x278>)
    e466:	f7ff fdc1 	bl	dfec <rsp_send>
	slm_at_tcpip_clac();
    e46a:	f001 fc43 	bl	fcf4 <slm_at_tcpip_clac>
	slm_at_udp_proxy_clac();
    e46e:	f003 ff8f 	bl	12390 <slm_at_udp_proxy_clac>
	slm_at_icmp_clac();
    e472:	f001 ff75 	bl	10360 <slm_at_icmp_clac>
	slm_at_gps_clac();
    e476:	f002 fa89 	bl	1098c <slm_at_gps_clac>
	slm_at_mqtt_clac();
    e47a:	f002 fda9 	bl	10fd0 <slm_at_mqtt_clac>
	slm_at_ftp_clac();
    e47e:	f003 fa29 	bl	118d4 <slm_at_ftp_clac>
		rsp_send(OK_STR, sizeof(OK_STR) - 1);
    e482:	2104      	movs	r1, #4
    e484:	487e      	ldr	r0, [pc, #504]	; (e680 <cmd_send+0x280>)
		rsp_send(str, ++chars);
    e486:	f7ff fdb1 	bl	dfec <rsp_send>
    e48a:	2100      	movs	r1, #0
    e48c:	f640 40cd 	movw	r0, #3277	; 0xccd
    e490:	f012 fe60 	bl	21154 <z_impl_k_sleep>
	buf_num = 1U;
    e494:	2201      	movs	r2, #1
    e496:	4b7b      	ldr	r3, [pc, #492]	; (e684 <cmd_send+0x284>)
    e498:	701a      	strb	r2, [r3, #0]
	err = uart_rx_enable(uart_dev, &uart_rx_buf[0], 1, SYS_FOREVER_MS);
    e49a:	4b7b      	ldr	r3, [pc, #492]	; (e688 <cmd_send+0x288>)
    e49c:	6818      	ldr	r0, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
    e49e:	6883      	ldr	r3, [r0, #8]
    e4a0:	497a      	ldr	r1, [pc, #488]	; (e68c <cmd_send+0x28c>)
    e4a2:	68dc      	ldr	r4, [r3, #12]
    e4a4:	f04f 33ff 	mov.w	r3, #4294967295
    e4a8:	47a0      	blx	r4
	if (err) {
    e4aa:	4601      	mov	r1, r0
    e4ac:	2800      	cmp	r0, #0
    e4ae:	d04f      	beq.n	e550 <cmd_send+0x150>
    e4b0:	4b77      	ldr	r3, [pc, #476]	; (e690 <cmd_send+0x290>)
    e4b2:	4a78      	ldr	r2, [pc, #480]	; (e694 <cmd_send+0x294>)
		LOG_ERR("UART RX failed: %d", err);
    e4b4:	4878      	ldr	r0, [pc, #480]	; (e698 <cmd_send+0x298>)
    e4b6:	1ad2      	subs	r2, r2, r3
    e4b8:	08d2      	lsrs	r2, r2, #3
    e4ba:	0192      	lsls	r2, r2, #6
    e4bc:	f042 0201 	orr.w	r2, r2, #1
    e4c0:	f015 f978 	bl	237b4 <log_1>
		rsp_send(FATAL_STR, sizeof(FATAL_STR) - 1);
    e4c4:	210d      	movs	r1, #13
    e4c6:	4875      	ldr	r0, [pc, #468]	; (e69c <cmd_send+0x29c>)
    e4c8:	f7ff fd90 	bl	dfec <rsp_send>
    e4cc:	e040      	b.n	e550 <cmd_send+0x150>
	if (slm_util_cmd_casecmp(at_buf, AT_CMD_SLEEP)) {
    e4ce:	4620      	mov	r0, r4
    e4d0:	496a      	ldr	r1, [pc, #424]	; (e67c <cmd_send+0x27c>)
    e4d2:	f7ff fc3d 	bl	dd50 <slm_util_cmd_casecmp>
    e4d6:	2800      	cmp	r0, #0
    e4d8:	d058      	beq.n	e58c <cmd_send+0x18c>
	ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
    e4da:	4629      	mov	r1, r5
    e4dc:	4620      	mov	r0, r4
    e4de:	4a70      	ldr	r2, [pc, #448]	; (e6a0 <cmd_send+0x2a0>)
    e4e0:	f017 fca8 	bl	25e34 <at_parser_params_from_str>
	if (ret < 0) {
    e4e4:	1e06      	subs	r6, r0, #0
    e4e6:	da0d      	bge.n	e504 <cmd_send+0x104>
    e4e8:	4a6a      	ldr	r2, [pc, #424]	; (e694 <cmd_send+0x294>)
    e4ea:	4b69      	ldr	r3, [pc, #420]	; (e690 <cmd_send+0x290>)
		LOG_ERR("Failed to parse AT command %d", ret);
    e4ec:	4631      	mov	r1, r6
    e4ee:	1ad2      	subs	r2, r2, r3
    e4f0:	08d2      	lsrs	r2, r2, #3
    e4f2:	0192      	lsls	r2, r2, #6
    e4f4:	486b      	ldr	r0, [pc, #428]	; (e6a4 <cmd_send+0x2a4>)
    e4f6:	f042 0201 	orr.w	r2, r2, #1
    e4fa:	f015 f95b 	bl	237b4 <log_1>
		rsp_send(ERROR_STR, sizeof(ERROR_STR) - 1);
    e4fe:	2107      	movs	r1, #7
    e500:	4869      	ldr	r0, [pc, #420]	; (e6a8 <cmd_send+0x2a8>)
    e502:	e7c0      	b.n	e486 <cmd_send+0x86>
	type = at_parser_cmd_type_get(at_cmd);
    e504:	4620      	mov	r0, r4
    e506:	f017 fc98 	bl	25e3a <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    e50a:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
    e50c:	4604      	mov	r4, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    e50e:	d128      	bne.n	e562 <cmd_send+0x162>
		if (at_params_valid_count_get(&at_param_list) > 1) {
    e510:	4863      	ldr	r0, [pc, #396]	; (e6a0 <cmd_send+0x2a0>)
		shutdown_mode = SHUTDOWN_MODE_IDLE;
    e512:	f8ad 5010 	strh.w	r5, [sp, #16]
		if (at_params_valid_count_get(&at_param_list) > 1) {
    e516:	f017 fdd5 	bl	260c4 <at_params_valid_count_get>
    e51a:	2801      	cmp	r0, #1
    e51c:	d911      	bls.n	e542 <cmd_send+0x142>
			ret = at_params_short_get(&at_param_list, 1,
    e51e:	4621      	mov	r1, r4
    e520:	485f      	ldr	r0, [pc, #380]	; (e6a0 <cmd_send+0x2a0>)
    e522:	aa04      	add	r2, sp, #16
    e524:	f017 fd86 	bl	26034 <at_params_short_get>
			if (ret < 0) {
    e528:	2800      	cmp	r0, #0
    e52a:	da0a      	bge.n	e542 <cmd_send+0x142>
    e52c:	4b58      	ldr	r3, [pc, #352]	; (e690 <cmd_send+0x290>)
    e52e:	4959      	ldr	r1, [pc, #356]	; (e694 <cmd_send+0x294>)
			LOG_ERR("AT parameter error");
    e530:	485e      	ldr	r0, [pc, #376]	; (e6ac <cmd_send+0x2ac>)
    e532:	1ac9      	subs	r1, r1, r3
    e534:	08c9      	lsrs	r1, r1, #3
    e536:	0189      	lsls	r1, r1, #6
    e538:	f041 0101 	orr.w	r1, r1, #1
    e53c:	f015 f92b 	bl	23796 <log_0>
		if (err) {
    e540:	e7dd      	b.n	e4fe <cmd_send+0xfe>
		if (shutdown_mode == SHUTDOWN_MODE_IDLE) {
    e542:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e546:	b92b      	cbnz	r3, e554 <cmd_send+0x154>
			slm_at_host_uninit();
    e548:	f7ff febc 	bl	e2c4 <slm_at_host_uninit>
			enter_idle();
    e54c:	f7ff fad2 	bl	daf4 <enter_idle>
}
    e550:	b014      	add	sp, #80	; 0x50
    e552:	bd70      	pop	{r4, r5, r6, pc}
		} else if (shutdown_mode == SHUTDOWN_MODE_SLEEP) {
    e554:	2b01      	cmp	r3, #1
    e556:	d1e9      	bne.n	e52c <cmd_send+0x12c>
			slm_at_host_uninit();
    e558:	f7ff feb4 	bl	e2c4 <slm_at_host_uninit>
			enter_sleep();
    e55c:	f7ff fb28 	bl	dbb0 <enter_sleep>
		if (err) {
    e560:	e78f      	b.n	e482 <cmd_send+0x82>
	if (type == AT_CMD_TYPE_TEST_COMMAND) {
    e562:	2803      	cmp	r0, #3
    e564:	d10e      	bne.n	e584 <cmd_send+0x184>
		sprintf(buf, "#XSLEEP: (%d, %d)\r\n", SHUTDOWN_MODE_IDLE,
    e566:	2301      	movs	r3, #1
    e568:	4629      	mov	r1, r5
    e56a:	2240      	movs	r2, #64	; 0x40
    e56c:	e9cd 5300 	strd	r5, r3, [sp]
    e570:	a804      	add	r0, sp, #16
    e572:	4b4f      	ldr	r3, [pc, #316]	; (e6b0 <cmd_send+0x2b0>)
    e574:	f018 fb9e 	bl	26cb4 <__sprintf_chk>
		rsp_send(buf, strlen(buf));
    e578:	a804      	add	r0, sp, #16
    e57a:	f7fe fc79 	bl	ce70 <strlen>
    e57e:	4601      	mov	r1, r0
    e580:	a804      	add	r0, sp, #16
    e582:	e750      	b.n	e426 <cmd_send+0x26>
		if (err) {
    e584:	2e00      	cmp	r6, #0
    e586:	f43f af7c 	beq.w	e482 <cmd_send+0x82>
    e58a:	e7b8      	b.n	e4fe <cmd_send+0xfe>
	err = slm_at_tcpip_parse(at_buf);
    e58c:	4620      	mov	r0, r4
    e58e:	f001 fb75 	bl	fc7c <slm_at_tcpip_parse>
	if (err == 0) {
    e592:	2800      	cmp	r0, #0
    e594:	f43f af75 	beq.w	e482 <cmd_send+0x82>
	} else if (err != -ENOTSUP) {
    e598:	3086      	adds	r0, #134	; 0x86
    e59a:	d1b0      	bne.n	e4fe <cmd_send+0xfe>
	err = slm_at_udp_proxy_parse(at_buf);
    e59c:	4620      	mov	r0, r4
    e59e:	f003 feaf 	bl	12300 <slm_at_udp_proxy_parse>
	if (err == 0) {
    e5a2:	2800      	cmp	r0, #0
    e5a4:	f43f af6d 	beq.w	e482 <cmd_send+0x82>
	} else if (err != -ENOTSUP) {
    e5a8:	3086      	adds	r0, #134	; 0x86
    e5aa:	d1a8      	bne.n	e4fe <cmd_send+0xfe>
	err = slm_at_icmp_parse(at_buf);
    e5ac:	4620      	mov	r0, r4
    e5ae:	f001 fea9 	bl	10304 <slm_at_icmp_parse>
	if (err == 0) {
    e5b2:	2800      	cmp	r0, #0
    e5b4:	f43f af69 	beq.w	e48a <cmd_send+0x8a>
	} else if (err != -ENOTSUP) {
    e5b8:	3086      	adds	r0, #134	; 0x86
    e5ba:	d1a0      	bne.n	e4fe <cmd_send+0xfe>
	err = slm_at_gps_parse(at_buf);
    e5bc:	4620      	mov	r0, r4
    e5be:	f002 f843 	bl	10648 <slm_at_gps_parse>
	if (err == 0) {
    e5c2:	2800      	cmp	r0, #0
    e5c4:	f43f af5d 	beq.w	e482 <cmd_send+0x82>
	} else if (err != -ENOTSUP) {
    e5c8:	3086      	adds	r0, #134	; 0x86
    e5ca:	d198      	bne.n	e4fe <cmd_send+0xfe>
	err = slm_at_mqtt_parse(at_buf);
    e5cc:	4826      	ldr	r0, [pc, #152]	; (e668 <cmd_send+0x268>)
    e5ce:	f002 fcc3 	bl	10f58 <slm_at_mqtt_parse>
	if (err == 0) {
    e5d2:	2800      	cmp	r0, #0
    e5d4:	f43f af55 	beq.w	e482 <cmd_send+0x82>
	} else if (err != -ENOTSUP) {
    e5d8:	3086      	adds	r0, #134	; 0x86
    e5da:	d190      	bne.n	e4fe <cmd_send+0xfe>
	err = slm_at_ftp_parse(at_buf);
    e5dc:	4822      	ldr	r0, [pc, #136]	; (e668 <cmd_send+0x268>)
    e5de:	f003 f91d 	bl	1181c <slm_at_ftp_parse>
	if (err == 0) {
    e5e2:	2800      	cmp	r0, #0
    e5e4:	f43f af4d 	beq.w	e482 <cmd_send+0x82>
	} else if (err != -ENOTSUP) {
    e5e8:	3086      	adds	r0, #134	; 0x86
    e5ea:	d188      	bne.n	e4fe <cmd_send+0xfe>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    e5ec:	4931      	ldr	r1, [pc, #196]	; (e6b4 <cmd_send+0x2b4>)
    e5ee:	f640 228c 	movw	r2, #2700	; 0xa8c
    e5f2:	481d      	ldr	r0, [pc, #116]	; (e668 <cmd_send+0x268>)
    e5f4:	f10d 030f 	add.w	r3, sp, #15
    e5f8:	f008 f89c 	bl	16734 <at_cmd_write>
	if (err < 0) {
    e5fc:	1e01      	subs	r1, r0, #0
    e5fe:	da0d      	bge.n	e61c <cmd_send+0x21c>
    e600:	4b23      	ldr	r3, [pc, #140]	; (e690 <cmd_send+0x290>)
    e602:	4a24      	ldr	r2, [pc, #144]	; (e694 <cmd_send+0x294>)
		LOG_ERR("AT command error: %d", err);
    e604:	482c      	ldr	r0, [pc, #176]	; (e6b8 <cmd_send+0x2b8>)
    e606:	1ad2      	subs	r2, r2, r3
    e608:	08d2      	lsrs	r2, r2, #3
    e60a:	0192      	lsls	r2, r2, #6
    e60c:	f042 0201 	orr.w	r2, r2, #1
    e610:	f015 f8d0 	bl	237b4 <log_1>
		state = AT_CMD_ERROR;
    e614:	2301      	movs	r3, #1
    e616:	f88d 300f 	strb.w	r3, [sp, #15]
	switch (state) {
    e61a:	e770      	b.n	e4fe <cmd_send+0xfe>
    e61c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e620:	2b03      	cmp	r3, #3
    e622:	f63f af32 	bhi.w	e48a <cmd_send+0x8a>
    e626:	a201      	add	r2, pc, #4	; (adr r2, e62c <cmd_send+0x22c>)
    e628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e62c:	0000e63d 	.word	0x0000e63d
    e630:	0000e4ff 	.word	0x0000e4ff
    e634:	0000e649 	.word	0x0000e649
    e638:	0000e65d 	.word	0x0000e65d
		rsp_send(buf, strlen(buf));
    e63c:	481d      	ldr	r0, [pc, #116]	; (e6b4 <cmd_send+0x2b4>)
    e63e:	f7fe fc17 	bl	ce70 <strlen>
    e642:	4601      	mov	r1, r0
    e644:	481b      	ldr	r0, [pc, #108]	; (e6b4 <cmd_send+0x2b4>)
    e646:	e6ee      	b.n	e426 <cmd_send+0x26>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    e648:	4b1c      	ldr	r3, [pc, #112]	; (e6bc <cmd_send+0x2bc>)
    e64a:	9100      	str	r1, [sp, #0]
		chars = sprintf(str, "+CME: %d\r\n", err);
    e64c:	2100      	movs	r1, #0
    e64e:	2218      	movs	r2, #24
    e650:	a804      	add	r0, sp, #16
    e652:	f018 fb2f 	bl	26cb4 <__sprintf_chk>
		rsp_send(str, ++chars);
    e656:	1c41      	adds	r1, r0, #1
    e658:	a804      	add	r0, sp, #16
    e65a:	e714      	b.n	e486 <cmd_send+0x86>
		chars = sprintf(str, "+CME: %d\r\n", err);
    e65c:	4b18      	ldr	r3, [pc, #96]	; (e6c0 <cmd_send+0x2c0>)
    e65e:	9100      	str	r1, [sp, #0]
    e660:	e7f4      	b.n	e64c <cmd_send+0x24c>
    e662:	bf00      	nop
    e664:	200214c8 	.word	0x200214c8
    e668:	20027932 	.word	0x20027932
    e66c:	00028a05 	.word	0x00028a05
    e670:	00028a10 	.word	0x00028a10
    e674:	00028a25 	.word	0x00028a25
    e678:	000295b0 	.word	0x000295b0
    e67c:	00028a2e 	.word	0x00028a2e
    e680:	00028a20 	.word	0x00028a20
    e684:	20028e4a 	.word	0x20028e4a
    e688:	200214dc 	.word	0x200214dc
    e68c:	20028e4d 	.word	0x20028e4d
    e690:	00027b20 	.word	0x00027b20
    e694:	00027b30 	.word	0x00027b30
    e698:	00028aa8 	.word	0x00028aa8
    e69c:	00028abb 	.word	0x00028abb
    e6a0:	200213d0 	.word	0x200213d0
    e6a4:	00028a38 	.word	0x00028a38
    e6a8:	00028ac1 	.word	0x00028ac1
    e6ac:	00028a56 	.word	0x00028a56
    e6b0:	00028a69 	.word	0x00028a69
    e6b4:	200283be 	.word	0x200283be
    e6b8:	00028a7d 	.word	0x00028a7d
    e6bc:	00028a92 	.word	0x00028a92
    e6c0:	00028a9d 	.word	0x00028a9d

0000e6c4 <handle_at_psm>:

/**@brief handle AT#XPSM commands
 *  AT#XPSM
 */
static int handle_at_psm(enum at_cmd_type cmd_type)
{
    e6c4:	b510      	push	{r4, lr}
    e6c6:	4b12      	ldr	r3, [pc, #72]	; (e710 <handle_at_psm+0x4c>)
    e6c8:	4c12      	ldr	r4, [pc, #72]	; (e714 <handle_at_psm+0x50>)
    e6ca:	b088      	sub	sp, #32
    e6cc:	1ae4      	subs	r4, r4, r3
    e6ce:	08e4      	lsrs	r4, r4, #3
	LOG_INF("handle_at_psm");
    e6d0:	01a4      	lsls	r4, r4, #6
    e6d2:	f044 0403 	orr.w	r4, r4, #3
    e6d6:	4621      	mov	r1, r4
    e6d8:	480f      	ldr	r0, [pc, #60]	; (e718 <handle_at_psm+0x54>)
    e6da:	f015 f85c 	bl	23796 <log_0>
	int ret = 0;

	char psm_settings[] = CONFIG_LTE_PSM_REQ_RPTAU;
	LOG_INF("PSM bits: %c%c%c", psm_settings[0], psm_settings[1], psm_settings[2]);
    e6de:	2330      	movs	r3, #48	; 0x30
    e6e0:	480e      	ldr	r0, [pc, #56]	; (e71c <handle_at_psm+0x58>)
    e6e2:	461a      	mov	r2, r3
    e6e4:	4619      	mov	r1, r3
    e6e6:	f8ad 4000 	strh.w	r4, [sp]
    e6ea:	f015 f893 	bl	23814 <log_3>
	LOG_INF("PSM Interval: %c%c%c%c%c", psm_settings[3], psm_settings[4], psm_settings[5], psm_settings[6], psm_settings[7]);
    e6ee:	2330      	movs	r3, #48	; 0x30
    e6f0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    e6f4:	9305      	str	r3, [sp, #20]
    e6f6:	2331      	movs	r3, #49	; 0x31
    e6f8:	2205      	movs	r2, #5
    e6fa:	e9cd 3306 	strd	r3, r3, [sp, #24]
    e6fe:	4808      	ldr	r0, [pc, #32]	; (e720 <handle_at_psm+0x5c>)
    e700:	4623      	mov	r3, r4
    e702:	a903      	add	r1, sp, #12
    e704:	f015 f8a5 	bl	23852 <log_n>
//                LOG_ERR("Error setting PSM: %d Errno: %d\n", ret, errno);
//                return ret;
//	}

	return ret;
}
    e708:	2000      	movs	r0, #0
    e70a:	b008      	add	sp, #32
    e70c:	bd10      	pop	{r4, pc}
    e70e:	bf00      	nop
    e710:	00027b20 	.word	0x00027b20
    e714:	00027bc8 	.word	0x00027bc8
    e718:	00028ad4 	.word	0x00028ad4
    e71c:	00028ae2 	.word	0x00028ae2
    e720:	00028af3 	.word	0x00028af3

0000e724 <handle_at_bahe>:
 *  AT#XBAHE=<onoff>
 *  AT#XBAHE?
 *  AT#XBAHE=? TEST command not supported
 */
static int handle_at_bahe(enum at_cmd_type cmd_type)
{
    e724:	b538      	push	{r3, r4, r5, lr}
    e726:	4605      	mov	r5, r0
    e728:	4b0a      	ldr	r3, [pc, #40]	; (e754 <handle_at_bahe+0x30>)
    e72a:	4c0b      	ldr	r4, [pc, #44]	; (e758 <handle_at_bahe+0x34>)
	LOG_INF("handle_at_bahe");
    e72c:	480b      	ldr	r0, [pc, #44]	; (e75c <handle_at_bahe+0x38>)
    e72e:	1ae4      	subs	r4, r4, r3
    e730:	08e4      	lsrs	r4, r4, #3
    e732:	01a4      	lsls	r4, r4, #6
    e734:	f044 0403 	orr.w	r4, r4, #3
    e738:	4621      	mov	r1, r4
    e73a:	f015 f82c 	bl	23796 <log_0>
	int err = -EINVAL;
	//u16_t onoff;

	switch (cmd_type) {
    e73e:	2d01      	cmp	r5, #1
	case AT_CMD_TYPE_SET_COMMAND:
                LOG_INF("AT_CMD_TYPE_SET_COMMAND");
    e740:	bf0c      	ite	eq
    e742:	4807      	ldreq	r0, [pc, #28]	; (e760 <handle_at_bahe+0x3c>)
		break;

	default:
                LOG_INF("AT_CMD_TYPE_default");
    e744:	4807      	ldrne	r0, [pc, #28]	; (e764 <handle_at_bahe+0x40>)
    e746:	4621      	mov	r1, r4
    e748:	f015 f825 	bl	23796 <log_0>
		break;
	}

	return err;
}
    e74c:	f06f 0015 	mvn.w	r0, #21
    e750:	bd38      	pop	{r3, r4, r5, pc}
    e752:	bf00      	nop
    e754:	00027b20 	.word	0x00027b20
    e758:	00027bc8 	.word	0x00027bc8
    e75c:	00028b0c 	.word	0x00028b0c
    e760:	00028b1b 	.word	0x00028b1b
    e764:	00028b33 	.word	0x00028b33

0000e768 <handle_at_led>:
{
//	LOG_INF("handle_at_led");
	int err = -EINVAL;
	u16_t onoff;

	switch (cmd_type) {
    e768:	2801      	cmp	r0, #1
{
    e76a:	b513      	push	{r0, r1, r4, lr}
    e76c:	4604      	mov	r4, r0
	switch (cmd_type) {
    e76e:	d004      	beq.n	e77a <handle_at_led+0x12>
	int err = -EINVAL;
    e770:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
    e774:	4620      	mov	r0, r4
    e776:	b002      	add	sp, #8
    e778:	bd10      	pop	{r4, pc}
		if (at_params_valid_count_get(&at_param_list) < 2) {
    e77a:	4813      	ldr	r0, [pc, #76]	; (e7c8 <handle_at_led+0x60>)
    e77c:	f017 fca2 	bl	260c4 <at_params_valid_count_get>
    e780:	2801      	cmp	r0, #1
    e782:	d9f5      	bls.n	e770 <handle_at_led+0x8>
		err = at_params_short_get(&at_param_list, 1, &onoff);
    e784:	4621      	mov	r1, r4
    e786:	4810      	ldr	r0, [pc, #64]	; (e7c8 <handle_at_led+0x60>)
    e788:	f10d 0206 	add.w	r2, sp, #6
    e78c:	f017 fc52 	bl	26034 <at_params_short_get>
		if (err < 0) {
    e790:	1e04      	subs	r4, r0, #0
    e792:	dbef      	blt.n	e774 <handle_at_led+0xc>
        gpio_pin_set(led_dev, 23, onoff);
    e794:	4b0d      	ldr	r3, [pc, #52]	; (e7cc <handle_at_led+0x64>)
    e796:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    e79a:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    e79c:	68c3      	ldr	r3, [r0, #12]
    e79e:	681b      	ldr	r3, [r3, #0]
    e7a0:	021b      	lsls	r3, r3, #8
		value = (value != 0) ? 0 : 1;
    e7a2:	bf44      	itt	mi
    e7a4:	fab4 f484 	clzmi	r4, r4
    e7a8:	0964      	lsrmi	r4, r4, #5
	if (value != 0)	{
    e7aa:	b134      	cbz	r4, e7ba <handle_at_led+0x52>
	return api->port_set_bits_raw(port, pins);
    e7ac:	6883      	ldr	r3, [r0, #8]
    e7ae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    e7b2:	68db      	ldr	r3, [r3, #12]
    e7b4:	4798      	blx	r3
		err = do_led(onoff);
    e7b6:	2400      	movs	r4, #0
    e7b8:	e7dc      	b.n	e774 <handle_at_led+0xc>
	return api->port_clear_bits_raw(port, pins);
    e7ba:	6883      	ldr	r3, [r0, #8]
    e7bc:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    e7c0:	691b      	ldr	r3, [r3, #16]
    e7c2:	4798      	blx	r3
    e7c4:	e7d6      	b.n	e774 <handle_at_led+0xc>
    e7c6:	bf00      	nop
    e7c8:	200213d0 	.word	0x200213d0
    e7cc:	200213f4 	.word	0x200213f4

0000e7d0 <handle_at_getaddrinfo>:
 */
static int handle_at_getaddrinfo(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    e7d0:	2380      	movs	r3, #128	; 0x80
{
    e7d2:	b570      	push	{r4, r5, r6, lr}
    e7d4:	b0bc      	sub	sp, #240	; 0xf0
    e7d6:	4605      	mov	r5, r0
	struct addrinfo *result;
	struct addrinfo hints = {
    e7d8:	2250      	movs	r2, #80	; 0x50
    e7da:	2100      	movs	r1, #0
    e7dc:	a808      	add	r0, sp, #32
	int size = TCPIP_MAX_URL;
    e7de:	9302      	str	r3, [sp, #8]
	struct addrinfo hints = {
    e7e0:	f018 f91e 	bl	26a20 <memset>
    e7e4:	2301      	movs	r3, #1
		.ai_family = AF_INET
	};
	struct sockaddr_in *host;
	char ipv4addr[NET_IPV4_ADDR_LEN];

	switch (cmd_type) {
    e7e6:	429d      	cmp	r5, r3
	struct addrinfo hints = {
    e7e8:	930a      	str	r3, [sp, #40]	; 0x28
	switch (cmd_type) {
    e7ea:	d004      	beq.n	e7f6 <handle_at_getaddrinfo+0x26>
			return err;
		}
		url[size] = '\0';
		if (check_for_ipv4(url, strlen(url))) {
			LOG_ERR("already IPv4 address");
			return -EINVAL;
    e7ec:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
    e7f0:	4620      	mov	r0, r4
    e7f2:	b03c      	add	sp, #240	; 0xf0
    e7f4:	bd70      	pop	{r4, r5, r6, pc}
		if (at_params_valid_count_get(&at_param_list) < 2) {
    e7f6:	4840      	ldr	r0, [pc, #256]	; (e8f8 <handle_at_getaddrinfo+0x128>)
    e7f8:	f017 fc64 	bl	260c4 <at_params_valid_count_get>
    e7fc:	2801      	cmp	r0, #1
    e7fe:	d9f5      	bls.n	e7ec <handle_at_getaddrinfo+0x1c>
		err = at_params_string_get(&at_param_list, 1, url, &size);
    e800:	4629      	mov	r1, r5
    e802:	483d      	ldr	r0, [pc, #244]	; (e8f8 <handle_at_getaddrinfo+0x128>)
    e804:	ab02      	add	r3, sp, #8
    e806:	aa1c      	add	r2, sp, #112	; 0x70
    e808:	f017 fc39 	bl	2607e <at_params_string_get>
		if (err) {
    e80c:	4604      	mov	r4, r0
    e80e:	2800      	cmp	r0, #0
    e810:	d1ee      	bne.n	e7f0 <handle_at_getaddrinfo+0x20>
		url[size] = '\0';
    e812:	9b02      	ldr	r3, [sp, #8]
    e814:	aa3c      	add	r2, sp, #240	; 0xf0
    e816:	4413      	add	r3, r2
    e818:	f803 0c80 	strb.w	r0, [r3, #-128]
		if (check_for_ipv4(url, strlen(url))) {
    e81c:	a81c      	add	r0, sp, #112	; 0x70
    e81e:	f7fe fb27 	bl	ce70 <strlen>
    e822:	b2c1      	uxtb	r1, r0
    e824:	a81c      	add	r0, sp, #112	; 0x70
    e826:	f014 fc37 	bl	23098 <check_for_ipv4>
    e82a:	4606      	mov	r6, r0
    e82c:	b150      	cbz	r0, e844 <handle_at_getaddrinfo+0x74>
    e82e:	4b33      	ldr	r3, [pc, #204]	; (e8fc <handle_at_getaddrinfo+0x12c>)
    e830:	4933      	ldr	r1, [pc, #204]	; (e900 <handle_at_getaddrinfo+0x130>)
			LOG_ERR("already IPv4 address");
    e832:	4834      	ldr	r0, [pc, #208]	; (e904 <handle_at_getaddrinfo+0x134>)
    e834:	1ac9      	subs	r1, r1, r3
    e836:	08c9      	lsrs	r1, r1, #3
    e838:	0189      	lsls	r1, r1, #6
    e83a:	f041 0101 	orr.w	r1, r1, #1
    e83e:	f014 ffaa 	bl	23796 <log_0>
    e842:	e7d3      	b.n	e7ec <handle_at_getaddrinfo+0x1c>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
    e844:	4621      	mov	r1, r4
    e846:	ab03      	add	r3, sp, #12
    e848:	aa08      	add	r2, sp, #32
    e84a:	a81c      	add	r0, sp, #112	; 0x70
    e84c:	f015 faee 	bl	23e2c <zsock_getaddrinfo>
		if (err) {
    e850:	4604      	mov	r4, r0
    e852:	b1d8      	cbz	r0, e88c <handle_at_getaddrinfo+0xbc>
    e854:	4b29      	ldr	r3, [pc, #164]	; (e8fc <handle_at_getaddrinfo+0x12c>)
    e856:	4a2a      	ldr	r2, [pc, #168]	; (e900 <handle_at_getaddrinfo+0x130>)
			LOG_ERR("getaddrinfo() failed %d", err);
    e858:	4601      	mov	r1, r0
    e85a:	1ad2      	subs	r2, r2, r3
    e85c:	08d2      	lsrs	r2, r2, #3
    e85e:	0192      	lsls	r2, r2, #6
    e860:	4829      	ldr	r0, [pc, #164]	; (e908 <handle_at_getaddrinfo+0x138>)
    e862:	f042 0201 	orr.w	r2, r2, #1
    e866:	f014 ffa5 	bl	237b4 <log_1>
			sprintf(rsp_buf, "#XGETADDRINFO: %d\r\n", -err);
    e86a:	4263      	negs	r3, r4
    e86c:	4631      	mov	r1, r6
    e86e:	f640 228c 	movw	r2, #2700	; 0xa8c
    e872:	9300      	str	r3, [sp, #0]
    e874:	4825      	ldr	r0, [pc, #148]	; (e90c <handle_at_getaddrinfo+0x13c>)
    e876:	4b26      	ldr	r3, [pc, #152]	; (e910 <handle_at_getaddrinfo+0x140>)
    e878:	f018 fa1c 	bl	26cb4 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
    e87c:	4823      	ldr	r0, [pc, #140]	; (e90c <handle_at_getaddrinfo+0x13c>)
    e87e:	f7fe faf7 	bl	ce70 <strlen>
    e882:	4601      	mov	r1, r0
    e884:	4821      	ldr	r0, [pc, #132]	; (e90c <handle_at_getaddrinfo+0x13c>)
    e886:	f7ff fbb1 	bl	dfec <rsp_send>
			return err;
    e88a:	e7b1      	b.n	e7f0 <handle_at_getaddrinfo+0x20>
		} else if (result == NULL) {
    e88c:	9b03      	ldr	r3, [sp, #12]
    e88e:	b9bb      	cbnz	r3, e8c0 <handle_at_getaddrinfo+0xf0>
    e890:	4b1a      	ldr	r3, [pc, #104]	; (e8fc <handle_at_getaddrinfo+0x12c>)
    e892:	491b      	ldr	r1, [pc, #108]	; (e900 <handle_at_getaddrinfo+0x130>)
			LOG_ERR("Address not found\n");
    e894:	481f      	ldr	r0, [pc, #124]	; (e914 <handle_at_getaddrinfo+0x144>)
    e896:	1ac9      	subs	r1, r1, r3
    e898:	08c9      	lsrs	r1, r1, #3
    e89a:	0189      	lsls	r1, r1, #6
    e89c:	f041 0101 	orr.w	r1, r1, #1
    e8a0:	f014 ff79 	bl	23796 <log_0>
			sprintf(rsp_buf, "#XGETADDRINFO: not found\r\n");
    e8a4:	491c      	ldr	r1, [pc, #112]	; (e918 <handle_at_getaddrinfo+0x148>)
    e8a6:	4819      	ldr	r0, [pc, #100]	; (e90c <handle_at_getaddrinfo+0x13c>)
    e8a8:	f018 fa2b 	bl	26d02 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
    e8ac:	4817      	ldr	r0, [pc, #92]	; (e90c <handle_at_getaddrinfo+0x13c>)
    e8ae:	f7fe fadf 	bl	ce70 <strlen>
    e8b2:	4601      	mov	r1, r0
    e8b4:	4815      	ldr	r0, [pc, #84]	; (e90c <handle_at_getaddrinfo+0x13c>)
    e8b6:	f7ff fb99 	bl	dfec <rsp_send>
			return -ENOENT;
    e8ba:	f06f 0401 	mvn.w	r4, #1
    e8be:	e797      	b.n	e7f0 <handle_at_getaddrinfo+0x20>
		inet_ntop(AF_INET, &(host->sin_addr.s_addr),
    e8c0:	6999      	ldr	r1, [r3, #24]
    e8c2:	3104      	adds	r1, #4
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    e8c4:	ae04      	add	r6, sp, #16
    e8c6:	4632      	mov	r2, r6
    e8c8:	2310      	movs	r3, #16
    e8ca:	4628      	mov	r0, r5
    e8cc:	f006 f8c4 	bl	14a58 <z_impl_net_addr_ntop>
		sprintf(rsp_buf, "#XGETADDRINFO: %s\r\n", ipv4addr);
    e8d0:	f640 228c 	movw	r2, #2700	; 0xa8c
    e8d4:	4621      	mov	r1, r4
    e8d6:	4b11      	ldr	r3, [pc, #68]	; (e91c <handle_at_getaddrinfo+0x14c>)
    e8d8:	9600      	str	r6, [sp, #0]
    e8da:	480c      	ldr	r0, [pc, #48]	; (e90c <handle_at_getaddrinfo+0x13c>)
    e8dc:	f018 f9ea 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    e8e0:	480a      	ldr	r0, [pc, #40]	; (e90c <handle_at_getaddrinfo+0x13c>)
    e8e2:	f7fe fac5 	bl	ce70 <strlen>
    e8e6:	4601      	mov	r1, r0
    e8e8:	4808      	ldr	r0, [pc, #32]	; (e90c <handle_at_getaddrinfo+0x13c>)
    e8ea:	f7ff fb7f 	bl	dfec <rsp_send>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
    e8ee:	9803      	ldr	r0, [sp, #12]
    e8f0:	f015 fa9e 	bl	23e30 <zsock_freeaddrinfo>
}
    e8f4:	e77c      	b.n	e7f0 <handle_at_getaddrinfo+0x20>
    e8f6:	bf00      	nop
    e8f8:	200213d0 	.word	0x200213d0
    e8fc:	00027b20 	.word	0x00027b20
    e900:	00027bc8 	.word	0x00027bc8
    e904:	00028b47 	.word	0x00028b47
    e908:	00028b5c 	.word	0x00028b5c
    e90c:	20026ea6 	.word	0x20026ea6
    e910:	00028b74 	.word	0x00028b74
    e914:	00028bdb 	.word	0x00028bdb
    e918:	00028b88 	.word	0x00028b88
    e91c:	00028ba3 	.word	0x00028ba3

0000e920 <parse_host_by_ipv4>:
{
    e920:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    e922:	2301      	movs	r3, #1
    e924:	4a07      	ldr	r2, [pc, #28]	; (e944 <parse_host_by_ipv4+0x24>)
	address4->sin_port = htons(port);
    e926:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    e928:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    e92a:	8051      	strh	r1, [r2, #2]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
    e92c:	4601      	mov	r1, r0
    e92e:	3204      	adds	r2, #4
    e930:	4618      	mov	r0, r3
    e932:	f015 fb2d 	bl	23f90 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, ip, &address4->sin_addr) == 1) {
    e936:	2801      	cmp	r0, #1
}
    e938:	bf14      	ite	ne
    e93a:	f06f 0015 	mvnne.w	r0, #21
    e93e:	2000      	moveq	r0, #0
    e940:	bd08      	pop	{r3, pc}
    e942:	bf00      	nop
    e944:	200214f8 	.word	0x200214f8

0000e948 <parse_host_by_name>:
{
    e948:	b5f0      	push	{r4, r5, r6, r7, lr}
    e94a:	4604      	mov	r4, r0
    e94c:	4617      	mov	r7, r2
	struct addrinfo hints = {
    e94e:	2601      	movs	r6, #1
{
    e950:	b09b      	sub	sp, #108	; 0x6c
	struct addrinfo hints = {
    e952:	2250      	movs	r2, #80	; 0x50
{
    e954:	460d      	mov	r5, r1
	struct addrinfo hints = {
    e956:	a806      	add	r0, sp, #24
    e958:	2100      	movs	r1, #0
    e95a:	f018 f861 	bl	26a20 <memset>
	return zsock_getaddrinfo(host, service, hints, res);
    e95e:	4620      	mov	r0, r4
    e960:	2100      	movs	r1, #0
    e962:	ab01      	add	r3, sp, #4
    e964:	aa06      	add	r2, sp, #24
    e966:	e9cd 6708 	strd	r6, r7, [sp, #32]
    e96a:	f015 fa5f 	bl	23e2c <zsock_getaddrinfo>
	if (err) {
    e96e:	4604      	mov	r4, r0
    e970:	b160      	cbz	r0, e98c <parse_host_by_name+0x44>
    e972:	4a16      	ldr	r2, [pc, #88]	; (e9cc <parse_host_by_name+0x84>)
    e974:	4b16      	ldr	r3, [pc, #88]	; (e9d0 <parse_host_by_name+0x88>)
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    e976:	4601      	mov	r1, r0
    e978:	1ad2      	subs	r2, r2, r3
    e97a:	08d2      	lsrs	r2, r2, #3
    e97c:	0192      	lsls	r2, r2, #6
    e97e:	4815      	ldr	r0, [pc, #84]	; (e9d4 <parse_host_by_name+0x8c>)
    e980:	4332      	orrs	r2, r6
    e982:	f014 ff17 	bl	237b4 <log_1>
}
    e986:	4620      	mov	r0, r4
    e988:	b01b      	add	sp, #108	; 0x6c
    e98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (result == NULL) {
    e98c:	9b01      	ldr	r3, [sp, #4]
    e98e:	b963      	cbnz	r3, e9aa <parse_host_by_name+0x62>
    e990:	4b0f      	ldr	r3, [pc, #60]	; (e9d0 <parse_host_by_name+0x88>)
    e992:	490e      	ldr	r1, [pc, #56]	; (e9cc <parse_host_by_name+0x84>)
		LOG_ERR("ERROR: Address not found\n");
    e994:	4810      	ldr	r0, [pc, #64]	; (e9d8 <parse_host_by_name+0x90>)
    e996:	1ac9      	subs	r1, r1, r3
    e998:	08c9      	lsrs	r1, r1, #3
    e99a:	0189      	lsls	r1, r1, #6
    e99c:	f041 0101 	orr.w	r1, r1, #1
    e9a0:	f014 fef9 	bl	23796 <log_0>
		return -ENOENT;
    e9a4:	f06f 0401 	mvn.w	r4, #1
    e9a8:	e7ed      	b.n	e986 <parse_host_by_name+0x3e>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    e9aa:	699b      	ldr	r3, [r3, #24]
	server4->sin_addr.s_addr =
    e9ac:	490b      	ldr	r1, [pc, #44]	; (e9dc <parse_host_by_name+0x94>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    e9ae:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    e9b0:	ba6d      	rev16	r5, r5
	server4->sin_addr.s_addr =
    e9b2:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    e9b4:	800e      	strh	r6, [r1, #0]
	server4->sin_port = htons(port);
    e9b6:	804d      	strh	r5, [r1, #2]
    e9b8:	2310      	movs	r3, #16
    e9ba:	4630      	mov	r0, r6
    e9bc:	aa02      	add	r2, sp, #8
    e9be:	3104      	adds	r1, #4
    e9c0:	f006 f84a 	bl	14a58 <z_impl_net_addr_ntop>
	zsock_freeaddrinfo(ai);
    e9c4:	9801      	ldr	r0, [sp, #4]
    e9c6:	f015 fa33 	bl	23e30 <zsock_freeaddrinfo>
	return 0;
    e9ca:	e7dc      	b.n	e986 <parse_host_by_name+0x3e>
    e9cc:	00027bc8 	.word	0x00027bc8
    e9d0:	00027b20 	.word	0x00027b20
    e9d4:	00028bb7 	.word	0x00028bb7
    e9d8:	00028bd4 	.word	0x00028bd4
    e9dc:	200214f8 	.word	0x200214f8

0000e9e0 <do_udp_init>:
{
    e9e0:	b538      	push	{r3, r4, r5, lr}
    e9e2:	4604      	mov	r4, r0
    e9e4:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    e9e6:	f7fe fa43 	bl	ce70 <strlen>
    e9ea:	b2c1      	uxtb	r1, r0
    e9ec:	4620      	mov	r0, r4
    e9ee:	f014 fb53 	bl	23098 <check_for_ipv4>
    e9f2:	b190      	cbz	r0, ea1a <do_udp_init+0x3a>
		ret = parse_host_by_ipv4(url, port);
    e9f4:	4629      	mov	r1, r5
    e9f6:	4620      	mov	r0, r4
    e9f8:	f7ff ff92 	bl	e920 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    e9fc:	4604      	mov	r4, r0
	if (ret) {
    e9fe:	b150      	cbz	r0, ea16 <do_udp_init+0x36>
    ea00:	4a09      	ldr	r2, [pc, #36]	; (ea28 <do_udp_init+0x48>)
    ea02:	4b0a      	ldr	r3, [pc, #40]	; (ea2c <do_udp_init+0x4c>)
		LOG_ERR("Parse failed: %d", ret);
    ea04:	4601      	mov	r1, r0
    ea06:	1ad2      	subs	r2, r2, r3
    ea08:	08d2      	lsrs	r2, r2, #3
    ea0a:	0192      	lsls	r2, r2, #6
    ea0c:	4808      	ldr	r0, [pc, #32]	; (ea30 <do_udp_init+0x50>)
    ea0e:	f042 0201 	orr.w	r2, r2, #1
    ea12:	f014 fecf 	bl	237b4 <log_1>
}
    ea16:	4620      	mov	r0, r4
    ea18:	bd38      	pop	{r3, r4, r5, pc}
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    ea1a:	2202      	movs	r2, #2
    ea1c:	4629      	mov	r1, r5
    ea1e:	4620      	mov	r0, r4
    ea20:	f7ff ff92 	bl	e948 <parse_host_by_name>
    ea24:	e7ea      	b.n	e9fc <do_udp_init+0x1c>
    ea26:	bf00      	nop
    ea28:	00027bc8 	.word	0x00027bc8
    ea2c:	00027b20 	.word	0x00027b20
    ea30:	00028bee 	.word	0x00028bee

0000ea34 <handle_at_socketopt>:
{
    ea34:	b530      	push	{r4, r5, lr}
	switch (cmd_type) {
    ea36:	2801      	cmp	r0, #1
{
    ea38:	4604      	mov	r4, r0
    ea3a:	b087      	sub	sp, #28
	switch (cmd_type) {
    ea3c:	d005      	beq.n	ea4a <handle_at_socketopt+0x16>
    ea3e:	2803      	cmp	r0, #3
    ea40:	f000 80a7 	beq.w	eb92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x132>
			return -EINVAL;
    ea44:	f06f 0415 	mvn.w	r4, #21
    ea48:	e069      	b.n	eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
		if (client.sock < 0) {
    ea4a:	4b58      	ldr	r3, [pc, #352]	; (ebac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c>)
    ea4c:	681a      	ldr	r2, [r3, #0]
    ea4e:	461d      	mov	r5, r3
    ea50:	2a00      	cmp	r2, #0
    ea52:	da0a      	bge.n	ea6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa>
    ea54:	4956      	ldr	r1, [pc, #344]	; (ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>)
    ea56:	4b57      	ldr	r3, [pc, #348]	; (ebb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x154>)
			LOG_ERR("Socket not opened yet");
    ea58:	4857      	ldr	r0, [pc, #348]	; (ebb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x158>)
    ea5a:	1ac9      	subs	r1, r1, r3
    ea5c:	08c9      	lsrs	r1, r1, #3
    ea5e:	0189      	lsls	r1, r1, #6
    ea60:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Invalid role");
    ea64:	f014 fe97 	bl	23796 <log_0>
			return err;
    ea68:	e7ec      	b.n	ea44 <handle_at_socketopt+0x10>
		if (client.role != AT_SOCKET_ROLE_CLIENT) {
    ea6a:	685b      	ldr	r3, [r3, #4]
    ea6c:	b143      	cbz	r3, ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
    ea6e:	4950      	ldr	r1, [pc, #320]	; (ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>)
    ea70:	4b50      	ldr	r3, [pc, #320]	; (ebb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x154>)
			LOG_ERR("Invalid role");
    ea72:	4852      	ldr	r0, [pc, #328]	; (ebbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15c>)
    ea74:	1ac9      	subs	r1, r1, r3
    ea76:	08c9      	lsrs	r1, r1, #3
    ea78:	0189      	lsls	r1, r1, #6
    ea7a:	f041 0101 	orr.w	r1, r1, #1
    ea7e:	e7f1      	b.n	ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>
		if (at_params_valid_count_get(&at_param_list) < 3) {
    ea80:	484f      	ldr	r0, [pc, #316]	; (ebc0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x160>)
    ea82:	f017 fb1f 	bl	260c4 <at_params_valid_count_get>
    ea86:	2802      	cmp	r0, #2
    ea88:	d9dc      	bls.n	ea44 <handle_at_socketopt+0x10>
		err = at_params_short_get(&at_param_list, 1, &op);
    ea8a:	4621      	mov	r1, r4
    ea8c:	484c      	ldr	r0, [pc, #304]	; (ebc0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x160>)
    ea8e:	aa02      	add	r2, sp, #8
    ea90:	f017 fad0 	bl	26034 <at_params_short_get>
		if (err) {
    ea94:	4604      	mov	r4, r0
    ea96:	2800      	cmp	r0, #0
    ea98:	d141      	bne.n	eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
		err = at_params_short_get(&at_param_list, 2, &name);
    ea9a:	2102      	movs	r1, #2
    ea9c:	4848      	ldr	r0, [pc, #288]	; (ebc0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x160>)
    ea9e:	f10d 020a 	add.w	r2, sp, #10
    eaa2:	f017 fac7 	bl	26034 <at_params_short_get>
		if (err) {
    eaa6:	4604      	mov	r4, r0
    eaa8:	2800      	cmp	r0, #0
    eaaa:	d138      	bne.n	eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
		if (op == AT_SOCKETOPT_SET) {
    eaac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    eab0:	2b01      	cmp	r3, #1
    eab2:	d137      	bne.n	eb24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc4>
			if (at_params_valid_count_get(&at_param_list) < 4) {
    eab4:	4842      	ldr	r0, [pc, #264]	; (ebc0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x160>)
    eab6:	f017 fb05 	bl	260c4 <at_params_valid_count_get>
    eaba:	2803      	cmp	r0, #3
    eabc:	d9c2      	bls.n	ea44 <handle_at_socketopt+0x10>
			err = at_params_int_get(&at_param_list, 2, &value);
    eabe:	2102      	movs	r1, #2
    eac0:	483f      	ldr	r0, [pc, #252]	; (ebc0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x160>)
    eac2:	aa03      	add	r2, sp, #12
    eac4:	f017 fac8 	bl	26058 <at_params_int_get>
			if (err) {
    eac8:	4604      	mov	r4, r0
    eaca:	bb40      	cbnz	r0, eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
			err = do_socketopt_set(name, value);
    eacc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
	switch (name) {
    ead0:	2a04      	cmp	r2, #4
    ead2:	d003      	beq.n	eadc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>
    ead4:	2a14      	cmp	r2, #20
    ead6:	d006      	beq.n	eae6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x86>
    ead8:	2a02      	cmp	r2, #2
	switch (name) {
    eada:	d158      	bne.n	eb8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e>
		sprintf(rsp_buf, "#XSOCKETOPT: ignored\r\n");
    eadc:	4939      	ldr	r1, [pc, #228]	; (ebc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x164>)
		sprintf(rsp_buf, "#XSOCKETOPT: not supported\r\n");
    eade:	483a      	ldr	r0, [pc, #232]	; (ebc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x168>)
    eae0:	f018 f90f 	bl	26d02 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
    eae4:	e04b      	b.n	eb7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11e>
		struct timeval tmo = { .tv_sec = value };
    eae6:	2300      	movs	r3, #0
    eae8:	9305      	str	r3, [sp, #20]
    eaea:	9b03      	ldr	r3, [sp, #12]
		ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    eaec:	6828      	ldr	r0, [r5, #0]
		struct timeval tmo = { .tv_sec = value };
    eaee:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
    eaf0:	2308      	movs	r3, #8
    eaf2:	2101      	movs	r1, #1
    eaf4:	9300      	str	r3, [sp, #0]
    eaf6:	ab04      	add	r3, sp, #16
    eaf8:	f015 fa68 	bl	23fcc <z_impl_zsock_setsockopt>
		if (ret < 0) {
    eafc:	1e04      	subs	r4, r0, #0
    eafe:	da0e      	bge.n	eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
    eb00:	4a2c      	ldr	r2, [pc, #176]	; (ebb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x154>)
    eb02:	4d2b      	ldr	r5, [pc, #172]	; (ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>)
    eb04:	1aad      	subs	r5, r5, r2
    eb06:	08ed      	lsrs	r5, r5, #3
			LOG_ERR("setsockopt() error: %d", -errno);
    eb08:	f015 fc2c 	bl	24364 <__errno>
    eb0c:	01ad      	lsls	r5, r5, #6
    eb0e:	f045 0501 	orr.w	r5, r5, #1
    eb12:	462a      	mov	r2, r5
    eb14:	6801      	ldr	r1, [r0, #0]
    eb16:	482d      	ldr	r0, [pc, #180]	; (ebcc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16c>)
    eb18:	4249      	negs	r1, r1
			LOG_ERR("getsockopt() error: %d", -errno);
    eb1a:	f014 fe4b 	bl	237b4 <log_1>
}
    eb1e:	4620      	mov	r0, r4
    eb20:	b007      	add	sp, #28
    eb22:	bd30      	pop	{r4, r5, pc}
		} else if (op == AT_SOCKETOPT_GET) {
    eb24:	2b00      	cmp	r3, #0
    eb26:	d1fa      	bne.n	eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
			err = do_socketopt_get(name);
    eb28:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	switch (name) {
    eb2c:	2b04      	cmp	r3, #4
    eb2e:	d0d5      	beq.n	eadc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>
    eb30:	2b14      	cmp	r3, #20
    eb32:	d001      	beq.n	eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>
    eb34:	2b02      	cmp	r3, #2
    eb36:	e7d0      	b.n	eada <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7a>
		socklen_t len = sizeof(struct timeval);
    eb38:	2308      	movs	r3, #8
		ret = getsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    eb3a:	6828      	ldr	r0, [r5, #0]
		socklen_t len = sizeof(struct timeval);
    eb3c:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
    eb3e:	ab03      	add	r3, sp, #12
    eb40:	9300      	str	r3, [sp, #0]
    eb42:	2214      	movs	r2, #20
    eb44:	2101      	movs	r1, #1
    eb46:	ab04      	add	r3, sp, #16
    eb48:	f015 fa29 	bl	23f9e <z_impl_zsock_getsockopt>
		if (ret) {
    eb4c:	4604      	mov	r4, r0
    eb4e:	b168      	cbz	r0, eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>
    eb50:	4a18      	ldr	r2, [pc, #96]	; (ebb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x154>)
    eb52:	4d17      	ldr	r5, [pc, #92]	; (ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>)
    eb54:	1aad      	subs	r5, r5, r2
			LOG_ERR("getsockopt() error: %d", -errno);
    eb56:	f015 fc05 	bl	24364 <__errno>
    eb5a:	08ed      	lsrs	r5, r5, #3
    eb5c:	6801      	ldr	r1, [r0, #0]
    eb5e:	01ad      	lsls	r5, r5, #6
    eb60:	f045 0501 	orr.w	r5, r5, #1
    eb64:	462a      	mov	r2, r5
    eb66:	481a      	ldr	r0, [pc, #104]	; (ebd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x170>)
    eb68:	4249      	negs	r1, r1
    eb6a:	e7d6      	b.n	eb1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xba>
			sprintf(rsp_buf, "#XSOCKETOPT: %d sec\r\n",
    eb6c:	9b04      	ldr	r3, [sp, #16]
    eb6e:	4601      	mov	r1, r0
    eb70:	9300      	str	r3, [sp, #0]
    eb72:	f640 228c 	movw	r2, #2700	; 0xa8c
    eb76:	4b17      	ldr	r3, [pc, #92]	; (ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>)
    eb78:	4813      	ldr	r0, [pc, #76]	; (ebc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x168>)
    eb7a:	f018 f89b 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    eb7e:	4812      	ldr	r0, [pc, #72]	; (ebc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x168>)
    eb80:	f7fe f976 	bl	ce70 <strlen>
    eb84:	4601      	mov	r1, r0
    eb86:	4810      	ldr	r0, [pc, #64]	; (ebc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x168>)
    eb88:	f7ff fa30 	bl	dfec <rsp_send>
		break;
    eb8c:	e7c7      	b.n	eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
		sprintf(rsp_buf, "#XSOCKETOPT: not supported\r\n");
    eb8e:	4912      	ldr	r1, [pc, #72]	; (ebd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x178>)
    eb90:	e7a5      	b.n	eade <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e>
		sprintf(rsp_buf, "#XSOCKETOPT: (%d, %d), <name>, <value>\r\n",
    eb92:	2400      	movs	r4, #0
    eb94:	2301      	movs	r3, #1
    eb96:	f640 228c 	movw	r2, #2700	; 0xa8c
    eb9a:	e9cd 4300 	strd	r4, r3, [sp]
    eb9e:	4621      	mov	r1, r4
    eba0:	4b0e      	ldr	r3, [pc, #56]	; (ebdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x17c>)
    eba2:	4809      	ldr	r0, [pc, #36]	; (ebc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x168>)
    eba4:	f018 f886 	bl	26cb4 <__sprintf_chk>
    eba8:	e7e9      	b.n	eb7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11e>
    ebaa:	bf00      	nop
    ebac:	200214e4 	.word	0x200214e4
    ebb0:	00027bc8 	.word	0x00027bc8
    ebb4:	00027b20 	.word	0x00027b20
    ebb8:	00028bff 	.word	0x00028bff
    ebbc:	00028c15 	.word	0x00028c15
    ebc0:	200213d0 	.word	0x200213d0
    ebc4:	00028c22 	.word	0x00028c22
    ebc8:	20026ea6 	.word	0x20026ea6
    ebcc:	00028c39 	.word	0x00028c39
    ebd0:	00028c6d 	.word	0x00028c6d
    ebd4:	00028c84 	.word	0x00028c84
    ebd8:	00028c50 	.word	0x00028c50
    ebdc:	00028c9a 	.word	0x00028c9a

0000ebe0 <do_socket_close>:
{
    ebe0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (client.sock > 0) {
    ebe2:	4e1e      	ldr	r6, [pc, #120]	; (ec5c <do_socket_close+0x7c>)
{
    ebe4:	4605      	mov	r5, r0
	if (client.sock > 0) {
    ebe6:	6830      	ldr	r0, [r6, #0]
    ebe8:	2800      	cmp	r0, #0
    ebea:	dd35      	ble.n	ec58 <do_socket_close+0x78>
	return z_impl_zsock_close(sock);
    ebec:	f015 f931 	bl	23e52 <z_impl_zsock_close>
		if (ret < 0) {
    ebf0:	1e04      	subs	r4, r0, #0
    ebf2:	da12      	bge.n	ec1a <do_socket_close+0x3a>
    ebf4:	4a1a      	ldr	r2, [pc, #104]	; (ec60 <do_socket_close+0x80>)
    ebf6:	4c1b      	ldr	r4, [pc, #108]	; (ec64 <do_socket_close+0x84>)
    ebf8:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
    ebfa:	f015 fbb3 	bl	24364 <__errno>
    ebfe:	08e4      	lsrs	r4, r4, #3
    ec00:	6801      	ldr	r1, [r0, #0]
    ec02:	01a4      	lsls	r4, r4, #6
    ec04:	f044 0402 	orr.w	r4, r4, #2
    ec08:	4622      	mov	r2, r4
    ec0a:	4817      	ldr	r0, [pc, #92]	; (ec68 <do_socket_close+0x88>)
    ec0c:	4249      	negs	r1, r1
    ec0e:	f014 fdd1 	bl	237b4 <log_1>
			ret = -errno;
    ec12:	f015 fba7 	bl	24364 <__errno>
    ec16:	6804      	ldr	r4, [r0, #0]
    ec18:	4264      	negs	r4, r4
		client.sock = INVALID_SOCKET;
    ec1a:	f04f 33ff 	mov.w	r3, #4294967295
		if (client.sock_peer > 0) {
    ec1e:	68b0      	ldr	r0, [r6, #8]
		client.sock = INVALID_SOCKET;
    ec20:	6033      	str	r3, [r6, #0]
		if (client.sock_peer > 0) {
    ec22:	2800      	cmp	r0, #0
    ec24:	dd01      	ble.n	ec2a <do_socket_close+0x4a>
    ec26:	f015 f914 	bl	23e52 <z_impl_zsock_close>
		client.sock_peer = INVALID_SOCKET;
    ec2a:	2100      	movs	r1, #0
    ec2c:	f04f 33ff 	mov.w	r3, #4294967295
		sprintf(rsp_buf, "#XSOCKET: %d, closed\r\n", error);
    ec30:	f640 228c 	movw	r2, #2700	; 0xa8c
		client.sock_peer = INVALID_SOCKET;
    ec34:	e9c6 1301 	strd	r1, r3, [r6, #4]
		sprintf(rsp_buf, "#XSOCKET: %d, closed\r\n", error);
    ec38:	480c      	ldr	r0, [pc, #48]	; (ec6c <do_socket_close+0x8c>)
    ec3a:	4b0d      	ldr	r3, [pc, #52]	; (ec70 <do_socket_close+0x90>)
    ec3c:	9500      	str	r5, [sp, #0]
		client.connected = false;
    ec3e:	7431      	strb	r1, [r6, #16]
		sprintf(rsp_buf, "#XSOCKET: %d, closed\r\n", error);
    ec40:	f018 f838 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    ec44:	4809      	ldr	r0, [pc, #36]	; (ec6c <do_socket_close+0x8c>)
    ec46:	f7fe f913 	bl	ce70 <strlen>
    ec4a:	4601      	mov	r1, r0
    ec4c:	4807      	ldr	r0, [pc, #28]	; (ec6c <do_socket_close+0x8c>)
    ec4e:	f7ff f9cd 	bl	dfec <rsp_send>
}
    ec52:	4620      	mov	r0, r4
    ec54:	b002      	add	sp, #8
    ec56:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    ec58:	2400      	movs	r4, #0
	return ret;
    ec5a:	e7fa      	b.n	ec52 <do_socket_close+0x72>
    ec5c:	200214e4 	.word	0x200214e4
    ec60:	00027b20 	.word	0x00027b20
    ec64:	00027bc8 	.word	0x00027bc8
    ec68:	00028cc3 	.word	0x00028cc3
    ec6c:	20026ea6 	.word	0x20026ea6
    ec70:	00028cd6 	.word	0x00028cd6

0000ec74 <handle_at_recvfrom>:
	int size = TCPIP_MAX_URL;
    ec74:	2380      	movs	r3, #128	; 0x80
{
    ec76:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec78:	f5ad 7d39 	sub.w	sp, sp, #740	; 0x2e4
    ec7c:	af02      	add	r7, sp, #8
	int size = TCPIP_MAX_URL;
    ec7e:	613b      	str	r3, [r7, #16]
	u16_t length = NET_IPV4_MTU;
    ec80:	f44f 7310 	mov.w	r3, #576	; 0x240
    ec84:	81fb      	strh	r3, [r7, #14]
	if (client.sock < 0) {
    ec86:	4b79      	ldr	r3, [pc, #484]	; (ee6c <handle_at_recvfrom+0x1f8>)
{
    ec88:	4606      	mov	r6, r0
	if (client.sock < 0) {
    ec8a:	681a      	ldr	r2, [r3, #0]
    ec8c:	461c      	mov	r4, r3
    ec8e:	2a00      	cmp	r2, #0
    ec90:	da0f      	bge.n	ecb2 <handle_at_recvfrom+0x3e>
    ec92:	4977      	ldr	r1, [pc, #476]	; (ee70 <handle_at_recvfrom+0x1fc>)
    ec94:	4b77      	ldr	r3, [pc, #476]	; (ee74 <handle_at_recvfrom+0x200>)
		LOG_ERR("Socket not opened yet");
    ec96:	4878      	ldr	r0, [pc, #480]	; (ee78 <handle_at_recvfrom+0x204>)
    ec98:	1ac9      	subs	r1, r1, r3
    ec9a:	08c9      	lsrs	r1, r1, #3
    ec9c:	0189      	lsls	r1, r1, #6
    ec9e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid protocol");
    eca2:	f014 fd78 	bl	23796 <log_0>
		return err;
    eca6:	f06f 0015 	mvn.w	r0, #21
}
    ecaa:	f507 7737 	add.w	r7, r7, #732	; 0x2dc
    ecae:	46bd      	mov	sp, r7
    ecb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client.ip_proto != IPPROTO_UDP &&
    ecb2:	68db      	ldr	r3, [r3, #12]
    ecb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ecb8:	2b11      	cmp	r3, #17
    ecba:	d008      	beq.n	ecce <handle_at_recvfrom+0x5a>
    ecbc:	496c      	ldr	r1, [pc, #432]	; (ee70 <handle_at_recvfrom+0x1fc>)
    ecbe:	4b6d      	ldr	r3, [pc, #436]	; (ee74 <handle_at_recvfrom+0x200>)
		LOG_ERR("Invalid protocol");
    ecc0:	486e      	ldr	r0, [pc, #440]	; (ee7c <handle_at_recvfrom+0x208>)
    ecc2:	1ac9      	subs	r1, r1, r3
    ecc4:	08c9      	lsrs	r1, r1, #3
    ecc6:	0189      	lsls	r1, r1, #6
    ecc8:	f041 0101 	orr.w	r1, r1, #1
    eccc:	e7e9      	b.n	eca2 <handle_at_recvfrom+0x2e>
	switch (cmd_type) {
    ecce:	2801      	cmp	r0, #1
    ecd0:	d1e9      	bne.n	eca6 <handle_at_recvfrom+0x32>
		if (at_params_valid_count_get(&at_param_list) < 3) {
    ecd2:	486b      	ldr	r0, [pc, #428]	; (ee80 <handle_at_recvfrom+0x20c>)
    ecd4:	f017 f9f6 	bl	260c4 <at_params_valid_count_get>
    ecd8:	2802      	cmp	r0, #2
    ecda:	d9e4      	bls.n	eca6 <handle_at_recvfrom+0x32>
		err = at_params_string_get(&at_param_list, 1, url, &size);
    ecdc:	f107 0518 	add.w	r5, r7, #24
    ece0:	462a      	mov	r2, r5
    ece2:	4631      	mov	r1, r6
    ece4:	4866      	ldr	r0, [pc, #408]	; (ee80 <handle_at_recvfrom+0x20c>)
    ece6:	f107 0310 	add.w	r3, r7, #16
    ecea:	f017 f9c8 	bl	2607e <at_params_string_get>
		if (err) {
    ecee:	2800      	cmp	r0, #0
    ecf0:	d1db      	bne.n	ecaa <handle_at_recvfrom+0x36>
		url[size] = '\0';
    ecf2:	693b      	ldr	r3, [r7, #16]
		err = at_params_short_get(&at_param_list, 2, &port);
    ecf4:	2102      	movs	r1, #2
		url[size] = '\0';
    ecf6:	54e8      	strb	r0, [r5, r3]
		err = at_params_short_get(&at_param_list, 2, &port);
    ecf8:	f107 020c 	add.w	r2, r7, #12
    ecfc:	4860      	ldr	r0, [pc, #384]	; (ee80 <handle_at_recvfrom+0x20c>)
    ecfe:	f017 f999 	bl	26034 <at_params_short_get>
		if (err) {
    ed02:	2800      	cmp	r0, #0
    ed04:	d1d1      	bne.n	ecaa <handle_at_recvfrom+0x36>
		if (at_params_valid_count_get(&at_param_list) > 3) {
    ed06:	485e      	ldr	r0, [pc, #376]	; (ee80 <handle_at_recvfrom+0x20c>)
    ed08:	f017 f9dc 	bl	260c4 <at_params_valid_count_get>
    ed0c:	2803      	cmp	r0, #3
    ed0e:	d83b      	bhi.n	ed88 <handle_at_recvfrom+0x114>
	int sockaddr_len = sizeof(struct sockaddr_in);
    ed10:	2308      	movs	r3, #8
		err = do_recvfrom(url, port, length);
    ed12:	89fa      	ldrh	r2, [r7, #14]
	ret = do_udp_init(url, port);
    ed14:	4628      	mov	r0, r5
    ed16:	89b9      	ldrh	r1, [r7, #12]
		err = do_recvfrom(url, port, length);
    ed18:	607a      	str	r2, [r7, #4]
	int sockaddr_len = sizeof(struct sockaddr_in);
    ed1a:	617b      	str	r3, [r7, #20]
	ret = do_udp_init(url, port);
    ed1c:	f7ff fe60 	bl	e9e0 <do_udp_init>
	if (ret < 0) {
    ed20:	2800      	cmp	r0, #0
	int sockaddr_len = sizeof(struct sockaddr_in);
    ed22:	f107 0614 	add.w	r6, r7, #20
	if (ret < 0) {
    ed26:	687a      	ldr	r2, [r7, #4]
    ed28:	dbbf      	blt.n	ecaa <handle_at_recvfrom+0x36>
	ret = recvfrom(client.sock, data, length, 0,
    ed2a:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    ed2c:	4b55      	ldr	r3, [pc, #340]	; (ee84 <handle_at_recvfrom+0x210>)
    ed2e:	9601      	str	r6, [sp, #4]
    ed30:	9300      	str	r3, [sp, #0]
    ed32:	f107 0198 	add.w	r1, r7, #152	; 0x98
    ed36:	2300      	movs	r3, #0
    ed38:	f015 f911 	bl	23f5e <z_impl_zsock_recvfrom>
	if (ret < 0) {
    ed3c:	1e05      	subs	r5, r0, #0
    ed3e:	da40      	bge.n	edc2 <handle_at_recvfrom+0x14e>
    ed40:	4a4c      	ldr	r2, [pc, #304]	; (ee74 <handle_at_recvfrom+0x200>)
    ed42:	4c4b      	ldr	r4, [pc, #300]	; (ee70 <handle_at_recvfrom+0x1fc>)
    ed44:	1aa4      	subs	r4, r4, r2
		LOG_ERR("recvfrom() error: %d", -errno);
    ed46:	f015 fb0d 	bl	24364 <__errno>
    ed4a:	08e4      	lsrs	r4, r4, #3
    ed4c:	6801      	ldr	r1, [r0, #0]
    ed4e:	01a4      	lsls	r4, r4, #6
    ed50:	f044 0401 	orr.w	r4, r4, #1
    ed54:	4622      	mov	r2, r4
    ed56:	484c      	ldr	r0, [pc, #304]	; (ee88 <handle_at_recvfrom+0x214>)
    ed58:	4249      	negs	r1, r1
    ed5a:	f014 fd2b 	bl	237b4 <log_1>
		if (errno != EAGAIN && errno != ETIMEDOUT) {
    ed5e:	f015 fb01 	bl	24364 <__errno>
    ed62:	6803      	ldr	r3, [r0, #0]
    ed64:	2b0b      	cmp	r3, #11
    ed66:	d018      	beq.n	ed9a <handle_at_recvfrom+0x126>
    ed68:	f015 fafc 	bl	24364 <__errno>
    ed6c:	6803      	ldr	r3, [r0, #0]
    ed6e:	2b74      	cmp	r3, #116	; 0x74
    ed70:	d013      	beq.n	ed9a <handle_at_recvfrom+0x126>
			do_socket_close(-errno);
    ed72:	f015 faf7 	bl	24364 <__errno>
    ed76:	6800      	ldr	r0, [r0, #0]
    ed78:	4240      	negs	r0, r0
    ed7a:	f7ff ff31 	bl	ebe0 <do_socket_close>
		return -errno;
    ed7e:	f015 faf1 	bl	24364 <__errno>
    ed82:	6800      	ldr	r0, [r0, #0]
    ed84:	4240      	negs	r0, r0
    ed86:	e790      	b.n	ecaa <handle_at_recvfrom+0x36>
			err = at_params_short_get(&at_param_list, 3, &length);
    ed88:	2103      	movs	r1, #3
    ed8a:	483d      	ldr	r0, [pc, #244]	; (ee80 <handle_at_recvfrom+0x20c>)
    ed8c:	f107 020e 	add.w	r2, r7, #14
    ed90:	f017 f950 	bl	26034 <at_params_short_get>
			if (err) {
    ed94:	2800      	cmp	r0, #0
    ed96:	d0bb      	beq.n	ed10 <handle_at_recvfrom+0x9c>
    ed98:	e787      	b.n	ecaa <handle_at_recvfrom+0x36>
			sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
    ed9a:	f015 fae3 	bl	24364 <__errno>
    ed9e:	6803      	ldr	r3, [r0, #0]
    eda0:	f640 228c 	movw	r2, #2700	; 0xa8c
    eda4:	425b      	negs	r3, r3
    eda6:	2100      	movs	r1, #0
    eda8:	9300      	str	r3, [sp, #0]
    edaa:	4838      	ldr	r0, [pc, #224]	; (ee8c <handle_at_recvfrom+0x218>)
    edac:	4b38      	ldr	r3, [pc, #224]	; (ee90 <handle_at_recvfrom+0x21c>)
    edae:	f017 ff81 	bl	26cb4 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
    edb2:	4836      	ldr	r0, [pc, #216]	; (ee8c <handle_at_recvfrom+0x218>)
    edb4:	f7fe f85c 	bl	ce70 <strlen>
    edb8:	4601      	mov	r1, r0
    edba:	4834      	ldr	r0, [pc, #208]	; (ee8c <handle_at_recvfrom+0x218>)
    edbc:	f7ff f916 	bl	dfec <rsp_send>
    edc0:	e7dd      	b.n	ed7e <handle_at_recvfrom+0x10a>
	if (slm_util_hex_check(data, ret)) {
    edc2:	b2a9      	uxth	r1, r5
    edc4:	f107 0098 	add.w	r0, r7, #152	; 0x98
    edc8:	6079      	str	r1, [r7, #4]
    edca:	f014 f92e 	bl	2302a <slm_util_hex_check>
    edce:	4604      	mov	r4, r0
    edd0:	2800      	cmp	r0, #0
    edd2:	d033      	beq.n	ee3c <handle_at_recvfrom+0x1c8>
		char data_hex[ret * 2];
    edd4:	006b      	lsls	r3, r5, #1
    edd6:	1dda      	adds	r2, r3, #7
    edd8:	f022 0207 	bic.w	r2, r2, #7
	if (slm_util_hex_check(data, ret)) {
    eddc:	466c      	mov	r4, sp
		char data_hex[ret * 2];
    edde:	ebad 0d02 	sub.w	sp, sp, r2
    ede2:	ad02      	add	r5, sp, #8
		ret = slm_util_htoa(data, ret, data_hex, size);
    ede4:	6879      	ldr	r1, [r7, #4]
    ede6:	462a      	mov	r2, r5
    ede8:	b29b      	uxth	r3, r3
    edea:	f107 0098 	add.w	r0, r7, #152	; 0x98
    edee:	f7fe ffe5 	bl	ddbc <slm_util_htoa>
		if (ret > 0) {
    edf2:	1e01      	subs	r1, r0, #0
    edf4:	dd17      	ble.n	ee26 <handle_at_recvfrom+0x1b2>
			rsp_send(data_hex, ret);
    edf6:	4628      	mov	r0, r5
    edf8:	6079      	str	r1, [r7, #4]
    edfa:	f7ff f8f7 	bl	dfec <rsp_send>
			sprintf(rsp_buf, "\r\n#XRECVFROM: %d, %d\r\n",
    edfe:	6879      	ldr	r1, [r7, #4]
    ee00:	f640 228c 	movw	r2, #2700	; 0xa8c
    ee04:	9101      	str	r1, [sp, #4]
    ee06:	2100      	movs	r1, #0
    ee08:	4b22      	ldr	r3, [pc, #136]	; (ee94 <handle_at_recvfrom+0x220>)
    ee0a:	9100      	str	r1, [sp, #0]
    ee0c:	481f      	ldr	r0, [pc, #124]	; (ee8c <handle_at_recvfrom+0x218>)
    ee0e:	f017 ff51 	bl	26cb4 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
    ee12:	481e      	ldr	r0, [pc, #120]	; (ee8c <handle_at_recvfrom+0x218>)
    ee14:	f7fe f82c 	bl	ce70 <strlen>
    ee18:	4601      	mov	r1, r0
    ee1a:	481c      	ldr	r0, [pc, #112]	; (ee8c <handle_at_recvfrom+0x218>)
    ee1c:	f7ff f8e6 	bl	dfec <rsp_send>
	return 0;
    ee20:	2000      	movs	r0, #0
    ee22:	46a5      	mov	sp, r4
    ee24:	e741      	b.n	ecaa <handle_at_recvfrom+0x36>
    ee26:	4b13      	ldr	r3, [pc, #76]	; (ee74 <handle_at_recvfrom+0x200>)
    ee28:	4a11      	ldr	r2, [pc, #68]	; (ee70 <handle_at_recvfrom+0x1fc>)
			LOG_ERR("hex convert error: %d", ret);
    ee2a:	481b      	ldr	r0, [pc, #108]	; (ee98 <handle_at_recvfrom+0x224>)
    ee2c:	1ad2      	subs	r2, r2, r3
    ee2e:	08d2      	lsrs	r2, r2, #3
    ee30:	0192      	lsls	r2, r2, #6
    ee32:	f042 0201 	orr.w	r2, r2, #1
    ee36:	f014 fcbd 	bl	237b4 <log_1>
    ee3a:	e7f1      	b.n	ee20 <handle_at_recvfrom+0x1ac>
		rsp_send(data, ret);
    ee3c:	4629      	mov	r1, r5
    ee3e:	f107 0098 	add.w	r0, r7, #152	; 0x98
    ee42:	f7ff f8d3 	bl	dfec <rsp_send>
		sprintf(rsp_buf, "\r\n#XRECVFROM: %d, %d\r\n",
    ee46:	2301      	movs	r3, #1
    ee48:	f640 228c 	movw	r2, #2700	; 0xa8c
    ee4c:	4621      	mov	r1, r4
    ee4e:	9300      	str	r3, [sp, #0]
    ee50:	480e      	ldr	r0, [pc, #56]	; (ee8c <handle_at_recvfrom+0x218>)
    ee52:	4b10      	ldr	r3, [pc, #64]	; (ee94 <handle_at_recvfrom+0x220>)
    ee54:	9501      	str	r5, [sp, #4]
    ee56:	f017 ff2d 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    ee5a:	480c      	ldr	r0, [pc, #48]	; (ee8c <handle_at_recvfrom+0x218>)
    ee5c:	f7fe f808 	bl	ce70 <strlen>
    ee60:	4601      	mov	r1, r0
    ee62:	480a      	ldr	r0, [pc, #40]	; (ee8c <handle_at_recvfrom+0x218>)
    ee64:	f7ff f8c2 	bl	dfec <rsp_send>
	return 0;
    ee68:	4620      	mov	r0, r4
		break;
    ee6a:	e71e      	b.n	ecaa <handle_at_recvfrom+0x36>
    ee6c:	200214e4 	.word	0x200214e4
    ee70:	00027bc8 	.word	0x00027bc8
    ee74:	00027b20 	.word	0x00027b20
    ee78:	00028bff 	.word	0x00028bff
    ee7c:	00028ced 	.word	0x00028ced
    ee80:	200213d0 	.word	0x200213d0
    ee84:	200214f8 	.word	0x200214f8
    ee88:	00028cfe 	.word	0x00028cfe
    ee8c:	20026ea6 	.word	0x20026ea6
    ee90:	00028d13 	.word	0x00028d13
    ee94:	00028d22 	.word	0x00028d22
    ee98:	00028d39 	.word	0x00028d39

0000ee9c <do_recv>:
{
    ee9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee9e:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	int sock = client.sock;
    eea2:	4b5d      	ldr	r3, [pc, #372]	; (f018 <do_recv+0x17c>)
{
    eea4:	4602      	mov	r2, r0
	if (client.role == AT_SOCKET_ROLE_SERVER) {
    eea6:	e9d3 0100 	ldrd	r0, r1, [r3]
    eeaa:	2901      	cmp	r1, #1
{
    eeac:	af02      	add	r7, sp, #8
	if (client.role == AT_SOCKET_ROLE_SERVER) {
    eeae:	d113      	bne.n	eed8 <do_recv+0x3c>
		if (client.sock_peer != INVALID_SOCKET) {
    eeb0:	6898      	ldr	r0, [r3, #8]
    eeb2:	1c43      	adds	r3, r0, #1
    eeb4:	d110      	bne.n	eed8 <do_recv+0x3c>
    eeb6:	4b59      	ldr	r3, [pc, #356]	; (f01c <do_recv+0x180>)
    eeb8:	4959      	ldr	r1, [pc, #356]	; (f020 <do_recv+0x184>)
			LOG_ERR("No remote connection");
    eeba:	485a      	ldr	r0, [pc, #360]	; (f024 <do_recv+0x188>)
    eebc:	1ac9      	subs	r1, r1, r3
    eebe:	08c9      	lsrs	r1, r1, #3
    eec0:	0189      	lsls	r1, r1, #6
    eec2:	f041 0101 	orr.w	r1, r1, #1
    eec6:	f014 fc66 	bl	23796 <log_0>
			return -EINVAL;
    eeca:	f06f 0415 	mvn.w	r4, #21
}
    eece:	4620      	mov	r0, r4
    eed0:	f507 7713 	add.w	r7, r7, #588	; 0x24c
    eed4:	46bd      	mov	sp, r7
    eed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eed8:	2300      	movs	r3, #0
    eeda:	f107 0108 	add.w	r1, r7, #8
    eede:	e9cd 3300 	strd	r3, r3, [sp]
    eee2:	f015 f83c 	bl	23f5e <z_impl_zsock_recvfrom>
	if (ret < 0) {
    eee6:	1e05      	subs	r5, r0, #0
    eee8:	da37      	bge.n	ef5a <do_recv+0xbe>
    eeea:	4a4c      	ldr	r2, [pc, #304]	; (f01c <do_recv+0x180>)
    eeec:	4c4c      	ldr	r4, [pc, #304]	; (f020 <do_recv+0x184>)
    eeee:	1aa4      	subs	r4, r4, r2
		LOG_WRN("recv() error: %d", -errno);
    eef0:	f015 fa38 	bl	24364 <__errno>
    eef4:	08e4      	lsrs	r4, r4, #3
    eef6:	6801      	ldr	r1, [r0, #0]
    eef8:	01a4      	lsls	r4, r4, #6
    eefa:	f044 0402 	orr.w	r4, r4, #2
    eefe:	4622      	mov	r2, r4
    ef00:	4849      	ldr	r0, [pc, #292]	; (f028 <do_recv+0x18c>)
    ef02:	4249      	negs	r1, r1
    ef04:	f014 fc56 	bl	237b4 <log_1>
		if (errno != EAGAIN && errno != ETIMEDOUT) {
    ef08:	f015 fa2c 	bl	24364 <__errno>
    ef0c:	6803      	ldr	r3, [r0, #0]
    ef0e:	2b0b      	cmp	r3, #11
    ef10:	d00f      	beq.n	ef32 <do_recv+0x96>
    ef12:	f015 fa27 	bl	24364 <__errno>
    ef16:	6803      	ldr	r3, [r0, #0]
    ef18:	2b74      	cmp	r3, #116	; 0x74
    ef1a:	d00a      	beq.n	ef32 <do_recv+0x96>
			do_socket_close(-errno);
    ef1c:	f015 fa22 	bl	24364 <__errno>
    ef20:	6800      	ldr	r0, [r0, #0]
    ef22:	4240      	negs	r0, r0
    ef24:	f7ff fe5c 	bl	ebe0 <do_socket_close>
		return -errno;
    ef28:	f015 fa1c 	bl	24364 <__errno>
    ef2c:	6804      	ldr	r4, [r0, #0]
    ef2e:	4264      	negs	r4, r4
    ef30:	e7cd      	b.n	eece <do_recv+0x32>
			sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
    ef32:	f015 fa17 	bl	24364 <__errno>
    ef36:	6803      	ldr	r3, [r0, #0]
    ef38:	f640 228c 	movw	r2, #2700	; 0xa8c
    ef3c:	425b      	negs	r3, r3
    ef3e:	2100      	movs	r1, #0
    ef40:	9300      	str	r3, [sp, #0]
    ef42:	483a      	ldr	r0, [pc, #232]	; (f02c <do_recv+0x190>)
    ef44:	4b3a      	ldr	r3, [pc, #232]	; (f030 <do_recv+0x194>)
    ef46:	f017 feb5 	bl	26cb4 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
    ef4a:	4838      	ldr	r0, [pc, #224]	; (f02c <do_recv+0x190>)
    ef4c:	f7fd ff90 	bl	ce70 <strlen>
    ef50:	4601      	mov	r1, r0
    ef52:	4836      	ldr	r0, [pc, #216]	; (f02c <do_recv+0x190>)
    ef54:	f7ff f84a 	bl	dfec <rsp_send>
    ef58:	e7e6      	b.n	ef28 <do_recv+0x8c>
	if (ret == 0) {
    ef5a:	d109      	bne.n	ef70 <do_recv+0xd4>
    ef5c:	4930      	ldr	r1, [pc, #192]	; (f020 <do_recv+0x184>)
    ef5e:	4b2f      	ldr	r3, [pc, #188]	; (f01c <do_recv+0x180>)
		LOG_WRN("recv() return 0");
    ef60:	4834      	ldr	r0, [pc, #208]	; (f034 <do_recv+0x198>)
    ef62:	1ac9      	subs	r1, r1, r3
    ef64:	08c9      	lsrs	r1, r1, #3
    ef66:	0189      	lsls	r1, r1, #6
    ef68:	f041 0102 	orr.w	r1, r1, #2
    ef6c:	f014 fc13 	bl	23796 <log_0>
	if (slm_util_hex_check(data, ret)) {
    ef70:	b2a9      	uxth	r1, r5
    ef72:	f107 0008 	add.w	r0, r7, #8
    ef76:	6079      	str	r1, [r7, #4]
    ef78:	f014 f857 	bl	2302a <slm_util_hex_check>
    ef7c:	4604      	mov	r4, r0
    ef7e:	2800      	cmp	r0, #0
    ef80:	d033      	beq.n	efea <do_recv+0x14e>
		char data_hex[ret * 2];
    ef82:	006b      	lsls	r3, r5, #1
    ef84:	1dda      	adds	r2, r3, #7
    ef86:	f022 0207 	bic.w	r2, r2, #7
	if (slm_util_hex_check(data, ret)) {
    ef8a:	466e      	mov	r6, sp
		char data_hex[ret * 2];
    ef8c:	ebad 0d02 	sub.w	sp, sp, r2
    ef90:	ad02      	add	r5, sp, #8
		ret = slm_util_htoa(data, ret, data_hex, size);
    ef92:	462a      	mov	r2, r5
    ef94:	6879      	ldr	r1, [r7, #4]
    ef96:	b29b      	uxth	r3, r3
    ef98:	f107 0008 	add.w	r0, r7, #8
    ef9c:	f7fe ff0e 	bl	ddbc <slm_util_htoa>
		if (ret > 0) {
    efa0:	1e04      	subs	r4, r0, #0
    efa2:	dd16      	ble.n	efd2 <do_recv+0x136>
			rsp_send(data_hex, ret);
    efa4:	4621      	mov	r1, r4
    efa6:	4628      	mov	r0, r5
    efa8:	f7ff f820 	bl	dfec <rsp_send>
			sprintf(rsp_buf, "\r\n#XRECV: %d, %d\r\n",
    efac:	9401      	str	r4, [sp, #4]
    efae:	2400      	movs	r4, #0
    efb0:	f640 228c 	movw	r2, #2700	; 0xa8c
    efb4:	4621      	mov	r1, r4
    efb6:	4b20      	ldr	r3, [pc, #128]	; (f038 <do_recv+0x19c>)
    efb8:	481c      	ldr	r0, [pc, #112]	; (f02c <do_recv+0x190>)
    efba:	9400      	str	r4, [sp, #0]
    efbc:	f017 fe7a 	bl	26cb4 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
    efc0:	481a      	ldr	r0, [pc, #104]	; (f02c <do_recv+0x190>)
    efc2:	f7fd ff55 	bl	ce70 <strlen>
    efc6:	4601      	mov	r1, r0
    efc8:	4818      	ldr	r0, [pc, #96]	; (f02c <do_recv+0x190>)
    efca:	f7ff f80f 	bl	dfec <rsp_send>
			LOG_ERR("hex convert error: %d", ret);
    efce:	46b5      	mov	sp, r6
    efd0:	e77d      	b.n	eece <do_recv+0x32>
    efd2:	4b12      	ldr	r3, [pc, #72]	; (f01c <do_recv+0x180>)
    efd4:	4a12      	ldr	r2, [pc, #72]	; (f020 <do_recv+0x184>)
    efd6:	4621      	mov	r1, r4
    efd8:	1ad2      	subs	r2, r2, r3
    efda:	08d2      	lsrs	r2, r2, #3
    efdc:	0192      	lsls	r2, r2, #6
    efde:	4817      	ldr	r0, [pc, #92]	; (f03c <do_recv+0x1a0>)
    efe0:	f042 0201 	orr.w	r2, r2, #1
    efe4:	f014 fbe6 	bl	237b4 <log_1>
    efe8:	e7f1      	b.n	efce <do_recv+0x132>
		rsp_send(data, ret);
    efea:	4629      	mov	r1, r5
    efec:	f107 0008 	add.w	r0, r7, #8
    eff0:	f7fe fffc 	bl	dfec <rsp_send>
		sprintf(rsp_buf, "\r\n#XRECV: %d, %d\r\n",
    eff4:	2301      	movs	r3, #1
    eff6:	4621      	mov	r1, r4
    eff8:	f640 228c 	movw	r2, #2700	; 0xa8c
    effc:	9300      	str	r3, [sp, #0]
    effe:	9501      	str	r5, [sp, #4]
    f000:	4b0d      	ldr	r3, [pc, #52]	; (f038 <do_recv+0x19c>)
    f002:	480a      	ldr	r0, [pc, #40]	; (f02c <do_recv+0x190>)
    f004:	f017 fe56 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    f008:	4808      	ldr	r0, [pc, #32]	; (f02c <do_recv+0x190>)
    f00a:	f7fd ff31 	bl	ce70 <strlen>
    f00e:	4601      	mov	r1, r0
    f010:	4806      	ldr	r0, [pc, #24]	; (f02c <do_recv+0x190>)
    f012:	f7fe ffeb 	bl	dfec <rsp_send>
		ret = 0;
    f016:	e75a      	b.n	eece <do_recv+0x32>
    f018:	200214e4 	.word	0x200214e4
    f01c:	00027b20 	.word	0x00027b20
    f020:	00027bc8 	.word	0x00027bc8
    f024:	00028d4f 	.word	0x00028d4f
    f028:	00028d64 	.word	0x00028d64
    f02c:	20026ea6 	.word	0x20026ea6
    f030:	00028d13 	.word	0x00028d13
    f034:	00028d75 	.word	0x00028d75
    f038:	00028d85 	.word	0x00028d85
    f03c:	00028d39 	.word	0x00028d39

0000f040 <handle_at_recv>:
	u16_t length = NET_IPV4_MTU;
    f040:	f44f 7310 	mov.w	r3, #576	; 0x240
{
    f044:	b513      	push	{r0, r1, r4, lr}
	u16_t length = NET_IPV4_MTU;
    f046:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!client.connected) {
    f04a:	4b13      	ldr	r3, [pc, #76]	; (f098 <handle_at_recv+0x58>)
{
    f04c:	4604      	mov	r4, r0
	if (!client.connected) {
    f04e:	7c1b      	ldrb	r3, [r3, #16]
    f050:	b963      	cbnz	r3, f06c <handle_at_recv+0x2c>
    f052:	4912      	ldr	r1, [pc, #72]	; (f09c <handle_at_recv+0x5c>)
    f054:	4b12      	ldr	r3, [pc, #72]	; (f0a0 <handle_at_recv+0x60>)
		LOG_ERR("Not connected yet");
    f056:	4813      	ldr	r0, [pc, #76]	; (f0a4 <handle_at_recv+0x64>)
    f058:	1ac9      	subs	r1, r1, r3
    f05a:	08c9      	lsrs	r1, r1, #3
    f05c:	0189      	lsls	r1, r1, #6
    f05e:	f041 0101 	orr.w	r1, r1, #1
    f062:	f014 fb98 	bl	23796 <log_0>
	int err = -EINVAL;
    f066:	f06f 0015 	mvn.w	r0, #21
    f06a:	e00a      	b.n	f082 <handle_at_recv+0x42>
	switch (cmd_type) {
    f06c:	2801      	cmp	r0, #1
    f06e:	d1fa      	bne.n	f066 <handle_at_recv+0x26>
		if (at_params_valid_count_get(&at_param_list) > 1) {
    f070:	480d      	ldr	r0, [pc, #52]	; (f0a8 <handle_at_recv+0x68>)
    f072:	f017 f827 	bl	260c4 <at_params_valid_count_get>
    f076:	2801      	cmp	r0, #1
    f078:	d805      	bhi.n	f086 <handle_at_recv+0x46>
		err = do_recv(length);
    f07a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    f07e:	f7ff ff0d 	bl	ee9c <do_recv>
}
    f082:	b002      	add	sp, #8
    f084:	bd10      	pop	{r4, pc}
			err = at_params_short_get(&at_param_list, 1, &length);
    f086:	4621      	mov	r1, r4
    f088:	4807      	ldr	r0, [pc, #28]	; (f0a8 <handle_at_recv+0x68>)
    f08a:	f10d 0206 	add.w	r2, sp, #6
    f08e:	f016 ffd1 	bl	26034 <at_params_short_get>
			if (err) {
    f092:	2800      	cmp	r0, #0
    f094:	d0f1      	beq.n	f07a <handle_at_recv+0x3a>
    f096:	e7f4      	b.n	f082 <handle_at_recv+0x42>
    f098:	200214e4 	.word	0x200214e4
    f09c:	00027bc8 	.word	0x00027bc8
    f0a0:	00027b20 	.word	0x00027b20
    f0a4:	00028d98 	.word	0x00028d98
    f0a8:	200213d0 	.word	0x200213d0

0000f0ac <do_sendto>:
{
    f0ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f0b0:	4617      	mov	r7, r2
    f0b2:	461e      	mov	r6, r3
	ret = do_udp_init(url, port);
    f0b4:	f7ff fc94 	bl	e9e0 <do_udp_init>
	if (ret < 0) {
    f0b8:	1e04      	subs	r4, r0, #0
    f0ba:	db47      	blt.n	f14c <do_sendto+0xa0>
	u32_t offset = 0;
    f0bc:	2500      	movs	r5, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    f0be:	f04f 0908 	mov.w	r9, #8
		ret = sendto(client.sock, data + offset,
    f0c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; f198 <do_sendto+0xec>
    f0c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; f19c <do_sendto+0xf0>
	while (offset < datalen) {
    f0ca:	42ae      	cmp	r6, r5
    f0cc:	d92d      	bls.n	f12a <do_sendto+0x7e>
		ret = sendto(client.sock, data + offset,
    f0ce:	f8d8 0000 	ldr.w	r0, [r8]
    f0d2:	2300      	movs	r3, #0
    f0d4:	e9cd a900 	strd	sl, r9, [sp]
    f0d8:	1b72      	subs	r2, r6, r5
    f0da:	1979      	adds	r1, r7, r5
    f0dc:	f014 ff14 	bl	23f08 <z_impl_zsock_sendto>
		if (ret <= 0) {
    f0e0:	1e04      	subs	r4, r0, #0
    f0e2:	dc4b      	bgt.n	f17c <do_sendto+0xd0>
    f0e4:	4a26      	ldr	r2, [pc, #152]	; (f180 <do_sendto+0xd4>)
    f0e6:	4c27      	ldr	r4, [pc, #156]	; (f184 <do_sendto+0xd8>)
    f0e8:	1aa4      	subs	r4, r4, r2
			LOG_ERR("sendto() failed: %d", -errno);
    f0ea:	f015 f93b 	bl	24364 <__errno>
    f0ee:	08e4      	lsrs	r4, r4, #3
    f0f0:	6801      	ldr	r1, [r0, #0]
    f0f2:	01a4      	lsls	r4, r4, #6
    f0f4:	f044 0401 	orr.w	r4, r4, #1
    f0f8:	4622      	mov	r2, r4
    f0fa:	4823      	ldr	r0, [pc, #140]	; (f188 <do_sendto+0xdc>)
    f0fc:	4249      	negs	r1, r1
    f0fe:	f014 fb59 	bl	237b4 <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
    f102:	f015 f92f 	bl	24364 <__errno>
    f106:	6803      	ldr	r3, [r0, #0]
    f108:	2b0b      	cmp	r3, #11
    f10a:	d023      	beq.n	f154 <do_sendto+0xa8>
    f10c:	f015 f92a 	bl	24364 <__errno>
    f110:	6803      	ldr	r3, [r0, #0]
    f112:	2b74      	cmp	r3, #116	; 0x74
    f114:	d01e      	beq.n	f154 <do_sendto+0xa8>
				do_socket_close(-errno);
    f116:	f015 f925 	bl	24364 <__errno>
    f11a:	6800      	ldr	r0, [r0, #0]
    f11c:	4240      	negs	r0, r0
    f11e:	f7ff fd5f 	bl	ebe0 <do_socket_close>
			ret = -errno;
    f122:	f015 f91f 	bl	24364 <__errno>
    f126:	6804      	ldr	r4, [r0, #0]
    f128:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XSENDTO: %d\r\n", offset);
    f12a:	f640 228c 	movw	r2, #2700	; 0xa8c
    f12e:	2100      	movs	r1, #0
    f130:	4b16      	ldr	r3, [pc, #88]	; (f18c <do_sendto+0xe0>)
    f132:	4817      	ldr	r0, [pc, #92]	; (f190 <do_sendto+0xe4>)
    f134:	9500      	str	r5, [sp, #0]
    f136:	f017 fdbd 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
    f13a:	4815      	ldr	r0, [pc, #84]	; (f190 <do_sendto+0xe4>)
    f13c:	f7fd fe98 	bl	ce70 <strlen>
    f140:	4601      	mov	r1, r0
    f142:	4813      	ldr	r0, [pc, #76]	; (f190 <do_sendto+0xe4>)
    f144:	f7fe ff52 	bl	dfec <rsp_send>
	if (ret >= 0) {
    f148:	ea04 74e4 	and.w	r4, r4, r4, asr #31
}
    f14c:	4620      	mov	r0, r4
    f14e:	b002      	add	sp, #8
    f150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
    f154:	f015 f906 	bl	24364 <__errno>
    f158:	6803      	ldr	r3, [r0, #0]
    f15a:	f640 228c 	movw	r2, #2700	; 0xa8c
    f15e:	425b      	negs	r3, r3
    f160:	2100      	movs	r1, #0
    f162:	9300      	str	r3, [sp, #0]
    f164:	480a      	ldr	r0, [pc, #40]	; (f190 <do_sendto+0xe4>)
    f166:	4b0b      	ldr	r3, [pc, #44]	; (f194 <do_sendto+0xe8>)
    f168:	f017 fda4 	bl	26cb4 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
    f16c:	4808      	ldr	r0, [pc, #32]	; (f190 <do_sendto+0xe4>)
    f16e:	f7fd fe7f 	bl	ce70 <strlen>
    f172:	4601      	mov	r1, r0
    f174:	4806      	ldr	r0, [pc, #24]	; (f190 <do_sendto+0xe4>)
    f176:	f7fe ff39 	bl	dfec <rsp_send>
    f17a:	e7d2      	b.n	f122 <do_sendto+0x76>
		offset += ret;
    f17c:	4425      	add	r5, r4
    f17e:	e7a4      	b.n	f0ca <do_sendto+0x1e>
    f180:	00027b20 	.word	0x00027b20
    f184:	00027bc8 	.word	0x00027bc8
    f188:	00028daa 	.word	0x00028daa
    f18c:	00028dbe 	.word	0x00028dbe
    f190:	20026ea6 	.word	0x20026ea6
    f194:	00028d13 	.word	0x00028d13
    f198:	200214e4 	.word	0x200214e4
    f19c:	200214f8 	.word	0x200214f8

0000f1a0 <handle_at_sendto>:
{
    f1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1a2:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
	if (client.sock < 0) {
    f1a6:	4b3c      	ldr	r3, [pc, #240]	; (f298 <handle_at_sendto+0xf8>)
{
    f1a8:	4605      	mov	r5, r0
	if (client.sock < 0) {
    f1aa:	681a      	ldr	r2, [r3, #0]
{
    f1ac:	af00      	add	r7, sp, #0
	if (client.sock < 0) {
    f1ae:	2a00      	cmp	r2, #0
    f1b0:	da0f      	bge.n	f1d2 <handle_at_sendto+0x32>
    f1b2:	493a      	ldr	r1, [pc, #232]	; (f29c <handle_at_sendto+0xfc>)
    f1b4:	4b3a      	ldr	r3, [pc, #232]	; (f2a0 <handle_at_sendto+0x100>)
		LOG_ERR("Socket not opened yet");
    f1b6:	483b      	ldr	r0, [pc, #236]	; (f2a4 <handle_at_sendto+0x104>)
    f1b8:	1ac9      	subs	r1, r1, r3
    f1ba:	08c9      	lsrs	r1, r1, #3
    f1bc:	0189      	lsls	r1, r1, #6
    f1be:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid protocol");
    f1c2:	f014 fae8 	bl	23796 <log_0>
	int err = -EINVAL;
    f1c6:	f06f 0015 	mvn.w	r0, #21
}
    f1ca:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
    f1ce:	46bd      	mov	sp, r7
    f1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client.ip_proto != IPPROTO_UDP &&
    f1d2:	68db      	ldr	r3, [r3, #12]
    f1d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    f1d8:	2b11      	cmp	r3, #17
    f1da:	d008      	beq.n	f1ee <handle_at_sendto+0x4e>
    f1dc:	492f      	ldr	r1, [pc, #188]	; (f29c <handle_at_sendto+0xfc>)
    f1de:	4b30      	ldr	r3, [pc, #192]	; (f2a0 <handle_at_sendto+0x100>)
		LOG_ERR("Invalid protocol");
    f1e0:	4831      	ldr	r0, [pc, #196]	; (f2a8 <handle_at_sendto+0x108>)
    f1e2:	1ac9      	subs	r1, r1, r3
    f1e4:	08c9      	lsrs	r1, r1, #3
    f1e6:	0189      	lsls	r1, r1, #6
    f1e8:	f041 0101 	orr.w	r1, r1, #1
    f1ec:	e7e9      	b.n	f1c2 <handle_at_sendto+0x22>
	switch (cmd_type) {
    f1ee:	2801      	cmp	r0, #1
    f1f0:	d1e9      	bne.n	f1c6 <handle_at_sendto+0x26>
		if (at_params_valid_count_get(&at_param_list) < 5) {
    f1f2:	482e      	ldr	r0, [pc, #184]	; (f2ac <handle_at_sendto+0x10c>)
    f1f4:	f016 ff66 	bl	260c4 <at_params_valid_count_get>
    f1f8:	2804      	cmp	r0, #4
    f1fa:	d9e4      	bls.n	f1c6 <handle_at_sendto+0x26>
		size = TCPIP_MAX_URL;
    f1fc:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&at_param_list, 1, url, &size);
    f1fe:	f107 0408 	add.w	r4, r7, #8
		size = TCPIP_MAX_URL;
    f202:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&at_param_list, 1, url, &size);
    f204:	4622      	mov	r2, r4
    f206:	4629      	mov	r1, r5
    f208:	4828      	ldr	r0, [pc, #160]	; (f2ac <handle_at_sendto+0x10c>)
    f20a:	1d3b      	adds	r3, r7, #4
    f20c:	f016 ff37 	bl	2607e <at_params_string_get>
		if (err) {
    f210:	2800      	cmp	r0, #0
    f212:	d1da      	bne.n	f1ca <handle_at_sendto+0x2a>
		url[size] = '\0';
    f214:	687b      	ldr	r3, [r7, #4]
		err = at_params_short_get(&at_param_list, 2, &port);
    f216:	463a      	mov	r2, r7
		url[size] = '\0';
    f218:	54e0      	strb	r0, [r4, r3]
		err = at_params_short_get(&at_param_list, 2, &port);
    f21a:	2102      	movs	r1, #2
    f21c:	4823      	ldr	r0, [pc, #140]	; (f2ac <handle_at_sendto+0x10c>)
    f21e:	f016 ff09 	bl	26034 <at_params_short_get>
		if (err) {
    f222:	2800      	cmp	r0, #0
    f224:	d1d1      	bne.n	f1ca <handle_at_sendto+0x2a>
		err = at_params_short_get(&at_param_list, 3, &datatype);
    f226:	2103      	movs	r1, #3
    f228:	4820      	ldr	r0, [pc, #128]	; (f2ac <handle_at_sendto+0x10c>)
    f22a:	1cba      	adds	r2, r7, #2
    f22c:	f016 ff02 	bl	26034 <at_params_short_get>
		if (err) {
    f230:	2800      	cmp	r0, #0
    f232:	d1ca      	bne.n	f1ca <handle_at_sendto+0x2a>
		size = NET_IPV4_MTU;
    f234:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&at_param_list, 4, data, &size);
    f238:	2104      	movs	r1, #4
		size = NET_IPV4_MTU;
    f23a:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&at_param_list, 4, data, &size);
    f23c:	481b      	ldr	r0, [pc, #108]	; (f2ac <handle_at_sendto+0x10c>)
    f23e:	1d3b      	adds	r3, r7, #4
    f240:	f107 0288 	add.w	r2, r7, #136	; 0x88
    f244:	f016 ff1b 	bl	2607e <at_params_string_get>
		if (err) {
    f248:	2800      	cmp	r0, #0
    f24a:	d1be      	bne.n	f1ca <handle_at_sendto+0x2a>
		if (datatype == DATATYPE_HEXADECIMAL) {
    f24c:	887b      	ldrh	r3, [r7, #2]
    f24e:	6879      	ldr	r1, [r7, #4]
    f250:	b9d3      	cbnz	r3, f288 <handle_at_sendto+0xe8>
			u8_t data_hex[size / 2];
    f252:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
    f256:	105b      	asrs	r3, r3, #1
    f258:	1dda      	adds	r2, r3, #7
    f25a:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
    f25e:	466d      	mov	r5, sp
			u8_t data_hex[size / 2];
    f260:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
    f264:	466a      	mov	r2, sp
    f266:	b29b      	uxth	r3, r3
    f268:	b289      	uxth	r1, r1
    f26a:	f107 0088 	add.w	r0, r7, #136	; 0x88
    f26e:	f013 feef 	bl	23050 <slm_util_atoh>
			if (err > 0) {
    f272:	2800      	cmp	r0, #0
			u8_t data_hex[size / 2];
    f274:	466e      	mov	r6, sp
			if (err > 0) {
    f276:	dd05      	ble.n	f284 <handle_at_sendto+0xe4>
				err = do_sendto(url, port, data_hex, err);
    f278:	4603      	mov	r3, r0
    f27a:	4632      	mov	r2, r6
    f27c:	4620      	mov	r0, r4
    f27e:	8839      	ldrh	r1, [r7, #0]
    f280:	f7ff ff14 	bl	f0ac <do_sendto>
    f284:	46ad      	mov	sp, r5
    f286:	e7a0      	b.n	f1ca <handle_at_sendto+0x2a>
			err = do_sendto(url, port, data, size);
    f288:	460b      	mov	r3, r1
    f28a:	4620      	mov	r0, r4
    f28c:	8839      	ldrh	r1, [r7, #0]
    f28e:	f107 0288 	add.w	r2, r7, #136	; 0x88
    f292:	f7ff ff0b 	bl	f0ac <do_sendto>
    f296:	e798      	b.n	f1ca <handle_at_sendto+0x2a>
    f298:	200214e4 	.word	0x200214e4
    f29c:	00027bc8 	.word	0x00027bc8
    f2a0:	00027b20 	.word	0x00027b20
    f2a4:	00028bff 	.word	0x00028bff
    f2a8:	00028ced 	.word	0x00028ced
    f2ac:	200213d0 	.word	0x200213d0

0000f2b0 <do_send>:
	int sock = client.sock;
    f2b0:	4b3a      	ldr	r3, [pc, #232]	; (f39c <do_send+0xec>)
{
    f2b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (client.role == AT_SOCKET_ROLE_SERVER) {
    f2b6:	e9d3 7200 	ldrd	r7, r2, [r3]
    f2ba:	2a01      	cmp	r2, #1
{
    f2bc:	4680      	mov	r8, r0
    f2be:	460e      	mov	r6, r1
	if (client.role == AT_SOCKET_ROLE_SERVER) {
    f2c0:	d168      	bne.n	f394 <do_send+0xe4>
		if (client.sock_peer != INVALID_SOCKET) {
    f2c2:	689f      	ldr	r7, [r3, #8]
    f2c4:	1c7b      	adds	r3, r7, #1
    f2c6:	d165      	bne.n	f394 <do_send+0xe4>
    f2c8:	4b35      	ldr	r3, [pc, #212]	; (f3a0 <do_send+0xf0>)
    f2ca:	4936      	ldr	r1, [pc, #216]	; (f3a4 <do_send+0xf4>)
			LOG_ERR("No remote connection");
    f2cc:	4836      	ldr	r0, [pc, #216]	; (f3a8 <do_send+0xf8>)
    f2ce:	1ac9      	subs	r1, r1, r3
    f2d0:	08c9      	lsrs	r1, r1, #3
    f2d2:	0189      	lsls	r1, r1, #6
    f2d4:	f041 0101 	orr.w	r1, r1, #1
    f2d8:	f014 fa5d 	bl	23796 <log_0>
			return -EINVAL;
    f2dc:	f06f 0015 	mvn.w	r0, #21
}
    f2e0:	b003      	add	sp, #12
    f2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
    f2e6:	f015 f83d 	bl	24364 <__errno>
    f2ea:	6803      	ldr	r3, [r0, #0]
    f2ec:	f640 228c 	movw	r2, #2700	; 0xa8c
    f2f0:	425b      	negs	r3, r3
    f2f2:	2100      	movs	r1, #0
    f2f4:	9300      	str	r3, [sp, #0]
    f2f6:	482d      	ldr	r0, [pc, #180]	; (f3ac <do_send+0xfc>)
    f2f8:	4b2d      	ldr	r3, [pc, #180]	; (f3b0 <do_send+0x100>)
    f2fa:	f017 fcdb 	bl	26cb4 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
    f2fe:	482b      	ldr	r0, [pc, #172]	; (f3ac <do_send+0xfc>)
    f300:	f7fd fdb6 	bl	ce70 <strlen>
    f304:	4601      	mov	r1, r0
    f306:	4829      	ldr	r0, [pc, #164]	; (f3ac <do_send+0xfc>)
    f308:	f7fe fe70 	bl	dfec <rsp_send>
    f30c:	e02c      	b.n	f368 <do_send+0xb8>
		offset += ret;
    f30e:	4425      	add	r5, r4
	while (offset < datalen) {
    f310:	42ae      	cmp	r6, r5
    f312:	d92d      	bls.n	f370 <do_send+0xc0>
    f314:	2300      	movs	r3, #0
    f316:	4638      	mov	r0, r7
    f318:	e9cd 9900 	strd	r9, r9, [sp]
    f31c:	1b72      	subs	r2, r6, r5
    f31e:	eb08 0105 	add.w	r1, r8, r5
    f322:	f014 fdf1 	bl	23f08 <z_impl_zsock_sendto>
		if (ret < 0) {
    f326:	1e04      	subs	r4, r0, #0
    f328:	daf1      	bge.n	f30e <do_send+0x5e>
    f32a:	4a1d      	ldr	r2, [pc, #116]	; (f3a0 <do_send+0xf0>)
    f32c:	4c1d      	ldr	r4, [pc, #116]	; (f3a4 <do_send+0xf4>)
    f32e:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
    f330:	f015 f818 	bl	24364 <__errno>
    f334:	08e4      	lsrs	r4, r4, #3
    f336:	6801      	ldr	r1, [r0, #0]
    f338:	01a4      	lsls	r4, r4, #6
    f33a:	f044 0401 	orr.w	r4, r4, #1
    f33e:	4622      	mov	r2, r4
    f340:	481c      	ldr	r0, [pc, #112]	; (f3b4 <do_send+0x104>)
    f342:	4249      	negs	r1, r1
    f344:	f014 fa36 	bl	237b4 <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
    f348:	f015 f80c 	bl	24364 <__errno>
    f34c:	6803      	ldr	r3, [r0, #0]
    f34e:	2b0b      	cmp	r3, #11
    f350:	d0c9      	beq.n	f2e6 <do_send+0x36>
    f352:	f015 f807 	bl	24364 <__errno>
    f356:	6803      	ldr	r3, [r0, #0]
    f358:	2b74      	cmp	r3, #116	; 0x74
    f35a:	d0c4      	beq.n	f2e6 <do_send+0x36>
				do_socket_close(-errno);
    f35c:	f015 f802 	bl	24364 <__errno>
    f360:	6800      	ldr	r0, [r0, #0]
    f362:	4240      	negs	r0, r0
    f364:	f7ff fc3c 	bl	ebe0 <do_socket_close>
			ret = -errno;
    f368:	f014 fffc 	bl	24364 <__errno>
    f36c:	6804      	ldr	r4, [r0, #0]
    f36e:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XSEND: %d\r\n", offset);
    f370:	f640 228c 	movw	r2, #2700	; 0xa8c
    f374:	2100      	movs	r1, #0
    f376:	4b10      	ldr	r3, [pc, #64]	; (f3b8 <do_send+0x108>)
    f378:	480c      	ldr	r0, [pc, #48]	; (f3ac <do_send+0xfc>)
    f37a:	9500      	str	r5, [sp, #0]
    f37c:	f017 fc9a 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
    f380:	480a      	ldr	r0, [pc, #40]	; (f3ac <do_send+0xfc>)
    f382:	f7fd fd75 	bl	ce70 <strlen>
    f386:	4601      	mov	r1, r0
    f388:	4808      	ldr	r0, [pc, #32]	; (f3ac <do_send+0xfc>)
    f38a:	f7fe fe2f 	bl	dfec <rsp_send>
	if (ret >= 0) {
    f38e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
    f392:	e7a5      	b.n	f2e0 <do_send+0x30>
{
    f394:	2400      	movs	r4, #0
    f396:	4625      	mov	r5, r4
    f398:	46a1      	mov	r9, r4
    f39a:	e7b9      	b.n	f310 <do_send+0x60>
    f39c:	200214e4 	.word	0x200214e4
    f3a0:	00027b20 	.word	0x00027b20
    f3a4:	00027bc8 	.word	0x00027bc8
    f3a8:	00028d4f 	.word	0x00028d4f
    f3ac:	20026ea6 	.word	0x20026ea6
    f3b0:	00028d13 	.word	0x00028d13
    f3b4:	00028dcd 	.word	0x00028dcd
    f3b8:	00028ddf 	.word	0x00028ddf

0000f3bc <handle_at_send>:
{
    f3bc:	b590      	push	{r4, r7, lr}
	int size = NET_IPV4_MTU;
    f3be:	f44f 7310 	mov.w	r3, #576	; 0x240
{
    f3c2:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
    f3c6:	af00      	add	r7, sp, #0
	int size = NET_IPV4_MTU;
    f3c8:	607b      	str	r3, [r7, #4]
	if (!client.connected) {
    f3ca:	4b25      	ldr	r3, [pc, #148]	; (f460 <handle_at_send+0xa4>)
{
    f3cc:	4604      	mov	r4, r0
	if (!client.connected) {
    f3ce:	7c1b      	ldrb	r3, [r3, #16]
    f3d0:	b97b      	cbnz	r3, f3f2 <handle_at_send+0x36>
    f3d2:	4924      	ldr	r1, [pc, #144]	; (f464 <handle_at_send+0xa8>)
    f3d4:	4b24      	ldr	r3, [pc, #144]	; (f468 <handle_at_send+0xac>)
		LOG_ERR("Not connected yet");
    f3d6:	4825      	ldr	r0, [pc, #148]	; (f46c <handle_at_send+0xb0>)
    f3d8:	1ac9      	subs	r1, r1, r3
    f3da:	08c9      	lsrs	r1, r1, #3
    f3dc:	0189      	lsls	r1, r1, #6
    f3de:	f041 0101 	orr.w	r1, r1, #1
    f3e2:	f014 f9d8 	bl	23796 <log_0>
	int err = -EINVAL;
    f3e6:	f06f 0015 	mvn.w	r0, #21
}
    f3ea:	f507 7713 	add.w	r7, r7, #588	; 0x24c
    f3ee:	46bd      	mov	sp, r7
    f3f0:	bd90      	pop	{r4, r7, pc}
	switch (cmd_type) {
    f3f2:	2801      	cmp	r0, #1
    f3f4:	d1f7      	bne.n	f3e6 <handle_at_send+0x2a>
		if (at_params_valid_count_get(&at_param_list) < 3) {
    f3f6:	481e      	ldr	r0, [pc, #120]	; (f470 <handle_at_send+0xb4>)
    f3f8:	f016 fe64 	bl	260c4 <at_params_valid_count_get>
    f3fc:	2802      	cmp	r0, #2
    f3fe:	d9f2      	bls.n	f3e6 <handle_at_send+0x2a>
		err = at_params_short_get(&at_param_list, 1, &datatype);
    f400:	4621      	mov	r1, r4
    f402:	481b      	ldr	r0, [pc, #108]	; (f470 <handle_at_send+0xb4>)
    f404:	1cba      	adds	r2, r7, #2
    f406:	f016 fe15 	bl	26034 <at_params_short_get>
		if (err) {
    f40a:	2800      	cmp	r0, #0
    f40c:	d1ed      	bne.n	f3ea <handle_at_send+0x2e>
		err = at_params_string_get(&at_param_list, 2, data, &size);
    f40e:	2102      	movs	r1, #2
    f410:	4817      	ldr	r0, [pc, #92]	; (f470 <handle_at_send+0xb4>)
    f412:	1d3b      	adds	r3, r7, #4
    f414:	f107 0208 	add.w	r2, r7, #8
    f418:	f016 fe31 	bl	2607e <at_params_string_get>
		if (err) {
    f41c:	2800      	cmp	r0, #0
    f41e:	d1e4      	bne.n	f3ea <handle_at_send+0x2e>
		if (datatype == DATATYPE_HEXADECIMAL) {
    f420:	887b      	ldrh	r3, [r7, #2]
    f422:	6879      	ldr	r1, [r7, #4]
    f424:	b9bb      	cbnz	r3, f456 <handle_at_send+0x9a>
			u8_t data_hex[size / 2];
    f426:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
    f42a:	105b      	asrs	r3, r3, #1
    f42c:	1dda      	adds	r2, r3, #7
    f42e:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
    f432:	466c      	mov	r4, sp
			u8_t data_hex[size / 2];
    f434:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
    f438:	466a      	mov	r2, sp
    f43a:	b29b      	uxth	r3, r3
    f43c:	b289      	uxth	r1, r1
    f43e:	f107 0008 	add.w	r0, r7, #8
    f442:	f013 fe05 	bl	23050 <slm_util_atoh>
			if (err > 0) {
    f446:	2800      	cmp	r0, #0
    f448:	dd03      	ble.n	f452 <handle_at_send+0x96>
				err = do_send(data_hex, err);
    f44a:	4601      	mov	r1, r0
    f44c:	4668      	mov	r0, sp
    f44e:	f7ff ff2f 	bl	f2b0 <do_send>
    f452:	46a5      	mov	sp, r4
    f454:	e7c9      	b.n	f3ea <handle_at_send+0x2e>
			err = do_send(data, size);
    f456:	f107 0008 	add.w	r0, r7, #8
    f45a:	f7ff ff29 	bl	f2b0 <do_send>
    f45e:	e7c4      	b.n	f3ea <handle_at_send+0x2e>
    f460:	200214e4 	.word	0x200214e4
    f464:	00027bc8 	.word	0x00027bc8
    f468:	00027b20 	.word	0x00027b20
    f46c:	00028d98 	.word	0x00028d98
    f470:	200213d0 	.word	0x200213d0

0000f474 <handle_at_accept>:
{
    f474:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (client.sock < 0) {
    f476:	4b4e      	ldr	r3, [pc, #312]	; (f5b0 <handle_at_accept+0x13c>)
{
    f478:	4604      	mov	r4, r0
	if (client.sock < 0) {
    f47a:	6818      	ldr	r0, [r3, #0]
    f47c:	461e      	mov	r6, r3
    f47e:	2800      	cmp	r0, #0
{
    f480:	b089      	sub	sp, #36	; 0x24
	if (client.sock < 0) {
    f482:	da0c      	bge.n	f49e <handle_at_accept+0x2a>
    f484:	494b      	ldr	r1, [pc, #300]	; (f5b4 <handle_at_accept+0x140>)
    f486:	4b4c      	ldr	r3, [pc, #304]	; (f5b8 <handle_at_accept+0x144>)
		LOG_ERR("Socket not opened yet");
    f488:	484c      	ldr	r0, [pc, #304]	; (f5bc <handle_at_accept+0x148>)
    f48a:	1ac9      	subs	r1, r1, r3
    f48c:	08c9      	lsrs	r1, r1, #3
    f48e:	0189      	lsls	r1, r1, #6
    f490:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
    f494:	f014 f97f 	bl	23796 <log_0>
		return -EINVAL;
    f498:	f06f 0015 	mvn.w	r0, #21
    f49c:	e046      	b.n	f52c <handle_at_accept+0xb8>
	if (client.role != AT_SOCKET_ROLE_SERVER) {
    f49e:	685a      	ldr	r2, [r3, #4]
    f4a0:	2a01      	cmp	r2, #1
    f4a2:	d008      	beq.n	f4b6 <handle_at_accept+0x42>
    f4a4:	4943      	ldr	r1, [pc, #268]	; (f5b4 <handle_at_accept+0x140>)
    f4a6:	4b44      	ldr	r3, [pc, #272]	; (f5b8 <handle_at_accept+0x144>)
		LOG_ERR("Invalid role");
    f4a8:	4845      	ldr	r0, [pc, #276]	; (f5c0 <handle_at_accept+0x14c>)
    f4aa:	1ac9      	subs	r1, r1, r3
    f4ac:	08c9      	lsrs	r1, r1, #3
    f4ae:	0189      	lsls	r1, r1, #6
    f4b0:	f041 0101 	orr.w	r1, r1, #1
    f4b4:	e7ee      	b.n	f494 <handle_at_accept+0x20>
	if (client.ip_proto != IPPROTO_TCP &&
    f4b6:	68db      	ldr	r3, [r3, #12]
    f4b8:	2b06      	cmp	r3, #6
    f4ba:	d00b      	beq.n	f4d4 <handle_at_accept+0x60>
    f4bc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    f4c0:	d008      	beq.n	f4d4 <handle_at_accept+0x60>
    f4c2:	493c      	ldr	r1, [pc, #240]	; (f5b4 <handle_at_accept+0x140>)
    f4c4:	4b3c      	ldr	r3, [pc, #240]	; (f5b8 <handle_at_accept+0x144>)
		LOG_ERR("Invalid protocol");
    f4c6:	483f      	ldr	r0, [pc, #252]	; (f5c4 <handle_at_accept+0x150>)
    f4c8:	1ac9      	subs	r1, r1, r3
    f4ca:	08c9      	lsrs	r1, r1, #3
    f4cc:	0189      	lsls	r1, r1, #6
    f4ce:	f041 0101 	orr.w	r1, r1, #1
    f4d2:	e7df      	b.n	f494 <handle_at_accept+0x20>
	switch (cmd_type) {
    f4d4:	2c01      	cmp	r4, #1
    f4d6:	d007      	beq.n	f4e8 <handle_at_accept+0x74>
    f4d8:	2c02      	cmp	r4, #2
    f4da:	d1dd      	bne.n	f498 <handle_at_accept+0x24>
		if (client.sock_peer != INVALID_SOCKET) {
    f4dc:	68b3      	ldr	r3, [r6, #8]
    f4de:	1c5a      	adds	r2, r3, #1
    f4e0:	d060      	beq.n	f5a4 <handle_at_accept+0x130>
			sprintf(rsp_buf, "#XTCPACCEPT: %d\r\n",
    f4e2:	9300      	str	r3, [sp, #0]
    f4e4:	4b38      	ldr	r3, [pc, #224]	; (f5c8 <handle_at_accept+0x154>)
    f4e6:	e04e      	b.n	f586 <handle_at_accept+0x112>
	socklen_t len = sizeof(struct sockaddr_in);
    f4e8:	2308      	movs	r3, #8
    f4ea:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_accept(sock, addr, addrlen);
    f4ec:	4937      	ldr	r1, [pc, #220]	; (f5cc <handle_at_accept+0x158>)
    f4ee:	aa03      	add	r2, sp, #12
    f4f0:	f014 fcf8 	bl	23ee4 <z_impl_zsock_accept>
	if (ret < 0) {
    f4f4:	1e05      	subs	r5, r0, #0
    f4f6:	da1b      	bge.n	f530 <handle_at_accept+0xbc>
    f4f8:	4b2f      	ldr	r3, [pc, #188]	; (f5b8 <handle_at_accept+0x144>)
    f4fa:	4c2e      	ldr	r4, [pc, #184]	; (f5b4 <handle_at_accept+0x140>)
    f4fc:	1ae4      	subs	r4, r4, r3
		LOG_ERR("accept() failed: %d/%d", -errno, ret);
    f4fe:	f014 ff31 	bl	24364 <__errno>
    f502:	08e4      	lsrs	r4, r4, #3
    f504:	6801      	ldr	r1, [r0, #0]
    f506:	01a4      	lsls	r4, r4, #6
    f508:	f044 0401 	orr.w	r4, r4, #1
    f50c:	4623      	mov	r3, r4
    f50e:	462a      	mov	r2, r5
    f510:	4249      	negs	r1, r1
    f512:	482f      	ldr	r0, [pc, #188]	; (f5d0 <handle_at_accept+0x15c>)
    f514:	f014 f965 	bl	237e2 <log_2>
		do_socket_close(-errno);
    f518:	f014 ff24 	bl	24364 <__errno>
    f51c:	6800      	ldr	r0, [r0, #0]
    f51e:	4240      	negs	r0, r0
    f520:	f7ff fb5e 	bl	ebe0 <do_socket_close>
		return -errno;
    f524:	f014 ff1e 	bl	24364 <__errno>
    f528:	6800      	ldr	r0, [r0, #0]
    f52a:	4240      	negs	r0, r0
}
    f52c:	b009      	add	sp, #36	; 0x24
    f52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f530:	af04      	add	r7, sp, #16
    f532:	2310      	movs	r3, #16
    f534:	463a      	mov	r2, r7
    f536:	4620      	mov	r0, r4
    f538:	4926      	ldr	r1, [pc, #152]	; (f5d4 <handle_at_accept+0x160>)
    f53a:	f005 fa8d 	bl	14a58 <z_impl_net_addr_ntop>
	if (inet_ntop(AF_INET, &remote.sin_addr, peer_addr, INET_ADDRSTRLEN)
    f53e:	b978      	cbnz	r0, f560 <handle_at_accept+0xec>
    f540:	4a1d      	ldr	r2, [pc, #116]	; (f5b8 <handle_at_accept+0x144>)
    f542:	4c1c      	ldr	r4, [pc, #112]	; (f5b4 <handle_at_accept+0x140>)
    f544:	1aa4      	subs	r4, r4, r2
		LOG_WRN("Parse peer IP address failed: %d", -errno);
    f546:	f014 ff0d 	bl	24364 <__errno>
    f54a:	08e4      	lsrs	r4, r4, #3
    f54c:	6801      	ldr	r1, [r0, #0]
    f54e:	01a4      	lsls	r4, r4, #6
    f550:	f044 0402 	orr.w	r4, r4, #2
    f554:	4622      	mov	r2, r4
    f556:	4820      	ldr	r0, [pc, #128]	; (f5d8 <handle_at_accept+0x164>)
    f558:	4249      	negs	r1, r1
    f55a:	f014 f92b 	bl	237b4 <log_1>
    f55e:	e79b      	b.n	f498 <handle_at_accept+0x24>
	sprintf(rsp_buf, "#XACCEPT: connected with %s\r\n",
    f560:	4b1e      	ldr	r3, [pc, #120]	; (f5dc <handle_at_accept+0x168>)
    f562:	f640 228c 	movw	r2, #2700	; 0xa8c
    f566:	2100      	movs	r1, #0
    f568:	481d      	ldr	r0, [pc, #116]	; (f5e0 <handle_at_accept+0x16c>)
    f56a:	9700      	str	r7, [sp, #0]
    f56c:	f017 fba2 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
    f570:	481b      	ldr	r0, [pc, #108]	; (f5e0 <handle_at_accept+0x16c>)
    f572:	f7fd fc7d 	bl	ce70 <strlen>
    f576:	4601      	mov	r1, r0
    f578:	4819      	ldr	r0, [pc, #100]	; (f5e0 <handle_at_accept+0x16c>)
    f57a:	f7fe fd37 	bl	dfec <rsp_send>
	sprintf(rsp_buf, "#XACCEPT: %d\r\n", client.sock_peer);
    f57e:	4b19      	ldr	r3, [pc, #100]	; (f5e4 <handle_at_accept+0x170>)
	client.sock_peer = ret;
    f580:	60b5      	str	r5, [r6, #8]
	client.connected = true;
    f582:	7434      	strb	r4, [r6, #16]
	sprintf(rsp_buf, "#XACCEPT: %d\r\n", client.sock_peer);
    f584:	9500      	str	r5, [sp, #0]
			sprintf(rsp_buf, "#XTCPACCEPT: %d\r\n",
    f586:	f640 228c 	movw	r2, #2700	; 0xa8c
    f58a:	2100      	movs	r1, #0
    f58c:	4814      	ldr	r0, [pc, #80]	; (f5e0 <handle_at_accept+0x16c>)
    f58e:	f017 fb91 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    f592:	4813      	ldr	r0, [pc, #76]	; (f5e0 <handle_at_accept+0x16c>)
    f594:	f7fd fc6c 	bl	ce70 <strlen>
    f598:	4601      	mov	r1, r0
    f59a:	4811      	ldr	r0, [pc, #68]	; (f5e0 <handle_at_accept+0x16c>)
    f59c:	f7fe fd26 	bl	dfec <rsp_send>
		err = 0;
    f5a0:	2000      	movs	r0, #0
		break;
    f5a2:	e7c3      	b.n	f52c <handle_at_accept+0xb8>
			sprintf(rsp_buf, "#XTCPACCEPT: 0\r\n");
    f5a4:	4910      	ldr	r1, [pc, #64]	; (f5e8 <handle_at_accept+0x174>)
    f5a6:	480e      	ldr	r0, [pc, #56]	; (f5e0 <handle_at_accept+0x16c>)
    f5a8:	f017 fbab 	bl	26d02 <strcpy>
    f5ac:	e7f1      	b.n	f592 <handle_at_accept+0x11e>
    f5ae:	bf00      	nop
    f5b0:	200214e4 	.word	0x200214e4
    f5b4:	00027bc8 	.word	0x00027bc8
    f5b8:	00027b20 	.word	0x00027b20
    f5bc:	00028bff 	.word	0x00028bff
    f5c0:	00028c15 	.word	0x00028c15
    f5c4:	00028ced 	.word	0x00028ced
    f5c8:	00028e51 	.word	0x00028e51
    f5cc:	200214f8 	.word	0x200214f8
    f5d0:	00028dec 	.word	0x00028dec
    f5d4:	200214fc 	.word	0x200214fc
    f5d8:	00028e03 	.word	0x00028e03
    f5dc:	00028e24 	.word	0x00028e24
    f5e0:	20026ea6 	.word	0x20026ea6
    f5e4:	00028e42 	.word	0x00028e42
    f5e8:	00028e63 	.word	0x00028e63

0000f5ec <handle_at_listen>:
	if (client.sock < 0) {
    f5ec:	4b29      	ldr	r3, [pc, #164]	; (f694 <handle_at_listen+0xa8>)
{
    f5ee:	4601      	mov	r1, r0
	if (client.sock < 0) {
    f5f0:	6818      	ldr	r0, [r3, #0]
{
    f5f2:	b510      	push	{r4, lr}
	if (client.sock < 0) {
    f5f4:	2800      	cmp	r0, #0
    f5f6:	461c      	mov	r4, r3
    f5f8:	da0c      	bge.n	f614 <handle_at_listen+0x28>
    f5fa:	4927      	ldr	r1, [pc, #156]	; (f698 <handle_at_listen+0xac>)
    f5fc:	4b27      	ldr	r3, [pc, #156]	; (f69c <handle_at_listen+0xb0>)
		LOG_ERR("Socket not opened yet");
    f5fe:	4828      	ldr	r0, [pc, #160]	; (f6a0 <handle_at_listen+0xb4>)
    f600:	1ac9      	subs	r1, r1, r3
    f602:	08c9      	lsrs	r1, r1, #3
    f604:	0189      	lsls	r1, r1, #6
    f606:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
    f60a:	f014 f8c4 	bl	23796 <log_0>
	int err = -EINVAL;
    f60e:	f06f 0015 	mvn.w	r0, #21
    f612:	e039      	b.n	f688 <handle_at_listen+0x9c>
	if (client.role != AT_SOCKET_ROLE_SERVER) {
    f614:	685a      	ldr	r2, [r3, #4]
    f616:	2a01      	cmp	r2, #1
    f618:	d008      	beq.n	f62c <handle_at_listen+0x40>
    f61a:	491f      	ldr	r1, [pc, #124]	; (f698 <handle_at_listen+0xac>)
    f61c:	4b1f      	ldr	r3, [pc, #124]	; (f69c <handle_at_listen+0xb0>)
		LOG_ERR("Invalid role");
    f61e:	4821      	ldr	r0, [pc, #132]	; (f6a4 <handle_at_listen+0xb8>)
    f620:	1ac9      	subs	r1, r1, r3
    f622:	08c9      	lsrs	r1, r1, #3
    f624:	0189      	lsls	r1, r1, #6
    f626:	f041 0101 	orr.w	r1, r1, #1
    f62a:	e7ee      	b.n	f60a <handle_at_listen+0x1e>
	if (client.ip_proto != IPPROTO_TCP &&
    f62c:	68db      	ldr	r3, [r3, #12]
    f62e:	2b06      	cmp	r3, #6
    f630:	d00b      	beq.n	f64a <handle_at_listen+0x5e>
    f632:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    f636:	d008      	beq.n	f64a <handle_at_listen+0x5e>
    f638:	4917      	ldr	r1, [pc, #92]	; (f698 <handle_at_listen+0xac>)
    f63a:	4b18      	ldr	r3, [pc, #96]	; (f69c <handle_at_listen+0xb0>)
		LOG_ERR("Invalid protocol");
    f63c:	481a      	ldr	r0, [pc, #104]	; (f6a8 <handle_at_listen+0xbc>)
    f63e:	1ac9      	subs	r1, r1, r3
    f640:	08c9      	lsrs	r1, r1, #3
    f642:	0189      	lsls	r1, r1, #6
    f644:	f041 0101 	orr.w	r1, r1, #1
    f648:	e7df      	b.n	f60a <handle_at_listen+0x1e>
	switch (cmd_type) {
    f64a:	2901      	cmp	r1, #1
    f64c:	d1df      	bne.n	f60e <handle_at_listen+0x22>
	return z_impl_zsock_listen(sock, backlog);
    f64e:	f014 fc39 	bl	23ec4 <z_impl_zsock_listen>
	if (ret < 0) {
    f652:	2800      	cmp	r0, #0
    f654:	da19      	bge.n	f68a <handle_at_listen+0x9e>
    f656:	4a11      	ldr	r2, [pc, #68]	; (f69c <handle_at_listen+0xb0>)
    f658:	4c0f      	ldr	r4, [pc, #60]	; (f698 <handle_at_listen+0xac>)
    f65a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("listen() failed: %d", -errno);
    f65c:	f014 fe82 	bl	24364 <__errno>
    f660:	08e4      	lsrs	r4, r4, #3
    f662:	6801      	ldr	r1, [r0, #0]
    f664:	01a4      	lsls	r4, r4, #6
    f666:	f044 0401 	orr.w	r4, r4, #1
    f66a:	4622      	mov	r2, r4
    f66c:	4249      	negs	r1, r1
    f66e:	480f      	ldr	r0, [pc, #60]	; (f6ac <handle_at_listen+0xc0>)
    f670:	f014 f8a0 	bl	237b4 <log_1>
		do_socket_close(-errno);
    f674:	f014 fe76 	bl	24364 <__errno>
    f678:	6800      	ldr	r0, [r0, #0]
    f67a:	4240      	negs	r0, r0
    f67c:	f7ff fab0 	bl	ebe0 <do_socket_close>
		return -errno;
    f680:	f014 fe70 	bl	24364 <__errno>
    f684:	6800      	ldr	r0, [r0, #0]
    f686:	4240      	negs	r0, r0
}
    f688:	bd10      	pop	{r4, pc}
	client.sock_peer = INVALID_SOCKET;
    f68a:	f04f 33ff 	mov.w	r3, #4294967295
	return 0;
    f68e:	2000      	movs	r0, #0
	client.sock_peer = INVALID_SOCKET;
    f690:	60a3      	str	r3, [r4, #8]
	return 0;
    f692:	e7f9      	b.n	f688 <handle_at_listen+0x9c>
    f694:	200214e4 	.word	0x200214e4
    f698:	00027bc8 	.word	0x00027bc8
    f69c:	00027b20 	.word	0x00027b20
    f6a0:	00028bff 	.word	0x00028bff
    f6a4:	00028c15 	.word	0x00028c15
    f6a8:	00028ced 	.word	0x00028ced
    f6ac:	00028e74 	.word	0x00028e74

0000f6b0 <handle_at_connect>:
	int size = TCPIP_MAX_URL;
    f6b0:	2380      	movs	r3, #128	; 0x80
{
    f6b2:	b570      	push	{r4, r5, r6, lr}
    f6b4:	b0a2      	sub	sp, #136	; 0x88
	int size = TCPIP_MAX_URL;
    f6b6:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    f6b8:	4b4a      	ldr	r3, [pc, #296]	; (f7e4 <handle_at_connect+0x134>)
{
    f6ba:	4605      	mov	r5, r0
	if (client.sock < 0) {
    f6bc:	681a      	ldr	r2, [r3, #0]
    f6be:	461e      	mov	r6, r3
    f6c0:	2a00      	cmp	r2, #0
    f6c2:	da0c      	bge.n	f6de <handle_at_connect+0x2e>
    f6c4:	4948      	ldr	r1, [pc, #288]	; (f7e8 <handle_at_connect+0x138>)
    f6c6:	4b49      	ldr	r3, [pc, #292]	; (f7ec <handle_at_connect+0x13c>)
		LOG_ERR("Socket not opened yet");
    f6c8:	4849      	ldr	r0, [pc, #292]	; (f7f0 <handle_at_connect+0x140>)
    f6ca:	1ac9      	subs	r1, r1, r3
    f6cc:	08c9      	lsrs	r1, r1, #3
    f6ce:	0189      	lsls	r1, r1, #6
    f6d0:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid role");
    f6d4:	f014 f85f 	bl	23796 <log_0>
			return -EINVAL;
    f6d8:	f06f 0415 	mvn.w	r4, #21
    f6dc:	e048      	b.n	f770 <handle_at_connect+0xc0>
	if (client.role != AT_SOCKET_ROLE_CLIENT) {
    f6de:	685c      	ldr	r4, [r3, #4]
    f6e0:	b144      	cbz	r4, f6f4 <handle_at_connect+0x44>
    f6e2:	4941      	ldr	r1, [pc, #260]	; (f7e8 <handle_at_connect+0x138>)
    f6e4:	4b41      	ldr	r3, [pc, #260]	; (f7ec <handle_at_connect+0x13c>)
		LOG_ERR("Invalid role");
    f6e6:	4843      	ldr	r0, [pc, #268]	; (f7f4 <handle_at_connect+0x144>)
    f6e8:	1ac9      	subs	r1, r1, r3
    f6ea:	08c9      	lsrs	r1, r1, #3
    f6ec:	0189      	lsls	r1, r1, #6
    f6ee:	f041 0101 	orr.w	r1, r1, #1
    f6f2:	e7ef      	b.n	f6d4 <handle_at_connect+0x24>
	switch (cmd_type) {
    f6f4:	2801      	cmp	r0, #1
    f6f6:	d006      	beq.n	f706 <handle_at_connect+0x56>
    f6f8:	2802      	cmp	r0, #2
    f6fa:	d1ed      	bne.n	f6d8 <handle_at_connect+0x28>
		if (client.connected) {
    f6fc:	7c1b      	ldrb	r3, [r3, #16]
    f6fe:	2b00      	cmp	r3, #0
    f700:	d06e      	beq.n	f7e0 <handle_at_connect+0x130>
			sprintf(rsp_buf, "+XCONNECT: 1\r\n");
    f702:	493d      	ldr	r1, [pc, #244]	; (f7f8 <handle_at_connect+0x148>)
    f704:	e061      	b.n	f7ca <handle_at_connect+0x11a>
		if (at_params_valid_count_get(&at_param_list) < 3) {
    f706:	483d      	ldr	r0, [pc, #244]	; (f7fc <handle_at_connect+0x14c>)
    f708:	f016 fcdc 	bl	260c4 <at_params_valid_count_get>
    f70c:	2802      	cmp	r0, #2
    f70e:	d9e3      	bls.n	f6d8 <handle_at_connect+0x28>
		err = at_params_string_get(&at_param_list, 1, url, &size);
    f710:	4629      	mov	r1, r5
    f712:	483a      	ldr	r0, [pc, #232]	; (f7fc <handle_at_connect+0x14c>)
    f714:	ab01      	add	r3, sp, #4
    f716:	aa02      	add	r2, sp, #8
    f718:	f016 fcb1 	bl	2607e <at_params_string_get>
		if (err) {
    f71c:	4604      	mov	r4, r0
    f71e:	bb38      	cbnz	r0, f770 <handle_at_connect+0xc0>
		url[size] = '\0';
    f720:	9b01      	ldr	r3, [sp, #4]
    f722:	aa22      	add	r2, sp, #136	; 0x88
    f724:	4413      	add	r3, r2
    f726:	f803 0c80 	strb.w	r0, [r3, #-128]
		err = at_params_short_get(&at_param_list, 2, &port);
    f72a:	2102      	movs	r1, #2
    f72c:	4833      	ldr	r0, [pc, #204]	; (f7fc <handle_at_connect+0x14c>)
    f72e:	f10d 0202 	add.w	r2, sp, #2
    f732:	f016 fc7f 	bl	26034 <at_params_short_get>
		if (err) {
    f736:	4604      	mov	r4, r0
    f738:	b9d0      	cbnz	r0, f770 <handle_at_connect+0xc0>
	if (check_for_ipv4(url, strlen(url))) {
    f73a:	a802      	add	r0, sp, #8
		err = do_connect(url, port);
    f73c:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    f740:	f7fd fb96 	bl	ce70 <strlen>
    f744:	b2c1      	uxtb	r1, r0
    f746:	a802      	add	r0, sp, #8
    f748:	f013 fca6 	bl	23098 <check_for_ipv4>
    f74c:	b198      	cbz	r0, f776 <handle_at_connect+0xc6>
		ret = parse_host_by_ipv4(url, port);
    f74e:	4621      	mov	r1, r4
    f750:	a802      	add	r0, sp, #8
    f752:	f7ff f8e5 	bl	e920 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    f756:	4604      	mov	r4, r0
	if (ret) {
    f758:	b198      	cbz	r0, f782 <handle_at_connect+0xd2>
    f75a:	4a23      	ldr	r2, [pc, #140]	; (f7e8 <handle_at_connect+0x138>)
    f75c:	4b23      	ldr	r3, [pc, #140]	; (f7ec <handle_at_connect+0x13c>)
		LOG_ERR("Parse failed: %d", ret);
    f75e:	4601      	mov	r1, r0
    f760:	1ad2      	subs	r2, r2, r3
    f762:	08d2      	lsrs	r2, r2, #3
    f764:	0192      	lsls	r2, r2, #6
    f766:	4826      	ldr	r0, [pc, #152]	; (f800 <handle_at_connect+0x150>)
    f768:	f042 0201 	orr.w	r2, r2, #1
    f76c:	f014 f822 	bl	237b4 <log_1>
}
    f770:	4620      	mov	r0, r4
    f772:	b022      	add	sp, #136	; 0x88
    f774:	bd70      	pop	{r4, r5, r6, pc}
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    f776:	462a      	mov	r2, r5
    f778:	4621      	mov	r1, r4
    f77a:	a802      	add	r0, sp, #8
    f77c:	f7ff f8e4 	bl	e948 <parse_host_by_name>
    f780:	e7e9      	b.n	f756 <handle_at_connect+0xa6>
	ret = connect(client.sock, (struct sockaddr *)&remote,
    f782:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
    f784:	2208      	movs	r2, #8
    f786:	491f      	ldr	r1, [pc, #124]	; (f804 <handle_at_connect+0x154>)
    f788:	f014 fb8a 	bl	23ea0 <z_impl_zsock_connect>
	if (ret < 0) {
    f78c:	2800      	cmp	r0, #0
    f78e:	da19      	bge.n	f7c4 <handle_at_connect+0x114>
    f790:	4a16      	ldr	r2, [pc, #88]	; (f7ec <handle_at_connect+0x13c>)
    f792:	4c15      	ldr	r4, [pc, #84]	; (f7e8 <handle_at_connect+0x138>)
    f794:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
    f796:	f014 fde5 	bl	24364 <__errno>
    f79a:	08e4      	lsrs	r4, r4, #3
    f79c:	6801      	ldr	r1, [r0, #0]
    f79e:	01a4      	lsls	r4, r4, #6
    f7a0:	f044 0401 	orr.w	r4, r4, #1
    f7a4:	4622      	mov	r2, r4
    f7a6:	4249      	negs	r1, r1
    f7a8:	4817      	ldr	r0, [pc, #92]	; (f808 <handle_at_connect+0x158>)
    f7aa:	f014 f803 	bl	237b4 <log_1>
		do_socket_close(-errno);
    f7ae:	f014 fdd9 	bl	24364 <__errno>
    f7b2:	6800      	ldr	r0, [r0, #0]
    f7b4:	4240      	negs	r0, r0
    f7b6:	f7ff fa13 	bl	ebe0 <do_socket_close>
		return -errno;
    f7ba:	f014 fdd3 	bl	24364 <__errno>
    f7be:	6804      	ldr	r4, [r0, #0]
    f7c0:	4264      	negs	r4, r4
    f7c2:	e7d5      	b.n	f770 <handle_at_connect+0xc0>
	client.connected = true;
    f7c4:	2301      	movs	r3, #1
	sprintf(rsp_buf, "#XCONNECT: 1\r\n");
    f7c6:	4911      	ldr	r1, [pc, #68]	; (f80c <handle_at_connect+0x15c>)
	client.connected = true;
    f7c8:	7433      	strb	r3, [r6, #16]
			sprintf(rsp_buf, "+XCONNECT: 0\r\n");
    f7ca:	4811      	ldr	r0, [pc, #68]	; (f810 <handle_at_connect+0x160>)
    f7cc:	f017 fa99 	bl	26d02 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
    f7d0:	480f      	ldr	r0, [pc, #60]	; (f810 <handle_at_connect+0x160>)
    f7d2:	f7fd fb4d 	bl	ce70 <strlen>
    f7d6:	4601      	mov	r1, r0
    f7d8:	480d      	ldr	r0, [pc, #52]	; (f810 <handle_at_connect+0x160>)
    f7da:	f7fe fc07 	bl	dfec <rsp_send>
		break;
    f7de:	e7c7      	b.n	f770 <handle_at_connect+0xc0>
			sprintf(rsp_buf, "+XCONNECT: 0\r\n");
    f7e0:	490c      	ldr	r1, [pc, #48]	; (f814 <handle_at_connect+0x164>)
    f7e2:	e7f2      	b.n	f7ca <handle_at_connect+0x11a>
    f7e4:	200214e4 	.word	0x200214e4
    f7e8:	00027bc8 	.word	0x00027bc8
    f7ec:	00027b20 	.word	0x00027b20
    f7f0:	00028bff 	.word	0x00028bff
    f7f4:	00028c15 	.word	0x00028c15
    f7f8:	00028eac 	.word	0x00028eac
    f7fc:	200213d0 	.word	0x200213d0
    f800:	00028bee 	.word	0x00028bee
    f804:	200214f8 	.word	0x200214f8
    f808:	00028e88 	.word	0x00028e88
    f80c:	00028e9d 	.word	0x00028e9d
    f810:	20026ea6 	.word	0x20026ea6
    f814:	00028ebb 	.word	0x00028ebb

0000f818 <handle_at_bind>:
{
    f818:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
    f81a:	4d4a      	ldr	r5, [pc, #296]	; (f944 <handle_at_bind+0x12c>)
{
    f81c:	4604      	mov	r4, r0
	if (client.sock < 0) {
    f81e:	682b      	ldr	r3, [r5, #0]
{
    f820:	b085      	sub	sp, #20
	if (client.sock < 0) {
    f822:	2b00      	cmp	r3, #0
    f824:	da0c      	bge.n	f840 <handle_at_bind+0x28>
    f826:	4948      	ldr	r1, [pc, #288]	; (f948 <handle_at_bind+0x130>)
    f828:	4b48      	ldr	r3, [pc, #288]	; (f94c <handle_at_bind+0x134>)
		LOG_ERR("Socket not opened yet");
    f82a:	4849      	ldr	r0, [pc, #292]	; (f950 <handle_at_bind+0x138>)
    f82c:	1ac9      	subs	r1, r1, r3
    f82e:	08c9      	lsrs	r1, r1, #3
    f830:	0189      	lsls	r1, r1, #6
    f832:	f041 0101 	orr.w	r1, r1, #1
    f836:	f013 ffae 	bl	23796 <log_0>
		return -EINVAL;
    f83a:	f06f 0015 	mvn.w	r0, #21
    f83e:	e028      	b.n	f892 <handle_at_bind+0x7a>
	switch (cmd_type) {
    f840:	2801      	cmp	r0, #1
    f842:	d1fa      	bne.n	f83a <handle_at_bind+0x22>
		if (at_params_valid_count_get(&at_param_list) < 2) {
    f844:	4843      	ldr	r0, [pc, #268]	; (f954 <handle_at_bind+0x13c>)
    f846:	f016 fc3d 	bl	260c4 <at_params_valid_count_get>
    f84a:	2801      	cmp	r0, #1
    f84c:	d9f5      	bls.n	f83a <handle_at_bind+0x22>
		err = at_params_short_get(&at_param_list, 1, &port);
    f84e:	4621      	mov	r1, r4
    f850:	4840      	ldr	r0, [pc, #256]	; (f954 <handle_at_bind+0x13c>)
    f852:	f10d 0206 	add.w	r2, sp, #6
    f856:	f016 fbed 	bl	26034 <at_params_short_get>
		if (err < 0) {
    f85a:	2800      	cmp	r0, #0
    f85c:	db19      	blt.n	f892 <handle_at_bind+0x7a>
		err = do_bind(port);
    f85e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	ret = modem_info_params_get(&modem_param);
    f862:	483d      	ldr	r0, [pc, #244]	; (f958 <handle_at_bind+0x140>)
	local.sin_port = htons(port);
    f864:	0213      	lsls	r3, r2, #8
    f866:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_family = AF_INET;
    f86a:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
    f86e:	f8ad 300a 	strh.w	r3, [sp, #10]
	ret = modem_info_params_get(&modem_param);
    f872:	f007 fcd3 	bl	1721c <modem_info_params_get>
	if (ret) {
    f876:	4601      	mov	r1, r0
    f878:	b168      	cbz	r0, f896 <handle_at_bind+0x7e>
    f87a:	4a33      	ldr	r2, [pc, #204]	; (f948 <handle_at_bind+0x130>)
    f87c:	4b33      	ldr	r3, [pc, #204]	; (f94c <handle_at_bind+0x134>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
    f87e:	4837      	ldr	r0, [pc, #220]	; (f95c <handle_at_bind+0x144>)
    f880:	1ad2      	subs	r2, r2, r3
    f882:	08d2      	lsrs	r2, r2, #3
    f884:	0192      	lsls	r2, r2, #6
    f886:	f042 0201 	orr.w	r2, r2, #1
    f88a:	f013 ff93 	bl	237b4 <log_1>
		return -1;
    f88e:	f04f 30ff 	mov.w	r0, #4294967295
}
    f892:	b005      	add	sp, #20
    f894:	bd30      	pop	{r4, r5, pc}
	addr_len = strlen(modem_param.network.ip_address.value_string);
    f896:	4832      	ldr	r0, [pc, #200]	; (f960 <handle_at_bind+0x148>)
    f898:	f7fd faea 	bl	ce70 <strlen>
	if (addr_len == 0) {
    f89c:	b950      	cbnz	r0, f8b4 <handle_at_bind+0x9c>
    f89e:	492a      	ldr	r1, [pc, #168]	; (f948 <handle_at_bind+0x130>)
    f8a0:	4b2a      	ldr	r3, [pc, #168]	; (f94c <handle_at_bind+0x134>)
		LOG_ERR("LTE not connected yet");
    f8a2:	4830      	ldr	r0, [pc, #192]	; (f964 <handle_at_bind+0x14c>)
    f8a4:	1ac9      	subs	r1, r1, r3
    f8a6:	08c9      	lsrs	r1, r1, #3
    f8a8:	0189      	lsls	r1, r1, #6
    f8aa:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid local address");
    f8ae:	f013 ff72 	bl	23796 <log_0>
    f8b2:	e7ec      	b.n	f88e <handle_at_bind+0x76>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
    f8b4:	b2c1      	uxtb	r1, r0
    f8b6:	482a      	ldr	r0, [pc, #168]	; (f960 <handle_at_bind+0x148>)
    f8b8:	f013 fbee 	bl	23098 <check_for_ipv4>
    f8bc:	b940      	cbnz	r0, f8d0 <handle_at_bind+0xb8>
    f8be:	4922      	ldr	r1, [pc, #136]	; (f948 <handle_at_bind+0x130>)
    f8c0:	4b22      	ldr	r3, [pc, #136]	; (f94c <handle_at_bind+0x134>)
		LOG_ERR("Invalid local address");
    f8c2:	4829      	ldr	r0, [pc, #164]	; (f968 <handle_at_bind+0x150>)
    f8c4:	1ac9      	subs	r1, r1, r3
    f8c6:	08c9      	lsrs	r1, r1, #3
    f8c8:	0189      	lsls	r1, r1, #6
    f8ca:	f041 0101 	orr.w	r1, r1, #1
    f8ce:	e7ee      	b.n	f8ae <handle_at_bind+0x96>
	return z_impl_zsock_inet_pton(family, src, dst);
    f8d0:	4923      	ldr	r1, [pc, #140]	; (f960 <handle_at_bind+0x148>)
    f8d2:	4620      	mov	r0, r4
    f8d4:	aa03      	add	r2, sp, #12
    f8d6:	f014 fb5b 	bl	23f90 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
    f8da:	2801      	cmp	r0, #1
    f8dc:	d00f      	beq.n	f8fe <handle_at_bind+0xe6>
    f8de:	4a1b      	ldr	r2, [pc, #108]	; (f94c <handle_at_bind+0x134>)
    f8e0:	4c19      	ldr	r4, [pc, #100]	; (f948 <handle_at_bind+0x130>)
    f8e2:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
    f8e4:	f014 fd3e 	bl	24364 <__errno>
    f8e8:	08e4      	lsrs	r4, r4, #3
    f8ea:	6801      	ldr	r1, [r0, #0]
    f8ec:	01a4      	lsls	r4, r4, #6
    f8ee:	f044 0401 	orr.w	r4, r4, #1
    f8f2:	4622      	mov	r2, r4
    f8f4:	481d      	ldr	r0, [pc, #116]	; (f96c <handle_at_bind+0x154>)
    f8f6:	4249      	negs	r1, r1
    f8f8:	f013 ff5c 	bl	237b4 <log_1>
    f8fc:	e79d      	b.n	f83a <handle_at_bind+0x22>
	ret = bind(client.sock, (struct sockaddr *)&local,
    f8fe:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
    f900:	2208      	movs	r2, #8
    f902:	eb0d 0102 	add.w	r1, sp, r2
    f906:	f014 fab9 	bl	23e7c <z_impl_zsock_bind>
	if (ret) {
    f90a:	2800      	cmp	r0, #0
    f90c:	d0c1      	beq.n	f892 <handle_at_bind+0x7a>
    f90e:	4a0f      	ldr	r2, [pc, #60]	; (f94c <handle_at_bind+0x134>)
    f910:	4c0d      	ldr	r4, [pc, #52]	; (f948 <handle_at_bind+0x130>)
    f912:	1aa4      	subs	r4, r4, r2
		LOG_ERR("bind() failed: %d", -errno);
    f914:	f014 fd26 	bl	24364 <__errno>
    f918:	08e4      	lsrs	r4, r4, #3
    f91a:	6801      	ldr	r1, [r0, #0]
    f91c:	01a4      	lsls	r4, r4, #6
    f91e:	f044 0401 	orr.w	r4, r4, #1
    f922:	4622      	mov	r2, r4
    f924:	4249      	negs	r1, r1
    f926:	4812      	ldr	r0, [pc, #72]	; (f970 <handle_at_bind+0x158>)
    f928:	f013 ff44 	bl	237b4 <log_1>
		do_socket_close(-errno);
    f92c:	f014 fd1a 	bl	24364 <__errno>
    f930:	6800      	ldr	r0, [r0, #0]
    f932:	4240      	negs	r0, r0
    f934:	f7ff f954 	bl	ebe0 <do_socket_close>
		return -errno;
    f938:	f014 fd14 	bl	24364 <__errno>
    f93c:	6800      	ldr	r0, [r0, #0]
    f93e:	4240      	negs	r0, r0
		break;
    f940:	e7a7      	b.n	f892 <handle_at_bind+0x7a>
    f942:	bf00      	nop
    f944:	200214e4 	.word	0x200214e4
    f948:	00027bc8 	.word	0x00027bc8
    f94c:	00027b20 	.word	0x00027b20
    f950:	00028bff 	.word	0x00028bff
    f954:	200213d0 	.word	0x200213d0
    f958:	20020880 	.word	0x20020880
    f95c:	00028eca 	.word	0x00028eca
    f960:	20020b92 	.word	0x20020b92
    f964:	00028ef1 	.word	0x00028ef1
    f968:	00028f07 	.word	0x00028f07
    f96c:	00028f1d 	.word	0x00028f1d
    f970:	00028f3f 	.word	0x00028f3f

0000f974 <handle_at_socket>:
{
    f974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (cmd_type) {
    f978:	2802      	cmp	r0, #2
{
    f97a:	4604      	mov	r4, r0
    f97c:	b08a      	sub	sp, #40	; 0x28
	switch (cmd_type) {
    f97e:	f000 8120 	beq.w	fbc2 <handle_at_socket+0x24e>
    f982:	2803      	cmp	r0, #3
    f984:	f000 813b 	beq.w	fbfe <handle_at_socket+0x28a>
    f988:	2801      	cmp	r0, #1
    f98a:	d146      	bne.n	fa1a <handle_at_socket+0xa6>
		if (at_params_valid_count_get(&at_param_list) < 2) {
    f98c:	48aa      	ldr	r0, [pc, #680]	; (fc38 <handle_at_socket+0x2c4>)
    f98e:	f016 fb99 	bl	260c4 <at_params_valid_count_get>
    f992:	2801      	cmp	r0, #1
    f994:	d941      	bls.n	fa1a <handle_at_socket+0xa6>
		err = at_params_short_get(&at_param_list, 1, &op);
    f996:	4621      	mov	r1, r4
    f998:	48a7      	ldr	r0, [pc, #668]	; (fc38 <handle_at_socket+0x2c4>)
    f99a:	f10d 021a 	add.w	r2, sp, #26
    f99e:	f016 fb49 	bl	26034 <at_params_short_get>
		if (err) {
    f9a2:	4604      	mov	r4, r0
    f9a4:	2800      	cmp	r0, #0
    f9a6:	f040 80bc 	bne.w	fb22 <handle_at_socket+0x1ae>
		if (op == AT_SOCKET_OPEN) {
    f9aa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f9ae:	2b01      	cmp	r3, #1
    f9b0:	f040 80f4 	bne.w	fb9c <handle_at_socket+0x228>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
    f9b4:	f04f 33ff 	mov.w	r3, #4294967295
			if (at_params_valid_count_get(&at_param_list) < 4) {
    f9b8:	489f      	ldr	r0, [pc, #636]	; (fc38 <handle_at_socket+0x2c4>)
			sec_tag_t sec_tag = INVALID_SEC_TAG;
    f9ba:	9308      	str	r3, [sp, #32]
			if (at_params_valid_count_get(&at_param_list) < 4) {
    f9bc:	f016 fb82 	bl	260c4 <at_params_valid_count_get>
    f9c0:	2803      	cmp	r0, #3
    f9c2:	d92a      	bls.n	fa1a <handle_at_socket+0xa6>
			err = at_params_short_get(&at_param_list, 2, &type);
    f9c4:	2102      	movs	r1, #2
    f9c6:	489c      	ldr	r0, [pc, #624]	; (fc38 <handle_at_socket+0x2c4>)
    f9c8:	f10d 021e 	add.w	r2, sp, #30
    f9cc:	f016 fb32 	bl	26034 <at_params_short_get>
			if (err) {
    f9d0:	4604      	mov	r4, r0
    f9d2:	2800      	cmp	r0, #0
    f9d4:	f040 80a5 	bne.w	fb22 <handle_at_socket+0x1ae>
			err = at_params_short_get(&at_param_list, 3, &role);
    f9d8:	2103      	movs	r1, #3
    f9da:	4897      	ldr	r0, [pc, #604]	; (fc38 <handle_at_socket+0x2c4>)
    f9dc:	aa07      	add	r2, sp, #28
    f9de:	f016 fb29 	bl	26034 <at_params_short_get>
			if (err) {
    f9e2:	4604      	mov	r4, r0
    f9e4:	2800      	cmp	r0, #0
    f9e6:	f040 809c 	bne.w	fb22 <handle_at_socket+0x1ae>
			if (at_params_valid_count_get(&at_param_list) > 4) {
    f9ea:	4893      	ldr	r0, [pc, #588]	; (fc38 <handle_at_socket+0x2c4>)
    f9ec:	f016 fb6a 	bl	260c4 <at_params_valid_count_get>
    f9f0:	2804      	cmp	r0, #4
    f9f2:	d904      	bls.n	f9fe <handle_at_socket+0x8a>
				at_params_int_get(&at_param_list, 4, &sec_tag);
    f9f4:	2104      	movs	r1, #4
    f9f6:	4890      	ldr	r0, [pc, #576]	; (fc38 <handle_at_socket+0x2c4>)
    f9f8:	aa08      	add	r2, sp, #32
    f9fa:	f016 fb2d 	bl	26058 <at_params_int_get>
			if (client.sock > 0) {
    f9fe:	4d8f      	ldr	r5, [pc, #572]	; (fc3c <handle_at_socket+0x2c8>)
    fa00:	682b      	ldr	r3, [r5, #0]
    fa02:	2b00      	cmp	r3, #0
    fa04:	dd0c      	ble.n	fa20 <handle_at_socket+0xac>
    fa06:	498e      	ldr	r1, [pc, #568]	; (fc40 <handle_at_socket+0x2cc>)
    fa08:	4b8e      	ldr	r3, [pc, #568]	; (fc44 <handle_at_socket+0x2d0>)
				LOG_WRN("Socket is already opened");
    fa0a:	488f      	ldr	r0, [pc, #572]	; (fc48 <handle_at_socket+0x2d4>)
    fa0c:	1ac9      	subs	r1, r1, r3
    fa0e:	08c9      	lsrs	r1, r1, #3
    fa10:	0189      	lsls	r1, r1, #6
    fa12:	f041 0102 	orr.w	r1, r1, #2
				LOG_WRN("Socket is not opened yet");
    fa16:	f013 febe 	bl	23796 <log_0>
			return -EINVAL;
    fa1a:	f06f 0415 	mvn.w	r4, #21
    fa1e:	e080      	b.n	fb22 <handle_at_socket+0x1ae>
				err = do_socket_open(type, role, sec_tag);
    fa20:	f89d 601e 	ldrb.w	r6, [sp, #30]
    fa24:	f89d 801c 	ldrb.w	r8, [sp, #28]
	if (type == SOCK_STREAM) {
    fa28:	2e01      	cmp	r6, #1
				err = do_socket_open(type, role, sec_tag);
    fa2a:	9f08      	ldr	r7, [sp, #32]
	if (type == SOCK_STREAM) {
    fa2c:	d156      	bne.n	fadc <handle_at_socket+0x168>
		if (sec_tag == INVALID_SEC_TAG) {
    fa2e:	1c7a      	adds	r2, r7, #1
    fa30:	d14a      	bne.n	fac8 <handle_at_socket+0x154>
	return z_impl_zsock_socket(family, type, proto);
    fa32:	2206      	movs	r2, #6
    fa34:	4631      	mov	r1, r6
    fa36:	4630      	mov	r0, r6
    fa38:	f003 fd40 	bl	134bc <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_TCP;
    fa3c:	2306      	movs	r3, #6
			client.sock = socket(AF_INET, SOCK_STREAM,
    fa3e:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_DTLS_1_2;
    fa40:	60eb      	str	r3, [r5, #12]
	if (client.sock < 0) {
    fa42:	682b      	ldr	r3, [r5, #0]
    fa44:	2b00      	cmp	r3, #0
    fa46:	da27      	bge.n	fa98 <handle_at_socket+0x124>
    fa48:	4a7e      	ldr	r2, [pc, #504]	; (fc44 <handle_at_socket+0x2d0>)
    fa4a:	4c7d      	ldr	r4, [pc, #500]	; (fc40 <handle_at_socket+0x2cc>)
    fa4c:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
    fa4e:	f014 fc89 	bl	24364 <__errno>
    fa52:	08e4      	lsrs	r4, r4, #3
    fa54:	6801      	ldr	r1, [r0, #0]
    fa56:	01a4      	lsls	r4, r4, #6
    fa58:	f044 0401 	orr.w	r4, r4, #1
    fa5c:	4622      	mov	r2, r4
    fa5e:	4249      	negs	r1, r1
    fa60:	487a      	ldr	r0, [pc, #488]	; (fc4c <handle_at_socket+0x2d8>)
    fa62:	f013 fea7 	bl	237b4 <log_1>
		sprintf(rsp_buf, "#XSOCKET: %d\r\n", -errno);
    fa66:	f014 fc7d 	bl	24364 <__errno>
    fa6a:	6803      	ldr	r3, [r0, #0]
    fa6c:	f640 228c 	movw	r2, #2700	; 0xa8c
    fa70:	425b      	negs	r3, r3
    fa72:	2100      	movs	r1, #0
    fa74:	9300      	str	r3, [sp, #0]
    fa76:	4876      	ldr	r0, [pc, #472]	; (fc50 <handle_at_socket+0x2dc>)
    fa78:	4b76      	ldr	r3, [pc, #472]	; (fc54 <handle_at_socket+0x2e0>)
    fa7a:	f017 f91b 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    fa7e:	4874      	ldr	r0, [pc, #464]	; (fc50 <handle_at_socket+0x2dc>)
    fa80:	f7fd f9f6 	bl	ce70 <strlen>
    fa84:	4601      	mov	r1, r0
    fa86:	4872      	ldr	r0, [pc, #456]	; (fc50 <handle_at_socket+0x2dc>)
    fa88:	f7fe fab0 	bl	dfec <rsp_send>
		client.ip_proto = IPPROTO_IP;
    fa8c:	2300      	movs	r3, #0
    fa8e:	60eb      	str	r3, [r5, #12]
		ret = -errno;
    fa90:	f014 fc68 	bl	24364 <__errno>
    fa94:	6804      	ldr	r4, [r0, #0]
    fa96:	4264      	negs	r4, r4
	if (sec_tag != INVALID_SEC_TAG) {
    fa98:	1c78      	adds	r0, r7, #1
    fa9a:	d068      	beq.n	fb6e <handle_at_socket+0x1fa>
		if (role == AT_SOCKET_ROLE_SERVER) {
    fa9c:	f1b8 0f01 	cmp.w	r8, #1
		sec_tag_t sec_tag_list[1] = { sec_tag };
    faa0:	9709      	str	r7, [sp, #36]	; 0x24
		if (role == AT_SOCKET_ROLE_SERVER) {
    faa2:	d142      	bne.n	fb2a <handle_at_socket+0x1b6>
			sprintf(rsp_buf,
    faa4:	496c      	ldr	r1, [pc, #432]	; (fc58 <handle_at_socket+0x2e4>)
    faa6:	486a      	ldr	r0, [pc, #424]	; (fc50 <handle_at_socket+0x2dc>)
    faa8:	f017 f92b 	bl	26d02 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
    faac:	4868      	ldr	r0, [pc, #416]	; (fc50 <handle_at_socket+0x2dc>)
    faae:	f7fd f9df 	bl	ce70 <strlen>
    fab2:	4601      	mov	r1, r0
    fab4:	4866      	ldr	r0, [pc, #408]	; (fc50 <handle_at_socket+0x2dc>)
    fab6:	f7fe fa99 	bl	dfec <rsp_send>
			close(client.sock);
    faba:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
    fabc:	f014 f9c9 	bl	23e52 <z_impl_zsock_close>
			client.sock = INVALID_SOCKET;
    fac0:	f04f 33ff 	mov.w	r3, #4294967295
    fac4:	602b      	str	r3, [r5, #0]
    fac6:	e02a      	b.n	fb1e <handle_at_socket+0x1aa>
	return z_impl_zsock_socket(family, type, proto);
    fac8:	f44f 7281 	mov.w	r2, #258	; 0x102
    facc:	4631      	mov	r1, r6
    face:	4630      	mov	r0, r6
    fad0:	f003 fcf4 	bl	134bc <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_TLS_1_2;
    fad4:	f44f 7381 	mov.w	r3, #258	; 0x102
			client.sock = socket(AF_INET, SOCK_STREAM,
    fad8:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_TLS_1_2;
    fada:	e7b1      	b.n	fa40 <handle_at_socket+0xcc>
	} else if (type == SOCK_DGRAM) {
    fadc:	2e02      	cmp	r6, #2
    fade:	d113      	bne.n	fb08 <handle_at_socket+0x194>
		if (sec_tag == INVALID_SEC_TAG) {
    fae0:	1c7b      	adds	r3, r7, #1
    fae2:	d107      	bne.n	faf4 <handle_at_socket+0x180>
    fae4:	2211      	movs	r2, #17
    fae6:	4631      	mov	r1, r6
    fae8:	2001      	movs	r0, #1
    faea:	f003 fce7 	bl	134bc <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_UDP;
    faee:	2311      	movs	r3, #17
			client.sock = socket(AF_INET, SOCK_DGRAM,
    faf0:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_UDP;
    faf2:	e7a5      	b.n	fa40 <handle_at_socket+0xcc>
    faf4:	f240 1211 	movw	r2, #273	; 0x111
    faf8:	4631      	mov	r1, r6
    fafa:	2001      	movs	r0, #1
    fafc:	f003 fcde 	bl	134bc <z_impl_zsock_socket>
			client.ip_proto = IPPROTO_DTLS_1_2;
    fb00:	f240 1311 	movw	r3, #273	; 0x111
			client.sock = socket(AF_INET, SOCK_DGRAM,
    fb04:	6028      	str	r0, [r5, #0]
			client.ip_proto = IPPROTO_DTLS_1_2;
    fb06:	e79b      	b.n	fa40 <handle_at_socket+0xcc>
    fb08:	4a4d      	ldr	r2, [pc, #308]	; (fc40 <handle_at_socket+0x2cc>)
    fb0a:	4b4e      	ldr	r3, [pc, #312]	; (fc44 <handle_at_socket+0x2d0>)
		LOG_ERR("socket type %d not supported", type);
    fb0c:	4631      	mov	r1, r6
    fb0e:	1ad2      	subs	r2, r2, r3
    fb10:	08d2      	lsrs	r2, r2, #3
    fb12:	0192      	lsls	r2, r2, #6
    fb14:	4851      	ldr	r0, [pc, #324]	; (fc5c <handle_at_socket+0x2e8>)
    fb16:	f042 0201 	orr.w	r2, r2, #1
    fb1a:	f013 fe4b 	bl	237b4 <log_1>
			return -ENOTSUP;
    fb1e:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
    fb22:	4620      	mov	r0, r4
    fb24:	b00a      	add	sp, #40	; 0x28
    fb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = setsockopt(client.sock, SOL_TLS, TLS_SEC_TAG_LIST,
    fb2a:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
    fb2c:	2304      	movs	r3, #4
    fb2e:	2201      	movs	r2, #1
    fb30:	9300      	str	r3, [sp, #0]
    fb32:	f44f 718d 	mov.w	r1, #282	; 0x11a
    fb36:	ab09      	add	r3, sp, #36	; 0x24
    fb38:	f014 fa48 	bl	23fcc <z_impl_zsock_setsockopt>
		if (ret) {
    fb3c:	4604      	mov	r4, r0
    fb3e:	b1b0      	cbz	r0, fb6e <handle_at_socket+0x1fa>
    fb40:	4a40      	ldr	r2, [pc, #256]	; (fc44 <handle_at_socket+0x2d0>)
    fb42:	4c3f      	ldr	r4, [pc, #252]	; (fc40 <handle_at_socket+0x2cc>)
    fb44:	1aa4      	subs	r4, r4, r2
			LOG_ERR("set tag list failed: %d", -errno);
    fb46:	f014 fc0d 	bl	24364 <__errno>
    fb4a:	08e4      	lsrs	r4, r4, #3
    fb4c:	6801      	ldr	r1, [r0, #0]
    fb4e:	01a4      	lsls	r4, r4, #6
    fb50:	f044 0401 	orr.w	r4, r4, #1
    fb54:	4622      	mov	r2, r4
    fb56:	4842      	ldr	r0, [pc, #264]	; (fc60 <handle_at_socket+0x2ec>)
    fb58:	4249      	negs	r1, r1
    fb5a:	f013 fe2b 	bl	237b4 <log_1>
			close(client.sock);
    fb5e:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
    fb60:	f014 f977 	bl	23e52 <z_impl_zsock_close>
			return -errno;
    fb64:	f014 fbfe 	bl	24364 <__errno>
    fb68:	6804      	ldr	r4, [r0, #0]
    fb6a:	4264      	negs	r4, r4
    fb6c:	e7d9      	b.n	fb22 <handle_at_socket+0x1ae>
	sprintf(rsp_buf, "#XSOCKET: %d, %d, %d, %d\r\n", client.sock,
    fb6e:	68eb      	ldr	r3, [r5, #12]
    fb70:	f640 228c 	movw	r2, #2700	; 0xa8c
    fb74:	e9cd 8302 	strd	r8, r3, [sp, #8]
    fb78:	682b      	ldr	r3, [r5, #0]
    fb7a:	2100      	movs	r1, #0
    fb7c:	9300      	str	r3, [sp, #0]
    fb7e:	4834      	ldr	r0, [pc, #208]	; (fc50 <handle_at_socket+0x2dc>)
    fb80:	4b38      	ldr	r3, [pc, #224]	; (fc64 <handle_at_socket+0x2f0>)
    fb82:	9601      	str	r6, [sp, #4]
	client.role = role;
    fb84:	f8c5 8004 	str.w	r8, [r5, #4]
	sprintf(rsp_buf, "#XSOCKET: %d, %d, %d, %d\r\n", client.sock,
    fb88:	f017 f894 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    fb8c:	4830      	ldr	r0, [pc, #192]	; (fc50 <handle_at_socket+0x2dc>)
    fb8e:	f7fd f96f 	bl	ce70 <strlen>
    fb92:	4601      	mov	r1, r0
    fb94:	482e      	ldr	r0, [pc, #184]	; (fc50 <handle_at_socket+0x2dc>)
    fb96:	f7fe fa29 	bl	dfec <rsp_send>
		break;
    fb9a:	e7c2      	b.n	fb22 <handle_at_socket+0x1ae>
		} else if (op == AT_SOCKET_CLOSE) {
    fb9c:	2b00      	cmp	r3, #0
    fb9e:	d1c0      	bne.n	fb22 <handle_at_socket+0x1ae>
			if (client.sock < 0) {
    fba0:	4b26      	ldr	r3, [pc, #152]	; (fc3c <handle_at_socket+0x2c8>)
    fba2:	681b      	ldr	r3, [r3, #0]
    fba4:	2b00      	cmp	r3, #0
    fba6:	da08      	bge.n	fbba <handle_at_socket+0x246>
    fba8:	4925      	ldr	r1, [pc, #148]	; (fc40 <handle_at_socket+0x2cc>)
    fbaa:	4b26      	ldr	r3, [pc, #152]	; (fc44 <handle_at_socket+0x2d0>)
				LOG_WRN("Socket is not opened yet");
    fbac:	482e      	ldr	r0, [pc, #184]	; (fc68 <handle_at_socket+0x2f4>)
    fbae:	1ac9      	subs	r1, r1, r3
    fbb0:	08c9      	lsrs	r1, r1, #3
    fbb2:	0189      	lsls	r1, r1, #6
    fbb4:	f041 0102 	orr.w	r1, r1, #2
    fbb8:	e72d      	b.n	fa16 <handle_at_socket+0xa2>
				err = do_socket_close(0);
    fbba:	f7ff f811 	bl	ebe0 <do_socket_close>
    fbbe:	4604      	mov	r4, r0
    fbc0:	e7af      	b.n	fb22 <handle_at_socket+0x1ae>
		if (client.sock != INVALID_SOCKET) {
    fbc2:	4b1e      	ldr	r3, [pc, #120]	; (fc3c <handle_at_socket+0x2c8>)
    fbc4:	681a      	ldr	r2, [r3, #0]
    fbc6:	1c51      	adds	r1, r2, #1
    fbc8:	d014      	beq.n	fbf4 <handle_at_socket+0x280>
			sprintf(rsp_buf, "#XSOCKET: %d, %d, %d\r\n",
    fbca:	6859      	ldr	r1, [r3, #4]
    fbcc:	4820      	ldr	r0, [pc, #128]	; (fc50 <handle_at_socket+0x2dc>)
    fbce:	9102      	str	r1, [sp, #8]
    fbd0:	68db      	ldr	r3, [r3, #12]
    fbd2:	2100      	movs	r1, #0
    fbd4:	e9cd 2300 	strd	r2, r3, [sp]
    fbd8:	f640 228c 	movw	r2, #2700	; 0xa8c
    fbdc:	4b23      	ldr	r3, [pc, #140]	; (fc6c <handle_at_socket+0x2f8>)
    fbde:	f017 f869 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    fbe2:	481b      	ldr	r0, [pc, #108]	; (fc50 <handle_at_socket+0x2dc>)
    fbe4:	f7fd f944 	bl	ce70 <strlen>
    fbe8:	4601      	mov	r1, r0
    fbea:	4819      	ldr	r0, [pc, #100]	; (fc50 <handle_at_socket+0x2dc>)
    fbec:	f7fe f9fe 	bl	dfec <rsp_send>
		err = 0;
    fbf0:	2400      	movs	r4, #0
		break;
    fbf2:	e796      	b.n	fb22 <handle_at_socket+0x1ae>
			sprintf(rsp_buf, "#XSOCKET: 0\r\n");
    fbf4:	491e      	ldr	r1, [pc, #120]	; (fc70 <handle_at_socket+0x2fc>)
    fbf6:	4816      	ldr	r0, [pc, #88]	; (fc50 <handle_at_socket+0x2dc>)
    fbf8:	f017 f883 	bl	26d02 <strcpy>
    fbfc:	e7f1      	b.n	fbe2 <handle_at_socket+0x26e>
		sprintf(rsp_buf, "#XSOCKET: (%d, %d), (%d, %d), (%d, %d)",
    fbfe:	2400      	movs	r4, #0
    fc00:	2301      	movs	r3, #1
    fc02:	2202      	movs	r2, #2
    fc04:	4621      	mov	r1, r4
    fc06:	e9cd 3202 	strd	r3, r2, [sp, #8]
    fc0a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    fc0e:	f640 228c 	movw	r2, #2700	; 0xa8c
    fc12:	e9cd 4300 	strd	r4, r3, [sp]
    fc16:	480e      	ldr	r0, [pc, #56]	; (fc50 <handle_at_socket+0x2dc>)
    fc18:	4b16      	ldr	r3, [pc, #88]	; (fc74 <handle_at_socket+0x300>)
    fc1a:	f017 f84b 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    fc1e:	480c      	ldr	r0, [pc, #48]	; (fc50 <handle_at_socket+0x2dc>)
    fc20:	f7fd f926 	bl	ce70 <strlen>
    fc24:	4601      	mov	r1, r0
    fc26:	480a      	ldr	r0, [pc, #40]	; (fc50 <handle_at_socket+0x2dc>)
    fc28:	f7fe f9e0 	bl	dfec <rsp_send>
		sprintf(rsp_buf, ", <sec-tag>\r\n");
    fc2c:	4912      	ldr	r1, [pc, #72]	; (fc78 <handle_at_socket+0x304>)
    fc2e:	4808      	ldr	r0, [pc, #32]	; (fc50 <handle_at_socket+0x2dc>)
    fc30:	f017 f867 	bl	26d02 <strcpy>
    fc34:	e7aa      	b.n	fb8c <handle_at_socket+0x218>
    fc36:	bf00      	nop
    fc38:	200213d0 	.word	0x200213d0
    fc3c:	200214e4 	.word	0x200214e4
    fc40:	00027bc8 	.word	0x00027bc8
    fc44:	00027b20 	.word	0x00027b20
    fc48:	00028f51 	.word	0x00028f51
    fc4c:	00028f87 	.word	0x00028f87
    fc50:	20026ea6 	.word	0x20026ea6
    fc54:	00028d13 	.word	0x00028d13
    fc58:	00028f9b 	.word	0x00028f9b
    fc5c:	00028f6a 	.word	0x00028f6a
    fc60:	00028fc3 	.word	0x00028fc3
    fc64:	00028fdb 	.word	0x00028fdb
    fc68:	00028ff6 	.word	0x00028ff6
    fc6c:	0002900f 	.word	0x0002900f
    fc70:	00029026 	.word	0x00029026
    fc74:	00029034 	.word	0x00029034
    fc78:	0002905b 	.word	0x0002905b

0000fc7c <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
    fc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc80:	4e17      	ldr	r6, [pc, #92]	; (fce0 <slm_at_tcpip_parse+0x64>)
    fc82:	4605      	mov	r5, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    fc84:	2400      	movs	r4, #0
    fc86:	4637      	mov	r7, r6
		if (slm_util_cmd_casecmp(at_cmd, m_tcpip_at_list[i].string)) {
    fc88:	4628      	mov	r0, r5
    fc8a:	6871      	ldr	r1, [r6, #4]
    fc8c:	f7fe f860 	bl	dd50 <slm_util_cmd_casecmp>
    fc90:	b1f0      	cbz	r0, fcd0 <slm_at_tcpip_parse+0x54>
			ret = at_parser_params_from_str(at_cmd, NULL,
    fc92:	2100      	movs	r1, #0
    fc94:	4628      	mov	r0, r5
    fc96:	4a13      	ldr	r2, [pc, #76]	; (fce4 <slm_at_tcpip_parse+0x68>)
    fc98:	f016 f8cc 	bl	25e34 <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
    fc9c:	4601      	mov	r1, r0
    fc9e:	b168      	cbz	r0, fcbc <slm_at_tcpip_parse+0x40>
    fca0:	4b11      	ldr	r3, [pc, #68]	; (fce8 <slm_at_tcpip_parse+0x6c>)
    fca2:	4a12      	ldr	r2, [pc, #72]	; (fcec <slm_at_tcpip_parse+0x70>)
				LOG_ERR("Failed to parse AT command %d", ret);
    fca4:	4812      	ldr	r0, [pc, #72]	; (fcf0 <slm_at_tcpip_parse+0x74>)
    fca6:	1ad2      	subs	r2, r2, r3
    fca8:	08d2      	lsrs	r2, r2, #3
    fcaa:	0192      	lsls	r2, r2, #6
    fcac:	f042 0201 	orr.w	r2, r2, #1
    fcb0:	f013 fd80 	bl	237b4 <log_1>
				return -EINVAL;
    fcb4:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    fcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			type = at_parser_cmd_type_get(at_cmd);
    fcbc:	4628      	mov	r0, r5
    fcbe:	f016 f8bc 	bl	25e3a <at_parser_cmd_type_get>
			ret = m_tcpip_at_list[i].handler(type);
    fcc2:	230c      	movs	r3, #12
    fcc4:	fb03 7404 	mla	r4, r3, r4, r7
    fcc8:	68a3      	ldr	r3, [r4, #8]
}
    fcca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = m_tcpip_at_list[i].handler(type);
    fcce:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    fcd0:	3401      	adds	r4, #1
    fcd2:	2c0e      	cmp	r4, #14
    fcd4:	f106 060c 	add.w	r6, r6, #12
    fcd8:	d1d6      	bne.n	fc88 <slm_at_tcpip_parse+0xc>
	int ret = -ENOTSUP;
    fcda:	f06f 0085 	mvn.w	r0, #133	; 0x85
    fcde:	e7eb      	b.n	fcb8 <slm_at_tcpip_parse+0x3c>
    fce0:	00027d48 	.word	0x00027d48
    fce4:	200213d0 	.word	0x200213d0
    fce8:	00027b20 	.word	0x00027b20
    fcec:	00027bc8 	.word	0x00027bc8
    fcf0:	00028a38 	.word	0x00028a38

0000fcf4 <slm_at_tcpip_clac>:

/**@brief API to list TCP/IP AT commands
 */
void slm_at_tcpip_clac(void)
{
    fcf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    fcf6:	2400      	movs	r4, #0
    fcf8:	4d0c      	ldr	r5, [pc, #48]	; (fd2c <slm_at_tcpip_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", m_tcpip_at_list[i].string);
    fcfa:	4f0d      	ldr	r7, [pc, #52]	; (fd30 <slm_at_tcpip_clac+0x3c>)
    fcfc:	4e0d      	ldr	r6, [pc, #52]	; (fd34 <slm_at_tcpip_clac+0x40>)
    fcfe:	686b      	ldr	r3, [r5, #4]
    fd00:	f640 228c 	movw	r2, #2700	; 0xa8c
    fd04:	2100      	movs	r1, #0
    fd06:	9300      	str	r3, [sp, #0]
    fd08:	4630      	mov	r0, r6
    fd0a:	463b      	mov	r3, r7
    fd0c:	f016 ffd2 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
    fd10:	4630      	mov	r0, r6
    fd12:	f7fd f8ad 	bl	ce70 <strlen>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    fd16:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
    fd18:	4601      	mov	r1, r0
    fd1a:	4630      	mov	r0, r6
    fd1c:	f7fe f966 	bl	dfec <rsp_send>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    fd20:	2c0e      	cmp	r4, #14
    fd22:	f105 050c 	add.w	r5, r5, #12
    fd26:	d1ea      	bne.n	fcfe <slm_at_tcpip_clac+0xa>
	}
}
    fd28:	b003      	add	sp, #12
    fd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd2c:	00027d48 	.word	0x00027d48
    fd30:	00028bb2 	.word	0x00028bb2
    fd34:	20026ea6 	.word	0x20026ea6

0000fd38 <slm_at_tcpip_init>:
/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(void)
{
	client.sock = INVALID_SOCKET;
	client.role = AT_SOCKET_ROLE_CLIENT;
    fd38:	2000      	movs	r0, #0
    fd3a:	f04f 32ff 	mov.w	r2, #4294967295
	client.sock = INVALID_SOCKET;
    fd3e:	4b03      	ldr	r3, [pc, #12]	; (fd4c <slm_at_tcpip_init+0x14>)
	client.role = AT_SOCKET_ROLE_CLIENT;
    fd40:	e9c3 2000 	strd	r2, r0, [r3]
	client.sock_peer = INVALID_SOCKET;
    fd44:	609a      	str	r2, [r3, #8]
	client.connected = false;
    fd46:	7418      	strb	r0, [r3, #16]
	client.ip_proto = IPPROTO_IP;
    fd48:	60d8      	str	r0, [r3, #12]
	return 0;
}
    fd4a:	4770      	bx	lr
    fd4c:	200214e4 	.word	0x200214e4

0000fd50 <handle_at_icmp_ping>:
 */
static int handle_at_icmp_ping(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[ICMP_MAX_URL];
	int size = ICMP_MAX_URL;
    fd50:	2380      	movs	r3, #128	; 0x80
{
    fd52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u16_t length, timeout, count, interval;

	switch (cmd_type) {
    fd56:	2801      	cmp	r0, #1
{
    fd58:	b0a5      	sub	sp, #148	; 0x94
    fd5a:	4604      	mov	r4, r0
	int size = ICMP_MAX_URL;
    fd5c:	9302      	str	r3, [sp, #8]
	switch (cmd_type) {
    fd5e:	d005      	beq.n	fd6c <handle_at_icmp_ping+0x1c>
	int err = -EINVAL;
    fd60:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
    fd64:	4620      	mov	r0, r4
    fd66:	b025      	add	sp, #148	; 0x94
    fd68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (at_params_valid_count_get(&at_param_list) < 4) {
    fd6c:	4874      	ldr	r0, [pc, #464]	; (ff40 <handle_at_icmp_ping+0x1f0>)
    fd6e:	f016 f9a9 	bl	260c4 <at_params_valid_count_get>
    fd72:	2803      	cmp	r0, #3
    fd74:	d9f4      	bls.n	fd60 <handle_at_icmp_ping+0x10>
		err = at_params_string_get(&at_param_list, 1, url, &size);
    fd76:	4621      	mov	r1, r4
    fd78:	4871      	ldr	r0, [pc, #452]	; (ff40 <handle_at_icmp_ping+0x1f0>)
    fd7a:	ab02      	add	r3, sp, #8
    fd7c:	aa04      	add	r2, sp, #16
    fd7e:	f016 f97e 	bl	2607e <at_params_string_get>
		if (err < 0) {
    fd82:	1e04      	subs	r4, r0, #0
    fd84:	dbee      	blt.n	fd64 <handle_at_icmp_ping+0x14>
		url[size] = '\0';
    fd86:	2500      	movs	r5, #0
    fd88:	9b02      	ldr	r3, [sp, #8]
    fd8a:	aa24      	add	r2, sp, #144	; 0x90
    fd8c:	4413      	add	r3, r2
		err = at_params_short_get(&at_param_list, 2, &length);
    fd8e:	2102      	movs	r1, #2
    fd90:	466a      	mov	r2, sp
    fd92:	486b      	ldr	r0, [pc, #428]	; (ff40 <handle_at_icmp_ping+0x1f0>)
		url[size] = '\0';
    fd94:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&at_param_list, 2, &length);
    fd98:	f016 f94c 	bl	26034 <at_params_short_get>
		if (err < 0) {
    fd9c:	1e04      	subs	r4, r0, #0
    fd9e:	dbe1      	blt.n	fd64 <handle_at_icmp_ping+0x14>
		err = at_params_short_get(&at_param_list, 3, &timeout);
    fda0:	2103      	movs	r1, #3
    fda2:	4867      	ldr	r0, [pc, #412]	; (ff40 <handle_at_icmp_ping+0x1f0>)
    fda4:	f10d 0202 	add.w	r2, sp, #2
    fda8:	f016 f944 	bl	26034 <at_params_short_get>
		if (err < 0) {
    fdac:	1e04      	subs	r4, r0, #0
    fdae:	dbd9      	blt.n	fd64 <handle_at_icmp_ping+0x14>
		if (at_params_valid_count_get(&at_param_list) > 4) {
    fdb0:	4863      	ldr	r0, [pc, #396]	; (ff40 <handle_at_icmp_ping+0x1f0>)
    fdb2:	f016 f987 	bl	260c4 <at_params_valid_count_get>
    fdb6:	2804      	cmp	r0, #4
    fdb8:	d929      	bls.n	fe0e <handle_at_icmp_ping+0xbe>
			err = at_params_short_get(&at_param_list, 4, &count);
    fdba:	2104      	movs	r1, #4
    fdbc:	4860      	ldr	r0, [pc, #384]	; (ff40 <handle_at_icmp_ping+0x1f0>)
    fdbe:	aa01      	add	r2, sp, #4
    fdc0:	f016 f938 	bl	26034 <at_params_short_get>
			if (err < 0) {
    fdc4:	1e04      	subs	r4, r0, #0
    fdc6:	dbcd      	blt.n	fd64 <handle_at_icmp_ping+0x14>
		if (at_params_valid_count_get(&at_param_list) > 5) {
    fdc8:	485d      	ldr	r0, [pc, #372]	; (ff40 <handle_at_icmp_ping+0x1f0>)
    fdca:	f016 f97b 	bl	260c4 <at_params_valid_count_get>
    fdce:	2805      	cmp	r0, #5
    fdd0:	d920      	bls.n	fe14 <handle_at_icmp_ping+0xc4>
			err = at_params_short_get(&at_param_list, 5, &interval);
    fdd2:	2105      	movs	r1, #5
    fdd4:	485a      	ldr	r0, [pc, #360]	; (ff40 <handle_at_icmp_ping+0x1f0>)
    fdd6:	f10d 0206 	add.w	r2, sp, #6
    fdda:	f016 f92b 	bl	26034 <at_params_short_get>
			if (err < 0) {
    fdde:	1e04      	subs	r4, r0, #0
    fde0:	dbc0      	blt.n	fd64 <handle_at_icmp_ping+0x14>
		err = ping_test_handler(url, length, timeout, count, interval);
    fde2:	f8bd 8000 	ldrh.w	r8, [sp]
    fde6:	f8bd 9002 	ldrh.w	r9, [sp, #2]
	if (length > ICMP_MAX_LEN) {
    fdea:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
		err = ping_test_handler(url, length, timeout, count, interval);
    fdee:	f8bd 6004 	ldrh.w	r6, [sp, #4]
    fdf2:	f8bd 7006 	ldrh.w	r7, [sp, #6]
	if (length > ICMP_MAX_LEN) {
    fdf6:	dd11      	ble.n	fe1c <handle_at_icmp_ping+0xcc>
    fdf8:	4952      	ldr	r1, [pc, #328]	; (ff44 <handle_at_icmp_ping+0x1f4>)
    fdfa:	4b53      	ldr	r3, [pc, #332]	; (ff48 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("Payload size exceeds limit");
    fdfc:	4853      	ldr	r0, [pc, #332]	; (ff4c <handle_at_icmp_ping+0x1fc>)
    fdfe:	1ac9      	subs	r1, r1, r3
    fe00:	08c9      	lsrs	r1, r1, #3
    fe02:	0189      	lsls	r1, r1, #6
    fe04:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("LTE not connected yet");
    fe08:	f013 fcc5 	bl	23796 <log_0>
		return -1;
    fe0c:	e015      	b.n	fe3a <handle_at_icmp_ping+0xea>
			count = 0;
    fe0e:	f8ad 5004 	strh.w	r5, [sp, #4]
    fe12:	e7d9      	b.n	fdc8 <handle_at_icmp_ping+0x78>
			interval = 0;
    fe14:	2300      	movs	r3, #0
    fe16:	f8ad 3006 	strh.w	r3, [sp, #6]
    fe1a:	e7e2      	b.n	fde2 <handle_at_icmp_ping+0x92>
	st = modem_info_params_get(&modem_param);
    fe1c:	484c      	ldr	r0, [pc, #304]	; (ff50 <handle_at_icmp_ping+0x200>)
    fe1e:	f007 f9fd 	bl	1721c <modem_info_params_get>
	if (st < 0) {
    fe22:	1e01      	subs	r1, r0, #0
    fe24:	da0c      	bge.n	fe40 <handle_at_icmp_ping+0xf0>
    fe26:	4a47      	ldr	r2, [pc, #284]	; (ff44 <handle_at_icmp_ping+0x1f4>)
    fe28:	4b47      	ldr	r3, [pc, #284]	; (ff48 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("Unable to obtain modem parameters (%d)", st);
    fe2a:	484a      	ldr	r0, [pc, #296]	; (ff54 <handle_at_icmp_ping+0x204>)
    fe2c:	1ad2      	subs	r2, r2, r3
    fe2e:	08d2      	lsrs	r2, r2, #3
    fe30:	0192      	lsls	r2, r2, #6
    fe32:	f042 0201 	orr.w	r2, r2, #1
    fe36:	f013 fcbd 	bl	237b4 <log_1>
		return -1;
    fe3a:	f04f 34ff 	mov.w	r4, #4294967295
    fe3e:	e791      	b.n	fd64 <handle_at_icmp_ping+0x14>
	addr_len = strlen(modem_param.network.ip_address.value_string);
    fe40:	4845      	ldr	r0, [pc, #276]	; (ff58 <handle_at_icmp_ping+0x208>)
    fe42:	f7fd f815 	bl	ce70 <strlen>
	if (addr_len == 0) {
    fe46:	b940      	cbnz	r0, fe5a <handle_at_icmp_ping+0x10a>
    fe48:	493e      	ldr	r1, [pc, #248]	; (ff44 <handle_at_icmp_ping+0x1f4>)
    fe4a:	4b3f      	ldr	r3, [pc, #252]	; (ff48 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("LTE not connected yet");
    fe4c:	4843      	ldr	r0, [pc, #268]	; (ff5c <handle_at_icmp_ping+0x20c>)
    fe4e:	1ac9      	subs	r1, r1, r3
    fe50:	08c9      	lsrs	r1, r1, #3
    fe52:	0189      	lsls	r1, r1, #6
    fe54:	f041 0101 	orr.w	r1, r1, #1
    fe58:	e7d6      	b.n	fe08 <handle_at_icmp_ping+0xb8>
	return zsock_getaddrinfo(host, service, hints, res);
    fe5a:	2200      	movs	r2, #0
    fe5c:	483e      	ldr	r0, [pc, #248]	; (ff58 <handle_at_icmp_ping+0x208>)
    fe5e:	4611      	mov	r1, r2
    fe60:	ab03      	add	r3, sp, #12
    fe62:	f013 ffe3 	bl	23e2c <zsock_getaddrinfo>
	if (st != 0) {
    fe66:	4604      	mov	r4, r0
    fe68:	b160      	cbz	r0, fe84 <handle_at_icmp_ping+0x134>
    fe6a:	4a36      	ldr	r2, [pc, #216]	; (ff44 <handle_at_icmp_ping+0x1f4>)
    fe6c:	4b36      	ldr	r3, [pc, #216]	; (ff48 <handle_at_icmp_ping+0x1f8>)
		LOG_ERR("getaddrinfo(src) error: %d", st);
    fe6e:	4601      	mov	r1, r0
    fe70:	1ad2      	subs	r2, r2, r3
    fe72:	08d2      	lsrs	r2, r2, #3
    fe74:	0192      	lsls	r2, r2, #6
    fe76:	483a      	ldr	r0, [pc, #232]	; (ff60 <handle_at_icmp_ping+0x210>)
    fe78:	f042 0201 	orr.w	r2, r2, #1
    fe7c:	f013 fc9a 	bl	237b4 <log_1>
		return -st;
    fe80:	4264      	negs	r4, r4
    fe82:	e76f      	b.n	fd64 <handle_at_icmp_ping+0x14>
	ping_argv.src = res;
    fe84:	9b03      	ldr	r3, [sp, #12]
    fe86:	4d37      	ldr	r5, [pc, #220]	; (ff64 <handle_at_icmp_ping+0x214>)
    fe88:	4602      	mov	r2, r0
    fe8a:	4601      	mov	r1, r0
    fe8c:	602b      	str	r3, [r5, #0]
	res = NULL;
    fe8e:	9003      	str	r0, [sp, #12]
    fe90:	ab03      	add	r3, sp, #12
    fe92:	a804      	add	r0, sp, #16
    fe94:	f013 ffca 	bl	23e2c <zsock_getaddrinfo>
	if (st != 0) {
    fe98:	4604      	mov	r4, r0
    fe9a:	b1c8      	cbz	r0, fed0 <handle_at_icmp_ping+0x180>
    fe9c:	4b2a      	ldr	r3, [pc, #168]	; (ff48 <handle_at_icmp_ping+0x1f8>)
    fe9e:	4a29      	ldr	r2, [pc, #164]	; (ff44 <handle_at_icmp_ping+0x1f4>)
		LOG_ERR("getaddrinfo(dest) error: %d", st);
    fea0:	4601      	mov	r1, r0
    fea2:	1ad2      	subs	r2, r2, r3
    fea4:	08d2      	lsrs	r2, r2, #3
    fea6:	0192      	lsls	r2, r2, #6
    fea8:	f042 0201 	orr.w	r2, r2, #1
    feac:	482e      	ldr	r0, [pc, #184]	; (ff68 <handle_at_icmp_ping+0x218>)
    feae:	f013 fc81 	bl	237b4 <log_1>
		sprintf(rsp_buf, "Cannot resolve remote host\r\n");
    feb2:	492e      	ldr	r1, [pc, #184]	; (ff6c <handle_at_icmp_ping+0x21c>)
    feb4:	482e      	ldr	r0, [pc, #184]	; (ff70 <handle_at_icmp_ping+0x220>)
    feb6:	f016 ff24 	bl	26d02 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
    feba:	482d      	ldr	r0, [pc, #180]	; (ff70 <handle_at_icmp_ping+0x220>)
    febc:	f7fc ffd8 	bl	ce70 <strlen>
    fec0:	4601      	mov	r1, r0
    fec2:	482b      	ldr	r0, [pc, #172]	; (ff70 <handle_at_icmp_ping+0x220>)
    fec4:	f7fe f892 	bl	dfec <rsp_send>
	zsock_freeaddrinfo(ai);
    fec8:	6828      	ldr	r0, [r5, #0]
    feca:	f013 ffb1 	bl	23e30 <zsock_freeaddrinfo>
    fece:	e7d7      	b.n	fe80 <handle_at_icmp_ping+0x130>
	ping_argv.dest = res;
    fed0:	9b03      	ldr	r3, [sp, #12]
	if (ping_argv.src->ai_family != ping_argv.dest->ai_family) {
    fed2:	682a      	ldr	r2, [r5, #0]
	ping_argv.dest = res;
    fed4:	606b      	str	r3, [r5, #4]
	if (ping_argv.src->ai_family != ping_argv.dest->ai_family) {
    fed6:	6892      	ldr	r2, [r2, #8]
    fed8:	689b      	ldr	r3, [r3, #8]
    feda:	429a      	cmp	r2, r3
    fedc:	d010      	beq.n	ff00 <handle_at_icmp_ping+0x1b0>
    fede:	4b1a      	ldr	r3, [pc, #104]	; (ff48 <handle_at_icmp_ping+0x1f8>)
    fee0:	4918      	ldr	r1, [pc, #96]	; (ff44 <handle_at_icmp_ping+0x1f4>)
		LOG_ERR("Source/Destination address family error");
    fee2:	4824      	ldr	r0, [pc, #144]	; (ff74 <handle_at_icmp_ping+0x224>)
    fee4:	1ac9      	subs	r1, r1, r3
    fee6:	08c9      	lsrs	r1, r1, #3
    fee8:	0189      	lsls	r1, r1, #6
    feea:	f041 0101 	orr.w	r1, r1, #1
    feee:	f013 fc52 	bl	23796 <log_0>
    fef2:	6868      	ldr	r0, [r5, #4]
    fef4:	f013 ff9c 	bl	23e30 <zsock_freeaddrinfo>
    fef8:	6828      	ldr	r0, [r5, #0]
    fefa:	f013 ff99 	bl	23e30 <zsock_freeaddrinfo>
		return -1;
    fefe:	e79c      	b.n	fe3a <handle_at_icmp_ping+0xea>
		ping_argv.count = count;
    ff00:	2e00      	cmp	r6, #0
    ff02:	bf08      	it	eq
    ff04:	2601      	moveq	r6, #1
		ping_argv.interval = interval;
    ff06:	2f00      	cmp	r7, #0
	ping_argv.interval = 1000;	/* default 1s */
    ff08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		ping_argv.interval = interval;
    ff0c:	bf18      	it	ne
    ff0e:	463b      	movne	r3, r7
		err = ping_test_handler(url, length, timeout, count, interval);
    ff10:	e9c5 8902 	strd	r8, r9, [r5, #8]
    ff14:	4918      	ldr	r1, [pc, #96]	; (ff78 <handle_at_icmp_ping+0x228>)
		ping_argv.count = count;
    ff16:	612e      	str	r6, [r5, #16]
		ping_argv.interval = interval;
    ff18:	616b      	str	r3, [r5, #20]
    ff1a:	e8d1 3fef 	ldaex	r3, [r1]
    ff1e:	f043 0201 	orr.w	r2, r3, #1
    ff22:	e8c1 2fe0 	stlex	r0, r2, [r1]
    ff26:	2800      	cmp	r0, #0
    ff28:	d1f7      	bne.n	ff1a <handle_at_icmp_ping+0x1ca>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ff2a:	f013 0501 	ands.w	r5, r3, #1
    ff2e:	f47f af19 	bne.w	fd64 <handle_at_icmp_ping+0x14>
		k_queue_append(&work_q->queue, work);
    ff32:	4812      	ldr	r0, [pc, #72]	; (ff7c <handle_at_icmp_ping+0x22c>)
    ff34:	3908      	subs	r1, #8
    ff36:	f016 fa46 	bl	263c6 <k_queue_append>
	return 0;
    ff3a:	462c      	mov	r4, r5
		break;
    ff3c:	e712      	b.n	fd64 <handle_at_icmp_ping+0x14>
    ff3e:	bf00      	nop
    ff40:	200213d0 	.word	0x200213d0
    ff44:	00027b70 	.word	0x00027b70
    ff48:	00027b20 	.word	0x00027b20
    ff4c:	00029106 	.word	0x00029106
    ff50:	20020880 	.word	0x20020880
    ff54:	00028eca 	.word	0x00028eca
    ff58:	20020b92 	.word	0x20020b92
    ff5c:	00028ef1 	.word	0x00028ef1
    ff60:	00029121 	.word	0x00029121
    ff64:	2002150c 	.word	0x2002150c
    ff68:	0002913c 	.word	0x0002913c
    ff6c:	00029158 	.word	0x00029158
    ff70:	20026ea6 	.word	0x20026ea6
    ff74:	00029175 	.word	0x00029175
    ff78:	20021508 	.word	0x20021508
    ff7c:	200213f8 	.word	0x200213f8

0000ff80 <send_ping_wait_reply>:
{
    ff80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	total_length = ping_argv.len + header_len + icmp_hdr_len;
    ff84:	4d9e      	ldr	r5, [pc, #632]	; (10200 <send_ping_wait_reply+0x280>)
{
    ff86:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
	total_length = ping_argv.len + header_len + icmp_hdr_len;
    ff8a:	68ab      	ldr	r3, [r5, #8]
	memset(ip_buf, 0x00, header_len);
    ff8c:	2400      	movs	r4, #0
	total_length = ping_argv.len + header_len + icmp_hdr_len;
    ff8e:	331c      	adds	r3, #28
    ff90:	fa1f fb83 	uxth.w	fp, r3
	ip_buf[2] = total_length >> 8;           /* Total length */
    ff94:	ba5b      	rev16	r3, r3
    ff96:	f8ad 301a 	strh.w	r3, [sp, #26]
	ip_buf[8] = 64;                          /* TTL */
    ff9a:	f44f 73a0 	mov.w	r3, #320	; 0x140
	ip_buf[0] = (4 << 4) + (header_len / 4); /* Version & header length */
    ff9e:	2245      	movs	r2, #69	; 0x45
	memset(ip_buf, 0x00, header_len);
    ffa0:	e9cd 4408 	strd	r4, r4, [sp, #32]
	ip_buf[8] = 64;                          /* TTL */
    ffa4:	f8ad 3020 	strh.w	r3, [sp, #32]
	sa = (struct sockaddr_in *)ping_argv.src->ai_addr;
    ffa8:	682b      	ldr	r3, [r5, #0]
	memset(ip_buf, 0x00, header_len);
    ffaa:	940a      	str	r4, [sp, #40]	; 0x28
	ip_buf[1] = 0x00;                        /* Type of service */
    ffac:	699b      	ldr	r3, [r3, #24]
	ip_buf[4] = 0x00;                        /* Identification */
    ffae:	9407      	str	r4, [sp, #28]
    ffb0:	685b      	ldr	r3, [r3, #4]
	hcs = check_ics(buffer, len);
    ffb2:	2114      	movs	r1, #20
	buffer[0] = ipaddr & 0xFF;
    ffb4:	9309      	str	r3, [sp, #36]	; 0x24
	sa = (struct sockaddr_in *)ping_argv.dest->ai_addr;
    ffb6:	686b      	ldr	r3, [r5, #4]
	hcs = check_ics(buffer, len);
    ffb8:	a806      	add	r0, sp, #24
    ffba:	699b      	ldr	r3, [r3, #24]
	ip_buf[0] = (4 << 4) + (header_len / 4); /* Version & header length */
    ffbc:	f8ad 2018 	strh.w	r2, [sp, #24]
	setip(ip_buf+16, sa->sin_addr.s_addr);     /* Destination */
    ffc0:	685b      	ldr	r3, [r3, #4]
	*ptr_hcs = 0;   /* Clear checksum before calculation */
    ffc2:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
	buffer[0] = ipaddr & 0xFF;
    ffc6:	930a      	str	r3, [sp, #40]	; 0x28
	hcs = check_ics(buffer, len);
    ffc8:	f013 f888 	bl	230dc <check_ics>
	data[0] = ICMP_ECHO_REQ;                 /* Type (echo req) */
    ffcc:	2308      	movs	r3, #8
		data[i] = (i + seqnr) % 10 + '0';
    ffce:	260a      	movs	r6, #10
	data[6] = seqnr >> 8;                   /* seqnr */
    ffd0:	498c      	ldr	r1, [pc, #560]	; (10204 <send_ping_wait_reply+0x284>)
	data[4] = 0x00;                         /* Identifier */
    ffd2:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
	data[6] = seqnr >> 8;                   /* seqnr */
    ffd6:	780a      	ldrb	r2, [r1, #0]
    ffd8:	4689      	mov	r9, r1
	data[7] = ++seqnr;                      /* seqr */
    ffda:	3201      	adds	r2, #1
    ffdc:	b2d2      	uxtb	r2, r2
	data[6] = seqnr >> 8;                   /* seqnr */
    ffde:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
	data[7] = ++seqnr;                      /* seqr */
    ffe2:	700a      	strb	r2, [r1, #0]
	*ptr_hcs = hcs;
    ffe4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
	data[0] = ICMP_ECHO_REQ;                 /* Type (echo req) */
    ffe8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	data[7] = ++seqnr;                      /* seqr */
    ffec:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	for (int i = 8; i < total_length - header_len; i++) {
    fff0:	ac0d      	add	r4, sp, #52	; 0x34
    fff2:	9503      	str	r5, [sp, #12]
    fff4:	f1ab 0114 	sub.w	r1, fp, #20
    fff8:	4299      	cmp	r1, r3
    fffa:	dc40      	bgt.n	1007e <send_ping_wait_reply+0xfe>
	*ptr_hcs = 0;   /* Clear checksum before calculation */
    fffc:	f04f 0a00 	mov.w	sl, #0
	hcs = check_ics(buffer, len);
   10000:	a80b      	add	r0, sp, #44	; 0x2c
	*ptr_hcs = 0;   /* Clear checksum before calculation */
   10002:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
	hcs = check_ics(buffer, len);
   10006:	f013 f869 	bl	230dc <check_ics>
	*ptr_hcs = hcs;
   1000a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
	errno = 0;
   1000e:	f014 f9a9 	bl	24364 <__errno>
	delta_t = 0;
   10012:	2200      	movs	r2, #0
   10014:	2300      	movs	r3, #0
   10016:	4d7c      	ldr	r5, [pc, #496]	; (10208 <send_ping_wait_reply+0x288>)
	errno = 0;
   10018:	f8c0 a000 	str.w	sl, [r0]
	delta_t = 0;
   1001c:	e9c5 2300 	strd	r2, r3, [r5]
	return z_impl_k_uptime_ticks();
   10020:	f016 fb6f 	bl	26702 <z_impl_k_uptime_ticks>
   10024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10028:	460a      	mov	r2, r1
   1002a:	fba0 0103 	umull	r0, r1, r0, r3
   1002e:	fb03 1102 	mla	r1, r3, r2, r1
	start_t = k_uptime_get();
   10032:	4e76      	ldr	r6, [pc, #472]	; (1020c <send_ping_wait_reply+0x28c>)
   10034:	0bc3      	lsrs	r3, r0, #15
   10036:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1003a:	0bca      	lsrs	r2, r1, #15
   1003c:	e9c6 3200 	strd	r3, r2, [r6]
	fd = nrf_socket(NRF_AF_PACKET, NRF_SOCK_RAW, 0);
   10040:	2103      	movs	r1, #3
   10042:	4652      	mov	r2, sl
   10044:	2005      	movs	r0, #5
   10046:	f00e fa43 	bl	1e4d0 <nrf_socket>
	if (fd < 0) {
   1004a:	4c71      	ldr	r4, [pc, #452]	; (10210 <send_ping_wait_reply+0x290>)
   1004c:	4b71      	ldr	r3, [pc, #452]	; (10214 <send_ping_wait_reply+0x294>)
   1004e:	f1b0 0800 	subs.w	r8, r0, #0
   10052:	eba4 0403 	sub.w	r4, r4, r3
   10056:	462f      	mov	r7, r5
   10058:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1005c:	da19      	bge.n	10092 <send_ping_wait_reply+0x112>
		LOG_ERR("socket() failed: (%d)", -errno);
   1005e:	f014 f981 	bl	24364 <__errno>
   10062:	01a4      	lsls	r4, r4, #6
   10064:	6801      	ldr	r1, [r0, #0]
   10066:	f044 0401 	orr.w	r4, r4, #1
   1006a:	486b      	ldr	r0, [pc, #428]	; (10218 <send_ping_wait_reply+0x298>)
   1006c:	4622      	mov	r2, r4
   1006e:	4249      	negs	r1, r1
   10070:	f013 fba0 	bl	237b4 <log_1>
		return (u32_t)delta_t;
   10074:	6828      	ldr	r0, [r5, #0]
}
   10076:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   1007a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data[i] = (i + seqnr) % 10 + '0';
   1007e:	18d7      	adds	r7, r2, r3
   10080:	fbb7 f0f6 	udiv	r0, r7, r6
   10084:	fb06 7010 	mls	r0, r6, r0, r7
   10088:	3030      	adds	r0, #48	; 0x30
   1008a:	f804 0b01 	strb.w	r0, [r4], #1
	for (int i = 8; i < total_length - header_len; i++) {
   1008e:	3301      	adds	r3, #1
   10090:	e7b2      	b.n	fff8 <send_ping_wait_reply+0x78>
	ret = nrf_send(fd, ip_buf, total_length, 0);
   10092:	4653      	mov	r3, sl
   10094:	465a      	mov	r2, fp
   10096:	a906      	add	r1, sp, #24
   10098:	f00e fa56 	bl	1e548 <nrf_send>
	if (ret <= 0) {
   1009c:	2800      	cmp	r0, #0
   1009e:	dc0f      	bgt.n	100c0 <send_ping_wait_reply+0x140>
		LOG_ERR("nrf_send() failed: (%d)", -errno);
   100a0:	f014 f960 	bl	24364 <__errno>
   100a4:	01a4      	lsls	r4, r4, #6
   100a6:	6801      	ldr	r1, [r0, #0]
   100a8:	f044 0401 	orr.w	r4, r4, #1
   100ac:	4622      	mov	r2, r4
   100ae:	485b      	ldr	r0, [pc, #364]	; (1021c <send_ping_wait_reply+0x29c>)
   100b0:	4249      	negs	r1, r1
   100b2:	f013 fb7f 	bl	237b4 <log_1>
	(void)nrf_close(fd);
   100b6:	4640      	mov	r0, r8
   100b8:	f00e fa1c 	bl	1e4f4 <nrf_close>
	return (u32_t)delta_t;
   100bc:	6838      	ldr	r0, [r7, #0]
   100be:	e7da      	b.n	10076 <send_ping_wait_reply+0xf6>
	fds[0].events = NRF_POLLIN;
   100c0:	2101      	movs	r1, #1
	ret = nrf_poll(fds, 1, ping_argv.waitms);
   100c2:	9b03      	ldr	r3, [sp, #12]
   100c4:	a804      	add	r0, sp, #16
   100c6:	68da      	ldr	r2, [r3, #12]
	fds[0].fd = fd;
   100c8:	f8cd 8010 	str.w	r8, [sp, #16]
	fds[0].events = NRF_POLLIN;
   100cc:	f8ad 1014 	strh.w	r1, [sp, #20]
	ret = nrf_poll(fds, 1, ping_argv.waitms);
   100d0:	f00e fb10 	bl	1e6f4 <nrf_poll>
	if (ret <= 0) {
   100d4:	1e02      	subs	r2, r0, #0
   100d6:	dd1b      	ble.n	10110 <send_ping_wait_reply+0x190>
			LOG_INF("nrf_recv() wrong data (%d)", len);
   100d8:	ea4f 1a84 	mov.w	sl, r4, lsl #6
   100dc:	f8df b160 	ldr.w	fp, [pc, #352]	; 10240 <send_ping_wait_reply+0x2c0>
   100e0:	f04a 0a03 	orr.w	sl, sl, #3
		len = nrf_recv(fd, ip_buf, NET_IPV4_MTU, 0);
   100e4:	2300      	movs	r3, #0
   100e6:	f44f 7210 	mov.w	r2, #576	; 0x240
   100ea:	4640      	mov	r0, r8
   100ec:	a906      	add	r1, sp, #24
   100ee:	f00e fa61 	bl	1e5b4 <nrf_recv>
		if (len <= 0) {
   100f2:	1e05      	subs	r5, r0, #0
   100f4:	dc25      	bgt.n	10142 <send_ping_wait_reply+0x1c2>
			LOG_ERR("nrf_recv() failed: (%d) (%d)", -errno, len);
   100f6:	f014 f935 	bl	24364 <__errno>
   100fa:	01a4      	lsls	r4, r4, #6
   100fc:	6801      	ldr	r1, [r0, #0]
   100fe:	f044 0401 	orr.w	r4, r4, #1
   10102:	4623      	mov	r3, r4
   10104:	462a      	mov	r2, r5
   10106:	4846      	ldr	r0, [pc, #280]	; (10220 <send_ping_wait_reply+0x2a0>)
   10108:	4249      	negs	r1, r1
   1010a:	f013 fb6a 	bl	237e2 <log_2>
			goto close_end;
   1010e:	e7d2      	b.n	100b6 <send_ping_wait_reply+0x136>
   10110:	9203      	str	r2, [sp, #12]
		LOG_ERR("nrf_poll() failed: (%d) (%d)", -errno, ret);
   10112:	f014 f927 	bl	24364 <__errno>
   10116:	01a4      	lsls	r4, r4, #6
   10118:	6801      	ldr	r1, [r0, #0]
   1011a:	f044 0401 	orr.w	r4, r4, #1
   1011e:	4841      	ldr	r0, [pc, #260]	; (10224 <send_ping_wait_reply+0x2a4>)
   10120:	4249      	negs	r1, r1
   10122:	4623      	mov	r3, r4
   10124:	9a03      	ldr	r2, [sp, #12]
   10126:	f013 fb5c 	bl	237e2 <log_2>
		sprintf(rsp_buf, "#XPING: timeout\r\n");
   1012a:	493f      	ldr	r1, [pc, #252]	; (10228 <send_ping_wait_reply+0x2a8>)
   1012c:	483f      	ldr	r0, [pc, #252]	; (1022c <send_ping_wait_reply+0x2ac>)
   1012e:	f016 fde8 	bl	26d02 <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   10132:	483e      	ldr	r0, [pc, #248]	; (1022c <send_ping_wait_reply+0x2ac>)
   10134:	f7fc fe9c 	bl	ce70 <strlen>
   10138:	4601      	mov	r1, r0
   1013a:	483c      	ldr	r0, [pc, #240]	; (1022c <send_ping_wait_reply+0x2ac>)
   1013c:	f7fd ff56 	bl	dfec <rsp_send>
   10140:	e7b9      	b.n	100b6 <send_ping_wait_reply+0x136>
		if (len < header_len) {
   10142:	2d13      	cmp	r5, #19
   10144:	dc05      	bgt.n	10152 <send_ping_wait_reply+0x1d2>
			LOG_INF("nrf_recv() wrong data (%d)", len);
   10146:	4652      	mov	r2, sl
   10148:	4629      	mov	r1, r5
   1014a:	4658      	mov	r0, fp
   1014c:	f013 fb32 	bl	237b4 <log_1>
			continue;
   10150:	e7c8      	b.n	100e4 <send_ping_wait_reply+0x164>
		if (ip_buf[IP_PROTOCOL_POS] != ICMP) {
   10152:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10156:	2b01      	cmp	r3, #1
   10158:	d1c4      	bne.n	100e4 <send_ping_wait_reply+0x164>
   1015a:	f016 fad2 	bl	26702 <z_impl_k_uptime_ticks>
   1015e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   10162:	460b      	mov	r3, r1
   10164:	fba0 010a 	umull	r0, r1, r0, sl
   10168:	fb0a 1103 	mla	r1, sl, r3, r1
   1016c:	0bc2      	lsrs	r2, r0, #15
   1016e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   10172:	0bcb      	lsrs	r3, r1, #15
	delta = uptime - *reftime;
   10174:	e9d6 0100 	ldrd	r0, r1, [r6]
   10178:	ebb2 0b00 	subs.w	fp, r2, r0
   1017c:	eb63 0101 	sbc.w	r1, r3, r1
	delta_t = k_uptime_delta(&start_t);
   10180:	e9c7 b100 	strd	fp, r1, [r7]
	hcs = check_ics(data, len - header_len);
   10184:	a80b      	add	r0, sp, #44	; 0x2c
   10186:	f1a5 0114 	sub.w	r1, r5, #20
	*reftime = uptime;
   1018a:	e9c6 2300 	strd	r2, r3, [r6]
   1018e:	f012 ffa5 	bl	230dc <check_ics>
	if (hcs != 0) {
   10192:	4601      	mov	r1, r0
   10194:	b150      	cbz	r0, 101ac <send_ping_wait_reply+0x22c>
		LOG_WRN("HCS error %d", hcs);
   10196:	01a2      	lsls	r2, r4, #6
   10198:	4825      	ldr	r0, [pc, #148]	; (10230 <send_ping_wait_reply+0x2b0>)
   1019a:	f042 0202 	orr.w	r2, r2, #2
   1019e:	f013 fb09 	bl	237b4 <log_1>
		delta_t = 0;
   101a2:	2200      	movs	r2, #0
   101a4:	2300      	movs	r3, #0
   101a6:	e9c7 2300 	strd	r2, r3, [r7]
		goto close_end;
   101aa:	e784      	b.n	100b6 <send_ping_wait_reply+0x136>
	plseqnr = data[7];
   101ac:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
	if (plseqnr != seqnr) {
   101b0:	f899 2000 	ldrb.w	r2, [r9]
   101b4:	4290      	cmp	r0, r2
   101b6:	d007      	beq.n	101c8 <send_ping_wait_reply+0x248>
		LOG_WRN("error sequence numbers %d %d", plseqnr, seqnr);
   101b8:	4601      	mov	r1, r0
   101ba:	01a3      	lsls	r3, r4, #6
   101bc:	481d      	ldr	r0, [pc, #116]	; (10234 <send_ping_wait_reply+0x2b4>)
   101be:	f043 0302 	orr.w	r3, r3, #2
		LOG_WRN("error length %d %d", pllen, len);
   101c2:	f013 fb0e 	bl	237e2 <log_2>
   101c6:	e7ec      	b.n	101a2 <send_ping_wait_reply+0x222>
	pllen = (ip_buf[2] << 8) + ip_buf[3];
   101c8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   101cc:	f89d 601b 	ldrb.w	r6, [sp, #27]
   101d0:	eb06 2603 	add.w	r6, r6, r3, lsl #8
	if (pllen != len) {
   101d4:	42ae      	cmp	r6, r5
   101d6:	d006      	beq.n	101e6 <send_ping_wait_reply+0x266>
		LOG_WRN("error length %d %d", pllen, len);
   101d8:	01a3      	lsls	r3, r4, #6
   101da:	462a      	mov	r2, r5
   101dc:	4631      	mov	r1, r6
   101de:	4816      	ldr	r0, [pc, #88]	; (10238 <send_ping_wait_reply+0x2b8>)
   101e0:	f043 0302 	orr.w	r3, r3, #2
   101e4:	e7ed      	b.n	101c2 <send_ping_wait_reply+0x242>
	sprintf(rsp_buf, "#XPING: %d.%03d\r\n",
   101e6:	fbbb f2fa 	udiv	r2, fp, sl
   101ea:	fb0a b312 	mls	r3, sl, r2, fp
   101ee:	480f      	ldr	r0, [pc, #60]	; (1022c <send_ping_wait_reply+0x2ac>)
   101f0:	e9cd 2300 	strd	r2, r3, [sp]
   101f4:	f640 228c 	movw	r2, #2700	; 0xa8c
   101f8:	4b10      	ldr	r3, [pc, #64]	; (1023c <send_ping_wait_reply+0x2bc>)
   101fa:	f016 fd5b 	bl	26cb4 <__sprintf_chk>
   101fe:	e798      	b.n	10132 <send_ping_wait_reply+0x1b2>
   10200:	2002150c 	.word	0x2002150c
   10204:	20028e55 	.word	0x20028e55
   10208:	20021168 	.word	0x20021168
   1020c:	20021170 	.word	0x20021170
   10210:	00027b70 	.word	0x00027b70
   10214:	00027b20 	.word	0x00027b20
   10218:	0002919d 	.word	0x0002919d
   1021c:	000291b3 	.word	0x000291b3
   10220:	000291fa 	.word	0x000291fa
   10224:	000291cb 	.word	0x000291cb
   10228:	000291e8 	.word	0x000291e8
   1022c:	20026ea6 	.word	0x20026ea6
   10230:	00029232 	.word	0x00029232
   10234:	0002923f 	.word	0x0002923f
   10238:	0002925c 	.word	0x0002925c
   1023c:	0002926f 	.word	0x0002926f
   10240:	00029217 	.word	0x00029217

00010244 <ping_task>:
{
   10244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < ping_argv.count; i++) {
   10248:	2700      	movs	r7, #0
			return (u32_t)((t * to_hz + off) / from_hz);
   1024a:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
	u32_t count = 0;
   1024e:	463e      	mov	r6, r7
	u32_t sum = 0;
   10250:	463c      	mov	r4, r7
	struct addrinfo *si = ping_argv.src;
   10252:	4d28      	ldr	r5, [pc, #160]	; (102f4 <ping_task+0xb0>)
	struct addrinfo *di = ping_argv.dest;
   10254:	e9d5 9800 	ldrd	r9, r8, [r5]
	for (int i = 0; i < ping_argv.count; i++) {
   10258:	692b      	ldr	r3, [r5, #16]
   1025a:	42bb      	cmp	r3, r7
   1025c:	dc2f      	bgt.n	102be <ping_task+0x7a>
	if (count > 1) {
   1025e:	2e01      	cmp	r6, #1
   10260:	d919      	bls.n	10296 <ping_task+0x52>
		u32_t avg = (sum + count/2) / count;
   10262:	eb04 0456 	add.w	r4, r4, r6, lsr #1
   10266:	fbb4 f6f6 	udiv	r6, r4, r6
		int avg_f = avg % 1000;
   1026a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1026e:	fbb6 f3f4 	udiv	r3, r6, r4
   10272:	fb04 6613 	mls	r6, r4, r3, r6
		sprintf(rsp_buf, "#XPING: average %d.%03d\r\n", avg_s, avg_f);
   10276:	2100      	movs	r1, #0
   10278:	f640 228c 	movw	r2, #2700	; 0xa8c
   1027c:	e9cd 3600 	strd	r3, r6, [sp]
   10280:	481d      	ldr	r0, [pc, #116]	; (102f8 <ping_task+0xb4>)
   10282:	4b1e      	ldr	r3, [pc, #120]	; (102fc <ping_task+0xb8>)
   10284:	f016 fd16 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   10288:	481b      	ldr	r0, [pc, #108]	; (102f8 <ping_task+0xb4>)
   1028a:	f7fc fdf1 	bl	ce70 <strlen>
   1028e:	4601      	mov	r1, r0
   10290:	4819      	ldr	r0, [pc, #100]	; (102f8 <ping_task+0xb4>)
   10292:	f7fd feab 	bl	dfec <rsp_send>
   10296:	4648      	mov	r0, r9
   10298:	f013 fdca 	bl	23e30 <zsock_freeaddrinfo>
   1029c:	4640      	mov	r0, r8
   1029e:	f013 fdc7 	bl	23e30 <zsock_freeaddrinfo>
	sprintf(rsp_buf, "OK\r\n");
   102a2:	4917      	ldr	r1, [pc, #92]	; (10300 <ping_task+0xbc>)
   102a4:	4814      	ldr	r0, [pc, #80]	; (102f8 <ping_task+0xb4>)
   102a6:	f016 fd2c 	bl	26d02 <strcpy>
	rsp_send(rsp_buf, strlen(rsp_buf));
   102aa:	4813      	ldr	r0, [pc, #76]	; (102f8 <ping_task+0xb4>)
   102ac:	f7fc fde0 	bl	ce70 <strlen>
   102b0:	4601      	mov	r1, r0
   102b2:	4811      	ldr	r0, [pc, #68]	; (102f8 <ping_task+0xb4>)
}
   102b4:	b003      	add	sp, #12
   102b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rsp_send(rsp_buf, strlen(rsp_buf));
   102ba:	f7fd be97 	b.w	dfec <rsp_send>
		u32_t ping_t = send_ping_wait_reply();
   102be:	f7ff fe5f 	bl	ff80 <send_ping_wait_reply>
		if (ping_t > 0)  {
   102c2:	b108      	cbz	r0, 102c8 <ping_task+0x84>
			count++;
   102c4:	3601      	adds	r6, #1
			sum += ping_t;
   102c6:	4404      	add	r4, r0
   102c8:	f240 3be7 	movw	fp, #999	; 0x3e7
   102cc:	f04f 0c00 	mov.w	ip, #0
		k_sleep(K_MSEC(ping_argv.interval));
   102d0:	696b      	ldr	r3, [r5, #20]
   102d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   102d6:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   102da:	fbca bc01 	smlal	fp, ip, sl, r1
   102de:	2300      	movs	r3, #0
   102e0:	4658      	mov	r0, fp
   102e2:	4661      	mov	r1, ip
   102e4:	f7fc f968 	bl	c5b8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   102e8:	2100      	movs	r1, #0
   102ea:	f010 ff33 	bl	21154 <z_impl_k_sleep>
	for (int i = 0; i < ping_argv.count; i++) {
   102ee:	3701      	adds	r7, #1
   102f0:	e7b2      	b.n	10258 <ping_task+0x14>
   102f2:	bf00      	nop
   102f4:	2002150c 	.word	0x2002150c
   102f8:	20026ea6 	.word	0x20026ea6
   102fc:	00029281 	.word	0x00029281
   10300:	00028a20 	.word	0x00028a20

00010304 <slm_at_icmp_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_icmp_parse(const char *at_cmd)
{
   10304:	b510      	push	{r4, lr}
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_ICMP_MAX; i++) {
		if (slm_util_cmd_casecmp(at_cmd, m_icmp_at_list[i].string)) {
   10306:	4911      	ldr	r1, [pc, #68]	; (1034c <slm_at_icmp_parse+0x48>)
{
   10308:	4604      	mov	r4, r0
		if (slm_util_cmd_casecmp(at_cmd, m_icmp_at_list[i].string)) {
   1030a:	f7fd fd21 	bl	dd50 <slm_util_cmd_casecmp>
   1030e:	b1d0      	cbz	r0, 10346 <slm_at_icmp_parse+0x42>
			ret = at_parser_params_from_str(at_cmd, NULL,
   10310:	2100      	movs	r1, #0
   10312:	4620      	mov	r0, r4
   10314:	4a0e      	ldr	r2, [pc, #56]	; (10350 <slm_at_icmp_parse+0x4c>)
   10316:	f015 fd8d 	bl	25e34 <at_parser_params_from_str>
						&at_param_list);
			if (ret < 0) {
   1031a:	1e01      	subs	r1, r0, #0
   1031c:	da0c      	bge.n	10338 <slm_at_icmp_parse+0x34>
   1031e:	4b0d      	ldr	r3, [pc, #52]	; (10354 <slm_at_icmp_parse+0x50>)
   10320:	4a0d      	ldr	r2, [pc, #52]	; (10358 <slm_at_icmp_parse+0x54>)
				LOG_ERR("Failed to parse AT command %d", ret);
   10322:	480e      	ldr	r0, [pc, #56]	; (1035c <slm_at_icmp_parse+0x58>)
   10324:	1ad2      	subs	r2, r2, r3
   10326:	08d2      	lsrs	r2, r2, #3
   10328:	0192      	lsls	r2, r2, #6
   1032a:	f042 0201 	orr.w	r2, r2, #1
   1032e:	f013 fa41 	bl	237b4 <log_1>
				return -EINVAL;
   10332:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
   10336:	bd10      	pop	{r4, pc}
			type = at_parser_cmd_type_get(at_cmd);
   10338:	4620      	mov	r0, r4
   1033a:	f015 fd7e 	bl	25e3a <at_parser_cmd_type_get>
}
   1033e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ret = m_icmp_at_list[i].handler(type);
   10342:	f7ff bd05 	b.w	fd50 <handle_at_icmp_ping>
	int ret = -ENOTSUP;
   10346:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1034a:	e7f4      	b.n	10336 <slm_at_icmp_parse+0x32>
   1034c:	0002929b 	.word	0x0002929b
   10350:	200213d0 	.word	0x200213d0
   10354:	00027b20 	.word	0x00027b20
   10358:	00027b70 	.word	0x00027b70
   1035c:	00028a38 	.word	0x00028a38

00010360 <slm_at_icmp_clac>:

/**@brief API to list ICMP AT commands
 */
void slm_at_icmp_clac(void)
{
   10360:	b513      	push	{r0, r1, r4, lr}
	for (int i = 0; i < AT_ICMP_MAX; i++) {
		sprintf(rsp_buf, "%s\r\n", m_icmp_at_list[i].string);
   10362:	4b0a      	ldr	r3, [pc, #40]	; (1038c <slm_at_icmp_clac+0x2c>)
   10364:	4c0a      	ldr	r4, [pc, #40]	; (10390 <slm_at_icmp_clac+0x30>)
   10366:	f640 228c 	movw	r2, #2700	; 0xa8c
   1036a:	2100      	movs	r1, #0
   1036c:	9300      	str	r3, [sp, #0]
   1036e:	4620      	mov	r0, r4
   10370:	4b08      	ldr	r3, [pc, #32]	; (10394 <slm_at_icmp_clac+0x34>)
   10372:	f016 fc9f 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   10376:	4620      	mov	r0, r4
   10378:	f7fc fd7a 	bl	ce70 <strlen>
   1037c:	4601      	mov	r1, r0
   1037e:	4620      	mov	r0, r4
	}
}
   10380:	b002      	add	sp, #8
   10382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(rsp_buf, strlen(rsp_buf));
   10386:	f7fd be31 	b.w	dfec <rsp_send>
   1038a:	bf00      	nop
   1038c:	0002929b 	.word	0x0002929b
   10390:	20026ea6 	.word	0x20026ea6
   10394:	00028bb2 	.word	0x00028bb2

00010398 <slm_at_icmp_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   10398:	2000      	movs	r0, #0
   1039a:	4b03      	ldr	r3, [pc, #12]	; (103a8 <slm_at_icmp_init+0x10>)
   1039c:	4a03      	ldr	r2, [pc, #12]	; (103ac <slm_at_icmp_init+0x14>)
   1039e:	6018      	str	r0, [r3, #0]
   103a0:	e9c3 2001 	strd	r2, r0, [r3, #4]
 */
int slm_at_icmp_init(void)
{
	k_work_init(&my_work, ping_task);
	return 0;
}
   103a4:	4770      	bx	lr
   103a6:	bf00      	nop
   103a8:	20021500 	.word	0x20021500
   103ac:	00010245 	.word	0x00010245

000103b0 <do_gps_stop>:

	return -errno;
}

static int do_gps_stop(void)
{
   103b0:	b530      	push	{r4, r5, lr}
	int ret = 0;
	nrf_gnss_delete_mask_t	delete_mask  = 0;
   103b2:	2400      	movs	r4, #0

	if (client.sock != INVALID_SOCKET) {
   103b4:	4d1c      	ldr	r5, [pc, #112]	; (10428 <do_gps_stop+0x78>)
{
   103b6:	b085      	sub	sp, #20
	if (client.sock != INVALID_SOCKET) {
   103b8:	6828      	ldr	r0, [r5, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
   103ba:	9403      	str	r4, [sp, #12]
	if (client.sock != INVALID_SOCKET) {
   103bc:	1c43      	adds	r3, r0, #1
   103be:	d01c      	beq.n	103fa <do_gps_stop+0x4a>
		ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS,
   103c0:	2304      	movs	r3, #4
   103c2:	2208      	movs	r2, #8
   103c4:	9300      	str	r3, [sp, #0]
   103c6:	f44f 7101 	mov.w	r1, #516	; 0x204
   103ca:	ab03      	add	r3, sp, #12
   103cc:	f00e f956 	bl	1e67c <nrf_setsockopt>
			NRF_SO_GNSS_STOP, &delete_mask, sizeof(delete_mask));
		if (ret != 0) {
   103d0:	4604      	mov	r4, r0
   103d2:	b1a8      	cbz	r0, 10400 <do_gps_stop+0x50>
   103d4:	4a15      	ldr	r2, [pc, #84]	; (1042c <do_gps_stop+0x7c>)
   103d6:	4c16      	ldr	r4, [pc, #88]	; (10430 <do_gps_stop+0x80>)
   103d8:	1aa4      	subs	r4, r4, r2
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
   103da:	f013 ffc3 	bl	24364 <__errno>
   103de:	08e4      	lsrs	r4, r4, #3
   103e0:	6801      	ldr	r1, [r0, #0]
   103e2:	01a4      	lsls	r4, r4, #6
   103e4:	f044 0401 	orr.w	r4, r4, #1
   103e8:	4622      	mov	r2, r4
   103ea:	4812      	ldr	r0, [pc, #72]	; (10434 <do_gps_stop+0x84>)
   103ec:	4249      	negs	r1, r1
   103ee:	f013 f9e1 	bl	237b4 <log_1>
			ret = -errno;
   103f2:	f013 ffb7 	bl	24364 <__errno>
   103f6:	6804      	ldr	r4, [r0, #0]
   103f8:	4264      	negs	r4, r4
		}

	}

	return ret;
}
   103fa:	4620      	mov	r0, r4
   103fc:	b005      	add	sp, #20
   103fe:	bd30      	pop	{r4, r5, pc}
			k_thread_suspend(gps_thread_id);
   10400:	4b0d      	ldr	r3, [pc, #52]	; (10438 <do_gps_stop+0x88>)
   10402:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
   10404:	f010 fcf6 	bl	20df4 <z_impl_k_thread_suspend>
			nrf_close(client.sock);
   10408:	6828      	ldr	r0, [r5, #0]
   1040a:	f00e f873 	bl	1e4f4 <nrf_close>
			sprintf(rsp_buf, "#XGPS: 0\r\n");
   1040e:	490b      	ldr	r1, [pc, #44]	; (1043c <do_gps_stop+0x8c>)
   10410:	480b      	ldr	r0, [pc, #44]	; (10440 <do_gps_stop+0x90>)
			client.running = false;
   10412:	71ac      	strb	r4, [r5, #6]
			sprintf(rsp_buf, "#XGPS: 0\r\n");
   10414:	f016 fc75 	bl	26d02 <strcpy>
			rsp_send(rsp_buf, strlen(rsp_buf));
   10418:	4809      	ldr	r0, [pc, #36]	; (10440 <do_gps_stop+0x90>)
   1041a:	f7fc fd29 	bl	ce70 <strlen>
   1041e:	4601      	mov	r1, r0
   10420:	4807      	ldr	r0, [pc, #28]	; (10440 <do_gps_stop+0x90>)
   10422:	f7fd fde3 	bl	dfec <rsp_send>
			LOG_DBG("GPS stopped");
   10426:	e7e8      	b.n	103fa <do_gps_stop+0x4a>
   10428:	20021524 	.word	0x20021524
   1042c:	00027b20 	.word	0x00027b20
   10430:	00027b68 	.word	0x00027b68
   10434:	000292a9 	.word	0x000292a9
   10438:	200215e4 	.word	0x200215e4
   1043c:	000292c6 	.word	0x000292c6
   10440:	20026ea6 	.word	0x20026ea6

00010444 <gps_thread_fn>:
{
   10444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (nrf_recv(client.sock, &gps_data, sizeof(gps_data), 0)
   10448:	4d71      	ldr	r5, [pc, #452]	; (10610 <gps_thread_fn+0x1cc>)
   1044a:	4c72      	ldr	r4, [pc, #456]	; (10614 <gps_thread_fn+0x1d0>)
   1044c:	462f      	mov	r7, r5
{
   1044e:	b086      	sub	sp, #24
		if (nrf_recv(client.sock, &gps_data, sizeof(gps_data), 0)
   10450:	2300      	movs	r3, #0
   10452:	22d8      	movs	r2, #216	; 0xd8
   10454:	496f      	ldr	r1, [pc, #444]	; (10614 <gps_thread_fn+0x1d0>)
   10456:	6828      	ldr	r0, [r5, #0]
   10458:	f00e f8ac 	bl	1e5b4 <nrf_recv>
   1045c:	2800      	cmp	r0, #0
   1045e:	dc29      	bgt.n	104b4 <gps_thread_fn+0x70>
   10460:	4a6d      	ldr	r2, [pc, #436]	; (10618 <gps_thread_fn+0x1d4>)
   10462:	4c6e      	ldr	r4, [pc, #440]	; (1061c <gps_thread_fn+0x1d8>)
   10464:	1aa4      	subs	r4, r4, r2
			LOG_ERR("GPS nrf_recv(): %d", -errno);
   10466:	f013 ff7d 	bl	24364 <__errno>
   1046a:	08e4      	lsrs	r4, r4, #3
   1046c:	6801      	ldr	r1, [r0, #0]
   1046e:	01a4      	lsls	r4, r4, #6
   10470:	f044 0401 	orr.w	r4, r4, #1
   10474:	4622      	mov	r2, r4
   10476:	4249      	negs	r1, r1
   10478:	4869      	ldr	r0, [pc, #420]	; (10620 <gps_thread_fn+0x1dc>)
   1047a:	f013 f99b 	bl	237b4 <log_1>
			sprintf(rsp_buf, "#XGPS: %d\r\n", -errno);
   1047e:	f013 ff71 	bl	24364 <__errno>
   10482:	6803      	ldr	r3, [r0, #0]
   10484:	f640 228c 	movw	r2, #2700	; 0xa8c
   10488:	425b      	negs	r3, r3
   1048a:	2100      	movs	r1, #0
   1048c:	9300      	str	r3, [sp, #0]
   1048e:	4865      	ldr	r0, [pc, #404]	; (10624 <gps_thread_fn+0x1e0>)
   10490:	4b65      	ldr	r3, [pc, #404]	; (10628 <gps_thread_fn+0x1e4>)
   10492:	f016 fc0f 	bl	26cb4 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   10496:	4863      	ldr	r0, [pc, #396]	; (10624 <gps_thread_fn+0x1e0>)
   10498:	f7fc fcea 	bl	ce70 <strlen>
   1049c:	4601      	mov	r1, r0
   1049e:	4861      	ldr	r0, [pc, #388]	; (10624 <gps_thread_fn+0x1e0>)
   104a0:	f7fd fda4 	bl	dfec <rsp_send>
			nrf_close(client.sock);
   104a4:	6828      	ldr	r0, [r5, #0]
   104a6:	f00e f825 	bl	1e4f4 <nrf_close>
			client.running = false;
   104aa:	2300      	movs	r3, #0
   104ac:	71ab      	strb	r3, [r5, #6]
}
   104ae:	b006      	add	sp, #24
   104b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || client.has_fix) {
   104b4:	7823      	ldrb	r3, [r4, #0]
   104b6:	2b01      	cmp	r3, #1
   104b8:	d139      	bne.n	1052e <gps_thread_fn+0xea>
   104ba:	79eb      	ldrb	r3, [r5, #7]
   104bc:	2b00      	cmp	r3, #0
   104be:	d146      	bne.n	1054e <gps_thread_fn+0x10a>
	u8_t in_fix = 0;
   104c0:	4618      	mov	r0, r3
	u8_t tracked = 0;
   104c2:	461e      	mov	r6, r3
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   104c4:	4619      	mov	r1, r3
   104c6:	f8df c14c 	ldr.w	ip, [pc, #332]	; 10614 <gps_thread_fn+0x1d0>
		if ((gps_data.pvt.sv[i].sv > 0) &&
   104ca:	f8bc 2046 	ldrh.w	r2, [ip, #70]	; 0x46
   104ce:	3a01      	subs	r2, #1
   104d0:	b292      	uxth	r2, r2
   104d2:	2a1f      	cmp	r2, #31
   104d4:	d80d      	bhi.n	104f2 <gps_thread_fn+0xae>
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
   104d6:	f89c 2050 	ldrb.w	r2, [ip, #80]	; 0x50
			tracked++;
   104da:	3601      	adds	r6, #1
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
   104dc:	f012 0f01 	tst.w	r2, #1
				in_fix++;
   104e0:	bf1c      	itt	ne
   104e2:	3001      	addne	r0, #1
   104e4:	b2c0      	uxtbne	r0, r0
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
   104e6:	0712      	lsls	r2, r2, #28
				unhealthy++;
   104e8:	bf48      	it	mi
   104ea:	3301      	addmi	r3, #1
			tracked++;
   104ec:	b2f6      	uxtb	r6, r6
				unhealthy++;
   104ee:	bf48      	it	mi
   104f0:	b2db      	uxtbmi	r3, r3
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   104f2:	3101      	adds	r1, #1
   104f4:	290c      	cmp	r1, #12
   104f6:	f10c 0c0c 	add.w	ip, ip, #12
   104fa:	d1e6      	bne.n	104ca <gps_thread_fn+0x86>
	if (last_tracked != tracked) {
   104fc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 10644 <gps_thread_fn+0x200>
   10500:	f898 2000 	ldrb.w	r2, [r8]
   10504:	42b2      	cmp	r2, r6
   10506:	d022      	beq.n	1054e <gps_thread_fn+0x10a>
		sprintf(rsp_buf, "#XGPSS: track %d use %d unhealthy %d\r\n",
   10508:	f640 228c 	movw	r2, #2700	; 0xa8c
   1050c:	2100      	movs	r1, #0
   1050e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10512:	9600      	str	r6, [sp, #0]
   10514:	4b45      	ldr	r3, [pc, #276]	; (1062c <gps_thread_fn+0x1e8>)
   10516:	4843      	ldr	r0, [pc, #268]	; (10624 <gps_thread_fn+0x1e0>)
   10518:	f016 fbcc 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   1051c:	4841      	ldr	r0, [pc, #260]	; (10624 <gps_thread_fn+0x1e0>)
   1051e:	f7fc fca7 	bl	ce70 <strlen>
   10522:	4601      	mov	r1, r0
   10524:	483f      	ldr	r0, [pc, #252]	; (10624 <gps_thread_fn+0x1e0>)
   10526:	f7fd fd61 	bl	dfec <rsp_send>
		last_tracked = tracked;
   1052a:	f888 6000 	strb.w	r6, [r8]
		switch (gps_data.data_id) {
   1052e:	7823      	ldrb	r3, [r4, #0]
   10530:	2b01      	cmp	r3, #1
   10532:	d00c      	beq.n	1054e <gps_thread_fn+0x10a>
   10534:	2b02      	cmp	r3, #2
   10536:	d18b      	bne.n	10450 <gps_thread_fn+0xc>
			if (client.has_fix) {
   10538:	79fb      	ldrb	r3, [r7, #7]
   1053a:	2b00      	cmp	r3, #0
   1053c:	d088      	beq.n	10450 <gps_thread_fn+0xc>
				rsp_send(gps_data.nmea,
   1053e:	483c      	ldr	r0, [pc, #240]	; (10630 <gps_thread_fn+0x1ec>)
   10540:	f7fc fc96 	bl	ce70 <strlen>
   10544:	4601      	mov	r1, r0
   10546:	483a      	ldr	r0, [pc, #232]	; (10630 <gps_thread_fn+0x1ec>)
   10548:	f7fd fd50 	bl	dfec <rsp_send>
   1054c:	e780      	b.n	10450 <gps_thread_fn+0xc>
			if (IS_FIX(gps_data.pvt.flags)) {
   1054e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   10552:	07db      	lsls	r3, r3, #31
   10554:	f57f af7c 	bpl.w	10450 <gps_thread_fn+0xc>
	sprintf(rsp_buf, "#XGPSP: long %f lat %f\r\n",
   10558:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1055c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   10560:	2100      	movs	r1, #0
   10562:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   10566:	482f      	ldr	r0, [pc, #188]	; (10624 <gps_thread_fn+0x1e0>)
   10568:	e9cd 2300 	strd	r2, r3, [sp]
   1056c:	f640 228c 	movw	r2, #2700	; 0xa8c
   10570:	4b30      	ldr	r3, [pc, #192]	; (10634 <gps_thread_fn+0x1f0>)
   10572:	f016 fb9f 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   10576:	482b      	ldr	r0, [pc, #172]	; (10624 <gps_thread_fn+0x1e0>)
   10578:	f7fc fc7a 	bl	ce70 <strlen>
   1057c:	4601      	mov	r1, r0
   1057e:	4829      	ldr	r0, [pc, #164]	; (10624 <gps_thread_fn+0x1e0>)
   10580:	f7fd fd34 	bl	dfec <rsp_send>
	sprintf(rsp_buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
   10584:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   10588:	f640 228c 	movw	r2, #2700	; 0xa8c
   1058c:	9305      	str	r3, [sp, #20]
   1058e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10592:	2100      	movs	r1, #0
   10594:	9304      	str	r3, [sp, #16]
   10596:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1059a:	4822      	ldr	r0, [pc, #136]	; (10624 <gps_thread_fn+0x1e0>)
   1059c:	9303      	str	r3, [sp, #12]
   1059e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   105a2:	9302      	str	r3, [sp, #8]
   105a4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   105a8:	9301      	str	r3, [sp, #4]
   105aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   105ac:	9300      	str	r3, [sp, #0]
   105ae:	4b22      	ldr	r3, [pc, #136]	; (10638 <gps_thread_fn+0x1f4>)
   105b0:	f016 fb80 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   105b4:	481b      	ldr	r0, [pc, #108]	; (10624 <gps_thread_fn+0x1e0>)
   105b6:	f7fc fc5b 	bl	ce70 <strlen>
   105ba:	4601      	mov	r1, r0
   105bc:	4819      	ldr	r0, [pc, #100]	; (10624 <gps_thread_fn+0x1e0>)
   105be:	f7fd fd15 	bl	dfec <rsp_send>
				if (!client.has_fix) {
   105c2:	79fe      	ldrb	r6, [r7, #7]
   105c4:	2e00      	cmp	r6, #0
   105c6:	f47f af43 	bne.w	10450 <gps_thread_fn+0xc>
	return z_impl_k_uptime_ticks();
   105ca:	f016 f89a 	bl	26702 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   105ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   105d2:	460b      	mov	r3, r1
   105d4:	fba0 0102 	umull	r0, r1, r0, r2
   105d8:	fb02 1103 	mla	r1, r2, r3, r1
   105dc:	0bc3      	lsrs	r3, r0, #15
   105de:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
					sprintf(rsp_buf, "#XGPSP: TTFF %ds\r\n",
   105e2:	4916      	ldr	r1, [pc, #88]	; (1063c <gps_thread_fn+0x1f8>)
   105e4:	480f      	ldr	r0, [pc, #60]	; (10624 <gps_thread_fn+0x1e0>)
   105e6:	6809      	ldr	r1, [r1, #0]
   105e8:	1a5b      	subs	r3, r3, r1
   105ea:	fb93 f3f2 	sdiv	r3, r3, r2
   105ee:	4631      	mov	r1, r6
   105f0:	f640 228c 	movw	r2, #2700	; 0xa8c
   105f4:	9300      	str	r3, [sp, #0]
   105f6:	4b12      	ldr	r3, [pc, #72]	; (10640 <gps_thread_fn+0x1fc>)
   105f8:	f016 fb5c 	bl	26cb4 <__sprintf_chk>
					rsp_send(rsp_buf, strlen(rsp_buf));
   105fc:	4809      	ldr	r0, [pc, #36]	; (10624 <gps_thread_fn+0x1e0>)
   105fe:	f7fc fc37 	bl	ce70 <strlen>
   10602:	4601      	mov	r1, r0
   10604:	4807      	ldr	r0, [pc, #28]	; (10624 <gps_thread_fn+0x1e0>)
   10606:	f7fd fcf1 	bl	dfec <rsp_send>
					client.has_fix = true;
   1060a:	2301      	movs	r3, #1
   1060c:	71fb      	strb	r3, [r7, #7]
   1060e:	e71f      	b.n	10450 <gps_thread_fn+0xc>
   10610:	20021524 	.word	0x20021524
   10614:	20021178 	.word	0x20021178
   10618:	00027b20 	.word	0x00027b20
   1061c:	00027b68 	.word	0x00027b68
   10620:	000292d1 	.word	0x000292d1
   10624:	20026ea6 	.word	0x20026ea6
   10628:	000292e4 	.word	0x000292e4
   1062c:	000292f0 	.word	0x000292f0
   10630:	20021180 	.word	0x20021180
   10634:	00029317 	.word	0x00029317
   10638:	00029330 	.word	0x00029330
   1063c:	20021250 	.word	0x20021250
   10640:	00029358 	.word	0x00029358
   10644:	20028e56 	.word	0x20028e56

00010648 <slm_at_gps_parse>:
}

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const char *at_cmd)
{
   10648:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret = -ENOTSUP;

	if (slm_util_cmd_casecmp(at_cmd, AT_GPS)) {
   1064a:	49b7      	ldr	r1, [pc, #732]	; (10928 <slm_at_gps_parse+0x2e0>)
{
   1064c:	b08d      	sub	sp, #52	; 0x34
   1064e:	4604      	mov	r4, r0
	if (slm_util_cmd_casecmp(at_cmd, AT_GPS)) {
   10650:	f7fd fb7e 	bl	dd50 <slm_util_cmd_casecmp>
   10654:	2800      	cmp	r0, #0
   10656:	f000 8163 	beq.w	10920 <slm_at_gps_parse+0x2d8>
		ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   1065a:	2100      	movs	r1, #0
   1065c:	4620      	mov	r0, r4
   1065e:	4ab3      	ldr	r2, [pc, #716]	; (1092c <slm_at_gps_parse+0x2e4>)
   10660:	f015 fbe8 	bl	25e34 <at_parser_params_from_str>
		if (ret < 0) {
   10664:	1e01      	subs	r1, r0, #0
   10666:	da0c      	bge.n	10682 <slm_at_gps_parse+0x3a>
   10668:	4ab1      	ldr	r2, [pc, #708]	; (10930 <slm_at_gps_parse+0x2e8>)
   1066a:	4bb2      	ldr	r3, [pc, #712]	; (10934 <slm_at_gps_parse+0x2ec>)
			LOG_ERR("Failed to parse AT command %d", ret);
   1066c:	48b2      	ldr	r0, [pc, #712]	; (10938 <slm_at_gps_parse+0x2f0>)
   1066e:	1ad2      	subs	r2, r2, r3
   10670:	08d2      	lsrs	r2, r2, #3
   10672:	0192      	lsls	r2, r2, #6
   10674:	f042 0201 	orr.w	r2, r2, #1
   10678:	f013 f89c 	bl	237b4 <log_1>
			return -EINVAL;
   1067c:	f06f 0415 	mvn.w	r4, #21
   10680:	e10a      	b.n	10898 <slm_at_gps_parse+0x250>
			return -EINVAL;
		}
		ret = handle_at_gps(at_parser_cmd_type_get(at_cmd));
   10682:	4620      	mov	r0, r4
   10684:	f015 fbd9 	bl	25e3a <at_parser_cmd_type_get>
	switch (cmd_type) {
   10688:	2802      	cmp	r0, #2
		ret = handle_at_gps(at_parser_cmd_type_get(at_cmd));
   1068a:	4604      	mov	r4, r0
	switch (cmd_type) {
   1068c:	f000 812c 	beq.w	108e8 <slm_at_gps_parse+0x2a0>
   10690:	2803      	cmp	r0, #3
   10692:	f000 8143 	beq.w	1091c <slm_at_gps_parse+0x2d4>
   10696:	2801      	cmp	r0, #1
   10698:	d1f0      	bne.n	1067c <slm_at_gps_parse+0x34>
		if (at_params_valid_count_get(&at_param_list) < 2) {
   1069a:	48a4      	ldr	r0, [pc, #656]	; (1092c <slm_at_gps_parse+0x2e4>)
   1069c:	f015 fd12 	bl	260c4 <at_params_valid_count_get>
   106a0:	2801      	cmp	r0, #1
   106a2:	d9eb      	bls.n	1067c <slm_at_gps_parse+0x34>
		err = at_params_short_get(&at_param_list, 1, &op);
   106a4:	4621      	mov	r1, r4
   106a6:	48a1      	ldr	r0, [pc, #644]	; (1092c <slm_at_gps_parse+0x2e4>)
   106a8:	aa09      	add	r2, sp, #36	; 0x24
   106aa:	f015 fcc3 	bl	26034 <at_params_short_get>
		if (err < 0) {
   106ae:	1e04      	subs	r4, r0, #0
   106b0:	f2c0 80f2 	blt.w	10898 <slm_at_gps_parse+0x250>
		if (op == 1) {
   106b4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   106b8:	2b01      	cmp	r3, #1
   106ba:	f040 8103 	bne.w	108c4 <slm_at_gps_parse+0x27c>
			if (at_params_valid_count_get(&at_param_list) > 2) {
   106be:	489b      	ldr	r0, [pc, #620]	; (1092c <slm_at_gps_parse+0x2e4>)
   106c0:	f015 fd00 	bl	260c4 <at_params_valid_count_get>
   106c4:	2802      	cmp	r0, #2
   106c6:	d907      	bls.n	106d8 <slm_at_gps_parse+0x90>
				err = at_params_short_get(&at_param_list, 2,
   106c8:	2102      	movs	r1, #2
   106ca:	4a9c      	ldr	r2, [pc, #624]	; (1093c <slm_at_gps_parse+0x2f4>)
   106cc:	4897      	ldr	r0, [pc, #604]	; (1092c <slm_at_gps_parse+0x2e4>)
   106ce:	f015 fcb1 	bl	26034 <at_params_short_get>
				if (err < 0) {
   106d2:	1e04      	subs	r4, r0, #0
   106d4:	f2c0 80e0 	blt.w	10898 <slm_at_gps_parse+0x250>
			if (client.running) {
   106d8:	4d99      	ldr	r5, [pc, #612]	; (10940 <slm_at_gps_parse+0x2f8>)
   106da:	79ab      	ldrb	r3, [r5, #6]
   106dc:	b153      	cbz	r3, 106f4 <slm_at_gps_parse+0xac>
   106de:	4994      	ldr	r1, [pc, #592]	; (10930 <slm_at_gps_parse+0x2e8>)
   106e0:	4b94      	ldr	r3, [pc, #592]	; (10934 <slm_at_gps_parse+0x2ec>)
				LOG_WRN("GPS is running");
   106e2:	4898      	ldr	r0, [pc, #608]	; (10944 <slm_at_gps_parse+0x2fc>)
   106e4:	1ac9      	subs	r1, r1, r3
   106e6:	08c9      	lsrs	r1, r1, #3
   106e8:	0189      	lsls	r1, r1, #6
   106ea:	f041 0102 	orr.w	r1, r1, #2
				LOG_WRN("GPS is not running");
   106ee:	f013 f852 	bl	23796 <log_0>
   106f2:	e0d1      	b.n	10898 <slm_at_gps_parse+0x250>
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
   106f4:	2701      	movs	r7, #1
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
   106f6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	nrf_gnss_delete_mask_t  delete_mask  = 0;
   106fa:	930b      	str	r3, [sp, #44]	; 0x2c
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
   106fc:	88ab      	ldrh	r3, [r5, #4]
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
   106fe:	f44f 7201 	mov.w	r2, #516	; 0x204
   10702:	2102      	movs	r1, #2
   10704:	4638      	mov	r0, r7
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
   10706:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
   1070a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
   1070e:	f00d fedf 	bl	1e4d0 <nrf_socket>
	if (client.sock < 0) {
   10712:	2800      	cmp	r0, #0
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
   10714:	6028      	str	r0, [r5, #0]
	if (client.sock < 0) {
   10716:	da33      	bge.n	10780 <slm_at_gps_parse+0x138>
   10718:	4a86      	ldr	r2, [pc, #536]	; (10934 <slm_at_gps_parse+0x2ec>)
   1071a:	4c85      	ldr	r4, [pc, #532]	; (10930 <slm_at_gps_parse+0x2e8>)
   1071c:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Could not init socket (err: %d)", -errno);
   1071e:	f013 fe21 	bl	24364 <__errno>
   10722:	08e4      	lsrs	r4, r4, #3
   10724:	6801      	ldr	r1, [r0, #0]
   10726:	01a4      	lsls	r4, r4, #6
   10728:	433c      	orrs	r4, r7
   1072a:	4622      	mov	r2, r4
   1072c:	4886      	ldr	r0, [pc, #536]	; (10948 <slm_at_gps_parse+0x300>)
   1072e:	4249      	negs	r1, r1
   10730:	f013 f840 	bl	237b4 <log_1>
	int ret = -EINVAL;
   10734:	f06f 0415 	mvn.w	r4, #21
	nrf_close(client.sock);
   10738:	6828      	ldr	r0, [r5, #0]
   1073a:	f00d fedb 	bl	1e4f4 <nrf_close>
   1073e:	4b7d      	ldr	r3, [pc, #500]	; (10934 <slm_at_gps_parse+0x2ec>)
   10740:	4a7b      	ldr	r2, [pc, #492]	; (10930 <slm_at_gps_parse+0x2e8>)
	LOG_ERR("GPS start failed: %d", ret);
   10742:	4621      	mov	r1, r4
   10744:	1ad2      	subs	r2, r2, r3
   10746:	08d2      	lsrs	r2, r2, #3
   10748:	0192      	lsls	r2, r2, #6
   1074a:	4880      	ldr	r0, [pc, #512]	; (1094c <slm_at_gps_parse+0x304>)
   1074c:	f042 0201 	orr.w	r2, r2, #1
   10750:	f013 f830 	bl	237b4 <log_1>
	sprintf(rsp_buf, "#XGPS: %d\r\n", ret);
   10754:	f640 228c 	movw	r2, #2700	; 0xa8c
   10758:	4b7d      	ldr	r3, [pc, #500]	; (10950 <slm_at_gps_parse+0x308>)
   1075a:	2100      	movs	r1, #0
   1075c:	9400      	str	r4, [sp, #0]
   1075e:	487d      	ldr	r0, [pc, #500]	; (10954 <slm_at_gps_parse+0x30c>)
   10760:	f016 faa8 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   10764:	487b      	ldr	r0, [pc, #492]	; (10954 <slm_at_gps_parse+0x30c>)
   10766:	f7fc fb83 	bl	ce70 <strlen>
   1076a:	4601      	mov	r1, r0
   1076c:	4879      	ldr	r0, [pc, #484]	; (10954 <slm_at_gps_parse+0x30c>)
   1076e:	f7fd fc3d 	bl	dfec <rsp_send>
	client.running = false;
   10772:	2300      	movs	r3, #0
   10774:	71ab      	strb	r3, [r5, #6]
	return -errno;
   10776:	f013 fdf5 	bl	24364 <__errno>
   1077a:	6804      	ldr	r4, [r0, #0]
   1077c:	4264      	negs	r4, r4
   1077e:	e08b      	b.n	10898 <slm_at_gps_parse+0x250>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
   10780:	2602      	movs	r6, #2
   10782:	f44f 7101 	mov.w	r1, #516	; 0x204
   10786:	4632      	mov	r2, r6
   10788:	9600      	str	r6, [sp, #0]
   1078a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1078e:	f00d ff75 	bl	1e67c <nrf_setsockopt>
	if (ret) {
   10792:	4604      	mov	r4, r0
   10794:	b178      	cbz	r0, 107b6 <slm_at_gps_parse+0x16e>
   10796:	4a67      	ldr	r2, [pc, #412]	; (10934 <slm_at_gps_parse+0x2ec>)
   10798:	4e65      	ldr	r6, [pc, #404]	; (10930 <slm_at_gps_parse+0x2e8>)
   1079a:	1ab6      	subs	r6, r6, r2
   1079c:	08f6      	lsrs	r6, r6, #3
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
   1079e:	f013 fde1 	bl	24364 <__errno>
   107a2:	01b6      	lsls	r6, r6, #6
   107a4:	f046 0601 	orr.w	r6, r6, #1
   107a8:	4632      	mov	r2, r6
   107aa:	6801      	ldr	r1, [r0, #0]
   107ac:	486a      	ldr	r0, [pc, #424]	; (10958 <slm_at_gps_parse+0x310>)
   107ae:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
   107b0:	f013 f800 	bl	237b4 <log_1>
		goto error;
   107b4:	e7c0      	b.n	10738 <slm_at_gps_parse+0xf0>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS,
   107b6:	9600      	str	r6, [sp, #0]
   107b8:	463a      	mov	r2, r7
   107ba:	f44f 7101 	mov.w	r1, #516	; 0x204
   107be:	6828      	ldr	r0, [r5, #0]
   107c0:	ab0a      	add	r3, sp, #40	; 0x28
   107c2:	f00d ff5b 	bl	1e67c <nrf_setsockopt>
	if (ret) {
   107c6:	4604      	mov	r4, r0
   107c8:	b168      	cbz	r0, 107e6 <slm_at_gps_parse+0x19e>
   107ca:	4a5a      	ldr	r2, [pc, #360]	; (10934 <slm_at_gps_parse+0x2ec>)
   107cc:	4e58      	ldr	r6, [pc, #352]	; (10930 <slm_at_gps_parse+0x2e8>)
   107ce:	1ab6      	subs	r6, r6, r2
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
   107d0:	f013 fdc8 	bl	24364 <__errno>
   107d4:	08f6      	lsrs	r6, r6, #3
   107d6:	6801      	ldr	r1, [r0, #0]
   107d8:	01b6      	lsls	r6, r6, #6
   107da:	f046 0601 	orr.w	r6, r6, #1
   107de:	4632      	mov	r2, r6
   107e0:	485e      	ldr	r0, [pc, #376]	; (1095c <slm_at_gps_parse+0x314>)
   107e2:	4249      	negs	r1, r1
   107e4:	e7e4      	b.n	107b0 <slm_at_gps_parse+0x168>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
   107e6:	9600      	str	r6, [sp, #0]
   107e8:	2204      	movs	r2, #4
   107ea:	f44f 7101 	mov.w	r1, #516	; 0x204
   107ee:	6828      	ldr	r0, [r5, #0]
   107f0:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   107f4:	f00d ff42 	bl	1e67c <nrf_setsockopt>
	if (ret) {
   107f8:	4604      	mov	r4, r0
   107fa:	b168      	cbz	r0, 10818 <slm_at_gps_parse+0x1d0>
   107fc:	4a4d      	ldr	r2, [pc, #308]	; (10934 <slm_at_gps_parse+0x2ec>)
   107fe:	4e4c      	ldr	r6, [pc, #304]	; (10930 <slm_at_gps_parse+0x2e8>)
   10800:	1ab6      	subs	r6, r6, r2
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
   10802:	f013 fdaf 	bl	24364 <__errno>
   10806:	08f6      	lsrs	r6, r6, #3
   10808:	6801      	ldr	r1, [r0, #0]
   1080a:	01b6      	lsls	r6, r6, #6
   1080c:	f046 0601 	orr.w	r6, r6, #1
   10810:	4632      	mov	r2, r6
   10812:	4853      	ldr	r0, [pc, #332]	; (10960 <slm_at_gps_parse+0x318>)
   10814:	4249      	negs	r1, r1
   10816:	e7cb      	b.n	107b0 <slm_at_gps_parse+0x168>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
   10818:	2304      	movs	r3, #4
   1081a:	9300      	str	r3, [sp, #0]
   1081c:	2207      	movs	r2, #7
   1081e:	f44f 7101 	mov.w	r1, #516	; 0x204
   10822:	6828      	ldr	r0, [r5, #0]
   10824:	ab0b      	add	r3, sp, #44	; 0x2c
   10826:	f00d ff29 	bl	1e67c <nrf_setsockopt>
	if (ret) {
   1082a:	4604      	mov	r4, r0
   1082c:	b168      	cbz	r0, 1084a <slm_at_gps_parse+0x202>
   1082e:	4a41      	ldr	r2, [pc, #260]	; (10934 <slm_at_gps_parse+0x2ec>)
   10830:	4e3f      	ldr	r6, [pc, #252]	; (10930 <slm_at_gps_parse+0x2e8>)
   10832:	1ab6      	subs	r6, r6, r2
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
   10834:	f013 fd96 	bl	24364 <__errno>
   10838:	08f6      	lsrs	r6, r6, #3
   1083a:	6801      	ldr	r1, [r0, #0]
   1083c:	01b6      	lsls	r6, r6, #6
   1083e:	f046 0601 	orr.w	r6, r6, #1
   10842:	4632      	mov	r2, r6
   10844:	4847      	ldr	r0, [pc, #284]	; (10964 <slm_at_gps_parse+0x31c>)
   10846:	4249      	negs	r1, r1
   10848:	e7b2      	b.n	107b0 <slm_at_gps_parse+0x168>
	if (gps_thread_id != NULL) {
   1084a:	4e47      	ldr	r6, [pc, #284]	; (10968 <slm_at_gps_parse+0x320>)
   1084c:	6830      	ldr	r0, [r6, #0]
   1084e:	b330      	cbz	r0, 1089e <slm_at_gps_parse+0x256>
	z_impl_k_thread_resume(thread);
   10850:	f010 fa3a 	bl	20cc8 <z_impl_k_thread_resume>
	client.running = true;
   10854:	2301      	movs	r3, #1
   10856:	71ab      	strb	r3, [r5, #6]
	sprintf(rsp_buf, "#XGPS: 1,%d\r\n", client.mask);
   10858:	88ab      	ldrh	r3, [r5, #4]
   1085a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1085e:	2100      	movs	r1, #0
   10860:	9300      	str	r3, [sp, #0]
   10862:	483c      	ldr	r0, [pc, #240]	; (10954 <slm_at_gps_parse+0x30c>)
   10864:	4b41      	ldr	r3, [pc, #260]	; (1096c <slm_at_gps_parse+0x324>)
   10866:	f016 fa25 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   1086a:	483a      	ldr	r0, [pc, #232]	; (10954 <slm_at_gps_parse+0x30c>)
   1086c:	f7fc fb00 	bl	ce70 <strlen>
   10870:	4601      	mov	r1, r0
   10872:	4838      	ldr	r0, [pc, #224]	; (10954 <slm_at_gps_parse+0x30c>)
   10874:	f7fd fbba 	bl	dfec <rsp_send>
	return z_impl_k_uptime_ticks();
   10878:	f015 ff43 	bl	26702 <z_impl_k_uptime_ticks>
   1087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10880:	460d      	mov	r5, r1
   10882:	fba0 0103 	umull	r0, r1, r0, r3
   10886:	fb03 1105 	mla	r1, r3, r5, r1
	ttft_start = k_uptime_get();
   1088a:	4a39      	ldr	r2, [pc, #228]	; (10970 <slm_at_gps_parse+0x328>)
   1088c:	0bc3      	lsrs	r3, r0, #15
   1088e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   10892:	0bc9      	lsrs	r1, r1, #15
   10894:	e9c2 3100 	strd	r3, r1, [r2]
	}

	return ret;
}
   10898:	4620      	mov	r0, r4
   1089a:	b00d      	add	sp, #52	; 0x34
   1089c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1089e:	2200      	movs	r2, #0
   108a0:	2300      	movs	r3, #0
   108a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   108a6:	230e      	movs	r3, #14
   108a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   108ac:	e9cd 4302 	strd	r4, r3, [sp, #8]
   108b0:	e9cd 4400 	strd	r4, r4, [sp]
   108b4:	4b2f      	ldr	r3, [pc, #188]	; (10974 <slm_at_gps_parse+0x32c>)
   108b6:	4930      	ldr	r1, [pc, #192]	; (10978 <slm_at_gps_parse+0x330>)
   108b8:	4830      	ldr	r0, [pc, #192]	; (1097c <slm_at_gps_parse+0x334>)
   108ba:	9404      	str	r4, [sp, #16]
   108bc:	f010 fd5c 	bl	21378 <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
   108c0:	6030      	str	r0, [r6, #0]
   108c2:	e7c7      	b.n	10854 <slm_at_gps_parse+0x20c>
		} else if (op == 0) {
   108c4:	2b00      	cmp	r3, #0
   108c6:	d1e7      	bne.n	10898 <slm_at_gps_parse+0x250>
			if (!client.running) {
   108c8:	4b1d      	ldr	r3, [pc, #116]	; (10940 <slm_at_gps_parse+0x2f8>)
   108ca:	799b      	ldrb	r3, [r3, #6]
   108cc:	b943      	cbnz	r3, 108e0 <slm_at_gps_parse+0x298>
   108ce:	4918      	ldr	r1, [pc, #96]	; (10930 <slm_at_gps_parse+0x2e8>)
   108d0:	4b18      	ldr	r3, [pc, #96]	; (10934 <slm_at_gps_parse+0x2ec>)
				LOG_WRN("GPS is not running");
   108d2:	482b      	ldr	r0, [pc, #172]	; (10980 <slm_at_gps_parse+0x338>)
   108d4:	1ac9      	subs	r1, r1, r3
   108d6:	08c9      	lsrs	r1, r1, #3
   108d8:	0189      	lsls	r1, r1, #6
   108da:	f041 0102 	orr.w	r1, r1, #2
   108de:	e706      	b.n	106ee <slm_at_gps_parse+0xa6>
				err = do_gps_stop();
   108e0:	f7ff fd66 	bl	103b0 <do_gps_stop>
   108e4:	4604      	mov	r4, r0
   108e6:	e7d7      	b.n	10898 <slm_at_gps_parse+0x250>
		if (client.running) {
   108e8:	4b15      	ldr	r3, [pc, #84]	; (10940 <slm_at_gps_parse+0x2f8>)
   108ea:	799a      	ldrb	r2, [r3, #6]
   108ec:	b18a      	cbz	r2, 10912 <slm_at_gps_parse+0x2ca>
			sprintf(rsp_buf, "#XGPS: 1,%d\r\n", client.mask);
   108ee:	889b      	ldrh	r3, [r3, #4]
   108f0:	f640 228c 	movw	r2, #2700	; 0xa8c
   108f4:	9300      	str	r3, [sp, #0]
   108f6:	2100      	movs	r1, #0
   108f8:	4b1c      	ldr	r3, [pc, #112]	; (1096c <slm_at_gps_parse+0x324>)
   108fa:	4816      	ldr	r0, [pc, #88]	; (10954 <slm_at_gps_parse+0x30c>)
   108fc:	f016 f9da 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   10900:	4814      	ldr	r0, [pc, #80]	; (10954 <slm_at_gps_parse+0x30c>)
   10902:	f7fc fab5 	bl	ce70 <strlen>
   10906:	4601      	mov	r1, r0
   10908:	4812      	ldr	r0, [pc, #72]	; (10954 <slm_at_gps_parse+0x30c>)
   1090a:	f7fd fb6f 	bl	dfec <rsp_send>
		err = 0;
   1090e:	2400      	movs	r4, #0
		break;
   10910:	e7c2      	b.n	10898 <slm_at_gps_parse+0x250>
			sprintf(rsp_buf, "#XGPS: 0\r\n");
   10912:	491c      	ldr	r1, [pc, #112]	; (10984 <slm_at_gps_parse+0x33c>)
   10914:	480f      	ldr	r0, [pc, #60]	; (10954 <slm_at_gps_parse+0x30c>)
   10916:	f016 f9f4 	bl	26d02 <strcpy>
   1091a:	e7f1      	b.n	10900 <slm_at_gps_parse+0x2b8>
		sprintf(rsp_buf, "#XGPS: (0, 1), (bitmask)\r\n");
   1091c:	491a      	ldr	r1, [pc, #104]	; (10988 <slm_at_gps_parse+0x340>)
   1091e:	e7f9      	b.n	10914 <slm_at_gps_parse+0x2cc>
	int ret = -ENOTSUP;
   10920:	f06f 0485 	mvn.w	r4, #133	; 0x85
   10924:	e7b8      	b.n	10898 <slm_at_gps_parse+0x250>
   10926:	bf00      	nop
   10928:	0002936b 	.word	0x0002936b
   1092c:	200213d0 	.word	0x200213d0
   10930:	00027b68 	.word	0x00027b68
   10934:	00027b20 	.word	0x00027b20
   10938:	00028a38 	.word	0x00028a38
   1093c:	20021528 	.word	0x20021528
   10940:	20021524 	.word	0x20021524
   10944:	00029373 	.word	0x00029373
   10948:	00029382 	.word	0x00029382
   1094c:	00029443 	.word	0x00029443
   10950:	000292e4 	.word	0x000292e4
   10954:	20026ea6 	.word	0x20026ea6
   10958:	000293a2 	.word	0x000293a2
   1095c:	000293ca 	.word	0x000293ca
   10960:	000293f5 	.word	0x000293f5
   10964:	00029417 	.word	0x00029417
   10968:	200215e4 	.word	0x200215e4
   1096c:	00029435 	.word	0x00029435
   10970:	20021250 	.word	0x20021250
   10974:	00010445 	.word	0x00010445
   10978:	2002aa10 	.word	0x2002aa10
   1097c:	2002152c 	.word	0x2002152c
   10980:	00029458 	.word	0x00029458
   10984:	000292c6 	.word	0x000292c6
   10988:	0002946b 	.word	0x0002946b

0001098c <slm_at_gps_clac>:

/**@brief API to list GPS AT commands
 */
void slm_at_gps_clac(void)
{
   1098c:	b513      	push	{r0, r1, r4, lr}
	sprintf(rsp_buf, "%s\r\n", AT_GPS);
   1098e:	4b0a      	ldr	r3, [pc, #40]	; (109b8 <slm_at_gps_clac+0x2c>)
   10990:	4c0a      	ldr	r4, [pc, #40]	; (109bc <slm_at_gps_clac+0x30>)
   10992:	f640 228c 	movw	r2, #2700	; 0xa8c
   10996:	2100      	movs	r1, #0
   10998:	9300      	str	r3, [sp, #0]
   1099a:	4620      	mov	r0, r4
   1099c:	4b08      	ldr	r3, [pc, #32]	; (109c0 <slm_at_gps_clac+0x34>)
   1099e:	f016 f989 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   109a2:	4620      	mov	r0, r4
   109a4:	f7fc fa64 	bl	ce70 <strlen>
   109a8:	4601      	mov	r1, r0
   109aa:	4620      	mov	r0, r4
}
   109ac:	b002      	add	sp, #8
   109ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rsp_send(rsp_buf, strlen(rsp_buf));
   109b2:	f7fd bb1b 	b.w	dfec <rsp_send>
   109b6:	bf00      	nop
   109b8:	0002936b 	.word	0x0002936b
   109bc:	20026ea6 	.word	0x20026ea6
   109c0:	00028bb2 	.word	0x00028bb2

000109c4 <slm_at_gps_init>:
		return ret;
	}
#endif

	client.sock = INVALID_SOCKET;
	client.mask =  NRF_GNSS_NMEA_GSV_MASK |
   109c4:	f04f 31ff 	mov.w	r1, #4294967295
   109c8:	221f      	movs	r2, #31
		       NRF_GNSS_NMEA_GLL_MASK |
		       NRF_GNSS_NMEA_GGA_MASK |
		       NRF_GNSS_NMEA_RMC_MASK;
	client.running = false;
	client.has_fix = false;
	gps_thread_id = NULL;
   109ca:	2000      	movs	r0, #0
	client.sock = INVALID_SOCKET;
   109cc:	4b02      	ldr	r3, [pc, #8]	; (109d8 <slm_at_gps_init+0x14>)
	client.mask =  NRF_GNSS_NMEA_GSV_MASK |
   109ce:	e9c3 1200 	strd	r1, r2, [r3]
	gps_thread_id = NULL;
   109d2:	4b02      	ldr	r3, [pc, #8]	; (109dc <slm_at_gps_init+0x18>)
   109d4:	6018      	str	r0, [r3, #0]

	return 0;
}
   109d6:	4770      	bx	lr
   109d8:	20021524 	.word	0x20021524
   109dc:	200215e4 	.word	0x200215e4

000109e0 <slm_at_gps_uninit>:

/**@brief API to uninitialize GPS AT commands handler
 */
int slm_at_gps_uninit(void)
{
   109e0:	b510      	push	{r4, lr}
	if (gps_thread_id != NULL) {
   109e2:	4c06      	ldr	r4, [pc, #24]	; (109fc <slm_at_gps_uninit+0x1c>)
   109e4:	6823      	ldr	r3, [r4, #0]
   109e6:	b133      	cbz	r3, 109f6 <slm_at_gps_uninit+0x16>
		do_gps_stop();
   109e8:	f7ff fce2 	bl	103b0 <do_gps_stop>
		k_thread_abort(gps_thread_id);
   109ec:	6820      	ldr	r0, [r4, #0]
	z_impl_k_thread_abort(thread);
   109ee:	f003 fdd7 	bl	145a0 <z_impl_k_thread_abort>
		gps_thread_id = NULL;
   109f2:	2300      	movs	r3, #0
   109f4:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
   109f6:	2000      	movs	r0, #0
   109f8:	bd10      	pop	{r4, pc}
   109fa:	bf00      	nop
   109fc:	200215e4 	.word	0x200215e4

00010a00 <mqtt_evt_handler>:

/**@brief MQTT client event handler
 */
void mqtt_evt_handler(struct mqtt_client *const c,
		      const struct mqtt_evt *evt)
{
   10a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10a04:	b087      	sub	sp, #28
   10a06:	780b      	ldrb	r3, [r1, #0]
   10a08:	460d      	mov	r5, r1
	int ret;

	ret = evt->result;
   10a0a:	69cc      	ldr	r4, [r1, #28]
{
   10a0c:	af04      	add	r7, sp, #16
   10a0e:	2b05      	cmp	r3, #5
   10a10:	d808      	bhi.n	10a24 <mqtt_evt_handler+0x24>
   10a12:	e8df f003 	tbb	[pc, r3]
   10a16:	0403      	.short	0x0403
   10a18:	a68d071c 	.word	0xa68d071c
	switch (evt->type) {
	case MQTT_EVT_CONNACK:
		if (evt->result != 0) {
   10a1c:	b114      	cbz	r4, 10a24 <mqtt_evt_handler+0x24>
			ctx.connected = false;
		}
		break;

	case MQTT_EVT_DISCONNECT:
		ctx.connected = false;
   10a1e:	2200      	movs	r2, #0
   10a20:	4b5d      	ldr	r3, [pc, #372]	; (10b98 <mqtt_evt_handler+0x198>)
   10a22:	701a      	strb	r2, [r3, #0]
	default:
		LOG_DBG("default: %d\n", evt->type);
		break;
	}

	sprintf(rsp_buf, "#XMQTTEVT: %d,%d\r\n",
   10a24:	9401      	str	r4, [sp, #4]
   10a26:	782b      	ldrb	r3, [r5, #0]
   10a28:	f640 228c 	movw	r2, #2700	; 0xa8c
   10a2c:	2100      	movs	r1, #0
   10a2e:	9300      	str	r3, [sp, #0]
   10a30:	485a      	ldr	r0, [pc, #360]	; (10b9c <mqtt_evt_handler+0x19c>)
   10a32:	4b5b      	ldr	r3, [pc, #364]	; (10ba0 <mqtt_evt_handler+0x1a0>)
   10a34:	f016 f93e 	bl	26cb4 <__sprintf_chk>
		evt->type, ret);
	rsp_send(rsp_buf, strlen(rsp_buf));
   10a38:	4858      	ldr	r0, [pc, #352]	; (10b9c <mqtt_evt_handler+0x19c>)
   10a3a:	f7fc fa19 	bl	ce70 <strlen>
   10a3e:	4601      	mov	r1, r0
   10a40:	4856      	ldr	r0, [pc, #344]	; (10b9c <mqtt_evt_handler+0x19c>)
   10a42:	f7fd fad3 	bl	dfec <rsp_send>
}
   10a46:	370c      	adds	r7, #12
   10a48:	46bd      	mov	sp, r7
   10a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = publish_get_payload(c,
   10a4e:	694a      	ldr	r2, [r1, #20]
	if (length > sizeof(payload_buf)) {
   10a50:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
   10a54:	f200 809c 	bhi.w	10b90 <mqtt_evt_handler+0x190>
	return mqtt_readall_publish_payload(c, payload_buf, length);
   10a58:	4952      	ldr	r1, [pc, #328]	; (10ba4 <mqtt_evt_handler+0x1a4>)
   10a5a:	f014 fb80 	bl	2515e <mqtt_readall_publish_payload>
	if (ret < 0) {
   10a5e:	1e04      	subs	r4, r0, #0
   10a60:	dbe0      	blt.n	10a24 <mqtt_evt_handler+0x24>
	if (slm_util_hex_check(payload_buf,
   10a62:	8aa9      	ldrh	r1, [r5, #20]
   10a64:	484f      	ldr	r0, [pc, #316]	; (10ba4 <mqtt_evt_handler+0x1a4>)
   10a66:	f012 fae0 	bl	2302a <slm_util_hex_check>
   10a6a:	6969      	ldr	r1, [r5, #20]
   10a6c:	4604      	mov	r4, r0
   10a6e:	2800      	cmp	r0, #0
   10a70:	d03a      	beq.n	10ae8 <mqtt_evt_handler+0xe8>
		int size = evt->param.publish.message.payload.len * 2;
   10a72:	004b      	lsls	r3, r1, #1
		char data_hex[size];
   10a74:	1dda      	adds	r2, r3, #7
   10a76:	f022 0207 	bic.w	r2, r2, #7
				evt->param.publish.message.payload.len)) {
   10a7a:	466e      	mov	r6, sp
		char data_hex[size];
   10a7c:	ebad 0d02 	sub.w	sp, sp, r2
   10a80:	f10d 0810 	add.w	r8, sp, #16
		ret = slm_util_htoa((const u8_t *)&payload_buf,
   10a84:	4642      	mov	r2, r8
   10a86:	4847      	ldr	r0, [pc, #284]	; (10ba4 <mqtt_evt_handler+0x1a4>)
   10a88:	b29b      	uxth	r3, r3
   10a8a:	b289      	uxth	r1, r1
   10a8c:	f7fd f996 	bl	ddbc <slm_util_htoa>
		if (ret < 0) {
   10a90:	1e04      	subs	r4, r0, #0
   10a92:	da01      	bge.n	10a98 <mqtt_evt_handler+0x98>
			return ret;
   10a94:	46b5      	mov	sp, r6
   10a96:	e7c5      	b.n	10a24 <mqtt_evt_handler+0x24>
		sprintf(rsp_buf, "#XMQTTMSG: %d,%d,%d\r\n",
   10a98:	f04f 0900 	mov.w	r9, #0
   10a9c:	9402      	str	r4, [sp, #8]
   10a9e:	68ab      	ldr	r3, [r5, #8]
   10aa0:	f640 228c 	movw	r2, #2700	; 0xa8c
   10aa4:	4649      	mov	r1, r9
   10aa6:	9301      	str	r3, [sp, #4]
   10aa8:	f8cd 9000 	str.w	r9, [sp]
   10aac:	4b3e      	ldr	r3, [pc, #248]	; (10ba8 <mqtt_evt_handler+0x1a8>)
   10aae:	483b      	ldr	r0, [pc, #236]	; (10b9c <mqtt_evt_handler+0x19c>)
   10ab0:	f016 f900 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   10ab4:	4839      	ldr	r0, [pc, #228]	; (10b9c <mqtt_evt_handler+0x19c>)
   10ab6:	f7fc f9db 	bl	ce70 <strlen>
   10aba:	4601      	mov	r1, r0
   10abc:	4837      	ldr	r0, [pc, #220]	; (10b9c <mqtt_evt_handler+0x19c>)
   10abe:	f7fd fa95 	bl	dfec <rsp_send>
		rsp_send(evt->param.publish.message.topic.topic.utf8,
   10ac2:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   10ac6:	f7fd fa91 	bl	dfec <rsp_send>
		rsp_send("\r\n", 2);
   10aca:	2102      	movs	r1, #2
   10acc:	4837      	ldr	r0, [pc, #220]	; (10bac <mqtt_evt_handler+0x1ac>)
   10ace:	f7fd fa8d 	bl	dfec <rsp_send>
		rsp_send(data_hex, ret);
   10ad2:	4621      	mov	r1, r4
   10ad4:	4640      	mov	r0, r8
   10ad6:	f7fd fa89 	bl	dfec <rsp_send>
		rsp_send("\r\n", 2);
   10ada:	2102      	movs	r1, #2
   10adc:	4833      	ldr	r0, [pc, #204]	; (10bac <mqtt_evt_handler+0x1ac>)
   10ade:	f7fd fa85 	bl	dfec <rsp_send>
	return 0;
   10ae2:	464c      	mov	r4, r9
   10ae4:	46b5      	mov	sp, r6
   10ae6:	e79d      	b.n	10a24 <mqtt_evt_handler+0x24>
		sprintf(rsp_buf, "#XMQTTMSG: %d,%d,%d\r\n",
   10ae8:	9102      	str	r1, [sp, #8]
   10aea:	68ab      	ldr	r3, [r5, #8]
   10aec:	f640 228c 	movw	r2, #2700	; 0xa8c
   10af0:	9301      	str	r3, [sp, #4]
   10af2:	2301      	movs	r3, #1
   10af4:	4601      	mov	r1, r0
   10af6:	9300      	str	r3, [sp, #0]
   10af8:	4828      	ldr	r0, [pc, #160]	; (10b9c <mqtt_evt_handler+0x19c>)
   10afa:	4b2b      	ldr	r3, [pc, #172]	; (10ba8 <mqtt_evt_handler+0x1a8>)
   10afc:	f016 f8da 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   10b00:	4826      	ldr	r0, [pc, #152]	; (10b9c <mqtt_evt_handler+0x19c>)
   10b02:	f7fc f9b5 	bl	ce70 <strlen>
   10b06:	4601      	mov	r1, r0
   10b08:	4824      	ldr	r0, [pc, #144]	; (10b9c <mqtt_evt_handler+0x19c>)
   10b0a:	f7fd fa6f 	bl	dfec <rsp_send>
		rsp_send(evt->param.publish.message.topic.topic.utf8,
   10b0e:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   10b12:	f7fd fa6b 	bl	dfec <rsp_send>
		rsp_send("\r\n", 2);
   10b16:	2102      	movs	r1, #2
   10b18:	4824      	ldr	r0, [pc, #144]	; (10bac <mqtt_evt_handler+0x1ac>)
   10b1a:	f7fd fa67 	bl	dfec <rsp_send>
		rsp_send(payload_buf,
   10b1e:	6969      	ldr	r1, [r5, #20]
   10b20:	4820      	ldr	r0, [pc, #128]	; (10ba4 <mqtt_evt_handler+0x1a4>)
   10b22:	f7fd fa63 	bl	dfec <rsp_send>
		rsp_send("\r\n", 2);
   10b26:	2102      	movs	r1, #2
   10b28:	4820      	ldr	r0, [pc, #128]	; (10bac <mqtt_evt_handler+0x1ac>)
   10b2a:	f7fd fa5f 	bl	dfec <rsp_send>
   10b2e:	e779      	b.n	10a24 <mqtt_evt_handler+0x24>
		if (evt->result != 0) {
   10b30:	2c00      	cmp	r4, #0
   10b32:	f47f af77 	bne.w	10a24 <mqtt_evt_handler+0x24>
			struct mqtt_pubrel_param param = {
   10b36:	888b      	ldrh	r3, [r1, #4]
			ret = mqtt_publish_qos2_release(&client, &param);
   10b38:	481d      	ldr	r0, [pc, #116]	; (10bb0 <mqtt_evt_handler+0x1b0>)
   10b3a:	1d39      	adds	r1, r7, #4
			struct mqtt_pubrel_param param = {
   10b3c:	80bb      	strh	r3, [r7, #4]
			ret = mqtt_publish_qos2_release(&client, &param);
   10b3e:	f014 f9a8 	bl	24e92 <mqtt_publish_qos2_release>
			if (ret) {
   10b42:	4604      	mov	r4, r0
   10b44:	2800      	cmp	r0, #0
   10b46:	f43f af6d 	beq.w	10a24 <mqtt_evt_handler+0x24>
   10b4a:	4a1a      	ldr	r2, [pc, #104]	; (10bb4 <mqtt_evt_handler+0x1b4>)
   10b4c:	4b1a      	ldr	r3, [pc, #104]	; (10bb8 <mqtt_evt_handler+0x1b8>)
				LOG_ERR("mqtt_publish_qos2_release: Fail! %d",
   10b4e:	4601      	mov	r1, r0
   10b50:	1ad2      	subs	r2, r2, r3
   10b52:	08d2      	lsrs	r2, r2, #3
   10b54:	0192      	lsls	r2, r2, #6
   10b56:	4819      	ldr	r0, [pc, #100]	; (10bbc <mqtt_evt_handler+0x1bc>)
   10b58:	f042 0201 	orr.w	r2, r2, #1
				LOG_ERR("mqtt_publish_qos2_complete Failed:%d",
   10b5c:	f012 fe2a 	bl	237b4 <log_1>
		break;
   10b60:	e760      	b.n	10a24 <mqtt_evt_handler+0x24>
		if (evt->result != 0) {
   10b62:	2c00      	cmp	r4, #0
   10b64:	f47f af5e 	bne.w	10a24 <mqtt_evt_handler+0x24>
			struct mqtt_pubcomp_param param = {
   10b68:	888b      	ldrh	r3, [r1, #4]
			ret = mqtt_publish_qos2_complete(&client, &param);
   10b6a:	4811      	ldr	r0, [pc, #68]	; (10bb0 <mqtt_evt_handler+0x1b0>)
   10b6c:	1d39      	adds	r1, r7, #4
			struct mqtt_pubcomp_param param = {
   10b6e:	80bb      	strh	r3, [r7, #4]
			ret = mqtt_publish_qos2_complete(&client, &param);
   10b70:	f014 f9b6 	bl	24ee0 <mqtt_publish_qos2_complete>
			if (ret) {
   10b74:	4604      	mov	r4, r0
   10b76:	2800      	cmp	r0, #0
   10b78:	f43f af54 	beq.w	10a24 <mqtt_evt_handler+0x24>
   10b7c:	4a0d      	ldr	r2, [pc, #52]	; (10bb4 <mqtt_evt_handler+0x1b4>)
   10b7e:	4b0e      	ldr	r3, [pc, #56]	; (10bb8 <mqtt_evt_handler+0x1b8>)
				LOG_ERR("mqtt_publish_qos2_complete Failed:%d",
   10b80:	4601      	mov	r1, r0
   10b82:	1ad2      	subs	r2, r2, r3
   10b84:	08d2      	lsrs	r2, r2, #3
   10b86:	0192      	lsls	r2, r2, #6
   10b88:	480d      	ldr	r0, [pc, #52]	; (10bc0 <mqtt_evt_handler+0x1c0>)
   10b8a:	f042 0201 	orr.w	r2, r2, #1
   10b8e:	e7e5      	b.n	10b5c <mqtt_evt_handler+0x15c>
		return -EMSGSIZE;
   10b90:	f06f 0479 	mvn.w	r4, #121	; 0x79
   10b94:	e746      	b.n	10a24 <mqtt_evt_handler+0x24>
   10b96:	bf00      	nop
   10b98:	20021720 	.word	0x20021720
   10b9c:	20026ea6 	.word	0x20026ea6
   10ba0:	000294e9 	.word	0x000294e9
   10ba4:	20028e57 	.word	0x20028e57
   10ba8:	0002948a 	.word	0x0002948a
   10bac:	000295b0 	.word	0x000295b0
   10bb0:	200216a0 	.word	0x200216a0
   10bb4:	00027ba0 	.word	0x00027ba0
   10bb8:	00027b20 	.word	0x00027b20
   10bbc:	000294a0 	.word	0x000294a0
   10bc0:	000294c4 	.word	0x000294c4

00010bc4 <mqtt_thread_fn>:

static void mqtt_thread_fn(void *arg1, void *arg2, void *arg3)
{
   10bc4:	b570      	push	{r4, r5, r6, lr}
   10bc6:	4b2a      	ldr	r3, [pc, #168]	; (10c70 <mqtt_thread_fn+0xac>)
   10bc8:	4c2a      	ldr	r4, [pc, #168]	; (10c74 <mqtt_thread_fn+0xb0>)
	return z_impl_zsock_poll(fds, nfds, timeout);
   10bca:	4d2b      	ldr	r5, [pc, #172]	; (10c78 <mqtt_thread_fn+0xb4>)
   10bcc:	1ae4      	subs	r4, r4, r3
   10bce:	08e4      	lsrs	r4, r4, #3
	return z_impl_k_sem_take(sem, timeout);
   10bd0:	f04f 32ff 	mov.w	r2, #4294967295
   10bd4:	f04f 33ff 	mov.w	r3, #4294967295
   10bd8:	4828      	ldr	r0, [pc, #160]	; (10c7c <mqtt_thread_fn+0xb8>)
   10bda:	f010 fb4b 	bl	21274 <z_impl_k_sem_take>
	int err;

	while (1) {
		/* Don't go any further until MQTT is connected */
		k_sem_take(&mqtt_connected, K_FOREVER);
		while (ctx.connected) {
   10bde:	4e28      	ldr	r6, [pc, #160]	; (10c80 <mqtt_thread_fn+0xbc>)
   10be0:	7833      	ldrb	r3, [r6, #0]
   10be2:	2b00      	cmp	r3, #0
   10be4:	d0f4      	beq.n	10bd0 <mqtt_thread_fn+0xc>
			err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   10be6:	4827      	ldr	r0, [pc, #156]	; (10c84 <mqtt_thread_fn+0xc0>)
   10be8:	f014 fa7e 	bl	250e8 <mqtt_keepalive_time_left>
   10bec:	4602      	mov	r2, r0
   10bee:	2101      	movs	r1, #1
   10bf0:	4628      	mov	r0, r5
   10bf2:	f002 fc89 	bl	13508 <z_impl_zsock_poll>
			if (err < 0) {
   10bf6:	2800      	cmp	r0, #0
   10bf8:	da0a      	bge.n	10c10 <mqtt_thread_fn+0x4c>
				LOG_ERR("ERROR: poll %d", errno);
   10bfa:	f013 fbb3 	bl	24364 <__errno>
   10bfe:	01a6      	lsls	r6, r4, #6
   10c00:	f046 0601 	orr.w	r6, r6, #1
   10c04:	4632      	mov	r2, r6
   10c06:	6801      	ldr	r1, [r0, #0]
   10c08:	481f      	ldr	r0, [pc, #124]	; (10c88 <mqtt_thread_fn+0xc4>)
				break;
			}
			err = mqtt_live(&client);
			if ((err != 0) && (err != -EAGAIN)) {
				LOG_ERR("ERROR: mqtt_live %d", err);
   10c0a:	f012 fdd3 	bl	237b4 <log_1>
   10c0e:	e7df      	b.n	10bd0 <mqtt_thread_fn+0xc>
			err = mqtt_live(&client);
   10c10:	481c      	ldr	r0, [pc, #112]	; (10c84 <mqtt_thread_fn+0xc0>)
   10c12:	f014 fa42 	bl	2509a <mqtt_live>
			if ((err != 0) && (err != -EAGAIN)) {
   10c16:	4601      	mov	r1, r0
   10c18:	b138      	cbz	r0, 10c2a <mqtt_thread_fn+0x66>
   10c1a:	f110 0f0b 	cmn.w	r0, #11
   10c1e:	d004      	beq.n	10c2a <mqtt_thread_fn+0x66>
				LOG_ERR("ERROR: mqtt_live %d", err);
   10c20:	01a2      	lsls	r2, r4, #6
   10c22:	481a      	ldr	r0, [pc, #104]	; (10c8c <mqtt_thread_fn+0xc8>)
   10c24:	f042 0201 	orr.w	r2, r2, #1
   10c28:	e7ef      	b.n	10c0a <mqtt_thread_fn+0x46>
				break;
			}
			if ((fds.revents & POLLIN) == POLLIN) {
   10c2a:	88eb      	ldrh	r3, [r5, #6]
   10c2c:	07d9      	lsls	r1, r3, #31
   10c2e:	d50e      	bpl.n	10c4e <mqtt_thread_fn+0x8a>
				err = mqtt_input(&client);
   10c30:	4814      	ldr	r0, [pc, #80]	; (10c84 <mqtt_thread_fn+0xc0>)
   10c32:	f014 fa70 	bl	25116 <mqtt_input>
				if (err != 0) {
   10c36:	4601      	mov	r1, r0
   10c38:	b148      	cbz	r0, 10c4e <mqtt_thread_fn+0x8a>
					LOG_ERR("ERROR: mqtt_input %d", err);
   10c3a:	01a2      	lsls	r2, r4, #6
   10c3c:	4814      	ldr	r0, [pc, #80]	; (10c90 <mqtt_thread_fn+0xcc>)
   10c3e:	f042 0201 	orr.w	r2, r2, #1
   10c42:	f012 fdb7 	bl	237b4 <log_1>
				mqtt_abort(&client);
				break;
			}
			if ((fds.revents & POLLNVAL) == POLLNVAL) {
				LOG_ERR("POLLNVAL");
				mqtt_abort(&client);
   10c46:	480f      	ldr	r0, [pc, #60]	; (10c84 <mqtt_thread_fn+0xc0>)
   10c48:	f014 fa13 	bl	25072 <mqtt_abort>
				break;
   10c4c:	e7c0      	b.n	10bd0 <mqtt_thread_fn+0xc>
			if ((fds.revents & POLLERR) == POLLERR) {
   10c4e:	88eb      	ldrh	r3, [r5, #6]
   10c50:	071a      	lsls	r2, r3, #28
   10c52:	d506      	bpl.n	10c62 <mqtt_thread_fn+0x9e>
				LOG_ERR("POLLERR");
   10c54:	01a1      	lsls	r1, r4, #6
   10c56:	480f      	ldr	r0, [pc, #60]	; (10c94 <mqtt_thread_fn+0xd0>)
   10c58:	f041 0101 	orr.w	r1, r1, #1
				LOG_ERR("POLLNVAL");
   10c5c:	f012 fd9b 	bl	23796 <log_0>
   10c60:	e7f1      	b.n	10c46 <mqtt_thread_fn+0x82>
			if ((fds.revents & POLLNVAL) == POLLNVAL) {
   10c62:	069b      	lsls	r3, r3, #26
   10c64:	d5bc      	bpl.n	10be0 <mqtt_thread_fn+0x1c>
				LOG_ERR("POLLNVAL");
   10c66:	01a1      	lsls	r1, r4, #6
   10c68:	480b      	ldr	r0, [pc, #44]	; (10c98 <mqtt_thread_fn+0xd4>)
   10c6a:	f041 0101 	orr.w	r1, r1, #1
   10c6e:	e7f5      	b.n	10c5c <mqtt_thread_fn+0x98>
   10c70:	00027b20 	.word	0x00027b20
   10c74:	00027ba0 	.word	0x00027ba0
   10c78:	200200a0 	.word	0x200200a0
   10c7c:	20020720 	.word	0x20020720
   10c80:	20021720 	.word	0x20021720
   10c84:	200216a0 	.word	0x200216a0
   10c88:	000294fc 	.word	0x000294fc
   10c8c:	0002950b 	.word	0x0002950b
   10c90:	0002951f 	.word	0x0002951f
   10c94:	00029534 	.word	0x00029534
   10c98:	0002953c 	.word	0x0002953c

00010c9c <handle_at_mqtt_unsubscribe>:
 */
static int handle_at_mqtt_unsubscribe(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char topic[MQTT_MAX_TOPIC_LEN];
	int topic_sz = MQTT_MAX_TOPIC_LEN;
   10c9c:	2380      	movs	r3, #128	; 0x80
{
   10c9e:	b5f0      	push	{r4, r5, r6, r7, lr}

	switch (cmd_type) {
   10ca0:	2801      	cmp	r0, #1
{
   10ca2:	b0a7      	sub	sp, #156	; 0x9c
   10ca4:	4604      	mov	r4, r0
	int topic_sz = MQTT_MAX_TOPIC_LEN;
   10ca6:	9300      	str	r3, [sp, #0]
	switch (cmd_type) {
   10ca8:	d004      	beq.n	10cb4 <handle_at_mqtt_unsubscribe+0x18>
   10caa:	2803      	cmp	r0, #3
   10cac:	d028      	beq.n	10d00 <handle_at_mqtt_unsubscribe+0x64>
			}
			topic[topic_sz] = '\0';
			err = do_mqtt_subscribe(AT_MQTTSUB_UNSUB,
						topic, topic_sz, 0);
		} else {
			return -EINVAL;
   10cae:	f06f 0015 	mvn.w	r0, #21
   10cb2:	e023      	b.n	10cfc <handle_at_mqtt_unsubscribe+0x60>
		if (at_params_valid_count_get(&at_param_list) == 2) {
   10cb4:	4819      	ldr	r0, [pc, #100]	; (10d1c <handle_at_mqtt_unsubscribe+0x80>)
   10cb6:	f015 fa05 	bl	260c4 <at_params_valid_count_get>
   10cba:	2802      	cmp	r0, #2
   10cbc:	d1f7      	bne.n	10cae <handle_at_mqtt_unsubscribe+0x12>
			err = at_params_string_get(&at_param_list, 1,
   10cbe:	ae06      	add	r6, sp, #24
   10cc0:	466b      	mov	r3, sp
   10cc2:	4632      	mov	r2, r6
   10cc4:	4621      	mov	r1, r4
   10cc6:	4815      	ldr	r0, [pc, #84]	; (10d1c <handle_at_mqtt_unsubscribe+0x80>)
   10cc8:	f015 f9d9 	bl	2607e <at_params_string_get>
			if (err < 0) {
   10ccc:	2800      	cmp	r0, #0
   10cce:	db15      	blt.n	10cfc <handle_at_mqtt_unsubscribe+0x60>
			topic[topic_sz] = '\0';
   10cd0:	2700      	movs	r7, #0
   10cd2:	9d00      	ldr	r5, [sp, #0]
   10cd4:	ab26      	add	r3, sp, #152	; 0x98
   10cd6:	442b      	add	r3, r5
   10cd8:	f803 7c80 	strb.w	r7, [r3, #-128]
	const struct mqtt_subscription_list subscription_list = {
   10cdc:	ab03      	add	r3, sp, #12
   10cde:	9301      	str	r3, [sp, #4]
   10ce0:	f8ad 4008 	strh.w	r4, [sp, #8]
		.message_id = sys_rand32_get()
   10ce4:	f004 f892 	bl	14e0c <sys_rand32_get>
		err = mqtt_unsubscribe(&client, &subscription_list);
   10ce8:	a901      	add	r1, sp, #4
	const struct mqtt_subscription_list subscription_list = {
   10cea:	f8ad 000a 	strh.w	r0, [sp, #10]
		err = mqtt_unsubscribe(&client, &subscription_list);
   10cee:	480c      	ldr	r0, [pc, #48]	; (10d20 <handle_at_mqtt_unsubscribe+0x84>)
	subscribe_topic.topic.size = topic_len;
   10cf0:	e9cd 6503 	strd	r6, r5, [sp, #12]
		subscribe_topic.qos = (u8_t)qos;
   10cf4:	f88d 7014 	strb.w	r7, [sp, #20]
		err = mqtt_unsubscribe(&client, &subscription_list);
   10cf8:	f014 f969 	bl	24fce <mqtt_unsubscribe>
	default:
		break;
	}

	return err;
}
   10cfc:	b027      	add	sp, #156	; 0x9c
   10cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(rsp_buf, "#XMQTTUNSUB: <topic>\r\n");
   10d00:	4908      	ldr	r1, [pc, #32]	; (10d24 <handle_at_mqtt_unsubscribe+0x88>)
   10d02:	4809      	ldr	r0, [pc, #36]	; (10d28 <handle_at_mqtt_unsubscribe+0x8c>)
   10d04:	f015 fffd 	bl	26d02 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   10d08:	4807      	ldr	r0, [pc, #28]	; (10d28 <handle_at_mqtt_unsubscribe+0x8c>)
   10d0a:	f7fc f8b1 	bl	ce70 <strlen>
   10d0e:	4601      	mov	r1, r0
   10d10:	4805      	ldr	r0, [pc, #20]	; (10d28 <handle_at_mqtt_unsubscribe+0x8c>)
   10d12:	f7fd f96b 	bl	dfec <rsp_send>
   10d16:	2000      	movs	r0, #0
   10d18:	e7f0      	b.n	10cfc <handle_at_mqtt_unsubscribe+0x60>
   10d1a:	bf00      	nop
   10d1c:	200213d0 	.word	0x200213d0
   10d20:	200216a0 	.word	0x200216a0
   10d24:	00029545 	.word	0x00029545
   10d28:	20026ea6 	.word	0x20026ea6

00010d2c <handle_at_mqtt_subscribe>:
	int topic_sz = MQTT_MAX_TOPIC_LEN;
   10d2c:	2380      	movs	r3, #128	; 0x80
{
   10d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cmd_type) {
   10d30:	2801      	cmp	r0, #1
{
   10d32:	b0a9      	sub	sp, #164	; 0xa4
   10d34:	4604      	mov	r4, r0
	int topic_sz = MQTT_MAX_TOPIC_LEN;
   10d36:	9302      	str	r3, [sp, #8]
	switch (cmd_type) {
   10d38:	d004      	beq.n	10d44 <handle_at_mqtt_subscribe+0x18>
   10d3a:	2803      	cmp	r0, #3
   10d3c:	d035      	beq.n	10daa <handle_at_mqtt_subscribe+0x7e>
			return -EINVAL;
   10d3e:	f06f 0015 	mvn.w	r0, #21
   10d42:	e030      	b.n	10da6 <handle_at_mqtt_subscribe+0x7a>
		if (at_params_valid_count_get(&at_param_list) == 3) {
   10d44:	481f      	ldr	r0, [pc, #124]	; (10dc4 <handle_at_mqtt_subscribe+0x98>)
   10d46:	f015 f9bd 	bl	260c4 <at_params_valid_count_get>
   10d4a:	2803      	cmp	r0, #3
   10d4c:	d1f7      	bne.n	10d3e <handle_at_mqtt_subscribe+0x12>
			err = at_params_string_get(&at_param_list, 1,
   10d4e:	ad08      	add	r5, sp, #32
   10d50:	462a      	mov	r2, r5
   10d52:	4621      	mov	r1, r4
   10d54:	481b      	ldr	r0, [pc, #108]	; (10dc4 <handle_at_mqtt_subscribe+0x98>)
   10d56:	ab02      	add	r3, sp, #8
   10d58:	f015 f991 	bl	2607e <at_params_string_get>
			if (err < 0) {
   10d5c:	2800      	cmp	r0, #0
   10d5e:	db22      	blt.n	10da6 <handle_at_mqtt_subscribe+0x7a>
			topic[topic_sz] = '\0';
   10d60:	9b02      	ldr	r3, [sp, #8]
   10d62:	aa28      	add	r2, sp, #160	; 0xa0
   10d64:	4413      	add	r3, r2
   10d66:	2200      	movs	r2, #0
			err = at_params_short_get(&at_param_list, 2, &qos);
   10d68:	2102      	movs	r1, #2
			topic[topic_sz] = '\0';
   10d6a:	f803 2c80 	strb.w	r2, [r3, #-128]
			err = at_params_short_get(&at_param_list, 2, &qos);
   10d6e:	4815      	ldr	r0, [pc, #84]	; (10dc4 <handle_at_mqtt_subscribe+0x98>)
   10d70:	f10d 0206 	add.w	r2, sp, #6
   10d74:	f015 f95e 	bl	26034 <at_params_short_get>
			if (err < 0) {
   10d78:	2800      	cmp	r0, #0
   10d7a:	db14      	blt.n	10da6 <handle_at_mqtt_subscribe+0x7a>
	const struct mqtt_subscription_list subscription_list = {
   10d7c:	ab05      	add	r3, sp, #20
			err = do_mqtt_subscribe(AT_MQTTSUB_SUB,
   10d7e:	f8bd 6006 	ldrh.w	r6, [sp, #6]
   10d82:	9f02      	ldr	r7, [sp, #8]
	const struct mqtt_subscription_list subscription_list = {
   10d84:	9303      	str	r3, [sp, #12]
   10d86:	f8ad 4010 	strh.w	r4, [sp, #16]
		.message_id = sys_rand32_get()
   10d8a:	f004 f83f 	bl	14e0c <sys_rand32_get>
	if (qos <= MQTT_QOS_2_EXACTLY_ONCE) {
   10d8e:	2e02      	cmp	r6, #2
	const struct mqtt_subscription_list subscription_list = {
   10d90:	f8ad 0012 	strh.w	r0, [sp, #18]
	if (qos <= MQTT_QOS_2_EXACTLY_ONCE) {
   10d94:	d8d3      	bhi.n	10d3e <handle_at_mqtt_subscribe+0x12>
		err = mqtt_subscribe(&client, &subscription_list);
   10d96:	480c      	ldr	r0, [pc, #48]	; (10dc8 <handle_at_mqtt_subscribe+0x9c>)
   10d98:	a903      	add	r1, sp, #12
	subscribe_topic.topic.size = topic_len;
   10d9a:	e9cd 5705 	strd	r5, r7, [sp, #20]
		subscribe_topic.qos = (u8_t)qos;
   10d9e:	f88d 601c 	strb.w	r6, [sp, #28]
		err = mqtt_subscribe(&client, &subscription_list);
   10da2:	f014 f8ed 	bl	24f80 <mqtt_subscribe>
}
   10da6:	b029      	add	sp, #164	; 0xa4
   10da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(rsp_buf, "#XMQTTSUB: <topic>, (0, 1, 2)\r\n");
   10daa:	4908      	ldr	r1, [pc, #32]	; (10dcc <handle_at_mqtt_subscribe+0xa0>)
   10dac:	4808      	ldr	r0, [pc, #32]	; (10dd0 <handle_at_mqtt_subscribe+0xa4>)
   10dae:	f015 ffa8 	bl	26d02 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   10db2:	4807      	ldr	r0, [pc, #28]	; (10dd0 <handle_at_mqtt_subscribe+0xa4>)
   10db4:	f7fc f85c 	bl	ce70 <strlen>
   10db8:	4601      	mov	r1, r0
   10dba:	4805      	ldr	r0, [pc, #20]	; (10dd0 <handle_at_mqtt_subscribe+0xa4>)
   10dbc:	f7fd f916 	bl	dfec <rsp_send>
		err = 0;
   10dc0:	2000      	movs	r0, #0
		break;
   10dc2:	e7f0      	b.n	10da6 <handle_at_mqtt_subscribe+0x7a>
   10dc4:	200213d0 	.word	0x200213d0
   10dc8:	200216a0 	.word	0x200216a0
   10dcc:	0002955c 	.word	0x0002955c
   10dd0:	20026ea6 	.word	0x20026ea6

00010dd4 <handle_at_mqtt_publish>:
	size_t msg_sz = MQTT_MESSAGE_BUFFER_LEN;
   10dd4:	2280      	movs	r2, #128	; 0x80
   10dd6:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   10dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dde:	f5ad 7d3a 	sub.w	sp, sp, #744	; 0x2e8
	switch (cmd_type) {
   10de2:	2801      	cmp	r0, #1
{
   10de4:	af00      	add	r7, sp, #0
   10de6:	4604      	mov	r4, r0
	size_t msg_sz = MQTT_MESSAGE_BUFFER_LEN;
   10de8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	switch (cmd_type) {
   10dec:	d005      	beq.n	10dfa <handle_at_mqtt_publish+0x26>
   10dee:	2803      	cmp	r0, #3
   10df0:	f000 809d 	beq.w	10f2e <handle_at_mqtt_publish+0x15a>
			return -EINVAL;
   10df4:	f06f 0415 	mvn.w	r4, #21
   10df8:	e051      	b.n	10e9e <handle_at_mqtt_publish+0xca>
		if (at_params_valid_count_get(&at_param_list) != 6) {
   10dfa:	4853      	ldr	r0, [pc, #332]	; (10f48 <handle_at_mqtt_publish+0x174>)
   10dfc:	f015 f962 	bl	260c4 <at_params_valid_count_get>
   10e00:	2806      	cmp	r0, #6
   10e02:	d1f7      	bne.n	10df4 <handle_at_mqtt_publish+0x20>
		err = at_params_string_get(&at_param_list, 1, topic, &topic_sz);
   10e04:	f107 0528 	add.w	r5, r7, #40	; 0x28
   10e08:	4621      	mov	r1, r4
   10e0a:	462a      	mov	r2, r5
   10e0c:	484e      	ldr	r0, [pc, #312]	; (10f48 <handle_at_mqtt_publish+0x174>)
   10e0e:	f107 0308 	add.w	r3, r7, #8
   10e12:	f015 f934 	bl	2607e <at_params_string_get>
		if (err < 0) {
   10e16:	1e04      	subs	r4, r0, #0
   10e18:	db41      	blt.n	10e9e <handle_at_mqtt_publish+0xca>
		topic[topic_sz] = '\0';
   10e1a:	2600      	movs	r6, #0
   10e1c:	68bb      	ldr	r3, [r7, #8]
		err = at_params_short_get(&at_param_list, 2, &datatype);
   10e1e:	2102      	movs	r1, #2
   10e20:	4849      	ldr	r0, [pc, #292]	; (10f48 <handle_at_mqtt_publish+0x174>)
   10e22:	1dba      	adds	r2, r7, #6
		topic[topic_sz] = '\0';
   10e24:	54ee      	strb	r6, [r5, r3]
		err = at_params_short_get(&at_param_list, 2, &datatype);
   10e26:	f015 f905 	bl	26034 <at_params_short_get>
		if (err < 0) {
   10e2a:	1e04      	subs	r4, r0, #0
   10e2c:	db37      	blt.n	10e9e <handle_at_mqtt_publish+0xca>
		err = at_params_string_get(&at_param_list, 3, msg, &msg_sz);
   10e2e:	2103      	movs	r1, #3
   10e30:	4845      	ldr	r0, [pc, #276]	; (10f48 <handle_at_mqtt_publish+0x174>)
   10e32:	f107 030c 	add.w	r3, r7, #12
   10e36:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   10e3a:	f015 f920 	bl	2607e <at_params_string_get>
		if (err < 0) {
   10e3e:	1e04      	subs	r4, r0, #0
   10e40:	db2d      	blt.n	10e9e <handle_at_mqtt_publish+0xca>
		msg[msg_sz] = '\0';
   10e42:	68fb      	ldr	r3, [r7, #12]
   10e44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   10e48:	54d6      	strb	r6, [r2, r3]
		err = at_params_short_get(&at_param_list, 4, &qos);
   10e4a:	2104      	movs	r1, #4
   10e4c:	483e      	ldr	r0, [pc, #248]	; (10f48 <handle_at_mqtt_publish+0x174>)
   10e4e:	1cba      	adds	r2, r7, #2
   10e50:	f015 f8f0 	bl	26034 <at_params_short_get>
		if (err < 0) {
   10e54:	1e04      	subs	r4, r0, #0
   10e56:	db22      	blt.n	10e9e <handle_at_mqtt_publish+0xca>
		err = at_params_short_get(&at_param_list, 5, &retain);
   10e58:	2105      	movs	r1, #5
   10e5a:	483b      	ldr	r0, [pc, #236]	; (10f48 <handle_at_mqtt_publish+0x174>)
   10e5c:	1d3a      	adds	r2, r7, #4
   10e5e:	f015 f8e9 	bl	26034 <at_params_short_get>
		if (err < 0) {
   10e62:	1e04      	subs	r4, r0, #0
   10e64:	db1b      	blt.n	10e9e <handle_at_mqtt_publish+0xca>
		if (datatype == DATATYPE_HEXADECIMAL) {
   10e66:	88fb      	ldrh	r3, [r7, #6]
   10e68:	68f9      	ldr	r1, [r7, #12]
   10e6a:	2b00      	cmp	r3, #0
   10e6c:	d13a      	bne.n	10ee4 <handle_at_mqtt_publish+0x110>
			size_t data_len = msg_sz / 2;
   10e6e:	084b      	lsrs	r3, r1, #1
			u8_t data_hex[data_len];
   10e70:	1dda      	adds	r2, r3, #7
   10e72:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   10e76:	466e      	mov	r6, sp
			u8_t data_hex[data_len];
   10e78:	ebad 0d02 	sub.w	sp, sp, r2
			data_len = slm_util_atoh(msg, msg_sz,
   10e7c:	466a      	mov	r2, sp
   10e7e:	b29b      	uxth	r3, r3
   10e80:	b289      	uxth	r1, r1
   10e82:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
			u8_t data_hex[data_len];
   10e86:	46e8      	mov	r8, sp
			data_len = slm_util_atoh(msg, msg_sz,
   10e88:	f012 f8e2 	bl	23050 <slm_util_atoh>
			if (data_len > 0) {
   10e8c:	b130      	cbz	r0, 10e9c <handle_at_mqtt_publish+0xc8>
				err = do_mqtt_publish(qos, retain,
   10e8e:	887b      	ldrh	r3, [r7, #2]
   10e90:	88ba      	ldrh	r2, [r7, #4]
	if (qos <= MQTT_QOS_2_EXACTLY_ONCE) {
   10e92:	2b02      	cmp	r3, #2
				err = do_mqtt_publish(qos, retain,
   10e94:	68b9      	ldr	r1, [r7, #8]
	if (qos <= MQTT_QOS_2_EXACTLY_ONCE) {
   10e96:	d908      	bls.n	10eaa <handle_at_mqtt_publish+0xd6>
		return err;
   10e98:	f06f 0415 	mvn.w	r4, #21
   10e9c:	46b5      	mov	sp, r6
}
   10e9e:	4620      	mov	r0, r4
   10ea0:	f507 773a 	add.w	r7, r7, #744	; 0x2e8
   10ea4:	46bd      	mov	sp, r7
   10ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (retain <= 1) {
   10eaa:	2a01      	cmp	r2, #1
		param.message.topic.qos = (u8_t)qos;
   10eac:	763b      	strb	r3, [r7, #24]
	if (retain <= 1) {
   10eae:	d8f3      	bhi.n	10e98 <handle_at_mqtt_publish+0xc4>
		param.retain_flag = (u8_t)retain;
   10eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
	param.message.topic.topic.size = topic_len;
   10eb4:	e9c7 5104 	strd	r5, r1, [r7, #16]
		param.retain_flag = (u8_t)retain;
   10eb8:	f362 0341 	bfi	r3, r2, #1, #1
   10ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	param.message.payload.len = msg_len;
   10ec0:	e9c7 8007 	strd	r8, r0, [r7, #28]
	param.message_id = sys_rand32_get();
   10ec4:	f003 ffa2 	bl	14e0c <sys_rand32_get>
	param.dup_flag = 0;
   10ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
	param.message_id = sys_rand32_get();
   10ecc:	84b8      	strh	r0, [r7, #36]	; 0x24
	param.dup_flag = 0;
   10ece:	f36f 0300 	bfc	r3, #0, #1
	return mqtt_publish(&client, &param);
   10ed2:	481e      	ldr	r0, [pc, #120]	; (10f4c <handle_at_mqtt_publish+0x178>)
   10ed4:	f107 0110 	add.w	r1, r7, #16
	param.dup_flag = 0;
   10ed8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	return mqtt_publish(&client, &param);
   10edc:	f013 ff94 	bl	24e08 <mqtt_publish>
   10ee0:	4604      	mov	r4, r0
   10ee2:	e7db      	b.n	10e9c <handle_at_mqtt_publish+0xc8>
			err = do_mqtt_publish(qos, retain,
   10ee4:	887b      	ldrh	r3, [r7, #2]
   10ee6:	88ba      	ldrh	r2, [r7, #4]
	if (qos <= MQTT_QOS_2_EXACTLY_ONCE) {
   10ee8:	2b02      	cmp	r3, #2
			err = do_mqtt_publish(qos, retain,
   10eea:	68b8      	ldr	r0, [r7, #8]
	if (qos <= MQTT_QOS_2_EXACTLY_ONCE) {
   10eec:	d882      	bhi.n	10df4 <handle_at_mqtt_publish+0x20>
	if (retain <= 1) {
   10eee:	2a01      	cmp	r2, #1
		param.message.topic.qos = (u8_t)qos;
   10ef0:	763b      	strb	r3, [r7, #24]
	if (retain <= 1) {
   10ef2:	f63f af7f 	bhi.w	10df4 <handle_at_mqtt_publish+0x20>
		param.retain_flag = (u8_t)retain;
   10ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
	param.message.topic.topic.size = topic_len;
   10efa:	e9c7 5004 	strd	r5, r0, [r7, #16]
		param.retain_flag = (u8_t)retain;
   10efe:	f362 0341 	bfi	r3, r2, #1, #1
   10f02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	param.message.payload.data = msg;
   10f06:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
	param.message.payload.len = msg_len;
   10f0a:	e9c7 3107 	strd	r3, r1, [r7, #28]
	param.message_id = sys_rand32_get();
   10f0e:	f003 ff7d 	bl	14e0c <sys_rand32_get>
	param.dup_flag = 0;
   10f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
	param.message_id = sys_rand32_get();
   10f16:	84b8      	strh	r0, [r7, #36]	; 0x24
	param.dup_flag = 0;
   10f18:	f36f 0300 	bfc	r3, #0, #1
	return mqtt_publish(&client, &param);
   10f1c:	480b      	ldr	r0, [pc, #44]	; (10f4c <handle_at_mqtt_publish+0x178>)
   10f1e:	f107 0110 	add.w	r1, r7, #16
	param.dup_flag = 0;
   10f22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	return mqtt_publish(&client, &param);
   10f26:	f013 ff6f 	bl	24e08 <mqtt_publish>
   10f2a:	4604      	mov	r4, r0
   10f2c:	e7b7      	b.n	10e9e <handle_at_mqtt_publish+0xca>
		sprintf(rsp_buf, "#XMQTTPUB: <topic>, (0, 1), <msg>,"
   10f2e:	4908      	ldr	r1, [pc, #32]	; (10f50 <handle_at_mqtt_publish+0x17c>)
   10f30:	4808      	ldr	r0, [pc, #32]	; (10f54 <handle_at_mqtt_publish+0x180>)
   10f32:	f015 fee6 	bl	26d02 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   10f36:	4807      	ldr	r0, [pc, #28]	; (10f54 <handle_at_mqtt_publish+0x180>)
   10f38:	f7fb ff9a 	bl	ce70 <strlen>
   10f3c:	4601      	mov	r1, r0
   10f3e:	4805      	ldr	r0, [pc, #20]	; (10f54 <handle_at_mqtt_publish+0x180>)
   10f40:	f7fd f854 	bl	dfec <rsp_send>
		err = 0;
   10f44:	2400      	movs	r4, #0
		break;
   10f46:	e7aa      	b.n	10e9e <handle_at_mqtt_publish+0xca>
   10f48:	200213d0 	.word	0x200213d0
   10f4c:	200216a0 	.word	0x200216a0
   10f50:	0002957c 	.word	0x0002957c
   10f54:	20026ea6 	.word	0x20026ea6

00010f58 <slm_at_mqtt_parse>:

/**@brief API to handle MQTT AT commands
 */
int slm_at_mqtt_parse(const char *at_cmd)
{
   10f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f5c:	4e17      	ldr	r6, [pc, #92]	; (10fbc <slm_at_mqtt_parse+0x64>)
   10f5e:	4605      	mov	r5, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_MQTT_MAX; i++) {
   10f60:	2400      	movs	r4, #0
   10f62:	4637      	mov	r7, r6
		if (slm_util_cmd_casecmp(at_cmd, m_mqtt_at_list[i].string)) {
   10f64:	4628      	mov	r0, r5
   10f66:	6871      	ldr	r1, [r6, #4]
   10f68:	f7fc fef2 	bl	dd50 <slm_util_cmd_casecmp>
   10f6c:	b1f0      	cbz	r0, 10fac <slm_at_mqtt_parse+0x54>
			ret = at_parser_params_from_str(at_cmd, NULL,
   10f6e:	2100      	movs	r1, #0
   10f70:	4628      	mov	r0, r5
   10f72:	4a13      	ldr	r2, [pc, #76]	; (10fc0 <slm_at_mqtt_parse+0x68>)
   10f74:	f014 ff5e 	bl	25e34 <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   10f78:	4601      	mov	r1, r0
   10f7a:	b168      	cbz	r0, 10f98 <slm_at_mqtt_parse+0x40>
   10f7c:	4b11      	ldr	r3, [pc, #68]	; (10fc4 <slm_at_mqtt_parse+0x6c>)
   10f7e:	4a12      	ldr	r2, [pc, #72]	; (10fc8 <slm_at_mqtt_parse+0x70>)
				LOG_ERR("Failed to parse AT command %d", ret);
   10f80:	4812      	ldr	r0, [pc, #72]	; (10fcc <slm_at_mqtt_parse+0x74>)
   10f82:	1ad2      	subs	r2, r2, r3
   10f84:	08d2      	lsrs	r2, r2, #3
   10f86:	0192      	lsls	r2, r2, #6
   10f88:	f042 0201 	orr.w	r2, r2, #1
   10f8c:	f012 fc12 	bl	237b4 <log_1>
				return -EINVAL;
   10f90:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
   10f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			type = at_parser_cmd_type_get(at_cmd);
   10f98:	4628      	mov	r0, r5
   10f9a:	f014 ff4e 	bl	25e3a <at_parser_cmd_type_get>
			ret = m_mqtt_at_list[i].handler(type);
   10f9e:	230c      	movs	r3, #12
   10fa0:	fb03 7404 	mla	r4, r3, r4, r7
   10fa4:	68a3      	ldr	r3, [r4, #8]
}
   10fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = m_mqtt_at_list[i].handler(type);
   10faa:	4718      	bx	r3
	for (int i = 0; i < AT_MQTT_MAX; i++) {
   10fac:	3401      	adds	r4, #1
   10fae:	2c04      	cmp	r4, #4
   10fb0:	f106 060c 	add.w	r6, r6, #12
   10fb4:	d1d6      	bne.n	10f64 <slm_at_mqtt_parse+0xc>
	int ret = -ENOTSUP;
   10fb6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10fba:	e7eb      	b.n	10f94 <slm_at_mqtt_parse+0x3c>
   10fbc:	00027df0 	.word	0x00027df0
   10fc0:	200213d0 	.word	0x200213d0
   10fc4:	00027b20 	.word	0x00027b20
   10fc8:	00027ba0 	.word	0x00027ba0
   10fcc:	00028a38 	.word	0x00028a38

00010fd0 <slm_at_mqtt_clac>:

/**@brief API to list MQTT AT commands
 */
void slm_at_mqtt_clac(void)
{
   10fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_MQTT_MAX; i++) {
   10fd2:	2400      	movs	r4, #0
   10fd4:	4d0c      	ldr	r5, [pc, #48]	; (11008 <slm_at_mqtt_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", m_mqtt_at_list[i].string);
   10fd6:	4f0d      	ldr	r7, [pc, #52]	; (1100c <slm_at_mqtt_clac+0x3c>)
   10fd8:	4e0d      	ldr	r6, [pc, #52]	; (11010 <slm_at_mqtt_clac+0x40>)
   10fda:	686b      	ldr	r3, [r5, #4]
   10fdc:	f640 228c 	movw	r2, #2700	; 0xa8c
   10fe0:	2100      	movs	r1, #0
   10fe2:	9300      	str	r3, [sp, #0]
   10fe4:	4630      	mov	r0, r6
   10fe6:	463b      	mov	r3, r7
   10fe8:	f015 fe64 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   10fec:	4630      	mov	r0, r6
   10fee:	f7fb ff3f 	bl	ce70 <strlen>
	for (int i = 0; i < AT_MQTT_MAX; i++) {
   10ff2:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   10ff4:	4601      	mov	r1, r0
   10ff6:	4630      	mov	r0, r6
   10ff8:	f7fc fff8 	bl	dfec <rsp_send>
	for (int i = 0; i < AT_MQTT_MAX; i++) {
   10ffc:	2c04      	cmp	r4, #4
   10ffe:	f105 050c 	add.w	r5, r5, #12
   11002:	d1ea      	bne.n	10fda <slm_at_mqtt_clac+0xa>
	}
}
   11004:	b003      	add	sp, #12
   11006:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11008:	00027df0 	.word	0x00027df0
   1100c:	00028bb2 	.word	0x00028bb2
   11010:	20026ea6 	.word	0x20026ea6

00011014 <slm_at_mqtt_uninit>:
	return 0;
}

int slm_at_mqtt_uninit(void)
{
	client.broker = NULL;
   11014:	2000      	movs	r0, #0
	fds.fd = INVALID_FDS;
   11016:	f04f 32ff 	mov.w	r2, #4294967295
	client.broker = NULL;
   1101a:	4b02      	ldr	r3, [pc, #8]	; (11024 <slm_at_mqtt_uninit+0x10>)
   1101c:	6518      	str	r0, [r3, #80]	; 0x50
	fds.fd = INVALID_FDS;
   1101e:	4b02      	ldr	r3, [pc, #8]	; (11028 <slm_at_mqtt_uninit+0x14>)
   11020:	601a      	str	r2, [r3, #0]

	return 0;
}
   11022:	4770      	bx	lr
   11024:	200216a0 	.word	0x200216a0
   11028:	200200a0 	.word	0x200200a0

0001102c <handle_at_mqtt_connect>:
	size_t cid_sz = MQTT_MAX_CID_LEN;
   1102c:	2280      	movs	r2, #128	; 0x80
   1102e:	2340      	movs	r3, #64	; 0x40
{
   11030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (cmd_type) {
   11034:	2802      	cmp	r0, #2
{
   11036:	b0ac      	sub	sp, #176	; 0xb0
   11038:	4604      	mov	r4, r0
	size_t cid_sz = MQTT_MAX_CID_LEN;
   1103a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	switch (cmd_type) {
   1103e:	f000 8141 	beq.w	112c4 <handle_at_mqtt_connect+0x298>
   11042:	2803      	cmp	r0, #3
   11044:	f000 8169 	beq.w	1131a <handle_at_mqtt_connect+0x2ee>
   11048:	2801      	cmp	r0, #1
   1104a:	d104      	bne.n	11056 <handle_at_mqtt_connect+0x2a>
		if (at_params_valid_count_get(&at_param_list) <= 1) {
   1104c:	48b8      	ldr	r0, [pc, #736]	; (11330 <handle_at_mqtt_connect+0x304>)
   1104e:	f015 f839 	bl	260c4 <at_params_valid_count_get>
   11052:	2801      	cmp	r0, #1
   11054:	d802      	bhi.n	1105c <handle_at_mqtt_connect+0x30>
	switch (cmd_type) {
   11056:	f06f 0415 	mvn.w	r4, #21
   1105a:	e10a      	b.n	11272 <handle_at_mqtt_connect+0x246>
		err = at_params_short_get(&at_param_list, 1, &op);
   1105c:	4621      	mov	r1, r4
   1105e:	48b4      	ldr	r0, [pc, #720]	; (11330 <handle_at_mqtt_connect+0x304>)
   11060:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   11064:	f014 ffe6 	bl	26034 <at_params_short_get>
		if (err < 0) {
   11068:	1e04      	subs	r4, r0, #0
   1106a:	f2c0 8102 	blt.w	11272 <handle_at_mqtt_connect+0x246>
		if (op == AT_MQTTCON_CONNECT) {
   1106e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   11072:	2b01      	cmp	r3, #1
   11074:	f040 8101 	bne.w	1127a <handle_at_mqtt_connect+0x24e>
			if (at_params_valid_count_get(&at_param_list) <= 4) {
   11078:	48ad      	ldr	r0, [pc, #692]	; (11330 <handle_at_mqtt_connect+0x304>)
   1107a:	f015 f823 	bl	260c4 <at_params_valid_count_get>
   1107e:	2804      	cmp	r0, #4
   11080:	d9e9      	bls.n	11056 <handle_at_mqtt_connect+0x2a>
			if (ctx.connected) {
   11082:	4eac      	ldr	r6, [pc, #688]	; (11334 <handle_at_mqtt_connect+0x308>)
   11084:	7837      	ldrb	r7, [r6, #0]
   11086:	2f00      	cmp	r7, #0
   11088:	f040 814c 	bne.w	11324 <handle_at_mqtt_connect+0x2f8>
			memset(&ctx, 0, sizeof(ctx));
   1108c:	22cc      	movs	r2, #204	; 0xcc
   1108e:	4639      	mov	r1, r7
   11090:	4630      	mov	r0, r6
   11092:	f015 fcc5 	bl	26a20 <memset>
			err = at_params_string_get(&at_param_list, 2,
   11096:	2102      	movs	r1, #2
   11098:	48a5      	ldr	r0, [pc, #660]	; (11330 <handle_at_mqtt_connect+0x304>)
   1109a:	ab0a      	add	r3, sp, #40	; 0x28
   1109c:	1cb2      	adds	r2, r6, #2
   1109e:	f014 ffee 	bl	2607e <at_params_string_get>
			if (err < 0) {
   110a2:	1e04      	subs	r4, r0, #0
   110a4:	f106 0502 	add.w	r5, r6, #2
   110a8:	f2c0 80e3 	blt.w	11272 <handle_at_mqtt_connect+0x246>
			ctx.cid[cid_sz] = '\0';
   110ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			err = at_params_string_get(&at_param_list, 3,
   110ae:	2103      	movs	r1, #3
			ctx.cid[cid_sz] = '\0';
   110b0:	4433      	add	r3, r6
   110b2:	709f      	strb	r7, [r3, #2]
			err = at_params_string_get(&at_param_list, 3,
   110b4:	489e      	ldr	r0, [pc, #632]	; (11330 <handle_at_mqtt_connect+0x304>)
   110b6:	ab09      	add	r3, sp, #36	; 0x24
   110b8:	f106 0243 	add.w	r2, r6, #67	; 0x43
   110bc:	f014 ffdf 	bl	2607e <at_params_string_get>
			if (err < 0) {
   110c0:	1e04      	subs	r4, r0, #0
   110c2:	f106 0843 	add.w	r8, r6, #67	; 0x43
   110c6:	f2c0 80d4 	blt.w	11272 <handle_at_mqtt_connect+0x246>
			ctx.url[url_sz] = '\0';
   110ca:	2200      	movs	r2, #0
   110cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
			err = at_params_int_get(&at_param_list, 4, &ctx.port);
   110ce:	2104      	movs	r1, #4
			ctx.url[url_sz] = '\0';
   110d0:	4433      	add	r3, r6
   110d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			err = at_params_int_get(&at_param_list, 4, &ctx.port);
   110d6:	4896      	ldr	r0, [pc, #600]	; (11330 <handle_at_mqtt_connect+0x304>)
   110d8:	f105 02c2 	add.w	r2, r5, #194	; 0xc2
   110dc:	f014 ffbc 	bl	26058 <at_params_int_get>
			if (err < 0) {
   110e0:	1e04      	subs	r4, r0, #0
   110e2:	f2c0 80c6 	blt.w	11272 <handle_at_mqtt_connect+0x246>
			if (at_params_valid_count_get(&at_param_list) == 6) {
   110e6:	4892      	ldr	r0, [pc, #584]	; (11330 <handle_at_mqtt_connect+0x304>)
   110e8:	f014 ffec 	bl	260c4 <at_params_valid_count_get>
   110ec:	2806      	cmp	r0, #6
   110ee:	d10a      	bne.n	11106 <handle_at_mqtt_connect+0xda>
				err = at_params_int_get(&at_param_list, 5,
   110f0:	2105      	movs	r1, #5
   110f2:	488f      	ldr	r0, [pc, #572]	; (11330 <handle_at_mqtt_connect+0x304>)
   110f4:	f105 02c6 	add.w	r2, r5, #198	; 0xc6
   110f8:	f014 ffae 	bl	26058 <at_params_int_get>
				if (err < 0) {
   110fc:	1e04      	subs	r4, r0, #0
   110fe:	f2c0 80b8 	blt.w	11272 <handle_at_mqtt_connect+0x246>
				ctx.sec_transport = true;
   11102:	2301      	movs	r3, #1
   11104:	7073      	strb	r3, [r6, #1]
	if (ctx.connected) {
   11106:	7831      	ldrb	r1, [r6, #0]
   11108:	9107      	str	r1, [sp, #28]
   1110a:	2900      	cmp	r1, #0
   1110c:	f040 810d 	bne.w	1132a <handle_at_mqtt_connect+0x2fe>
	mqtt_client_init(&client);
   11110:	4889      	ldr	r0, [pc, #548]	; (11338 <handle_at_mqtt_connect+0x30c>)
   11112:	f013 fe1c 	bl	24d4e <mqtt_client_init>
	struct addrinfo hints = {
   11116:	2250      	movs	r2, #80	; 0x50
   11118:	9907      	ldr	r1, [sp, #28]
   1111a:	a818      	add	r0, sp, #96	; 0x60
   1111c:	f015 fc80 	bl	26a20 <memset>
   11120:	2301      	movs	r3, #1
	return zsock_getaddrinfo(host, service, hints, res);
   11122:	9907      	ldr	r1, [sp, #28]
   11124:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   11128:	aa18      	add	r2, sp, #96	; 0x60
   1112a:	4884      	ldr	r0, [pc, #528]	; (1133c <handle_at_mqtt_connect+0x310>)
   1112c:	ab0b      	add	r3, sp, #44	; 0x2c
   1112e:	f012 fe7d 	bl	23e2c <zsock_getaddrinfo>
	if (err) {
   11132:	4f83      	ldr	r7, [pc, #524]	; (11340 <handle_at_mqtt_connect+0x314>)
   11134:	4a83      	ldr	r2, [pc, #524]	; (11344 <handle_at_mqtt_connect+0x318>)
   11136:	4601      	mov	r1, r0
   11138:	1abf      	subs	r7, r7, r2
   1113a:	08ff      	lsrs	r7, r7, #3
   1113c:	2800      	cmp	r0, #0
   1113e:	d03a      	beq.n	111b6 <handle_at_mqtt_connect+0x18a>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
   11140:	01ba      	lsls	r2, r7, #6
   11142:	4881      	ldr	r0, [pc, #516]	; (11348 <handle_at_mqtt_connect+0x31c>)
   11144:	f042 0201 	orr.w	r2, r2, #1
   11148:	f012 fb34 	bl	237b4 <log_1>
	client.broker = &broker;
   1114c:	4c7a      	ldr	r4, [pc, #488]	; (11338 <handle_at_mqtt_connect+0x30c>)
   1114e:	4b7f      	ldr	r3, [pc, #508]	; (1134c <handle_at_mqtt_connect+0x320>)
	client.client_id.size = strlen(ctx.cid);
   11150:	487f      	ldr	r0, [pc, #508]	; (11350 <handle_at_mqtt_connect+0x324>)
	client.broker = &broker;
   11152:	6523      	str	r3, [r4, #80]	; 0x50
	client.evt_cb = mqtt_evt_handler;
   11154:	4b7f      	ldr	r3, [pc, #508]	; (11354 <handle_at_mqtt_connect+0x328>)
	client.client_id.utf8 = ctx.cid;
   11156:	64a5      	str	r5, [r4, #72]	; 0x48
	client.evt_cb = mqtt_evt_handler;
   11158:	6663      	str	r3, [r4, #100]	; 0x64
	client.client_id.size = strlen(ctx.cid);
   1115a:	f7fb fe89 	bl	ce70 <strlen>
	client.protocol_version = MQTT_VERSION_3_1_1;
   1115e:	2204      	movs	r2, #4
   11160:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	client.rx_buf = rx_buffer;
   11164:	4a7c      	ldr	r2, [pc, #496]	; (11358 <handle_at_mqtt_connect+0x32c>)
	client.password = NULL;
   11166:	2300      	movs	r3, #0
	client.rx_buf = rx_buffer;
   11168:	66a2      	str	r2, [r4, #104]	; 0x68
	client.rx_buf_size = sizeof(rx_buffer);
   1116a:	f44f 7210 	mov.w	r2, #576	; 0x240
	client.tx_buf = tx_buffer;
   1116e:	497b      	ldr	r1, [pc, #492]	; (1135c <handle_at_mqtt_connect+0x330>)
	client.rx_buf_size = sizeof(rx_buffer);
   11170:	66e2      	str	r2, [r4, #108]	; 0x6c
	client.tx_buf_size = sizeof(tx_buffer);
   11172:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
	if (ctx.sec_transport == true) {
   11176:	7872      	ldrb	r2, [r6, #1]
   11178:	4625      	mov	r5, r4
	client.user_name = NULL;
   1117a:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
	client.client_id.size = strlen(ctx.cid);
   1117e:	64e0      	str	r0, [r4, #76]	; 0x4c
	if (ctx.sec_transport == true) {
   11180:	2a00      	cmp	r2, #0
   11182:	d06a      	beq.n	1125a <handle_at_mqtt_connect+0x22e>
		tls_config->peer_verify = TLS_PEER_VERIFY_REQUIRED;
   11184:	2202      	movs	r2, #2
		tls_config->cipher_count = 0;
   11186:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
		tls_config->sec_tag_count = 1;
   1118a:	2301      	movs	r3, #1
		tls_config->peer_verify = TLS_PEER_VERIFY_REQUIRED;
   1118c:	62e2      	str	r2, [r4, #44]	; 0x2c
		tls_config->sec_tag_list = (int *)&ctx.sec_tag;
   1118e:	4a74      	ldr	r2, [pc, #464]	; (11360 <handle_at_mqtt_connect+0x334>)
		tls_config->sec_tag_count = 1;
   11190:	63a3      	str	r3, [r4, #56]	; 0x38
		tls_config->hostname = ctx.url;
   11192:	e9c4 280f 	strd	r2, r8, [r4, #60]	; 0x3c
		client.transport.type = MQTT_TRANSPORT_SECURE;
   11196:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	err = mqtt_connect(&client);
   1119a:	4867      	ldr	r0, [pc, #412]	; (11338 <handle_at_mqtt_connect+0x30c>)
   1119c:	f013 fdf0 	bl	24d80 <mqtt_connect>
	if (err != 0) {
   111a0:	4604      	mov	r4, r0
   111a2:	2800      	cmp	r0, #0
   111a4:	d05c      	beq.n	11260 <handle_at_mqtt_connect+0x234>
		LOG_ERR("ERROR: mqtt_connect %d", err);
   111a6:	4601      	mov	r1, r0
   111a8:	01ba      	lsls	r2, r7, #6
   111aa:	486e      	ldr	r0, [pc, #440]	; (11364 <handle_at_mqtt_connect+0x338>)
   111ac:	f042 0201 	orr.w	r2, r2, #1
				LOG_ERR("Fail to disconnect. Error: %d", err);
   111b0:	f012 fb00 	bl	237b4 <log_1>
   111b4:	e05d      	b.n	11272 <handle_at_mqtt_connect+0x246>
			LOG_ERR("error: ai_addrlen = %u should be %u or %u\n",
   111b6:	ea4f 1987 	mov.w	r9, r7, lsl #6
	addr = result;
   111ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
			LOG_ERR("error: ai_addrlen = %u should be %u or %u\n",
   111bc:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 11394 <handle_at_mqtt_connect+0x368>
   111c0:	f049 0901 	orr.w	r9, r9, #1
	while (addr != NULL) {
   111c4:	b1dc      	cbz	r4, 111fe <handle_at_mqtt_connect+0x1d2>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   111c6:	6961      	ldr	r1, [r4, #20]
   111c8:	2908      	cmp	r1, #8
   111ca:	d11c      	bne.n	11206 <handle_at_mqtt_connect+0x1da>
			broker4->sin_family = AF_INET;
   111cc:	2001      	movs	r0, #1
				->sin_addr.s_addr;
   111ce:	69a3      	ldr	r3, [r4, #24]
			broker4->sin_addr.s_addr =
   111d0:	495e      	ldr	r1, [pc, #376]	; (1134c <handle_at_mqtt_connect+0x320>)
				->sin_addr.s_addr;
   111d2:	685b      	ldr	r3, [r3, #4]
			broker4->sin_port = htons(ctx.port);
   111d4:	f8d6 20c4 	ldr.w	r2, [r6, #196]	; 0xc4
			broker4->sin_addr.s_addr =
   111d8:	604b      	str	r3, [r1, #4]
			broker4->sin_port = htons(ctx.port);
   111da:	f3c2 2307 	ubfx	r3, r2, #8, #8
   111de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			broker4->sin_family = AF_INET;
   111e2:	8008      	strh	r0, [r1, #0]
			broker4->sin_port = htons(ctx.port);
   111e4:	804b      	strh	r3, [r1, #2]
   111e6:	232e      	movs	r3, #46	; 0x2e
   111e8:	aa0c      	add	r2, sp, #48	; 0x30
   111ea:	3104      	adds	r1, #4
   111ec:	f003 fc34 	bl	14a58 <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address %s\n", addr_str);
   111f0:	01ba      	lsls	r2, r7, #6
   111f2:	485d      	ldr	r0, [pc, #372]	; (11368 <handle_at_mqtt_connect+0x33c>)
   111f4:	f042 0203 	orr.w	r2, r2, #3
   111f8:	a90c      	add	r1, sp, #48	; 0x30
			LOG_INF("IPv6 Address %s\n", addr_str);
   111fa:	f012 fadb 	bl	237b4 <log_1>
	zsock_freeaddrinfo(ai);
   111fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11200:	f012 fe16 	bl	23e30 <zsock_freeaddrinfo>
   11204:	e7a2      	b.n	1114c <handle_at_mqtt_connect+0x120>
		} else if (addr->ai_addrlen == sizeof(struct sockaddr_in6)) {
   11206:	2918      	cmp	r1, #24
   11208:	d11e      	bne.n	11248 <handle_at_mqtt_connect+0x21c>
			memcpy(broker6->sin6_addr.s6_addr,
   1120a:	69a3      	ldr	r3, [r4, #24]
   1120c:	4957      	ldr	r1, [pc, #348]	; (1136c <handle_at_mqtt_connect+0x340>)
   1120e:	1d1a      	adds	r2, r3, #4
   11210:	3314      	adds	r3, #20
   11212:	f852 0b04 	ldr.w	r0, [r2], #4
   11216:	429a      	cmp	r2, r3
   11218:	f841 0b04 	str.w	r0, [r1], #4
   1121c:	d1f9      	bne.n	11212 <handle_at_mqtt_connect+0x1e6>
			broker6->sin6_family = AF_INET6;
   1121e:	2002      	movs	r0, #2
			broker6->sin6_port = htons(ctx.port);
   11220:	f8d6 20c4 	ldr.w	r2, [r6, #196]	; 0xc4
			broker6->sin6_family = AF_INET6;
   11224:	4949      	ldr	r1, [pc, #292]	; (1134c <handle_at_mqtt_connect+0x320>)
			broker6->sin6_port = htons(ctx.port);
   11226:	f3c2 2307 	ubfx	r3, r2, #8, #8
   1122a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			broker6->sin6_family = AF_INET6;
   1122e:	8008      	strh	r0, [r1, #0]
			broker6->sin6_port = htons(ctx.port);
   11230:	804b      	strh	r3, [r1, #2]
   11232:	232e      	movs	r3, #46	; 0x2e
   11234:	aa0c      	add	r2, sp, #48	; 0x30
   11236:	3104      	adds	r1, #4
   11238:	f003 fc0e 	bl	14a58 <z_impl_net_addr_ntop>
			LOG_INF("IPv6 Address %s\n", addr_str);
   1123c:	01ba      	lsls	r2, r7, #6
   1123e:	484c      	ldr	r0, [pc, #304]	; (11370 <handle_at_mqtt_connect+0x344>)
   11240:	f042 0203 	orr.w	r2, r2, #3
   11244:	a90c      	add	r1, sp, #48	; 0x30
   11246:	e7d8      	b.n	111fa <handle_at_mqtt_connect+0x1ce>
			LOG_ERR("error: ai_addrlen = %u should be %u or %u\n",
   11248:	2318      	movs	r3, #24
   1124a:	2208      	movs	r2, #8
   1124c:	4650      	mov	r0, sl
   1124e:	f8ad 9000 	strh.w	r9, [sp]
   11252:	f012 fadf 	bl	23814 <log_3>
		addr = addr->ai_next;
   11256:	6824      	ldr	r4, [r4, #0]
   11258:	e7b4      	b.n	111c4 <handle_at_mqtt_connect+0x198>
		client.transport.type = MQTT_TRANSPORT_NON_SECURE;
   1125a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
   1125e:	e79c      	b.n	1119a <handle_at_mqtt_connect+0x16e>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   11260:	4a44      	ldr	r2, [pc, #272]	; (11374 <handle_at_mqtt_connect+0x348>)
   11262:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11264:	6013      	str	r3, [r2, #0]
	fds.events = POLLIN;
   11266:	2301      	movs	r3, #1
   11268:	8093      	strh	r3, [r2, #4]
	ctx.connected = true;
   1126a:	7033      	strb	r3, [r6, #0]
	z_impl_k_sem_give(sem);
   1126c:	4842      	ldr	r0, [pc, #264]	; (11378 <handle_at_mqtt_connect+0x34c>)
   1126e:	f00f ffdb 	bl	21228 <z_impl_k_sem_give>
}
   11272:	4620      	mov	r0, r4
   11274:	b02c      	add	sp, #176	; 0xb0
   11276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (op == AT_MQTTCON_DISCONNECT) {
   1127a:	2b00      	cmp	r3, #0
   1127c:	d1f9      	bne.n	11272 <handle_at_mqtt_connect+0x246>
			if (!ctx.connected) {
   1127e:	4b2d      	ldr	r3, [pc, #180]	; (11334 <handle_at_mqtt_connect+0x308>)
   11280:	781b      	ldrb	r3, [r3, #0]
   11282:	2b00      	cmp	r3, #0
   11284:	f000 8088 	beq.w	11398 <handle_at_mqtt_connect+0x36c>
	err = mqtt_disconnect(&client);
   11288:	482b      	ldr	r0, [pc, #172]	; (11338 <handle_at_mqtt_connect+0x30c>)
   1128a:	f013 fe50 	bl	24f2e <mqtt_disconnect>
	if (err) {
   1128e:	4604      	mov	r4, r0
   11290:	b150      	cbz	r0, 112a8 <handle_at_mqtt_connect+0x27c>
   11292:	4a2b      	ldr	r2, [pc, #172]	; (11340 <handle_at_mqtt_connect+0x314>)
   11294:	4b2b      	ldr	r3, [pc, #172]	; (11344 <handle_at_mqtt_connect+0x318>)
		LOG_ERR("ERROR: mqtt_disconnect %d", err);
   11296:	4601      	mov	r1, r0
   11298:	1ad2      	subs	r2, r2, r3
   1129a:	08d2      	lsrs	r2, r2, #3
   1129c:	0192      	lsls	r2, r2, #6
   1129e:	4837      	ldr	r0, [pc, #220]	; (1137c <handle_at_mqtt_connect+0x350>)
   112a0:	f042 0201 	orr.w	r2, r2, #1
   112a4:	f012 fa86 	bl	237b4 <log_1>
	slm_at_mqtt_uninit();
   112a8:	f7ff feb4 	bl	11014 <slm_at_mqtt_uninit>
			if (err) {
   112ac:	2c00      	cmp	r4, #0
   112ae:	d0e0      	beq.n	11272 <handle_at_mqtt_connect+0x246>
   112b0:	4a23      	ldr	r2, [pc, #140]	; (11340 <handle_at_mqtt_connect+0x314>)
   112b2:	4b24      	ldr	r3, [pc, #144]	; (11344 <handle_at_mqtt_connect+0x318>)
				LOG_ERR("Fail to disconnect. Error: %d", err);
   112b4:	4621      	mov	r1, r4
   112b6:	1ad2      	subs	r2, r2, r3
   112b8:	08d2      	lsrs	r2, r2, #3
   112ba:	0192      	lsls	r2, r2, #6
   112bc:	4830      	ldr	r0, [pc, #192]	; (11380 <handle_at_mqtt_connect+0x354>)
   112be:	f042 0201 	orr.w	r2, r2, #1
   112c2:	e775      	b.n	111b0 <handle_at_mqtt_connect+0x184>
		if (ctx.sec_transport) {
   112c4:	4b1b      	ldr	r3, [pc, #108]	; (11334 <handle_at_mqtt_connect+0x308>)
   112c6:	7859      	ldrb	r1, [r3, #1]
   112c8:	781a      	ldrb	r2, [r3, #0]
   112ca:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
   112ce:	1c98      	adds	r0, r3, #2
   112d0:	f103 0443 	add.w	r4, r3, #67	; 0x43
   112d4:	b1b1      	cbz	r1, 11304 <handle_at_mqtt_connect+0x2d8>
			sprintf(rsp_buf,
   112d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   112da:	2100      	movs	r1, #0
   112dc:	e9cd 5303 	strd	r5, r3, [sp, #12]
   112e0:	e9cd 0401 	strd	r0, r4, [sp, #4]
   112e4:	9200      	str	r2, [sp, #0]
   112e6:	4b27      	ldr	r3, [pc, #156]	; (11384 <handle_at_mqtt_connect+0x358>)
   112e8:	f640 228c 	movw	r2, #2700	; 0xa8c
   112ec:	4826      	ldr	r0, [pc, #152]	; (11388 <handle_at_mqtt_connect+0x35c>)
   112ee:	f015 fce1 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   112f2:	4825      	ldr	r0, [pc, #148]	; (11388 <handle_at_mqtt_connect+0x35c>)
   112f4:	f7fb fdbc 	bl	ce70 <strlen>
   112f8:	4601      	mov	r1, r0
   112fa:	4823      	ldr	r0, [pc, #140]	; (11388 <handle_at_mqtt_connect+0x35c>)
   112fc:	f7fc fe76 	bl	dfec <rsp_send>
		err = 0;
   11300:	2400      	movs	r4, #0
		break;
   11302:	e7b6      	b.n	11272 <handle_at_mqtt_connect+0x246>
			sprintf(rsp_buf, "#XMQTTCON: %d,\"%s\",\"%s\",%d\r\n",
   11304:	e9cd 2000 	strd	r2, r0, [sp]
   11308:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1130c:	f640 228c 	movw	r2, #2700	; 0xa8c
   11310:	4b1e      	ldr	r3, [pc, #120]	; (1138c <handle_at_mqtt_connect+0x360>)
   11312:	481d      	ldr	r0, [pc, #116]	; (11388 <handle_at_mqtt_connect+0x35c>)
   11314:	f015 fcce 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   11318:	e7eb      	b.n	112f2 <handle_at_mqtt_connect+0x2c6>
		sprintf(rsp_buf, "#XMQTTCON: (0, 1), <cid>, <url>, <port>,"
   1131a:	491d      	ldr	r1, [pc, #116]	; (11390 <handle_at_mqtt_connect+0x364>)
   1131c:	481a      	ldr	r0, [pc, #104]	; (11388 <handle_at_mqtt_connect+0x35c>)
   1131e:	f015 fcf0 	bl	26d02 <strcpy>
   11322:	e7e6      	b.n	112f2 <handle_at_mqtt_connect+0x2c6>
				return -EISCONN;
   11324:	f06f 047e 	mvn.w	r4, #126	; 0x7e
   11328:	e7a3      	b.n	11272 <handle_at_mqtt_connect+0x246>
		return -EINPROGRESS;
   1132a:	f06f 0476 	mvn.w	r4, #118	; 0x76
   1132e:	e7a0      	b.n	11272 <handle_at_mqtt_connect+0x246>
   11330:	200213d0 	.word	0x200213d0
   11334:	20021720 	.word	0x20021720
   11338:	200216a0 	.word	0x200216a0
   1133c:	20021763 	.word	0x20021763
   11340:	00027ba0 	.word	0x00027ba0
   11344:	00027b20 	.word	0x00027b20
   11348:	00028bb7 	.word	0x00028bb7
   1134c:	20026e64 	.word	0x20026e64
   11350:	20021722 	.word	0x20021722
   11354:	00010a01 	.word	0x00010a01
   11358:	20029097 	.word	0x20029097
   1135c:	200292d7 	.word	0x200292d7
   11360:	200217e8 	.word	0x200217e8
   11364:	00029600 	.word	0x00029600
   11368:	000295b3 	.word	0x000295b3
   1136c:	20026e68 	.word	0x20026e68
   11370:	000295c4 	.word	0x000295c4
   11374:	200200a0 	.word	0x200200a0
   11378:	20020720 	.word	0x20020720
   1137c:	00029617 	.word	0x00029617
   11380:	00029631 	.word	0x00029631
   11384:	0002964f 	.word	0x0002964f
   11388:	20026ea6 	.word	0x20026ea6
   1138c:	0002966f 	.word	0x0002966f
   11390:	0002968c 	.word	0x0002968c
   11394:	000295d5 	.word	0x000295d5
				return -ENOTCONN;
   11398:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1139c:	e769      	b.n	11272 <handle_at_mqtt_connect+0x246>
   1139e:	bf00      	nop

000113a0 <do_ftp_put>:
/* AT#XFTP="put",<file>[<datatype>,<data>] */
static int do_ftp_put(void)
{
	int ret;
	char file[FTP_MAX_FILEPATH];
	int sz_file = FTP_MAX_FILEPATH;
   113a0:	2380      	movs	r3, #128	; 0x80
{
   113a2:	b5b0      	push	{r4, r5, r7, lr}
   113a4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
	int param_count;

	/* Parse AT command */
	param_count = at_params_valid_count_get(&at_param_list);
   113a8:	482b      	ldr	r0, [pc, #172]	; (11458 <do_ftp_put+0xb8>)
{
   113aa:	af00      	add	r7, sp, #0
	int sz_file = FTP_MAX_FILEPATH;
   113ac:	60bb      	str	r3, [r7, #8]
	param_count = at_params_valid_count_get(&at_param_list);
   113ae:	f014 fe89 	bl	260c4 <at_params_valid_count_get>
	if (param_count < 3) {
   113b2:	2802      	cmp	r0, #2
	param_count = at_params_valid_count_get(&at_param_list);
   113b4:	4605      	mov	r5, r0
	if (param_count < 3) {
   113b6:	dd4c      	ble.n	11452 <do_ftp_put+0xb2>
		return -EINVAL;
	}
	ret = at_params_string_get(&at_param_list, 2, file, &sz_file);
   113b8:	f107 0410 	add.w	r4, r7, #16
   113bc:	4622      	mov	r2, r4
   113be:	2102      	movs	r1, #2
   113c0:	4825      	ldr	r0, [pc, #148]	; (11458 <do_ftp_put+0xb8>)
   113c2:	f107 0308 	add.w	r3, r7, #8
   113c6:	f014 fe5a 	bl	2607e <at_params_string_get>
	if (ret) {
   113ca:	bba0      	cbnz	r0, 11436 <do_ftp_put+0x96>
		return ret;
	}
	file[sz_file] = '\0';
   113cc:	68bb      	ldr	r3, [r7, #8]

	if (param_count > 4) {
   113ce:	2d04      	cmp	r5, #4
	file[sz_file] = '\0';
   113d0:	54e0      	strb	r0, [r4, r3]
	if (param_count > 4) {
   113d2:	dd3b      	ble.n	1144c <do_ftp_put+0xac>
		u16_t type;
		char data[NET_IPV4_MTU];
		int size;

		ret = at_params_short_get(&at_param_list, 3, &type);
   113d4:	2103      	movs	r1, #3
   113d6:	4820      	ldr	r0, [pc, #128]	; (11458 <do_ftp_put+0xb8>)
   113d8:	1dba      	adds	r2, r7, #6
   113da:	f014 fe2b 	bl	26034 <at_params_short_get>
		if (ret) {
   113de:	bb50      	cbnz	r0, 11436 <do_ftp_put+0x96>
			return ret;
		}
		size = NET_IPV4_MTU;
   113e0:	f44f 7310 	mov.w	r3, #576	; 0x240
		ret = at_params_string_get(&at_param_list, 4, data, &size);
   113e4:	2104      	movs	r1, #4
		size = NET_IPV4_MTU;
   113e6:	60fb      	str	r3, [r7, #12]
		ret = at_params_string_get(&at_param_list, 4, data, &size);
   113e8:	481b      	ldr	r0, [pc, #108]	; (11458 <do_ftp_put+0xb8>)
   113ea:	f107 030c 	add.w	r3, r7, #12
   113ee:	f107 0290 	add.w	r2, r7, #144	; 0x90
   113f2:	f014 fe44 	bl	2607e <at_params_string_get>
		if (ret) {
   113f6:	b9f0      	cbnz	r0, 11436 <do_ftp_put+0x96>
			return ret;
		}
		if (type == DATATYPE_HEXADECIMAL) {
   113f8:	68fb      	ldr	r3, [r7, #12]
   113fa:	88fa      	ldrh	r2, [r7, #6]
   113fc:	b299      	uxth	r1, r3
   113fe:	b9f2      	cbnz	r2, 1143e <do_ftp_put+0x9e>
			u8_t data_hex[size / 2];
   11400:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   11404:	105b      	asrs	r3, r3, #1
   11406:	1dda      	adds	r2, r3, #7
   11408:	f022 0207 	bic.w	r2, r2, #7
		if (type == DATATYPE_HEXADECIMAL) {
   1140c:	466d      	mov	r5, sp
			u8_t data_hex[size / 2];
   1140e:	ebad 0d02 	sub.w	sp, sp, r2

			ret = slm_util_atoh(data, size, data_hex, size / 2);
   11412:	466a      	mov	r2, sp
   11414:	b29b      	uxth	r3, r3
   11416:	f107 0090 	add.w	r0, r7, #144	; 0x90
   1141a:	f011 fe19 	bl	23050 <slm_util_atoh>
			if (ret > 0) {
   1141e:	2800      	cmp	r0, #0
   11420:	dd04      	ble.n	1142c <do_ftp_put+0x8c>
				ret = ftp_put(file, data_hex, ret);
   11422:	b282      	uxth	r2, r0
   11424:	4669      	mov	r1, sp
   11426:	4620      	mov	r0, r4
   11428:	f006 fd4c 	bl	17ec4 <ftp_put>
   1142c:	46ad      	mov	sp, r5
		}
	} else {
		ret = ftp_put(file, NULL, 0);
	}

	return (ret == FTP_CODE_226) ? 0 : -1;
   1142e:	38e2      	subs	r0, #226	; 0xe2
   11430:	bf18      	it	ne
   11432:	f04f 30ff 	movne.w	r0, #4294967295
}
   11436:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
   1143a:	46bd      	mov	sp, r7
   1143c:	bdb0      	pop	{r4, r5, r7, pc}
			ret = ftp_put(file, data, size);
   1143e:	460a      	mov	r2, r1
   11440:	f107 0190 	add.w	r1, r7, #144	; 0x90
		ret = ftp_put(file, NULL, 0);
   11444:	4620      	mov	r0, r4
   11446:	f006 fd3d 	bl	17ec4 <ftp_put>
   1144a:	e7f0      	b.n	1142e <do_ftp_put+0x8e>
   1144c:	4602      	mov	r2, r0
   1144e:	4601      	mov	r1, r0
   11450:	e7f8      	b.n	11444 <do_ftp_put+0xa4>
		return -EINVAL;
   11452:	f06f 0015 	mvn.w	r0, #21
   11456:	e7ee      	b.n	11436 <do_ftp_put+0x96>
   11458:	200213d0 	.word	0x200213d0

0001145c <do_ftp_get>:
	int sz_file = FTP_MAX_FILEPATH;
   1145c:	2380      	movs	r3, #128	; 0x80
{
   1145e:	b500      	push	{lr}
	param_count = at_params_valid_count_get(&at_param_list);
   11460:	480f      	ldr	r0, [pc, #60]	; (114a0 <do_ftp_get+0x44>)
{
   11462:	b0a3      	sub	sp, #140	; 0x8c
	int sz_file = FTP_MAX_FILEPATH;
   11464:	9301      	str	r3, [sp, #4]
	param_count = at_params_valid_count_get(&at_param_list);
   11466:	f014 fe2d 	bl	260c4 <at_params_valid_count_get>
	if (param_count < 3) {
   1146a:	2802      	cmp	r0, #2
   1146c:	dd15      	ble.n	1149a <do_ftp_get+0x3e>
	ret = at_params_string_get(&at_param_list, 2, file, &sz_file);
   1146e:	2102      	movs	r1, #2
   11470:	480b      	ldr	r0, [pc, #44]	; (114a0 <do_ftp_get+0x44>)
   11472:	ab01      	add	r3, sp, #4
   11474:	aa02      	add	r2, sp, #8
   11476:	f014 fe02 	bl	2607e <at_params_string_get>
	if (ret) {
   1147a:	b958      	cbnz	r0, 11494 <do_ftp_get+0x38>
	file[sz_file] = '\0';
   1147c:	9b01      	ldr	r3, [sp, #4]
   1147e:	aa22      	add	r2, sp, #136	; 0x88
   11480:	4413      	add	r3, r2
   11482:	f803 0c80 	strb.w	r0, [r3, #-128]
	ret = ftp_get(file);
   11486:	a802      	add	r0, sp, #8
   11488:	f006 fcbe 	bl	17e08 <ftp_get>
	return (ret == FTP_CODE_226) ? 0 : -1;
   1148c:	38e2      	subs	r0, #226	; 0xe2
   1148e:	bf18      	it	ne
   11490:	f04f 30ff 	movne.w	r0, #4294967295
}
   11494:	b023      	add	sp, #140	; 0x8c
   11496:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   1149a:	f06f 0015 	mvn.w	r0, #21
   1149e:	e7f9      	b.n	11494 <do_ftp_get+0x38>
   114a0:	200213d0 	.word	0x200213d0

000114a4 <do_ftp_delete>:
	int sz_file = 128;
   114a4:	2380      	movs	r3, #128	; 0x80
{
   114a6:	b500      	push	{lr}
	param_count = at_params_valid_count_get(&at_param_list);
   114a8:	480f      	ldr	r0, [pc, #60]	; (114e8 <do_ftp_delete+0x44>)
{
   114aa:	b0a3      	sub	sp, #140	; 0x8c
	int sz_file = 128;
   114ac:	9301      	str	r3, [sp, #4]
	param_count = at_params_valid_count_get(&at_param_list);
   114ae:	f014 fe09 	bl	260c4 <at_params_valid_count_get>
	if (param_count < 3) {
   114b2:	2802      	cmp	r0, #2
   114b4:	dd15      	ble.n	114e2 <do_ftp_delete+0x3e>
	ret = at_params_string_get(&at_param_list, 2, file, &sz_file);
   114b6:	2102      	movs	r1, #2
   114b8:	480b      	ldr	r0, [pc, #44]	; (114e8 <do_ftp_delete+0x44>)
   114ba:	ab01      	add	r3, sp, #4
   114bc:	aa02      	add	r2, sp, #8
   114be:	f014 fdde 	bl	2607e <at_params_string_get>
	if (ret) {
   114c2:	b958      	cbnz	r0, 114dc <do_ftp_delete+0x38>
	file[sz_file] = '\0';
   114c4:	9b01      	ldr	r3, [sp, #4]
   114c6:	aa22      	add	r2, sp, #136	; 0x88
   114c8:	4413      	add	r3, r2
   114ca:	f803 0c80 	strb.w	r0, [r3, #-128]
	ret = ftp_delete(file);
   114ce:	a802      	add	r0, sp, #8
   114d0:	f006 fc7a 	bl	17dc8 <ftp_delete>
	return (ret == FTP_CODE_250) ? 0 : -1;
   114d4:	38fa      	subs	r0, #250	; 0xfa
   114d6:	bf18      	it	ne
   114d8:	f04f 30ff 	movne.w	r0, #4294967295
}
   114dc:	b023      	add	sp, #140	; 0x8c
   114de:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   114e2:	f06f 0015 	mvn.w	r0, #21
   114e6:	e7f9      	b.n	114dc <do_ftp_delete+0x38>
   114e8:	200213d0 	.word	0x200213d0

000114ec <do_ftp_rename>:
	int sz_file_old = FTP_MAX_FILEPATH;
   114ec:	2380      	movs	r3, #128	; 0x80
{
   114ee:	b510      	push	{r4, lr}
	param_count = at_params_valid_count_get(&at_param_list);
   114f0:	4815      	ldr	r0, [pc, #84]	; (11548 <do_ftp_rename+0x5c>)
{
   114f2:	b0c2      	sub	sp, #264	; 0x108
	int sz_file_new = FTP_MAX_FILEPATH;
   114f4:	e9cd 3300 	strd	r3, r3, [sp]
	param_count = at_params_valid_count_get(&at_param_list);
   114f8:	f014 fde4 	bl	260c4 <at_params_valid_count_get>
	if (param_count < 4) {
   114fc:	2803      	cmp	r0, #3
   114fe:	dd1f      	ble.n	11540 <do_ftp_rename+0x54>
	ret = at_params_string_get(&at_param_list, 2, file_old, &sz_file_old);
   11500:	ac02      	add	r4, sp, #8
   11502:	466b      	mov	r3, sp
   11504:	4622      	mov	r2, r4
   11506:	2102      	movs	r1, #2
   11508:	480f      	ldr	r0, [pc, #60]	; (11548 <do_ftp_rename+0x5c>)
   1150a:	f014 fdb8 	bl	2607e <at_params_string_get>
	if (ret) {
   1150e:	b9a8      	cbnz	r0, 1153c <do_ftp_rename+0x50>
	file_old[sz_file_old] = '\0';
   11510:	9b00      	ldr	r3, [sp, #0]
	ret = at_params_string_get(&at_param_list, 3, file_new, &sz_file_new);
   11512:	2103      	movs	r1, #3
	file_old[sz_file_old] = '\0';
   11514:	54e0      	strb	r0, [r4, r3]
	ret = at_params_string_get(&at_param_list, 3, file_new, &sz_file_new);
   11516:	aa22      	add	r2, sp, #136	; 0x88
   11518:	480b      	ldr	r0, [pc, #44]	; (11548 <do_ftp_rename+0x5c>)
   1151a:	ab01      	add	r3, sp, #4
   1151c:	f014 fdaf 	bl	2607e <at_params_string_get>
	if (ret) {
   11520:	b960      	cbnz	r0, 1153c <do_ftp_rename+0x50>
	file_new[sz_file_new] = '\0';
   11522:	9b01      	ldr	r3, [sp, #4]
   11524:	aa42      	add	r2, sp, #264	; 0x108
   11526:	4413      	add	r3, r2
   11528:	f803 0c80 	strb.w	r0, [r3, #-128]
	ret = ftp_rename(file_old, file_new);
   1152c:	a922      	add	r1, sp, #136	; 0x88
   1152e:	4620      	mov	r0, r4
   11530:	f006 fc10 	bl	17d54 <ftp_rename>
	return (ret == FTP_CODE_250) ? 0 : -1;
   11534:	38fa      	subs	r0, #250	; 0xfa
   11536:	bf18      	it	ne
   11538:	f04f 30ff 	movne.w	r0, #4294967295
}
   1153c:	b042      	add	sp, #264	; 0x108
   1153e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   11540:	f06f 0015 	mvn.w	r0, #21
   11544:	e7fa      	b.n	1153c <do_ftp_rename+0x50>
   11546:	bf00      	nop
   11548:	200213d0 	.word	0x200213d0

0001154c <do_ftp_rmdir>:
	int sz_folder = FTP_MAX_FILEPATH;
   1154c:	2380      	movs	r3, #128	; 0x80
{
   1154e:	b500      	push	{lr}
	param_count = at_params_valid_count_get(&at_param_list);
   11550:	480f      	ldr	r0, [pc, #60]	; (11590 <do_ftp_rmdir+0x44>)
{
   11552:	b0a3      	sub	sp, #140	; 0x8c
	int sz_folder = FTP_MAX_FILEPATH;
   11554:	9301      	str	r3, [sp, #4]
	param_count = at_params_valid_count_get(&at_param_list);
   11556:	f014 fdb5 	bl	260c4 <at_params_valid_count_get>
	if (param_count < 3) {
   1155a:	2802      	cmp	r0, #2
   1155c:	dd15      	ble.n	1158a <do_ftp_rmdir+0x3e>
	ret = at_params_string_get(&at_param_list, 2, folder, &sz_folder);
   1155e:	2102      	movs	r1, #2
   11560:	480b      	ldr	r0, [pc, #44]	; (11590 <do_ftp_rmdir+0x44>)
   11562:	ab01      	add	r3, sp, #4
   11564:	aa02      	add	r2, sp, #8
   11566:	f014 fd8a 	bl	2607e <at_params_string_get>
	if (ret) {
   1156a:	b958      	cbnz	r0, 11584 <do_ftp_rmdir+0x38>
	folder[sz_folder] = '\0';
   1156c:	9b01      	ldr	r3, [sp, #4]
   1156e:	aa22      	add	r2, sp, #136	; 0x88
   11570:	4413      	add	r3, r2
   11572:	f803 0c80 	strb.w	r0, [r3, #-128]
	ret = ftp_rmd(folder);
   11576:	a802      	add	r0, sp, #8
   11578:	f006 fbcc 	bl	17d14 <ftp_rmd>
	return (ret == FTP_CODE_250) ? 0 : -1;
   1157c:	38fa      	subs	r0, #250	; 0xfa
   1157e:	bf18      	it	ne
   11580:	f04f 30ff 	movne.w	r0, #4294967295
}
   11584:	b023      	add	sp, #140	; 0x8c
   11586:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   1158a:	f06f 0015 	mvn.w	r0, #21
   1158e:	e7f9      	b.n	11584 <do_ftp_rmdir+0x38>
   11590:	200213d0 	.word	0x200213d0

00011594 <do_ftp_mkdir>:
	int sz_folder = FTP_MAX_FILEPATH;
   11594:	2380      	movs	r3, #128	; 0x80
{
   11596:	b500      	push	{lr}
	param_count = at_params_valid_count_get(&at_param_list);
   11598:	4810      	ldr	r0, [pc, #64]	; (115dc <do_ftp_mkdir+0x48>)
{
   1159a:	b0a3      	sub	sp, #140	; 0x8c
	int sz_folder = FTP_MAX_FILEPATH;
   1159c:	9301      	str	r3, [sp, #4]
	param_count = at_params_valid_count_get(&at_param_list);
   1159e:	f014 fd91 	bl	260c4 <at_params_valid_count_get>
	if (param_count < 3) {
   115a2:	2802      	cmp	r0, #2
   115a4:	dd17      	ble.n	115d6 <do_ftp_mkdir+0x42>
	ret = at_params_string_get(&at_param_list, 2, folder, &sz_folder);
   115a6:	2102      	movs	r1, #2
   115a8:	480c      	ldr	r0, [pc, #48]	; (115dc <do_ftp_mkdir+0x48>)
   115aa:	ab01      	add	r3, sp, #4
   115ac:	aa02      	add	r2, sp, #8
   115ae:	f014 fd66 	bl	2607e <at_params_string_get>
	if (ret) {
   115b2:	b968      	cbnz	r0, 115d0 <do_ftp_mkdir+0x3c>
	folder[sz_folder] = '\0';
   115b4:	9b01      	ldr	r3, [sp, #4]
   115b6:	aa22      	add	r2, sp, #136	; 0x88
   115b8:	4413      	add	r3, r2
   115ba:	f803 0c80 	strb.w	r0, [r3, #-128]
	ret = ftp_mkd(folder);
   115be:	a802      	add	r0, sp, #8
   115c0:	f006 fb88 	bl	17cd4 <ftp_mkd>
	return (ret == FTP_CODE_257) ? 0 : -1;
   115c4:	f240 1301 	movw	r3, #257	; 0x101
   115c8:	1ac0      	subs	r0, r0, r3
   115ca:	bf18      	it	ne
   115cc:	f04f 30ff 	movne.w	r0, #4294967295
}
   115d0:	b023      	add	sp, #140	; 0x8c
   115d2:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   115d6:	f06f 0015 	mvn.w	r0, #21
   115da:	e7f9      	b.n	115d0 <do_ftp_mkdir+0x3c>
   115dc:	200213d0 	.word	0x200213d0

000115e0 <do_ftp_cd>:
	int sz_folder = FTP_MAX_FILEPATH;
   115e0:	2380      	movs	r3, #128	; 0x80
{
   115e2:	b500      	push	{lr}
	param_count = at_params_valid_count_get(&at_param_list);
   115e4:	480f      	ldr	r0, [pc, #60]	; (11624 <do_ftp_cd+0x44>)
{
   115e6:	b0a3      	sub	sp, #140	; 0x8c
	int sz_folder = FTP_MAX_FILEPATH;
   115e8:	9301      	str	r3, [sp, #4]
	param_count = at_params_valid_count_get(&at_param_list);
   115ea:	f014 fd6b 	bl	260c4 <at_params_valid_count_get>
	if (param_count < 3) {
   115ee:	2802      	cmp	r0, #2
   115f0:	dd15      	ble.n	1161e <do_ftp_cd+0x3e>
	ret = at_params_string_get(&at_param_list, 2, folder, &sz_folder);
   115f2:	2102      	movs	r1, #2
   115f4:	480b      	ldr	r0, [pc, #44]	; (11624 <do_ftp_cd+0x44>)
   115f6:	ab01      	add	r3, sp, #4
   115f8:	aa02      	add	r2, sp, #8
   115fa:	f014 fd40 	bl	2607e <at_params_string_get>
	if (ret) {
   115fe:	b958      	cbnz	r0, 11618 <do_ftp_cd+0x38>
	folder[sz_folder] = '\0';
   11600:	9b01      	ldr	r3, [sp, #4]
   11602:	aa22      	add	r2, sp, #136	; 0x88
   11604:	4413      	add	r3, r2
   11606:	f803 0c80 	strb.w	r0, [r3, #-128]
	ret = ftp_cwd(folder);
   1160a:	a802      	add	r0, sp, #8
   1160c:	f006 fb38 	bl	17c80 <ftp_cwd>
	return (ret == FTP_CODE_250) ? 0 : -1;
   11610:	38fa      	subs	r0, #250	; 0xfa
   11612:	bf18      	it	ne
   11614:	f04f 30ff 	movne.w	r0, #4294967295
}
   11618:	b023      	add	sp, #140	; 0x8c
   1161a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   1161e:	f06f 0015 	mvn.w	r0, #21
   11622:	e7f9      	b.n	11618 <do_ftp_cd+0x38>
   11624:	200213d0 	.word	0x200213d0

00011628 <do_ftp_open>:
	int sz_hostname = FTP_MAX_HOSTNAME;
   11628:	2340      	movs	r3, #64	; 0x40
{
   1162a:	b570      	push	{r4, r5, r6, lr}
   1162c:	b0a6      	sub	sp, #152	; 0x98
	int sz_hostname = FTP_MAX_HOSTNAME;
   1162e:	9304      	str	r3, [sp, #16]
	u16_t port = CONFIG_SLM_FTP_SERVER_PORT;
   11630:	2315      	movs	r3, #21
	int sz_username = FTP_MAX_USERNAME;
   11632:	2420      	movs	r4, #32
	u16_t port = CONFIG_SLM_FTP_SERVER_PORT;
   11634:	f8ad 3006 	strh.w	r3, [sp, #6]
	sec_tag_t sec_tag = INVALID_SEC_TAG;
   11638:	f04f 33ff 	mov.w	r3, #4294967295
	param_count = at_params_valid_count_get(&at_param_list);
   1163c:	4840      	ldr	r0, [pc, #256]	; (11740 <do_ftp_open+0x118>)
	int sz_password = FTP_MAX_PASSWORD;
   1163e:	e9cd 4402 	strd	r4, r4, [sp, #8]
	sec_tag_t sec_tag = INVALID_SEC_TAG;
   11642:	9305      	str	r3, [sp, #20]
	param_count = at_params_valid_count_get(&at_param_list);
   11644:	f014 fd3e 	bl	260c4 <at_params_valid_count_get>
	if (param_count < 5) {
   11648:	2804      	cmp	r0, #4
	param_count = at_params_valid_count_get(&at_param_list);
   1164a:	4605      	mov	r5, r0
	if (param_count < 5) {
   1164c:	dc04      	bgt.n	11658 <do_ftp_open+0x30>
		return -EINVAL;
   1164e:	f06f 0415 	mvn.w	r4, #21
}
   11652:	4620      	mov	r0, r4
   11654:	b026      	add	sp, #152	; 0x98
   11656:	bd70      	pop	{r4, r5, r6, pc}
	memset(username, 0x00, sz_username); /* Important for optional params*/
   11658:	4623      	mov	r3, r4
   1165a:	2100      	movs	r1, #0
   1165c:	9a02      	ldr	r2, [sp, #8]
   1165e:	a806      	add	r0, sp, #24
   11660:	f015 f9e6 	bl	26a30 <__memset_chk>
	ret = at_params_string_get(&at_param_list, 2, username, &sz_username);
   11664:	2102      	movs	r1, #2
   11666:	4836      	ldr	r0, [pc, #216]	; (11740 <do_ftp_open+0x118>)
   11668:	ab02      	add	r3, sp, #8
   1166a:	aa06      	add	r2, sp, #24
   1166c:	f014 fd07 	bl	2607e <at_params_string_get>
	if (ret || strlen(username) == 0) {
   11670:	4604      	mov	r4, r0
   11672:	2800      	cmp	r0, #0
   11674:	d031      	beq.n	116da <do_ftp_open+0xb2>
		memcpy(username, CONFIG_SLM_FTP_USER_ANONYMOUS,
   11676:	4a33      	ldr	r2, [pc, #204]	; (11744 <do_ftp_open+0x11c>)
   11678:	ab06      	add	r3, sp, #24
   1167a:	6810      	ldr	r0, [r2, #0]
   1167c:	6851      	ldr	r1, [r2, #4]
   1167e:	7a12      	ldrb	r2, [r2, #8]
   11680:	c303      	stmia	r3!, {r0, r1}
   11682:	701a      	strb	r2, [r3, #0]
		memcpy(password, CONFIG_SLM_FTP_PASSWORD_ANONYMOUS,
   11684:	4b30      	ldr	r3, [pc, #192]	; (11748 <do_ftp_open+0x120>)
   11686:	aa0e      	add	r2, sp, #56	; 0x38
   11688:	f103 0610 	add.w	r6, r3, #16
   1168c:	4614      	mov	r4, r2
   1168e:	6818      	ldr	r0, [r3, #0]
   11690:	6859      	ldr	r1, [r3, #4]
   11692:	3308      	adds	r3, #8
   11694:	c403      	stmia	r4!, {r0, r1}
   11696:	42b3      	cmp	r3, r6
   11698:	4622      	mov	r2, r4
   1169a:	d1f7      	bne.n	1168c <do_ftp_open+0x64>
   1169c:	6818      	ldr	r0, [r3, #0]
   1169e:	791b      	ldrb	r3, [r3, #4]
   116a0:	6020      	str	r0, [r4, #0]
   116a2:	7123      	strb	r3, [r4, #4]
	ret = at_params_string_get(&at_param_list, 4, hostname, &sz_hostname);
   116a4:	2104      	movs	r1, #4
   116a6:	4826      	ldr	r0, [pc, #152]	; (11740 <do_ftp_open+0x118>)
   116a8:	ab04      	add	r3, sp, #16
   116aa:	aa16      	add	r2, sp, #88	; 0x58
   116ac:	f014 fce7 	bl	2607e <at_params_string_get>
	if (ret) {
   116b0:	4604      	mov	r4, r0
   116b2:	2800      	cmp	r0, #0
   116b4:	d1cd      	bne.n	11652 <do_ftp_open+0x2a>
	hostname[sz_hostname] = '\0';
   116b6:	9b04      	ldr	r3, [sp, #16]
   116b8:	aa26      	add	r2, sp, #152	; 0x98
   116ba:	4413      	add	r3, r2
	if (param_count > 5) {
   116bc:	2d05      	cmp	r5, #5
	hostname[sz_hostname] = '\0';
   116be:	f803 0c40 	strb.w	r0, [r3, #-64]
	if (param_count > 5) {
   116c2:	d122      	bne.n	1170a <do_ftp_open+0xe2>
	ret = ftp_open(hostname, port, sec_tag);
   116c4:	9a05      	ldr	r2, [sp, #20]
   116c6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   116ca:	a816      	add	r0, sp, #88	; 0x58
   116cc:	f006 f8d2 	bl	17874 <ftp_open>
	if (ret != FTP_CODE_200) {
   116d0:	28c8      	cmp	r0, #200	; 0xc8
   116d2:	d02c      	beq.n	1172e <do_ftp_open+0x106>
		return -ENETUNREACH;
   116d4:	f06f 0471 	mvn.w	r4, #113	; 0x71
   116d8:	e7bb      	b.n	11652 <do_ftp_open+0x2a>
	if (ret || strlen(username) == 0) {
   116da:	a806      	add	r0, sp, #24
   116dc:	f7fb fbc8 	bl	ce70 <strlen>
   116e0:	2800      	cmp	r0, #0
   116e2:	d0c8      	beq.n	11676 <do_ftp_open+0x4e>
		username[sz_username] = '\0';
   116e4:	9b02      	ldr	r3, [sp, #8]
   116e6:	aa26      	add	r2, sp, #152	; 0x98
   116e8:	4413      	add	r3, r2
   116ea:	f803 4c80 	strb.w	r4, [r3, #-128]
		ret = at_params_string_get(&at_param_list, 3, password,
   116ee:	2103      	movs	r1, #3
   116f0:	4813      	ldr	r0, [pc, #76]	; (11740 <do_ftp_open+0x118>)
   116f2:	ab03      	add	r3, sp, #12
   116f4:	aa0e      	add	r2, sp, #56	; 0x38
   116f6:	f014 fcc2 	bl	2607e <at_params_string_get>
		if (ret) {
   116fa:	2800      	cmp	r0, #0
   116fc:	d1a7      	bne.n	1164e <do_ftp_open+0x26>
		password[sz_password] = '\0';
   116fe:	9b03      	ldr	r3, [sp, #12]
   11700:	aa26      	add	r2, sp, #152	; 0x98
   11702:	4413      	add	r3, r2
   11704:	f803 0c60 	strb.w	r0, [r3, #-96]
   11708:	e7cc      	b.n	116a4 <do_ftp_open+0x7c>
		ret = at_params_short_get(&at_param_list, 5, &port);
   1170a:	2105      	movs	r1, #5
   1170c:	480c      	ldr	r0, [pc, #48]	; (11740 <do_ftp_open+0x118>)
   1170e:	f10d 0206 	add.w	r2, sp, #6
   11712:	f014 fc8f 	bl	26034 <at_params_short_get>
		if (ret) {
   11716:	b940      	cbnz	r0, 1172a <do_ftp_open+0x102>
	if (param_count > 6) {
   11718:	2d06      	cmp	r5, #6
   1171a:	d0d3      	beq.n	116c4 <do_ftp_open+0x9c>
		ret = at_params_int_get(&at_param_list, 6, &sec_tag);
   1171c:	2106      	movs	r1, #6
   1171e:	4808      	ldr	r0, [pc, #32]	; (11740 <do_ftp_open+0x118>)
   11720:	aa05      	add	r2, sp, #20
   11722:	f014 fc99 	bl	26058 <at_params_int_get>
		if (ret) {
   11726:	2800      	cmp	r0, #0
   11728:	d0cc      	beq.n	116c4 <do_ftp_open+0x9c>
   1172a:	4604      	mov	r4, r0
   1172c:	e791      	b.n	11652 <do_ftp_open+0x2a>
	ret = ftp_login(username, password);
   1172e:	a90e      	add	r1, sp, #56	; 0x38
   11730:	a806      	add	r0, sp, #24
   11732:	f006 f97b 	bl	17a2c <ftp_login>
		return -EACCES;
   11736:	28e6      	cmp	r0, #230	; 0xe6
   11738:	bf18      	it	ne
   1173a:	f06f 040c 	mvnne.w	r4, #12
   1173e:	e788      	b.n	11652 <do_ftp_open+0x2a>
   11740:	200213d0 	.word	0x200213d0
   11744:	00029704 	.word	0x00029704
   11748:	0002970e 	.word	0x0002970e

0001174c <ftp_data_callback>:
{
   1174c:	b538      	push	{r3, r4, r5, lr}
   1174e:	4605      	mov	r5, r0
   11750:	460c      	mov	r4, r1
	if (slm_util_hex_check((u8_t *)msg, len)) {
   11752:	f011 fc6a 	bl	2302a <slm_util_hex_check>
   11756:	b1c8      	cbz	r0, 1178c <ftp_data_callback+0x40>
		int size = len * 2;
   11758:	0063      	lsls	r3, r4, #1
		ret = slm_util_htoa(msg, len, rsp_buf, size);
   1175a:	4621      	mov	r1, r4
   1175c:	4628      	mov	r0, r5
   1175e:	4a0d      	ldr	r2, [pc, #52]	; (11794 <ftp_data_callback+0x48>)
   11760:	b29b      	uxth	r3, r3
   11762:	f7fc fb2b 	bl	ddbc <slm_util_htoa>
		if (ret > 0) {
   11766:	1e01      	subs	r1, r0, #0
   11768:	dd04      	ble.n	11774 <ftp_data_callback+0x28>
			rsp_send(rsp_buf, ret);
   1176a:	480a      	ldr	r0, [pc, #40]	; (11794 <ftp_data_callback+0x48>)
}
   1176c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rsp_send((u8_t *)msg, len);
   11770:	f7fc bc3c 	b.w	dfec <rsp_send>
   11774:	4b08      	ldr	r3, [pc, #32]	; (11798 <ftp_data_callback+0x4c>)
   11776:	4a09      	ldr	r2, [pc, #36]	; (1179c <ftp_data_callback+0x50>)
			LOG_WRN("hex convert error: %d", ret);
   11778:	4809      	ldr	r0, [pc, #36]	; (117a0 <ftp_data_callback+0x54>)
   1177a:	1ad2      	subs	r2, r2, r3
   1177c:	08d2      	lsrs	r2, r2, #3
   1177e:	0192      	lsls	r2, r2, #6
   11780:	f042 0202 	orr.w	r2, r2, #2
}
   11784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_WRN("hex convert error: %d", ret);
   11788:	f012 b814 	b.w	237b4 <log_1>
		rsp_send((u8_t *)msg, len);
   1178c:	4621      	mov	r1, r4
   1178e:	4628      	mov	r0, r5
   11790:	e7ec      	b.n	1176c <ftp_data_callback+0x20>
   11792:	bf00      	nop
   11794:	20026ea6 	.word	0x20026ea6
   11798:	00027b20 	.word	0x00027b20
   1179c:	00027b58 	.word	0x00027b58
   117a0:	00028d39 	.word	0x00028d39

000117a4 <do_ftp_ls>:
{
   117a4:	b510      	push	{r4, lr}
	int sz_target = FTP_MAX_FILEPATH;
   117a6:	2220      	movs	r2, #32
   117a8:	2480      	movs	r4, #128	; 0x80
{
   117aa:	b0aa      	sub	sp, #168	; 0xa8
	memset(options, 0x00, sz_options);
   117ac:	2100      	movs	r1, #0
   117ae:	a802      	add	r0, sp, #8
	int sz_target = FTP_MAX_FILEPATH;
   117b0:	e9cd 2400 	strd	r2, r4, [sp]
	memset(options, 0x00, sz_options);
   117b4:	f015 f934 	bl	26a20 <memset>
	memset(target, 0x00, sz_target);
   117b8:	4622      	mov	r2, r4
   117ba:	2100      	movs	r1, #0
   117bc:	a80a      	add	r0, sp, #40	; 0x28
   117be:	f015 f92f 	bl	26a20 <memset>
	param_count = at_params_valid_count_get(&at_param_list);
   117c2:	4815      	ldr	r0, [pc, #84]	; (11818 <do_ftp_ls+0x74>)
   117c4:	f014 fc7e 	bl	260c4 <at_params_valid_count_get>
	if (param_count > 2) {
   117c8:	2802      	cmp	r0, #2
	param_count = at_params_valid_count_get(&at_param_list);
   117ca:	4604      	mov	r4, r0
	if (param_count > 2) {
   117cc:	dd19      	ble.n	11802 <do_ftp_ls+0x5e>
		ret = at_params_string_get(&at_param_list, 2,
   117ce:	466b      	mov	r3, sp
   117d0:	2102      	movs	r1, #2
   117d2:	4811      	ldr	r0, [pc, #68]	; (11818 <do_ftp_ls+0x74>)
   117d4:	aa02      	add	r2, sp, #8
   117d6:	f014 fc52 	bl	2607e <at_params_string_get>
		if (ret) {
   117da:	b9d0      	cbnz	r0, 11812 <do_ftp_ls+0x6e>
		options[sz_options] = '\0';
   117dc:	9b00      	ldr	r3, [sp, #0]
   117de:	aa2a      	add	r2, sp, #168	; 0xa8
   117e0:	4413      	add	r3, r2
	if (param_count > 3) {
   117e2:	2c03      	cmp	r4, #3
		options[sz_options] = '\0';
   117e4:	f803 0ca0 	strb.w	r0, [r3, #-160]
	if (param_count > 3) {
   117e8:	d00b      	beq.n	11802 <do_ftp_ls+0x5e>
		ret = at_params_string_get(&at_param_list, 3,
   117ea:	2103      	movs	r1, #3
   117ec:	480a      	ldr	r0, [pc, #40]	; (11818 <do_ftp_ls+0x74>)
   117ee:	ab01      	add	r3, sp, #4
   117f0:	aa0a      	add	r2, sp, #40	; 0x28
   117f2:	f014 fc44 	bl	2607e <at_params_string_get>
		if (ret) {
   117f6:	b960      	cbnz	r0, 11812 <do_ftp_ls+0x6e>
		target[sz_target] = '\0';
   117f8:	9b01      	ldr	r3, [sp, #4]
   117fa:	aa2a      	add	r2, sp, #168	; 0xa8
   117fc:	4413      	add	r3, r2
   117fe:	f803 0c80 	strb.w	r0, [r3, #-128]
	ret = ftp_list(options, target);
   11802:	a90a      	add	r1, sp, #40	; 0x28
   11804:	a802      	add	r0, sp, #8
   11806:	f006 f9cf 	bl	17ba8 <ftp_list>
	return (ret == FTP_CODE_226) ? 0 : -1;
   1180a:	38e2      	subs	r0, #226	; 0xe2
   1180c:	bf18      	it	ne
   1180e:	f04f 30ff 	movne.w	r0, #4294967295
}
   11812:	b02a      	add	sp, #168	; 0xa8
   11814:	bd10      	pop	{r4, pc}
   11816:	bf00      	nop
   11818:	200213d0 	.word	0x200213d0

0001181c <slm_at_ftp_parse>:
 */
int slm_at_ftp_parse(const char *at_cmd)
{
	int ret = -ENOTSUP;
	char op_str[16];
	int size = 16;
   1181c:	2310      	movs	r3, #16
{
   1181e:	b570      	push	{r4, r5, r6, lr}

	if (slm_util_cmd_casecmp(at_cmd, AT_FTP_STR)) {
   11820:	4926      	ldr	r1, [pc, #152]	; (118bc <slm_at_ftp_parse+0xa0>)
{
   11822:	b086      	sub	sp, #24
   11824:	4604      	mov	r4, r0
	int size = 16;
   11826:	9301      	str	r3, [sp, #4]
	if (slm_util_cmd_casecmp(at_cmd, AT_FTP_STR)) {
   11828:	f7fc fa92 	bl	dd50 <slm_util_cmd_casecmp>
   1182c:	2800      	cmp	r0, #0
   1182e:	d042      	beq.n	118b6 <slm_at_ftp_parse+0x9a>
		ret = at_parser_params_from_str(at_cmd, NULL, &at_param_list);
   11830:	2100      	movs	r1, #0
   11832:	4620      	mov	r0, r4
   11834:	4a22      	ldr	r2, [pc, #136]	; (118c0 <slm_at_ftp_parse+0xa4>)
   11836:	f014 fafd 	bl	25e34 <at_parser_params_from_str>
		if (ret) {
   1183a:	4601      	mov	r1, r0
   1183c:	b170      	cbz	r0, 1185c <slm_at_ftp_parse+0x40>
   1183e:	4a21      	ldr	r2, [pc, #132]	; (118c4 <slm_at_ftp_parse+0xa8>)
   11840:	4b21      	ldr	r3, [pc, #132]	; (118c8 <slm_at_ftp_parse+0xac>)
			LOG_ERR("Failed to parse AT command %d", ret);
   11842:	4822      	ldr	r0, [pc, #136]	; (118cc <slm_at_ftp_parse+0xb0>)
   11844:	1ad2      	subs	r2, r2, r3
   11846:	08d2      	lsrs	r2, r2, #3
   11848:	0192      	lsls	r2, r2, #6
   1184a:	f042 0201 	orr.w	r2, r2, #1
   1184e:	f011 ffb1 	bl	237b4 <log_1>
			return -EINVAL;
		}
		if (at_parser_cmd_type_get(at_cmd) != AT_CMD_TYPE_SET_COMMAND) {
			return -EINVAL;
   11852:	f06f 0415 	mvn.w	r4, #21
			}
		}
	}

	return ret;
}
   11856:	4620      	mov	r0, r4
   11858:	b006      	add	sp, #24
   1185a:	bd70      	pop	{r4, r5, r6, pc}
		if (at_parser_cmd_type_get(at_cmd) != AT_CMD_TYPE_SET_COMMAND) {
   1185c:	4620      	mov	r0, r4
   1185e:	f014 faec 	bl	25e3a <at_parser_cmd_type_get>
   11862:	2801      	cmp	r0, #1
   11864:	4604      	mov	r4, r0
   11866:	d1f4      	bne.n	11852 <slm_at_ftp_parse+0x36>
		if (at_params_valid_count_get(&at_param_list) < 2) {
   11868:	4815      	ldr	r0, [pc, #84]	; (118c0 <slm_at_ftp_parse+0xa4>)
   1186a:	f014 fc2b 	bl	260c4 <at_params_valid_count_get>
   1186e:	2801      	cmp	r0, #1
   11870:	d9ef      	bls.n	11852 <slm_at_ftp_parse+0x36>
		ret = at_params_string_get(&at_param_list, 1, op_str, &size);
   11872:	4621      	mov	r1, r4
   11874:	4812      	ldr	r0, [pc, #72]	; (118c0 <slm_at_ftp_parse+0xa4>)
   11876:	ab01      	add	r3, sp, #4
   11878:	aa02      	add	r2, sp, #8
   1187a:	f014 fc00 	bl	2607e <at_params_string_get>
		if (ret) {
   1187e:	4604      	mov	r4, r0
   11880:	2800      	cmp	r0, #0
   11882:	d1e8      	bne.n	11856 <slm_at_ftp_parse+0x3a>
		op_str[size] = '\0';
   11884:	4d12      	ldr	r5, [pc, #72]	; (118d0 <slm_at_ftp_parse+0xb4>)
   11886:	9b01      	ldr	r3, [sp, #4]
   11888:	462e      	mov	r6, r5
   1188a:	aa06      	add	r2, sp, #24
   1188c:	4413      	add	r3, r2
   1188e:	f803 0c10 	strb.w	r0, [r3, #-16]
			if (slm_util_casecmp(op_str,
   11892:	6869      	ldr	r1, [r5, #4]
   11894:	a802      	add	r0, sp, #8
   11896:	f7fc fa33 	bl	dd00 <slm_util_casecmp>
   1189a:	b130      	cbz	r0, 118aa <slm_at_ftp_parse+0x8e>
				ret = ftp_op_list[i].handler();
   1189c:	200c      	movs	r0, #12
   1189e:	fb00 6404 	mla	r4, r0, r4, r6
   118a2:	68a3      	ldr	r3, [r4, #8]
   118a4:	4798      	blx	r3
   118a6:	4604      	mov	r4, r0
				break;
   118a8:	e7d5      	b.n	11856 <slm_at_ftp_parse+0x3a>
		for (int i = 0; i < FTP_OP_MAX; i++) {
   118aa:	3401      	adds	r4, #1
   118ac:	2c0f      	cmp	r4, #15
   118ae:	f105 050c 	add.w	r5, r5, #12
   118b2:	d1ee      	bne.n	11892 <slm_at_ftp_parse+0x76>
   118b4:	e7cd      	b.n	11852 <slm_at_ftp_parse+0x36>
	int ret = -ENOTSUP;
   118b6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   118ba:	e7cc      	b.n	11856 <slm_at_ftp_parse+0x3a>
   118bc:	00029724 	.word	0x00029724
   118c0:	200213d0 	.word	0x200213d0
   118c4:	00027b58 	.word	0x00027b58
   118c8:	00027b20 	.word	0x00027b20
   118cc:	00028a38 	.word	0x00028a38
   118d0:	00027e20 	.word	0x00027e20

000118d4 <slm_at_ftp_clac>:

/**@brief API to list FTP AT commands
 */
void slm_at_ftp_clac(void)
{
   118d4:	b513      	push	{r0, r1, r4, lr}
	sprintf(rsp_buf, "%s\r\n", AT_FTP_STR);
   118d6:	4b0a      	ldr	r3, [pc, #40]	; (11900 <slm_at_ftp_clac+0x2c>)
   118d8:	4c0a      	ldr	r4, [pc, #40]	; (11904 <slm_at_ftp_clac+0x30>)
   118da:	f640 228c 	movw	r2, #2700	; 0xa8c
   118de:	2100      	movs	r1, #0
   118e0:	9300      	str	r3, [sp, #0]
   118e2:	4620      	mov	r0, r4
   118e4:	4b08      	ldr	r3, [pc, #32]	; (11908 <slm_at_ftp_clac+0x34>)
   118e6:	f015 f9e5 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   118ea:	4620      	mov	r0, r4
   118ec:	f7fb fac0 	bl	ce70 <strlen>
   118f0:	4601      	mov	r1, r0
   118f2:	4620      	mov	r0, r4
}
   118f4:	b002      	add	sp, #8
   118f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rsp_send(rsp_buf, strlen(rsp_buf));
   118fa:	f7fc bb77 	b.w	dfec <rsp_send>
   118fe:	bf00      	nop
   11900:	00029724 	.word	0x00029724
   11904:	20026ea6 	.word	0x20026ea6
   11908:	00028bb2 	.word	0x00028bb2

0001190c <slm_at_ftp_init>:

/**@brief API to initialize FTP AT commands handler
 */
int slm_at_ftp_init(void)
{
	return ftp_init(ftp_ctrl_callback, ftp_data_callback);
   1190c:	4901      	ldr	r1, [pc, #4]	; (11914 <slm_at_ftp_init+0x8>)
   1190e:	4802      	ldr	r0, [pc, #8]	; (11918 <slm_at_ftp_init+0xc>)
   11910:	f006 bb32 	b.w	17f78 <ftp_init>
   11914:	0001174d 	.word	0x0001174d
   11918:	00023141 	.word	0x00023141

0001191c <udp_thread_func>:
}

static void udp_thread_func(void *p1, void *p2, void *p3)
{
	int ret;
	int size = sizeof(struct sockaddr_in);
   1191c:	2308      	movs	r3, #8
{
   1191e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ARG_UNUSED(p2);
	ARG_UNUSED(p3);


	do {
           struct timeval timeout = {1, 0};
   11922:	f04f 0901 	mov.w	r9, #1
{
   11926:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1192a:	4c48      	ldr	r4, [pc, #288]	; (11a4c <udp_thread_func+0x130>)
	int size = sizeof(struct sockaddr_in);
   1192c:	9304      	str	r3, [sp, #16]
   1192e:	4b48      	ldr	r3, [pc, #288]	; (11a50 <udp_thread_func+0x134>)
   11930:	f10d 0810 	add.w	r8, sp, #16
   11934:	1ae4      	subs	r4, r4, r3
   11936:	08e4      	lsrs	r4, r4, #3
           struct timeval timeout = {1, 0};
   11938:	ae06      	add	r6, sp, #24
   1193a:	2700      	movs	r7, #0

	fd_set readSet;
     	FD_ZERO(&readSet);
     	FD_SET(udp_sock, &readSet);
   1193c:	4d45      	ldr	r5, [pc, #276]	; (11a54 <udp_thread_func+0x138>)
	return zsock_select(nfds, readfds, writefds, exceptfds, timeout);
}

static inline void FD_ZERO(zsock_fd_set *set)
{
	ZSOCK_FD_ZERO(set);
   1193e:	a805      	add	r0, sp, #20
           struct timeval timeout = {1, 0};
   11940:	f8c6 9000 	str.w	r9, [r6]
   11944:	6077      	str	r7, [r6, #4]
   11946:	f012 fb58 	bl	23ffa <ZSOCK_FD_ZERO>
	ZSOCK_FD_CLR(fd, set);
}

static inline void FD_SET(int fd, zsock_fd_set *set)
{
	ZSOCK_FD_SET(fd, set);
   1194a:	6828      	ldr	r0, [r5, #0]
   1194c:	a905      	add	r1, sp, #20
   1194e:	f012 fb64 	bl	2401a <ZSOCK_FD_SET>

		if (select(udp_sock+1, &readSet, NULL, NULL, &timeout) >= 0) {
   11952:	6828      	ldr	r0, [r5, #0]
	return zsock_select(nfds, readfds, writefds, exceptfds, timeout);
   11954:	463b      	mov	r3, r7
   11956:	463a      	mov	r2, r7
   11958:	9600      	str	r6, [sp, #0]
   1195a:	a905      	add	r1, sp, #20
   1195c:	3001      	adds	r0, #1
   1195e:	f012 fb65 	bl	2402c <zsock_select>
   11962:	42b8      	cmp	r0, r7
   11964:	db66      	blt.n	11a34 <udp_thread_func+0x118>
				
			if(_terminate_thread) {
   11966:	4b3c      	ldr	r3, [pc, #240]	; (11a58 <udp_thread_func+0x13c>)
   11968:	781b      	ldrb	r3, [r3, #0]
   1196a:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   1196e:	2b00      	cmp	r3, #0
   11970:	d167      	bne.n	11a42 <udp_thread_func+0x126>
	return ZSOCK_FD_ISSET(fd, set);
   11972:	6828      	ldr	r0, [r5, #0]
   11974:	a905      	add	r1, sp, #20
   11976:	f012 fb43 	bl	24000 <ZSOCK_FD_ISSET>
				LOG_DBG("UDP_THREAD: terminating");
				return;
			}	
			else if (FD_ISSET(udp_sock, &readSet)) {
   1197a:	2800      	cmp	r0, #0
   1197c:	d0dd      	beq.n	1193a <udp_thread_func+0x1e>
				ret = recvfrom(udp_sock, data, NET_IPV4_MTU, 0,
   1197e:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   11980:	4b36      	ldr	r3, [pc, #216]	; (11a5c <udp_thread_func+0x140>)
   11982:	f44f 7210 	mov.w	r2, #576	; 0x240
   11986:	9300      	str	r3, [sp, #0]
   11988:	f8cd 8004 	str.w	r8, [sp, #4]
   1198c:	463b      	mov	r3, r7
   1198e:	a908      	add	r1, sp, #32
   11990:	f012 fae5 	bl	23f5e <z_impl_zsock_recvfrom>
					(struct sockaddr *)&remote, &size);
				if (ret < 0) {
   11994:	1e05      	subs	r5, r0, #0
   11996:	da0b      	bge.n	119b0 <udp_thread_func+0x94>
					LOG_WRN("recv() error: %d", -errno);
   11998:	f012 fce4 	bl	24364 <__errno>
   1199c:	01a5      	lsls	r5, r4, #6
   1199e:	f045 0502 	orr.w	r5, r5, #2
   119a2:	462a      	mov	r2, r5
   119a4:	6801      	ldr	r1, [r0, #0]
   119a6:	482e      	ldr	r0, [pc, #184]	; (11a60 <udp_thread_func+0x144>)
   119a8:	4249      	negs	r1, r1
							DATATYPE_HEXADECIMAL, ret);
						rsp_send(rsp_buf, strlen(rsp_buf));
						rsp_send(data_hex, ret);
						rsp_send("\r\n", 2);
					} else {
						LOG_WRN("hex convert error: %d", ret);
   119aa:	f011 ff03 	bl	237b4 <log_1>
   119ae:	e7c4      	b.n	1193a <udp_thread_func+0x1e>
				if (ret == 0) {
   119b0:	d0c3      	beq.n	1193a <udp_thread_func+0x1e>
				if (slm_util_hex_check(data, ret)) {
   119b2:	b2a9      	uxth	r1, r5
   119b4:	a808      	add	r0, sp, #32
   119b6:	9103      	str	r1, [sp, #12]
   119b8:	f011 fb37 	bl	2302a <slm_util_hex_check>
   119bc:	b338      	cbz	r0, 11a0e <udp_thread_func+0xf2>
					ret = slm_util_htoa(data, ret, data_hex,
   119be:	f44f 6390 	mov.w	r3, #1152	; 0x480
   119c2:	4a28      	ldr	r2, [pc, #160]	; (11a64 <udp_thread_func+0x148>)
   119c4:	9903      	ldr	r1, [sp, #12]
   119c6:	a808      	add	r0, sp, #32
   119c8:	f7fc f9f8 	bl	ddbc <slm_util_htoa>
					if (ret > 0) {
   119cc:	1e05      	subs	r5, r0, #0
   119ce:	dd18      	ble.n	11a02 <udp_thread_func+0xe6>
						sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
   119d0:	f640 228c 	movw	r2, #2700	; 0xa8c
   119d4:	4639      	mov	r1, r7
   119d6:	4b24      	ldr	r3, [pc, #144]	; (11a68 <udp_thread_func+0x14c>)
   119d8:	e9cd 7500 	strd	r7, r5, [sp]
   119dc:	4823      	ldr	r0, [pc, #140]	; (11a6c <udp_thread_func+0x150>)
   119de:	f015 f969 	bl	26cb4 <__sprintf_chk>
						rsp_send(rsp_buf, strlen(rsp_buf));
   119e2:	4822      	ldr	r0, [pc, #136]	; (11a6c <udp_thread_func+0x150>)
   119e4:	f7fb fa44 	bl	ce70 <strlen>
   119e8:	4601      	mov	r1, r0
   119ea:	4820      	ldr	r0, [pc, #128]	; (11a6c <udp_thread_func+0x150>)
   119ec:	f7fc fafe 	bl	dfec <rsp_send>
						rsp_send(data_hex, ret);
   119f0:	4629      	mov	r1, r5
   119f2:	481c      	ldr	r0, [pc, #112]	; (11a64 <udp_thread_func+0x148>)
					}
				} else {
					sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
						DATATYPE_PLAINTEXT, ret);
					rsp_send(rsp_buf, strlen(rsp_buf));
					rsp_send(data, ret);
   119f4:	f7fc fafa 	bl	dfec <rsp_send>
					rsp_send("\r\n", 2);
   119f8:	2102      	movs	r1, #2
   119fa:	481d      	ldr	r0, [pc, #116]	; (11a70 <udp_thread_func+0x154>)
   119fc:	f7fc faf6 	bl	dfec <rsp_send>
   11a00:	e79b      	b.n	1193a <udp_thread_func+0x1e>
						LOG_WRN("hex convert error: %d", ret);
   11a02:	01a2      	lsls	r2, r4, #6
   11a04:	4629      	mov	r1, r5
   11a06:	481b      	ldr	r0, [pc, #108]	; (11a74 <udp_thread_func+0x158>)
   11a08:	f042 0202 	orr.w	r2, r2, #2
   11a0c:	e7cd      	b.n	119aa <udp_thread_func+0x8e>
					sprintf(rsp_buf, "#XUDPRECV: %d, %d\r\n",
   11a0e:	4601      	mov	r1, r0
   11a10:	f640 228c 	movw	r2, #2700	; 0xa8c
   11a14:	4b14      	ldr	r3, [pc, #80]	; (11a68 <udp_thread_func+0x14c>)
   11a16:	e9cd 9500 	strd	r9, r5, [sp]
   11a1a:	4814      	ldr	r0, [pc, #80]	; (11a6c <udp_thread_func+0x150>)
   11a1c:	f015 f94a 	bl	26cb4 <__sprintf_chk>
					rsp_send(rsp_buf, strlen(rsp_buf));
   11a20:	4812      	ldr	r0, [pc, #72]	; (11a6c <udp_thread_func+0x150>)
   11a22:	f7fb fa25 	bl	ce70 <strlen>
   11a26:	4601      	mov	r1, r0
   11a28:	4810      	ldr	r0, [pc, #64]	; (11a6c <udp_thread_func+0x150>)
   11a2a:	f7fc fadf 	bl	dfec <rsp_send>
					rsp_send(data, ret);
   11a2e:	4629      	mov	r1, r5
   11a30:	a808      	add	r0, sp, #32
   11a32:	e7df      	b.n	119f4 <udp_thread_func+0xd8>
				}
			}
		}
		else LOG_ERR("UDP_THREAD: select");
   11a34:	01a1      	lsls	r1, r4, #6
   11a36:	4810      	ldr	r0, [pc, #64]	; (11a78 <udp_thread_func+0x15c>)
   11a38:	f041 0101 	orr.w	r1, r1, #1
   11a3c:	f011 feab 	bl	23796 <log_0>
   11a40:	e77b      	b.n	1193a <udp_thread_func+0x1e>
	} while (true);

	LOG_DBG("Quit receive thread");
}
   11a42:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   11a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11a4a:	bf00      	nop
   11a4c:	00027bd8 	.word	0x00027bd8
   11a50:	00027b20 	.word	0x00027b20
   11a54:	200217f4 	.word	0x200217f4
   11a58:	20029517 	.word	0x20029517
   11a5c:	200217ec 	.word	0x200217ec
   11a60:	00028d64 	.word	0x00028d64
   11a64:	20029518 	.word	0x20029518
   11a68:	0002977b 	.word	0x0002977b
   11a6c:	20026ea6 	.word	0x20026ea6
   11a70:	000295b0 	.word	0x000295b0
   11a74:	00028d39 	.word	0x00028d39
   11a78:	0002978f 	.word	0x0002978f

00011a7c <do_udp_server_stop.part.0>:
		k_thread_abort(udp_thread_id);
   11a7c:	4b19      	ldr	r3, [pc, #100]	; (11ae4 <do_udp_server_stop.part.0+0x68>)
static int do_udp_server_stop(int error)
   11a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11a80:	4605      	mov	r5, r0
		k_thread_abort(udp_thread_id);
   11a82:	6818      	ldr	r0, [r3, #0]
		ret = close(udp_sock);
   11a84:	4e18      	ldr	r6, [pc, #96]	; (11ae8 <do_udp_server_stop.part.0+0x6c>)
	z_impl_k_thread_abort(thread);
   11a86:	f002 fd8b 	bl	145a0 <z_impl_k_thread_abort>
   11a8a:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_close(sock);
   11a8c:	f012 f9e1 	bl	23e52 <z_impl_zsock_close>
		if (ret < 0) {
   11a90:	1e04      	subs	r4, r0, #0
   11a92:	da12      	bge.n	11aba <do_udp_server_stop.part.0+0x3e>
   11a94:	4a15      	ldr	r2, [pc, #84]	; (11aec <do_udp_server_stop.part.0+0x70>)
   11a96:	4c16      	ldr	r4, [pc, #88]	; (11af0 <do_udp_server_stop.part.0+0x74>)
   11a98:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   11a9a:	f012 fc63 	bl	24364 <__errno>
   11a9e:	08e4      	lsrs	r4, r4, #3
   11aa0:	6801      	ldr	r1, [r0, #0]
   11aa2:	01a4      	lsls	r4, r4, #6
   11aa4:	f044 0402 	orr.w	r4, r4, #2
   11aa8:	4622      	mov	r2, r4
   11aaa:	4812      	ldr	r0, [pc, #72]	; (11af4 <do_udp_server_stop.part.0+0x78>)
   11aac:	4249      	negs	r1, r1
   11aae:	f011 fe81 	bl	237b4 <log_1>
			ret = -errno;
   11ab2:	f012 fc57 	bl	24364 <__errno>
   11ab6:	6804      	ldr	r4, [r0, #0]
   11ab8:	4264      	negs	r4, r4
		udp_sock = INVALID_SOCKET;
   11aba:	f04f 33ff 	mov.w	r3, #4294967295
		sprintf(rsp_buf, "#XUDPSVR: %d stopped\r\n", error);
   11abe:	f640 228c 	movw	r2, #2700	; 0xa8c
   11ac2:	2100      	movs	r1, #0
		udp_sock = INVALID_SOCKET;
   11ac4:	6033      	str	r3, [r6, #0]
		sprintf(rsp_buf, "#XUDPSVR: %d stopped\r\n", error);
   11ac6:	9500      	str	r5, [sp, #0]
   11ac8:	4b0b      	ldr	r3, [pc, #44]	; (11af8 <do_udp_server_stop.part.0+0x7c>)
   11aca:	480c      	ldr	r0, [pc, #48]	; (11afc <do_udp_server_stop.part.0+0x80>)
   11acc:	f015 f8f2 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   11ad0:	480a      	ldr	r0, [pc, #40]	; (11afc <do_udp_server_stop.part.0+0x80>)
   11ad2:	f7fb f9cd 	bl	ce70 <strlen>
   11ad6:	4601      	mov	r1, r0
   11ad8:	4808      	ldr	r0, [pc, #32]	; (11afc <do_udp_server_stop.part.0+0x80>)
   11ada:	f7fc fa87 	bl	dfec <rsp_send>
}
   11ade:	4620      	mov	r0, r4
   11ae0:	b002      	add	sp, #8
   11ae2:	bd70      	pop	{r4, r5, r6, pc}
   11ae4:	200218b0 	.word	0x200218b0
   11ae8:	200217f4 	.word	0x200217f4
   11aec:	00027b20 	.word	0x00027b20
   11af0:	00027bd8 	.word	0x00027bd8
   11af4:	00028cc3 	.word	0x00028cc3
   11af8:	000297a2 	.word	0x000297a2
   11afc:	20026ea6 	.word	0x20026ea6

00011b00 <handle_at_udp_client>:
 *  AT#XUDPCLI=<op>[,<url>,<port>[,[sec_tag]]
 *  AT#XUDPCLI? READ command not supported
 *  AT#XUDPCLI=?
 */
static int handle_at_udp_client(enum at_cmd_type cmd_type)
{
   11b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b02:	4605      	mov	r5, r0
   11b04:	b0c3      	sub	sp, #268	; 0x10c
	int err = -EINVAL;
	u16_t op;
	int param_count = at_params_valid_count_get(&at_param_list);
   11b06:	48a3      	ldr	r0, [pc, #652]	; (11d94 <handle_at_udp_client+0x294>)
   11b08:	f014 fadc 	bl	260c4 <at_params_valid_count_get>

	switch (cmd_type) {
   11b0c:	2d01      	cmp	r5, #1
	int param_count = at_params_valid_count_get(&at_param_list);
   11b0e:	4606      	mov	r6, r0
	switch (cmd_type) {
   11b10:	d005      	beq.n	11b1e <handle_at_udp_client+0x1e>
   11b12:	2d03      	cmp	r5, #3
   11b14:	f000 818c 	beq.w	11e30 <handle_at_udp_client+0x330>
	case AT_CMD_TYPE_SET_COMMAND:
		if (param_count < 2) {
			return -EINVAL;
   11b18:	f06f 0415 	mvn.w	r4, #21
   11b1c:	e06b      	b.n	11bf6 <handle_at_udp_client+0xf6>
		if (param_count < 2) {
   11b1e:	2801      	cmp	r0, #1
   11b20:	ddfa      	ble.n	11b18 <handle_at_udp_client+0x18>
		}
		err = at_params_short_get(&at_param_list, 1, &op);
   11b22:	4629      	mov	r1, r5
   11b24:	489b      	ldr	r0, [pc, #620]	; (11d94 <handle_at_udp_client+0x294>)
   11b26:	aa0a      	add	r2, sp, #40	; 0x28
   11b28:	f014 fa84 	bl	26034 <at_params_short_get>
		if (err) {
   11b2c:	4604      	mov	r4, r0
   11b2e:	2800      	cmp	r0, #0
   11b30:	d161      	bne.n	11bf6 <handle_at_udp_client+0xf6>
			return err;
		}
		if (op == AT_CLIENT_CONNECT) {
   11b32:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11b36:	2b01      	cmp	r3, #1
   11b38:	f040 8119 	bne.w	11d6e <handle_at_udp_client+0x26e>
			u16_t port;
			char url[TCPIP_MAX_URL];
			int size = TCPIP_MAX_URL;
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   11b3c:	2480      	movs	r4, #128	; 0x80
   11b3e:	f04f 33ff 	mov.w	r3, #4294967295

			if (param_count < 4) {
   11b42:	2e03      	cmp	r6, #3
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   11b44:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
			if (param_count < 4) {
   11b48:	dde6      	ble.n	11b18 <handle_at_udp_client+0x18>
				return -EINVAL;
			}
			err = at_params_string_get(&at_param_list,
   11b4a:	2102      	movs	r1, #2
   11b4c:	4891      	ldr	r0, [pc, #580]	; (11d94 <handle_at_udp_client+0x294>)
   11b4e:	ab0b      	add	r3, sp, #44	; 0x2c
   11b50:	aa22      	add	r2, sp, #136	; 0x88
   11b52:	f014 fa94 	bl	2607e <at_params_string_get>
						2, url, &size);
			if (err) {
   11b56:	4604      	mov	r4, r0
   11b58:	2800      	cmp	r0, #0
   11b5a:	d14c      	bne.n	11bf6 <handle_at_udp_client+0xf6>
				return err;
			}
			url[size] = '\0';
   11b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b5e:	aa42      	add	r2, sp, #264	; 0x108
   11b60:	4413      	add	r3, r2
   11b62:	f803 0c80 	strb.w	r0, [r3, #-128]
			err = at_params_short_get(&at_param_list, 3, &port);
   11b66:	2103      	movs	r1, #3
   11b68:	488a      	ldr	r0, [pc, #552]	; (11d94 <handle_at_udp_client+0x294>)
   11b6a:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   11b6e:	f014 fa61 	bl	26034 <at_params_short_get>
			if (err) {
   11b72:	4604      	mov	r4, r0
   11b74:	2800      	cmp	r0, #0
   11b76:	d13e      	bne.n	11bf6 <handle_at_udp_client+0xf6>
				return err;
			}
			if (param_count > 4) {
   11b78:	2e04      	cmp	r6, #4
   11b7a:	d004      	beq.n	11b86 <handle_at_udp_client+0x86>
				at_params_int_get(&at_param_list, 4, &sec_tag);
   11b7c:	2104      	movs	r1, #4
   11b7e:	4885      	ldr	r0, [pc, #532]	; (11d94 <handle_at_udp_client+0x294>)
   11b80:	aa0c      	add	r2, sp, #48	; 0x30
   11b82:	f014 fa69 	bl	26058 <at_params_int_get>
			}
			err = do_udp_client_connect(url, port, sec_tag);
   11b86:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11b88:	f8bd 402a 	ldrh.w	r4, [sp, #42]	; 0x2a
	if (sec_tag == INVALID_SEC_TAG) {
   11b8c:	4d82      	ldr	r5, [pc, #520]	; (11d98 <handle_at_udp_client+0x298>)
   11b8e:	1c70      	adds	r0, r6, #1
	return z_impl_zsock_socket(family, type, proto);
   11b90:	f04f 0102 	mov.w	r1, #2
   11b94:	bf0c      	ite	eq
   11b96:	2211      	moveq	r2, #17
   11b98:	f240 1211 	movwne	r2, #273	; 0x111
   11b9c:	2001      	movs	r0, #1
   11b9e:	f001 fc8d 	bl	134bc <z_impl_zsock_socket>
		udp_sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_DTLS_1_2);
   11ba2:	6028      	str	r0, [r5, #0]
	if (udp_sock < 0) {
   11ba4:	6828      	ldr	r0, [r5, #0]
   11ba6:	2800      	cmp	r0, #0
   11ba8:	da28      	bge.n	11bfc <handle_at_udp_client+0xfc>
   11baa:	4a7c      	ldr	r2, [pc, #496]	; (11d9c <handle_at_udp_client+0x29c>)
   11bac:	4c7c      	ldr	r4, [pc, #496]	; (11da0 <handle_at_udp_client+0x2a0>)
   11bae:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   11bb0:	f012 fbd8 	bl	24364 <__errno>
   11bb4:	08e4      	lsrs	r4, r4, #3
   11bb6:	6801      	ldr	r1, [r0, #0]
   11bb8:	01a4      	lsls	r4, r4, #6
   11bba:	f044 0401 	orr.w	r4, r4, #1
   11bbe:	4622      	mov	r2, r4
   11bc0:	4249      	negs	r1, r1
   11bc2:	4878      	ldr	r0, [pc, #480]	; (11da4 <handle_at_udp_client+0x2a4>)
   11bc4:	f011 fdf6 	bl	237b4 <log_1>
		sprintf(rsp_buf, "#XUDPCLI: %d\r\n", -errno);
   11bc8:	f012 fbcc 	bl	24364 <__errno>
   11bcc:	6803      	ldr	r3, [r0, #0]
   11bce:	2100      	movs	r1, #0
   11bd0:	425b      	negs	r3, r3
   11bd2:	f640 228c 	movw	r2, #2700	; 0xa8c
   11bd6:	9300      	str	r3, [sp, #0]
   11bd8:	4873      	ldr	r0, [pc, #460]	; (11da8 <handle_at_udp_client+0x2a8>)
   11bda:	4b74      	ldr	r3, [pc, #464]	; (11dac <handle_at_udp_client+0x2ac>)
   11bdc:	f015 f86a 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   11be0:	4871      	ldr	r0, [pc, #452]	; (11da8 <handle_at_udp_client+0x2a8>)
   11be2:	f7fb f945 	bl	ce70 <strlen>
   11be6:	4601      	mov	r1, r0
   11be8:	486f      	ldr	r0, [pc, #444]	; (11da8 <handle_at_udp_client+0x2a8>)
   11bea:	f7fc f9ff 	bl	dfec <rsp_send>
			return -errno;
   11bee:	f012 fbb9 	bl	24364 <__errno>
   11bf2:	6804      	ldr	r4, [r0, #0]
   11bf4:	4264      	negs	r4, r4
	default:
		break;
	}

	return err;
}
   11bf6:	4620      	mov	r0, r4
   11bf8:	b043      	add	sp, #268	; 0x10c
   11bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sec_tag != INVALID_SEC_TAG) {
   11bfc:	1c71      	adds	r1, r6, #1
   11bfe:	d02f      	beq.n	11c60 <handle_at_udp_client+0x160>
		sec_tag_t sec_tag_list[1] = { sec_tag };
   11c00:	960e      	str	r6, [sp, #56]	; 0x38
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   11c02:	2304      	movs	r3, #4
   11c04:	2201      	movs	r2, #1
   11c06:	9300      	str	r3, [sp, #0]
   11c08:	f44f 718d 	mov.w	r1, #282	; 0x11a
   11c0c:	ab0e      	add	r3, sp, #56	; 0x38
   11c0e:	f012 f9dd 	bl	23fcc <z_impl_zsock_setsockopt>
		if (ret) {
   11c12:	b328      	cbz	r0, 11c60 <handle_at_udp_client+0x160>
   11c14:	4a61      	ldr	r2, [pc, #388]	; (11d9c <handle_at_udp_client+0x29c>)
   11c16:	4c62      	ldr	r4, [pc, #392]	; (11da0 <handle_at_udp_client+0x2a0>)
   11c18:	1aa4      	subs	r4, r4, r2
   11c1a:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set tag list failed: %d", -errno);
   11c1c:	f012 fba2 	bl	24364 <__errno>
   11c20:	01a4      	lsls	r4, r4, #6
   11c22:	f044 0401 	orr.w	r4, r4, #1
   11c26:	4622      	mov	r2, r4
   11c28:	6801      	ldr	r1, [r0, #0]
   11c2a:	4861      	ldr	r0, [pc, #388]	; (11db0 <handle_at_udp_client+0x2b0>)
   11c2c:	4249      	negs	r1, r1
   11c2e:	f011 fdc1 	bl	237b4 <log_1>
			sprintf(rsp_buf, "#XUDPCLI: %d\r\n", -errno);
   11c32:	f012 fb97 	bl	24364 <__errno>
   11c36:	6803      	ldr	r3, [r0, #0]
   11c38:	f640 228c 	movw	r2, #2700	; 0xa8c
   11c3c:	425b      	negs	r3, r3
   11c3e:	2100      	movs	r1, #0
   11c40:	9300      	str	r3, [sp, #0]
   11c42:	4859      	ldr	r0, [pc, #356]	; (11da8 <handle_at_udp_client+0x2a8>)
   11c44:	4b59      	ldr	r3, [pc, #356]	; (11dac <handle_at_udp_client+0x2ac>)
   11c46:	f015 f835 	bl	26cb4 <__sprintf_chk>
			rsp_send(rsp_buf, strlen(rsp_buf));
   11c4a:	4857      	ldr	r0, [pc, #348]	; (11da8 <handle_at_udp_client+0x2a8>)
   11c4c:	f7fb f910 	bl	ce70 <strlen>
   11c50:	4601      	mov	r1, r0
   11c52:	4855      	ldr	r0, [pc, #340]	; (11da8 <handle_at_udp_client+0x2a8>)
   11c54:	f7fc f9ca 	bl	dfec <rsp_send>
			close(udp_sock);
   11c58:	6828      	ldr	r0, [r5, #0]
   11c5a:	f011 faa1 	bl	231a0 <close>
   11c5e:	e7c6      	b.n	11bee <handle_at_udp_client+0xee>
	if (check_for_ipv4(url, strlen(url))) {
   11c60:	a822      	add	r0, sp, #136	; 0x88
   11c62:	f7fb f905 	bl	ce70 <strlen>
   11c66:	b2c1      	uxtb	r1, r0
   11c68:	a822      	add	r0, sp, #136	; 0x88
   11c6a:	f011 fa15 	bl	23098 <check_for_ipv4>
   11c6e:	4601      	mov	r1, r0
   11c70:	b1d8      	cbz	r0, 11caa <handle_at_udp_client+0x1aa>
		remote.sin_family = AF_INET;
   11c72:	2001      	movs	r0, #1
   11c74:	4a4f      	ldr	r2, [pc, #316]	; (11db4 <handle_at_udp_client+0x2b4>)
		remote.sin_port = htons(port);
   11c76:	0223      	lsls	r3, r4, #8
   11c78:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
		remote.sin_family = AF_INET;
   11c7c:	8010      	strh	r0, [r2, #0]
		remote.sin_port = htons(port);
   11c7e:	8054      	strh	r4, [r2, #2]
	return z_impl_zsock_inet_pton(family, src, dst);
   11c80:	a922      	add	r1, sp, #136	; 0x88
   11c82:	3204      	adds	r2, #4
   11c84:	f012 f984 	bl	23f90 <z_impl_zsock_inet_pton>
		if (ret != 1) {
   11c88:	2801      	cmp	r0, #1
   11c8a:	4601      	mov	r1, r0
   11c8c:	d034      	beq.n	11cf8 <handle_at_udp_client+0x1f8>
   11c8e:	4a44      	ldr	r2, [pc, #272]	; (11da0 <handle_at_udp_client+0x2a0>)
   11c90:	4b42      	ldr	r3, [pc, #264]	; (11d9c <handle_at_udp_client+0x29c>)
			LOG_ERR("inet_pton() failed: %d", ret);
   11c92:	4849      	ldr	r0, [pc, #292]	; (11db8 <handle_at_udp_client+0x2b8>)
   11c94:	1ad2      	subs	r2, r2, r3
   11c96:	08d2      	lsrs	r2, r2, #3
   11c98:	0192      	lsls	r2, r2, #6
   11c9a:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("getaddrinfo() failed: %d", ret);
   11c9e:	f011 fd89 	bl	237b4 <log_1>
			close(udp_sock);
   11ca2:	6828      	ldr	r0, [r5, #0]
   11ca4:	f011 fa7c 	bl	231a0 <close>
			return -EINVAL;
   11ca8:	e736      	b.n	11b18 <handle_at_udp_client+0x18>
		struct addrinfo hints = {
   11caa:	2250      	movs	r2, #80	; 0x50
   11cac:	9009      	str	r0, [sp, #36]	; 0x24
   11cae:	a80e      	add	r0, sp, #56	; 0x38
   11cb0:	f014 feb6 	bl	26a20 <memset>
   11cb4:	2601      	movs	r6, #1
   11cb6:	2302      	movs	r3, #2
	return zsock_getaddrinfo(host, service, hints, res);
   11cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
   11cba:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
   11cbe:	aa0e      	add	r2, sp, #56	; 0x38
   11cc0:	ab0d      	add	r3, sp, #52	; 0x34
   11cc2:	a822      	add	r0, sp, #136	; 0x88
   11cc4:	f012 f8b2 	bl	23e2c <zsock_getaddrinfo>
		if (ret || result == NULL) {
   11cc8:	4601      	mov	r1, r0
   11cca:	b908      	cbnz	r0, 11cd0 <handle_at_udp_client+0x1d0>
   11ccc:	980d      	ldr	r0, [sp, #52]	; 0x34
   11cce:	b940      	cbnz	r0, 11ce2 <handle_at_udp_client+0x1e2>
   11cd0:	4a33      	ldr	r2, [pc, #204]	; (11da0 <handle_at_udp_client+0x2a0>)
   11cd2:	4b32      	ldr	r3, [pc, #200]	; (11d9c <handle_at_udp_client+0x29c>)
			LOG_ERR("getaddrinfo() failed: %d", ret);
   11cd4:	4839      	ldr	r0, [pc, #228]	; (11dbc <handle_at_udp_client+0x2bc>)
   11cd6:	1ad2      	subs	r2, r2, r3
   11cd8:	08d2      	lsrs	r2, r2, #3
   11cda:	0192      	lsls	r2, r2, #6
   11cdc:	f042 0201 	orr.w	r2, r2, #1
   11ce0:	e7dd      	b.n	11c9e <handle_at_udp_client+0x19e>
		remote.sin_port = htons(port);
   11ce2:	0222      	lsls	r2, r4, #8
   11ce4:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   11ce8:	6982      	ldr	r2, [r0, #24]
		remote.sin_family = AF_INET;
   11cea:	4b32      	ldr	r3, [pc, #200]	; (11db4 <handle_at_udp_client+0x2b4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   11cec:	6852      	ldr	r2, [r2, #4]
		remote.sin_family = AF_INET;
   11cee:	801e      	strh	r6, [r3, #0]
		remote.sin_port = htons(port);
   11cf0:	805c      	strh	r4, [r3, #2]
		remote.sin_addr.s_addr =
   11cf2:	605a      	str	r2, [r3, #4]
	zsock_freeaddrinfo(ai);
   11cf4:	f012 f89c 	bl	23e30 <zsock_freeaddrinfo>
	ret = connect(udp_sock, (struct sockaddr *)&remote,
   11cf8:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   11cfa:	2208      	movs	r2, #8
   11cfc:	492d      	ldr	r1, [pc, #180]	; (11db4 <handle_at_udp_client+0x2b4>)
   11cfe:	f012 f8cf 	bl	23ea0 <z_impl_zsock_connect>
	if (ret < 0) {
   11d02:	1e04      	subs	r4, r0, #0
   11d04:	da0d      	bge.n	11d22 <handle_at_udp_client+0x222>
   11d06:	4a25      	ldr	r2, [pc, #148]	; (11d9c <handle_at_udp_client+0x29c>)
   11d08:	4c25      	ldr	r4, [pc, #148]	; (11da0 <handle_at_udp_client+0x2a0>)
   11d0a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect() failed: %d", -errno);
   11d0c:	f012 fb2a 	bl	24364 <__errno>
   11d10:	08e4      	lsrs	r4, r4, #3
   11d12:	6801      	ldr	r1, [r0, #0]
   11d14:	01a4      	lsls	r4, r4, #6
   11d16:	f044 0401 	orr.w	r4, r4, #1
   11d1a:	4622      	mov	r2, r4
   11d1c:	4828      	ldr	r0, [pc, #160]	; (11dc0 <handle_at_udp_client+0x2c0>)
   11d1e:	4249      	negs	r1, r1
   11d20:	e785      	b.n	11c2e <handle_at_udp_client+0x12e>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11d22:	2200      	movs	r2, #0
   11d24:	2300      	movs	r3, #0
   11d26:	2600      	movs	r6, #0
   11d28:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11d2c:	230e      	movs	r3, #14
   11d2e:	2204      	movs	r2, #4
   11d30:	4924      	ldr	r1, [pc, #144]	; (11dc4 <handle_at_udp_client+0x2c4>)
   11d32:	e9cd 3203 	strd	r3, r2, [sp, #12]
   11d36:	e9cd 6601 	strd	r6, r6, [sp, #4]
   11d3a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
   11d3e:	4b22      	ldr	r3, [pc, #136]	; (11dc8 <handle_at_udp_client+0x2c8>)
   11d40:	4822      	ldr	r0, [pc, #136]	; (11dcc <handle_at_udp_client+0x2cc>)
   11d42:	9600      	str	r6, [sp, #0]
   11d44:	f00f fb18 	bl	21378 <z_impl_k_thread_create>
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   11d48:	4b21      	ldr	r3, [pc, #132]	; (11dd0 <handle_at_udp_client+0x2d0>)
	sprintf(rsp_buf, "#XUDPCLI: %d connected\r\n", udp_sock);
   11d4a:	f640 228c 	movw	r2, #2700	; 0xa8c
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   11d4e:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XUDPCLI: %d connected\r\n", udp_sock);
   11d50:	682b      	ldr	r3, [r5, #0]
   11d52:	4631      	mov	r1, r6
   11d54:	9300      	str	r3, [sp, #0]
   11d56:	4814      	ldr	r0, [pc, #80]	; (11da8 <handle_at_udp_client+0x2a8>)
   11d58:	4b1e      	ldr	r3, [pc, #120]	; (11dd4 <handle_at_udp_client+0x2d4>)
   11d5a:	f014 ffab 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   11d5e:	4812      	ldr	r0, [pc, #72]	; (11da8 <handle_at_udp_client+0x2a8>)
   11d60:	f7fb f886 	bl	ce70 <strlen>
   11d64:	4601      	mov	r1, r0
   11d66:	4810      	ldr	r0, [pc, #64]	; (11da8 <handle_at_udp_client+0x2a8>)
   11d68:	f7fc f940 	bl	dfec <rsp_send>
		break;
   11d6c:	e743      	b.n	11bf6 <handle_at_udp_client+0xf6>
		} else if (op == AT_CLIENT_DISCONNECT) {
   11d6e:	2b00      	cmp	r3, #0
   11d70:	f47f af41 	bne.w	11bf6 <handle_at_udp_client+0xf6>
			if (udp_sock < 0) {
   11d74:	4e08      	ldr	r6, [pc, #32]	; (11d98 <handle_at_udp_client+0x298>)
   11d76:	6834      	ldr	r4, [r6, #0]
   11d78:	2c00      	cmp	r4, #0
   11d7a:	da2f      	bge.n	11ddc <handle_at_udp_client+0x2dc>
   11d7c:	4b07      	ldr	r3, [pc, #28]	; (11d9c <handle_at_udp_client+0x29c>)
   11d7e:	4908      	ldr	r1, [pc, #32]	; (11da0 <handle_at_udp_client+0x2a0>)
				LOG_WRN("Client is not connected");
   11d80:	4815      	ldr	r0, [pc, #84]	; (11dd8 <handle_at_udp_client+0x2d8>)
   11d82:	1ac9      	subs	r1, r1, r3
   11d84:	08c9      	lsrs	r1, r1, #3
   11d86:	0189      	lsls	r1, r1, #6
   11d88:	f041 0102 	orr.w	r1, r1, #2
   11d8c:	f011 fd03 	bl	23796 <log_0>
				return -EINVAL;
   11d90:	e6c2      	b.n	11b18 <handle_at_udp_client+0x18>
   11d92:	bf00      	nop
   11d94:	200213d0 	.word	0x200213d0
   11d98:	200217f4 	.word	0x200217f4
   11d9c:	00027b20 	.word	0x00027b20
   11da0:	00027bd8 	.word	0x00027bd8
   11da4:	00028f87 	.word	0x00028f87
   11da8:	20026ea6 	.word	0x20026ea6
   11dac:	000297b9 	.word	0x000297b9
   11db0:	00028fc3 	.word	0x00028fc3
   11db4:	200217ec 	.word	0x200217ec
   11db8:	000297c8 	.word	0x000297c8
   11dbc:	000297df 	.word	0x000297df
   11dc0:	00028e88 	.word	0x00028e88
   11dc4:	2002b610 	.word	0x2002b610
   11dc8:	0001191d 	.word	0x0001191d
   11dcc:	200217f8 	.word	0x200217f8
   11dd0:	200218b0 	.word	0x200218b0
   11dd4:	000297f8 	.word	0x000297f8
   11dd8:	00029811 	.word	0x00029811
	if (udp_sock > 0) {
   11ddc:	f43f af0b 	beq.w	11bf6 <handle_at_udp_client+0xf6>
                 _terminate_thread = true;
   11de0:	4f19      	ldr	r7, [pc, #100]	; (11e48 <handle_at_udp_client+0x348>)
		k_thread_join(udp_thread_id, K_FOREVER);
   11de2:	4b1a      	ldr	r3, [pc, #104]	; (11e4c <handle_at_udp_client+0x34c>)
                 _terminate_thread = true;
   11de4:	703d      	strb	r5, [r7, #0]
		k_thread_join(udp_thread_id, K_FOREVER);
   11de6:	6818      	ldr	r0, [r3, #0]
	return z_impl_k_thread_join(thread, timeout);
   11de8:	f04f 32ff 	mov.w	r2, #4294967295
   11dec:	f04f 33ff 	mov.w	r3, #4294967295
   11df0:	f00f f9d6 	bl	211a0 <z_impl_k_thread_join>
		ret = close(udp_sock);
   11df4:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_close(sock);
   11df6:	f012 f82c 	bl	23e52 <z_impl_zsock_close>
		if (ret < 0) {
   11dfa:	1e04      	subs	r4, r0, #0
   11dfc:	da12      	bge.n	11e24 <handle_at_udp_client+0x324>
   11dfe:	4a14      	ldr	r2, [pc, #80]	; (11e50 <handle_at_udp_client+0x350>)
   11e00:	4c14      	ldr	r4, [pc, #80]	; (11e54 <handle_at_udp_client+0x354>)
   11e02:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   11e04:	f012 faae 	bl	24364 <__errno>
   11e08:	08e4      	lsrs	r4, r4, #3
   11e0a:	6801      	ldr	r1, [r0, #0]
   11e0c:	01a4      	lsls	r4, r4, #6
   11e0e:	f044 0402 	orr.w	r4, r4, #2
   11e12:	4622      	mov	r2, r4
   11e14:	4810      	ldr	r0, [pc, #64]	; (11e58 <handle_at_udp_client+0x358>)
   11e16:	4249      	negs	r1, r1
   11e18:	f011 fccc 	bl	237b4 <log_1>
			ret = -errno;
   11e1c:	f012 faa2 	bl	24364 <__errno>
   11e20:	6804      	ldr	r4, [r0, #0]
   11e22:	4264      	negs	r4, r4
		udp_sock = INVALID_SOCKET;
   11e24:	f04f 33ff 	mov.w	r3, #4294967295
   11e28:	6033      	str	r3, [r6, #0]
                _terminate_thread = false;
   11e2a:	2300      	movs	r3, #0
   11e2c:	703b      	strb	r3, [r7, #0]
   11e2e:	e6e2      	b.n	11bf6 <handle_at_udp_client+0xf6>
		sprintf(rsp_buf,
   11e30:	2400      	movs	r4, #0
   11e32:	2301      	movs	r3, #1
   11e34:	f640 228c 	movw	r2, #2700	; 0xa8c
   11e38:	e9cd 4300 	strd	r4, r3, [sp]
   11e3c:	4621      	mov	r1, r4
   11e3e:	4b07      	ldr	r3, [pc, #28]	; (11e5c <handle_at_udp_client+0x35c>)
   11e40:	4807      	ldr	r0, [pc, #28]	; (11e60 <handle_at_udp_client+0x360>)
   11e42:	f014 ff37 	bl	26cb4 <__sprintf_chk>
   11e46:	e78a      	b.n	11d5e <handle_at_udp_client+0x25e>
   11e48:	20029517 	.word	0x20029517
   11e4c:	200218b0 	.word	0x200218b0
   11e50:	00027b20 	.word	0x00027b20
   11e54:	00027bd8 	.word	0x00027bd8
   11e58:	00028cc3 	.word	0x00028cc3
   11e5c:	00029829 	.word	0x00029829
   11e60:	20026ea6 	.word	0x20026ea6

00011e64 <handle_at_udp_server>:
{
   11e64:	b570      	push	{r4, r5, r6, lr}
   11e66:	4604      	mov	r4, r0
   11e68:	b08c      	sub	sp, #48	; 0x30
	int param_count = at_params_valid_count_get(&at_param_list);
   11e6a:	48a4      	ldr	r0, [pc, #656]	; (120fc <handle_at_udp_server+0x298>)
   11e6c:	f014 f92a 	bl	260c4 <at_params_valid_count_get>
	switch (cmd_type) {
   11e70:	2c01      	cmp	r4, #1
	int param_count = at_params_valid_count_get(&at_param_list);
   11e72:	4605      	mov	r5, r0
	switch (cmd_type) {
   11e74:	d005      	beq.n	11e82 <handle_at_udp_server+0x1e>
   11e76:	2c03      	cmp	r4, #3
   11e78:	f000 8134 	beq.w	120e4 <handle_at_udp_server+0x280>
			return -EINVAL;
   11e7c:	f06f 0415 	mvn.w	r4, #21
   11e80:	e073      	b.n	11f6a <handle_at_udp_server+0x106>
		if (param_count < 2) {
   11e82:	2801      	cmp	r0, #1
   11e84:	ddfa      	ble.n	11e7c <handle_at_udp_server+0x18>
		err = at_params_short_get(&at_param_list, 1, &op);
   11e86:	4621      	mov	r1, r4
   11e88:	489c      	ldr	r0, [pc, #624]	; (120fc <handle_at_udp_server+0x298>)
   11e8a:	aa08      	add	r2, sp, #32
   11e8c:	f014 f8d2 	bl	26034 <at_params_short_get>
		if (err) {
   11e90:	4604      	mov	r4, r0
   11e92:	2800      	cmp	r0, #0
   11e94:	d169      	bne.n	11f6a <handle_at_udp_server+0x106>
		if (op == AT_SERVER_START) {
   11e96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   11e9a:	2b01      	cmp	r3, #1
   11e9c:	f040 810c 	bne.w	120b8 <handle_at_udp_server+0x254>
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   11ea0:	f04f 33ff 	mov.w	r3, #4294967295
			if (param_count < 3) {
   11ea4:	2d02      	cmp	r5, #2
			sec_tag_t sec_tag = INVALID_SEC_TAG;
   11ea6:	9309      	str	r3, [sp, #36]	; 0x24
			if (param_count < 3) {
   11ea8:	d0e8      	beq.n	11e7c <handle_at_udp_server+0x18>
			err = at_params_short_get(&at_param_list, 2, &port);
   11eaa:	2102      	movs	r1, #2
   11eac:	4893      	ldr	r0, [pc, #588]	; (120fc <handle_at_udp_server+0x298>)
   11eae:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   11eb2:	f014 f8bf 	bl	26034 <at_params_short_get>
			if (err) {
   11eb6:	4604      	mov	r4, r0
   11eb8:	2800      	cmp	r0, #0
   11eba:	d156      	bne.n	11f6a <handle_at_udp_server+0x106>
			if (param_count > 3) {
   11ebc:	2d03      	cmp	r5, #3
   11ebe:	d004      	beq.n	11eca <handle_at_udp_server+0x66>
				at_params_int_get(&at_param_list, 3, &sec_tag);
   11ec0:	2103      	movs	r1, #3
   11ec2:	488e      	ldr	r0, [pc, #568]	; (120fc <handle_at_udp_server+0x298>)
   11ec4:	aa09      	add	r2, sp, #36	; 0x24
   11ec6:	f014 f8c7 	bl	26058 <at_params_int_get>
			if (udp_sock > 0) {
   11eca:	4d8d      	ldr	r5, [pc, #564]	; (12100 <handle_at_udp_server+0x29c>)
   11ecc:	682b      	ldr	r3, [r5, #0]
   11ece:	2b00      	cmp	r3, #0
   11ed0:	dd0a      	ble.n	11ee8 <handle_at_udp_server+0x84>
   11ed2:	498c      	ldr	r1, [pc, #560]	; (12104 <handle_at_udp_server+0x2a0>)
   11ed4:	4b8c      	ldr	r3, [pc, #560]	; (12108 <handle_at_udp_server+0x2a4>)
				LOG_WRN("Server is running");
   11ed6:	488d      	ldr	r0, [pc, #564]	; (1210c <handle_at_udp_server+0x2a8>)
   11ed8:	1ac9      	subs	r1, r1, r3
   11eda:	08c9      	lsrs	r1, r1, #3
   11edc:	0189      	lsls	r1, r1, #6
   11ede:	f041 0102 	orr.w	r1, r1, #2
				LOG_WRN("Server is not running");
   11ee2:	f011 fc58 	bl	23796 <log_0>
				return -EINVAL;
   11ee6:	e7c9      	b.n	11e7c <handle_at_udp_server+0x18>
	if (sec_tag == INVALID_SEC_TAG) {
   11ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
			err = do_udp_server_start(port, sec_tag);
   11eea:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
	if (sec_tag == INVALID_SEC_TAG) {
   11eee:	3301      	adds	r3, #1
   11ef0:	d12e      	bne.n	11f50 <handle_at_udp_server+0xec>
	return z_impl_zsock_socket(family, type, proto);
   11ef2:	2211      	movs	r2, #17
   11ef4:	2102      	movs	r1, #2
   11ef6:	2001      	movs	r0, #1
   11ef8:	f001 fae0 	bl	134bc <z_impl_zsock_socket>
	if (udp_sock < 0) {
   11efc:	2800      	cmp	r0, #0
		udp_sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   11efe:	6028      	str	r0, [r5, #0]
	if (udp_sock < 0) {
   11f00:	da36      	bge.n	11f70 <handle_at_udp_server+0x10c>
   11f02:	4a81      	ldr	r2, [pc, #516]	; (12108 <handle_at_udp_server+0x2a4>)
   11f04:	4c7f      	ldr	r4, [pc, #508]	; (12104 <handle_at_udp_server+0x2a0>)
   11f06:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket() failed: %d", -errno);
   11f08:	f012 fa2c 	bl	24364 <__errno>
   11f0c:	08e4      	lsrs	r4, r4, #3
   11f0e:	6801      	ldr	r1, [r0, #0]
   11f10:	01a4      	lsls	r4, r4, #6
   11f12:	f044 0401 	orr.w	r4, r4, #1
   11f16:	4622      	mov	r2, r4
   11f18:	4249      	negs	r1, r1
   11f1a:	487d      	ldr	r0, [pc, #500]	; (12110 <handle_at_udp_server+0x2ac>)
   11f1c:	f011 fc4a 	bl	237b4 <log_1>
		sprintf(rsp_buf, "#XUDPSVR: %d\r\n", -errno);
   11f20:	f012 fa20 	bl	24364 <__errno>
   11f24:	6803      	ldr	r3, [r0, #0]
   11f26:	2100      	movs	r1, #0
   11f28:	425b      	negs	r3, r3
   11f2a:	f640 228c 	movw	r2, #2700	; 0xa8c
   11f2e:	9300      	str	r3, [sp, #0]
   11f30:	4878      	ldr	r0, [pc, #480]	; (12114 <handle_at_udp_server+0x2b0>)
   11f32:	4b79      	ldr	r3, [pc, #484]	; (12118 <handle_at_udp_server+0x2b4>)
   11f34:	f014 febe 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   11f38:	4876      	ldr	r0, [pc, #472]	; (12114 <handle_at_udp_server+0x2b0>)
   11f3a:	f7fa ff99 	bl	ce70 <strlen>
   11f3e:	4601      	mov	r1, r0
   11f40:	4874      	ldr	r0, [pc, #464]	; (12114 <handle_at_udp_server+0x2b0>)
   11f42:	f7fc f853 	bl	dfec <rsp_send>
		return -errno;
   11f46:	f012 fa0d 	bl	24364 <__errno>
   11f4a:	6804      	ldr	r4, [r0, #0]
   11f4c:	4264      	negs	r4, r4
   11f4e:	e00c      	b.n	11f6a <handle_at_udp_server+0x106>
		sprintf(rsp_buf,
   11f50:	4972      	ldr	r1, [pc, #456]	; (1211c <handle_at_udp_server+0x2b8>)
   11f52:	4870      	ldr	r0, [pc, #448]	; (12114 <handle_at_udp_server+0x2b0>)
   11f54:	f014 fed5 	bl	26d02 <strcpy>
		rsp_send(rsp_buf, strlen(rsp_buf));
   11f58:	486e      	ldr	r0, [pc, #440]	; (12114 <handle_at_udp_server+0x2b0>)
   11f5a:	f7fa ff89 	bl	ce70 <strlen>
   11f5e:	4601      	mov	r1, r0
   11f60:	486c      	ldr	r0, [pc, #432]	; (12114 <handle_at_udp_server+0x2b0>)
   11f62:	f7fc f843 	bl	dfec <rsp_send>
		return -ENOTSUP;
   11f66:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   11f6a:	4620      	mov	r0, r4
   11f6c:	b00c      	add	sp, #48	; 0x30
   11f6e:	bd70      	pop	{r4, r5, r6, pc}
	local.sin_family = AF_INET;
   11f70:	2601      	movs	r6, #1
	local.sin_port = htons(port);
   11f72:	0223      	lsls	r3, r4, #8
   11f74:	ea43 2314 	orr.w	r3, r3, r4, lsr #8
	ret = modem_info_params_get(&modem_param);
   11f78:	4869      	ldr	r0, [pc, #420]	; (12120 <handle_at_udp_server+0x2bc>)
	local.sin_family = AF_INET;
   11f7a:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
	local.sin_port = htons(port);
   11f7e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	ret = modem_info_params_get(&modem_param);
   11f82:	f005 f94b 	bl	1721c <modem_info_params_get>
	if (ret) {
   11f86:	4604      	mov	r4, r0
   11f88:	b168      	cbz	r0, 11fa6 <handle_at_udp_server+0x142>
   11f8a:	4b5f      	ldr	r3, [pc, #380]	; (12108 <handle_at_udp_server+0x2a4>)
   11f8c:	4a5d      	ldr	r2, [pc, #372]	; (12104 <handle_at_udp_server+0x2a0>)
		LOG_ERR("Unable to obtain modem parameters (%d)", ret);
   11f8e:	4601      	mov	r1, r0
   11f90:	1ad2      	subs	r2, r2, r3
   11f92:	08d2      	lsrs	r2, r2, #3
   11f94:	0192      	lsls	r2, r2, #6
   11f96:	4863      	ldr	r0, [pc, #396]	; (12124 <handle_at_udp_server+0x2c0>)
   11f98:	4332      	orrs	r2, r6
   11f9a:	f011 fc0b 	bl	237b4 <log_1>
		close(udp_sock);
   11f9e:	6828      	ldr	r0, [r5, #0]
   11fa0:	f011 f8fe 	bl	231a0 <close>
		return ret;
   11fa4:	e7e1      	b.n	11f6a <handle_at_udp_server+0x106>
	addr_len = strlen(modem_param.network.ip_address.value_string);
   11fa6:	4860      	ldr	r0, [pc, #384]	; (12128 <handle_at_udp_server+0x2c4>)
   11fa8:	f7fa ff62 	bl	ce70 <strlen>
	if (addr_len == 0) {
   11fac:	b968      	cbnz	r0, 11fca <handle_at_udp_server+0x166>
   11fae:	4955      	ldr	r1, [pc, #340]	; (12104 <handle_at_udp_server+0x2a0>)
   11fb0:	4b55      	ldr	r3, [pc, #340]	; (12108 <handle_at_udp_server+0x2a4>)
		LOG_ERR("LTE not connected yet");
   11fb2:	485e      	ldr	r0, [pc, #376]	; (1212c <handle_at_udp_server+0x2c8>)
   11fb4:	1ac9      	subs	r1, r1, r3
   11fb6:	08c9      	lsrs	r1, r1, #3
   11fb8:	0189      	lsls	r1, r1, #6
   11fba:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Invalid local address");
   11fbe:	f011 fbea 	bl	23796 <log_0>
		close(udp_sock);
   11fc2:	6828      	ldr	r0, [r5, #0]
   11fc4:	f011 f8ec 	bl	231a0 <close>
		return -EINVAL;
   11fc8:	e758      	b.n	11e7c <handle_at_udp_server+0x18>
	if (!check_for_ipv4(modem_param.network.ip_address.value_string,
   11fca:	b2c1      	uxtb	r1, r0
   11fcc:	4856      	ldr	r0, [pc, #344]	; (12128 <handle_at_udp_server+0x2c4>)
   11fce:	f011 f863 	bl	23098 <check_for_ipv4>
   11fd2:	b940      	cbnz	r0, 11fe6 <handle_at_udp_server+0x182>
   11fd4:	494b      	ldr	r1, [pc, #300]	; (12104 <handle_at_udp_server+0x2a0>)
   11fd6:	4b4c      	ldr	r3, [pc, #304]	; (12108 <handle_at_udp_server+0x2a4>)
		LOG_ERR("Invalid local address");
   11fd8:	4855      	ldr	r0, [pc, #340]	; (12130 <handle_at_udp_server+0x2cc>)
   11fda:	1ac9      	subs	r1, r1, r3
   11fdc:	08c9      	lsrs	r1, r1, #3
   11fde:	0189      	lsls	r1, r1, #6
   11fe0:	f041 0101 	orr.w	r1, r1, #1
   11fe4:	e7eb      	b.n	11fbe <handle_at_udp_server+0x15a>
	return z_impl_zsock_inet_pton(family, src, dst);
   11fe6:	4950      	ldr	r1, [pc, #320]	; (12128 <handle_at_udp_server+0x2c4>)
   11fe8:	4630      	mov	r0, r6
   11fea:	aa0b      	add	r2, sp, #44	; 0x2c
   11fec:	f011 ffd0 	bl	23f90 <z_impl_zsock_inet_pton>
	if (inet_pton(AF_INET, modem_param.network.ip_address.value_string,
   11ff0:	2801      	cmp	r0, #1
   11ff2:	d00f      	beq.n	12014 <handle_at_udp_server+0x1b0>
   11ff4:	4a44      	ldr	r2, [pc, #272]	; (12108 <handle_at_udp_server+0x2a4>)
   11ff6:	4c43      	ldr	r4, [pc, #268]	; (12104 <handle_at_udp_server+0x2a0>)
   11ff8:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Parse local IP address failed: %d", -errno);
   11ffa:	f012 f9b3 	bl	24364 <__errno>
   11ffe:	08e4      	lsrs	r4, r4, #3
   12000:	6801      	ldr	r1, [r0, #0]
   12002:	01a4      	lsls	r4, r4, #6
   12004:	f044 0401 	orr.w	r4, r4, #1
   12008:	4622      	mov	r2, r4
   1200a:	484a      	ldr	r0, [pc, #296]	; (12134 <handle_at_udp_server+0x2d0>)
   1200c:	4249      	negs	r1, r1
   1200e:	f011 fbd1 	bl	237b4 <log_1>
   12012:	e7d6      	b.n	11fc2 <handle_at_udp_server+0x15e>
	ret = bind(udp_sock, (struct sockaddr *)&local,
   12014:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_bind(sock, addr, addrlen);
   12016:	2208      	movs	r2, #8
   12018:	a90a      	add	r1, sp, #40	; 0x28
   1201a:	f011 ff2f 	bl	23e7c <z_impl_zsock_bind>
	if (ret) {
   1201e:	4604      	mov	r4, r0
   12020:	b328      	cbz	r0, 1206e <handle_at_udp_server+0x20a>
   12022:	4a39      	ldr	r2, [pc, #228]	; (12108 <handle_at_udp_server+0x2a4>)
   12024:	4c37      	ldr	r4, [pc, #220]	; (12104 <handle_at_udp_server+0x2a0>)
   12026:	1aa4      	subs	r4, r4, r2
		LOG_ERR("bind() failed: %d", -errno);
   12028:	f012 f99c 	bl	24364 <__errno>
   1202c:	08e4      	lsrs	r4, r4, #3
   1202e:	6801      	ldr	r1, [r0, #0]
   12030:	01a4      	lsls	r4, r4, #6
   12032:	f044 0401 	orr.w	r4, r4, #1
   12036:	4622      	mov	r2, r4
   12038:	4249      	negs	r1, r1
   1203a:	483f      	ldr	r0, [pc, #252]	; (12138 <handle_at_udp_server+0x2d4>)
   1203c:	f011 fbba 	bl	237b4 <log_1>
		sprintf(rsp_buf, "#XUDPSVR: %d\r\n", -errno);
   12040:	f012 f990 	bl	24364 <__errno>
   12044:	6803      	ldr	r3, [r0, #0]
   12046:	f640 228c 	movw	r2, #2700	; 0xa8c
   1204a:	425b      	negs	r3, r3
   1204c:	2100      	movs	r1, #0
   1204e:	9300      	str	r3, [sp, #0]
   12050:	4830      	ldr	r0, [pc, #192]	; (12114 <handle_at_udp_server+0x2b0>)
   12052:	4b31      	ldr	r3, [pc, #196]	; (12118 <handle_at_udp_server+0x2b4>)
   12054:	f014 fe2e 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   12058:	482e      	ldr	r0, [pc, #184]	; (12114 <handle_at_udp_server+0x2b0>)
   1205a:	f7fa ff09 	bl	ce70 <strlen>
   1205e:	4601      	mov	r1, r0
   12060:	482c      	ldr	r0, [pc, #176]	; (12114 <handle_at_udp_server+0x2b0>)
   12062:	f7fb ffc3 	bl	dfec <rsp_send>
		close(udp_sock);
   12066:	6828      	ldr	r0, [r5, #0]
   12068:	f011 f89a 	bl	231a0 <close>
   1206c:	e76b      	b.n	11f46 <handle_at_udp_server+0xe2>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1206e:	2200      	movs	r2, #0
   12070:	2300      	movs	r3, #0
   12072:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12076:	230e      	movs	r3, #14
   12078:	2204      	movs	r2, #4
   1207a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1207e:	e9cd 3203 	strd	r3, r2, [sp, #12]
   12082:	492e      	ldr	r1, [pc, #184]	; (1213c <handle_at_udp_server+0x2d8>)
   12084:	f44f 62c8 	mov.w	r2, #1600	; 0x640
   12088:	4b2d      	ldr	r3, [pc, #180]	; (12140 <handle_at_udp_server+0x2dc>)
   1208a:	9000      	str	r0, [sp, #0]
   1208c:	482d      	ldr	r0, [pc, #180]	; (12144 <handle_at_udp_server+0x2e0>)
   1208e:	f00f f973 	bl	21378 <z_impl_k_thread_create>
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   12092:	4b2d      	ldr	r3, [pc, #180]	; (12148 <handle_at_udp_server+0x2e4>)
	sprintf(rsp_buf, "#XUDPSVR: %d started\r\n", udp_sock);
   12094:	f640 228c 	movw	r2, #2700	; 0xa8c
	udp_thread_id = k_thread_create(&udp_thread, udp_thread_stack,
   12098:	6018      	str	r0, [r3, #0]
	sprintf(rsp_buf, "#XUDPSVR: %d started\r\n", udp_sock);
   1209a:	682b      	ldr	r3, [r5, #0]
   1209c:	4621      	mov	r1, r4
   1209e:	9300      	str	r3, [sp, #0]
   120a0:	481c      	ldr	r0, [pc, #112]	; (12114 <handle_at_udp_server+0x2b0>)
   120a2:	4b2a      	ldr	r3, [pc, #168]	; (1214c <handle_at_udp_server+0x2e8>)
   120a4:	f014 fe06 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   120a8:	481a      	ldr	r0, [pc, #104]	; (12114 <handle_at_udp_server+0x2b0>)
   120aa:	f7fa fee1 	bl	ce70 <strlen>
   120ae:	4601      	mov	r1, r0
   120b0:	4818      	ldr	r0, [pc, #96]	; (12114 <handle_at_udp_server+0x2b0>)
   120b2:	f7fb ff9b 	bl	dfec <rsp_send>
		break;
   120b6:	e758      	b.n	11f6a <handle_at_udp_server+0x106>
		} else if (op == AT_SERVER_STOP) {
   120b8:	2b00      	cmp	r3, #0
   120ba:	f47f af56 	bne.w	11f6a <handle_at_udp_server+0x106>
			if (udp_sock < 0) {
   120be:	4b10      	ldr	r3, [pc, #64]	; (12100 <handle_at_udp_server+0x29c>)
   120c0:	681c      	ldr	r4, [r3, #0]
   120c2:	2c00      	cmp	r4, #0
   120c4:	da08      	bge.n	120d8 <handle_at_udp_server+0x274>
   120c6:	490f      	ldr	r1, [pc, #60]	; (12104 <handle_at_udp_server+0x2a0>)
   120c8:	4b0f      	ldr	r3, [pc, #60]	; (12108 <handle_at_udp_server+0x2a4>)
				LOG_WRN("Server is not running");
   120ca:	4821      	ldr	r0, [pc, #132]	; (12150 <handle_at_udp_server+0x2ec>)
   120cc:	1ac9      	subs	r1, r1, r3
   120ce:	08c9      	lsrs	r1, r1, #3
   120d0:	0189      	lsls	r1, r1, #6
   120d2:	f041 0102 	orr.w	r1, r1, #2
   120d6:	e704      	b.n	11ee2 <handle_at_udp_server+0x7e>
	if (udp_sock > 0) {
   120d8:	f43f af47 	beq.w	11f6a <handle_at_udp_server+0x106>
   120dc:	f7ff fcce 	bl	11a7c <do_udp_server_stop.part.0>
   120e0:	4604      	mov	r4, r0
   120e2:	e742      	b.n	11f6a <handle_at_udp_server+0x106>
		sprintf(rsp_buf, "#XUDPSVR: (%d, %d),<port>,<sec_tag>\r\n",
   120e4:	2400      	movs	r4, #0
   120e6:	2301      	movs	r3, #1
   120e8:	f640 228c 	movw	r2, #2700	; 0xa8c
   120ec:	e9cd 4300 	strd	r4, r3, [sp]
   120f0:	4621      	mov	r1, r4
   120f2:	4b18      	ldr	r3, [pc, #96]	; (12154 <handle_at_udp_server+0x2f0>)
   120f4:	4807      	ldr	r0, [pc, #28]	; (12114 <handle_at_udp_server+0x2b0>)
   120f6:	f014 fddd 	bl	26cb4 <__sprintf_chk>
   120fa:	e7d5      	b.n	120a8 <handle_at_udp_server+0x244>
   120fc:	200213d0 	.word	0x200213d0
   12100:	200217f4 	.word	0x200217f4
   12104:	00027bd8 	.word	0x00027bd8
   12108:	00027b20 	.word	0x00027b20
   1210c:	00029855 	.word	0x00029855
   12110:	00028f87 	.word	0x00028f87
   12114:	20026ea6 	.word	0x20026ea6
   12118:	0002988d 	.word	0x0002988d
   1211c:	00029867 	.word	0x00029867
   12120:	20020880 	.word	0x20020880
   12124:	00028eca 	.word	0x00028eca
   12128:	20020b92 	.word	0x20020b92
   1212c:	00028ef1 	.word	0x00028ef1
   12130:	00028f07 	.word	0x00028f07
   12134:	00028f1d 	.word	0x00028f1d
   12138:	00028f3f 	.word	0x00028f3f
   1213c:	2002b610 	.word	0x2002b610
   12140:	0001191d 	.word	0x0001191d
   12144:	200217f8 	.word	0x200217f8
   12148:	200218b0 	.word	0x200218b0
   1214c:	0002989c 	.word	0x0002989c
   12150:	000298b3 	.word	0x000298b3
   12154:	000298c9 	.word	0x000298c9

00012158 <do_udp_send>:
{
   12158:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (udp_sock == INVALID_SOCKET) {
   1215c:	4e3a      	ldr	r6, [pc, #232]	; (12248 <do_udp_send+0xf0>)
{
   1215e:	4680      	mov	r8, r0
	if (udp_sock == INVALID_SOCKET) {
   12160:	6833      	ldr	r3, [r6, #0]
{
   12162:	460f      	mov	r7, r1
	if (udp_sock == INVALID_SOCKET) {
   12164:	3301      	adds	r3, #1
   12166:	d168      	bne.n	1223a <do_udp_send+0xe2>
   12168:	4b38      	ldr	r3, [pc, #224]	; (1224c <do_udp_send+0xf4>)
   1216a:	4939      	ldr	r1, [pc, #228]	; (12250 <do_udp_send+0xf8>)
		LOG_ERR("Not connected yet");
   1216c:	4839      	ldr	r0, [pc, #228]	; (12254 <do_udp_send+0xfc>)
   1216e:	1ac9      	subs	r1, r1, r3
   12170:	08c9      	lsrs	r1, r1, #3
   12172:	0189      	lsls	r1, r1, #6
   12174:	f041 0101 	orr.w	r1, r1, #1
   12178:	f011 fb0d 	bl	23796 <log_0>
		return -EINVAL;
   1217c:	f06f 0015 	mvn.w	r0, #21
}
   12180:	b002      	add	sp, #8
   12182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sprintf(rsp_buf, "#XUDPSEND: %d\r\n", -errno);
   12186:	f012 f8ed 	bl	24364 <__errno>
   1218a:	6803      	ldr	r3, [r0, #0]
   1218c:	f640 228c 	movw	r2, #2700	; 0xa8c
   12190:	425b      	negs	r3, r3
   12192:	2100      	movs	r1, #0
   12194:	9300      	str	r3, [sp, #0]
   12196:	4830      	ldr	r0, [pc, #192]	; (12258 <do_udp_send+0x100>)
   12198:	4b30      	ldr	r3, [pc, #192]	; (1225c <do_udp_send+0x104>)
   1219a:	f014 fd8b 	bl	26cb4 <__sprintf_chk>
				rsp_send(rsp_buf, strlen(rsp_buf));
   1219e:	482e      	ldr	r0, [pc, #184]	; (12258 <do_udp_send+0x100>)
   121a0:	f7fa fe66 	bl	ce70 <strlen>
   121a4:	4601      	mov	r1, r0
   121a6:	482c      	ldr	r0, [pc, #176]	; (12258 <do_udp_send+0x100>)
   121a8:	f7fb ff20 	bl	dfec <rsp_send>
   121ac:	e02f      	b.n	1220e <do_udp_send+0xb6>
		offset += ret;
   121ae:	4425      	add	r5, r4
	while (offset < datalen) {
   121b0:	42bd      	cmp	r5, r7
   121b2:	d230      	bcs.n	12216 <do_udp_send+0xbe>
		ret = sendto(udp_sock, data + offset, datalen - offset, 0,
   121b4:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   121b6:	2300      	movs	r3, #0
   121b8:	e9cd a900 	strd	sl, r9, [sp]
   121bc:	1b7a      	subs	r2, r7, r5
   121be:	eb08 0105 	add.w	r1, r8, r5
   121c2:	f011 fea1 	bl	23f08 <z_impl_zsock_sendto>
		if (ret < 0) {
   121c6:	1e04      	subs	r4, r0, #0
   121c8:	daf1      	bge.n	121ae <do_udp_send+0x56>
   121ca:	4a20      	ldr	r2, [pc, #128]	; (1224c <do_udp_send+0xf4>)
   121cc:	4c20      	ldr	r4, [pc, #128]	; (12250 <do_udp_send+0xf8>)
   121ce:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send() failed: %d", -errno);
   121d0:	f012 f8c8 	bl	24364 <__errno>
   121d4:	08e4      	lsrs	r4, r4, #3
   121d6:	6801      	ldr	r1, [r0, #0]
   121d8:	01a4      	lsls	r4, r4, #6
   121da:	f044 0401 	orr.w	r4, r4, #1
   121de:	4622      	mov	r2, r4
   121e0:	481f      	ldr	r0, [pc, #124]	; (12260 <do_udp_send+0x108>)
   121e2:	4249      	negs	r1, r1
   121e4:	f011 fae6 	bl	237b4 <log_1>
			if (errno != EAGAIN && errno != ETIMEDOUT) {
   121e8:	f012 f8bc 	bl	24364 <__errno>
   121ec:	6803      	ldr	r3, [r0, #0]
   121ee:	2b0b      	cmp	r3, #11
   121f0:	d0c9      	beq.n	12186 <do_udp_send+0x2e>
   121f2:	f012 f8b7 	bl	24364 <__errno>
   121f6:	6803      	ldr	r3, [r0, #0]
   121f8:	2b74      	cmp	r3, #116	; 0x74
   121fa:	d0c4      	beq.n	12186 <do_udp_send+0x2e>
				do_udp_server_stop(-errno);
   121fc:	f012 f8b2 	bl	24364 <__errno>
	if (udp_sock > 0) {
   12200:	6833      	ldr	r3, [r6, #0]
   12202:	2b00      	cmp	r3, #0
   12204:	dd03      	ble.n	1220e <do_udp_send+0xb6>
				do_udp_server_stop(-errno);
   12206:	6800      	ldr	r0, [r0, #0]
   12208:	4240      	negs	r0, r0
   1220a:	f7ff fc37 	bl	11a7c <do_udp_server_stop.part.0>
			ret = -errno;
   1220e:	f012 f8a9 	bl	24364 <__errno>
   12212:	6804      	ldr	r4, [r0, #0]
   12214:	4264      	negs	r4, r4
	sprintf(rsp_buf, "#XUDPSEND: %d\r\n", offset);
   12216:	f640 228c 	movw	r2, #2700	; 0xa8c
   1221a:	2100      	movs	r1, #0
   1221c:	4b0f      	ldr	r3, [pc, #60]	; (1225c <do_udp_send+0x104>)
   1221e:	480e      	ldr	r0, [pc, #56]	; (12258 <do_udp_send+0x100>)
   12220:	9500      	str	r5, [sp, #0]
   12222:	f014 fd47 	bl	26cb4 <__sprintf_chk>
	rsp_send(rsp_buf, strlen(rsp_buf));
   12226:	480c      	ldr	r0, [pc, #48]	; (12258 <do_udp_send+0x100>)
   12228:	f7fa fe22 	bl	ce70 <strlen>
   1222c:	4601      	mov	r1, r0
   1222e:	480a      	ldr	r0, [pc, #40]	; (12258 <do_udp_send+0x100>)
   12230:	f7fb fedc 	bl	dfec <rsp_send>
	if (ret >= 0) {
   12234:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   12238:	e7a2      	b.n	12180 <do_udp_send+0x28>
	u32_t offset = 0;
   1223a:	2500      	movs	r5, #0
   1223c:	f04f 0908 	mov.w	r9, #8
	int ret = 0;
   12240:	462c      	mov	r4, r5
   12242:	f8df a020 	ldr.w	sl, [pc, #32]	; 12264 <do_udp_send+0x10c>
   12246:	e7b3      	b.n	121b0 <do_udp_send+0x58>
   12248:	200217f4 	.word	0x200217f4
   1224c:	00027b20 	.word	0x00027b20
   12250:	00027bd8 	.word	0x00027bd8
   12254:	00028d98 	.word	0x00028d98
   12258:	20026ea6 	.word	0x20026ea6
   1225c:	000298ef 	.word	0x000298ef
   12260:	00028dcd 	.word	0x00028dcd
   12264:	200217ec 	.word	0x200217ec

00012268 <handle_at_udp_send>:
 *  AT#XUDPSEND=<datatype>,<data>
 *  AT#XUDPSEND? READ command not supported
 *  AT#XUDPSEND=? TEST command not supported
 */
static int handle_at_udp_send(enum at_cmd_type cmd_type)
{
   12268:	b590      	push	{r4, r7, lr}
	int err = -EINVAL;
	u16_t datatype;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
   1226a:	f44f 7310 	mov.w	r3, #576	; 0x240
{
   1226e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   12272:	af00      	add	r7, sp, #0
	int size = NET_IPV4_MTU;
   12274:	607b      	str	r3, [r7, #4]

	if (remote.sin_family == AF_UNSPEC || remote.sin_port == INVALID_PORT) {
   12276:	4b20      	ldr	r3, [pc, #128]	; (122f8 <handle_at_udp_send+0x90>)
{
   12278:	4604      	mov	r4, r0
	if (remote.sin_family == AF_UNSPEC || remote.sin_port == INVALID_PORT) {
   1227a:	881b      	ldrh	r3, [r3, #0]
   1227c:	b92b      	cbnz	r3, 1228a <handle_at_udp_send+0x22>
		return err;
   1227e:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
   12282:	f507 7713 	add.w	r7, r7, #588	; 0x24c
   12286:	46bd      	mov	sp, r7
   12288:	bd90      	pop	{r4, r7, pc}
	switch (cmd_type) {
   1228a:	2801      	cmp	r0, #1
   1228c:	d1f7      	bne.n	1227e <handle_at_udp_send+0x16>
		if (at_params_valid_count_get(&at_param_list) < 3) {
   1228e:	481b      	ldr	r0, [pc, #108]	; (122fc <handle_at_udp_send+0x94>)
   12290:	f013 ff18 	bl	260c4 <at_params_valid_count_get>
   12294:	2802      	cmp	r0, #2
   12296:	d9f2      	bls.n	1227e <handle_at_udp_send+0x16>
		err = at_params_short_get(&at_param_list, 1, &datatype);
   12298:	4621      	mov	r1, r4
   1229a:	4818      	ldr	r0, [pc, #96]	; (122fc <handle_at_udp_send+0x94>)
   1229c:	1cba      	adds	r2, r7, #2
   1229e:	f013 fec9 	bl	26034 <at_params_short_get>
		if (err) {
   122a2:	2800      	cmp	r0, #0
   122a4:	d1ed      	bne.n	12282 <handle_at_udp_send+0x1a>
		err = at_params_string_get(&at_param_list, 2, data, &size);
   122a6:	2102      	movs	r1, #2
   122a8:	4814      	ldr	r0, [pc, #80]	; (122fc <handle_at_udp_send+0x94>)
   122aa:	1d3b      	adds	r3, r7, #4
   122ac:	f107 0208 	add.w	r2, r7, #8
   122b0:	f013 fee5 	bl	2607e <at_params_string_get>
		if (err) {
   122b4:	2800      	cmp	r0, #0
   122b6:	d1e4      	bne.n	12282 <handle_at_udp_send+0x1a>
		if (datatype == DATATYPE_HEXADECIMAL) {
   122b8:	887b      	ldrh	r3, [r7, #2]
   122ba:	6879      	ldr	r1, [r7, #4]
   122bc:	b9bb      	cbnz	r3, 122ee <handle_at_udp_send+0x86>
			u8_t data_hex[size / 2];
   122be:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   122c2:	105b      	asrs	r3, r3, #1
   122c4:	1dda      	adds	r2, r3, #7
   122c6:	f022 0207 	bic.w	r2, r2, #7
		if (datatype == DATATYPE_HEXADECIMAL) {
   122ca:	466c      	mov	r4, sp
			u8_t data_hex[size / 2];
   122cc:	ebad 0d02 	sub.w	sp, sp, r2
			err = slm_util_atoh(data, size, data_hex, size / 2);
   122d0:	466a      	mov	r2, sp
   122d2:	b29b      	uxth	r3, r3
   122d4:	b289      	uxth	r1, r1
   122d6:	f107 0008 	add.w	r0, r7, #8
   122da:	f010 feb9 	bl	23050 <slm_util_atoh>
			if (err > 0) {
   122de:	2800      	cmp	r0, #0
   122e0:	dd03      	ble.n	122ea <handle_at_udp_send+0x82>
				err = do_udp_send(data_hex, err);
   122e2:	4601      	mov	r1, r0
   122e4:	4668      	mov	r0, sp
   122e6:	f7ff ff37 	bl	12158 <do_udp_send>
   122ea:	46a5      	mov	sp, r4
   122ec:	e7c9      	b.n	12282 <handle_at_udp_send+0x1a>
			err = do_udp_send(data, size);
   122ee:	f107 0008 	add.w	r0, r7, #8
   122f2:	f7ff ff31 	bl	12158 <do_udp_send>
   122f6:	e7c4      	b.n	12282 <handle_at_udp_send+0x1a>
   122f8:	200217ec 	.word	0x200217ec
   122fc:	200213d0 	.word	0x200213d0

00012300 <slm_at_udp_proxy_parse>:

/**@brief API to handle UDP Proxy AT commands
 */
int slm_at_udp_proxy_parse(const char *at_cmd)
{
   12300:	b570      	push	{r4, r5, r6, lr}
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
		if (slm_util_cmd_casecmp(at_cmd,
   12302:	491b      	ldr	r1, [pc, #108]	; (12370 <slm_at_udp_proxy_parse+0x70>)
{
   12304:	4604      	mov	r4, r0
		if (slm_util_cmd_casecmp(at_cmd,
   12306:	f7fb fd23 	bl	dd50 <slm_util_cmd_casecmp>
   1230a:	b9f0      	cbnz	r0, 1234a <slm_at_udp_proxy_parse+0x4a>
   1230c:	4620      	mov	r0, r4
   1230e:	4919      	ldr	r1, [pc, #100]	; (12374 <slm_at_udp_proxy_parse+0x74>)
   12310:	f7fb fd1e 	bl	dd50 <slm_util_cmd_casecmp>
   12314:	b9d8      	cbnz	r0, 1234e <slm_at_udp_proxy_parse+0x4e>
   12316:	4620      	mov	r0, r4
   12318:	4917      	ldr	r1, [pc, #92]	; (12378 <slm_at_udp_proxy_parse+0x78>)
   1231a:	f7fb fd19 	bl	dd50 <slm_util_cmd_casecmp>
   1231e:	b318      	cbz	r0, 12368 <slm_at_udp_proxy_parse+0x68>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   12320:	2502      	movs	r5, #2
					m_udp_proxy_at_list[i].string)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
   12322:	2100      	movs	r1, #0
   12324:	4620      	mov	r0, r4
   12326:	4a15      	ldr	r2, [pc, #84]	; (1237c <slm_at_udp_proxy_parse+0x7c>)
   12328:	f013 fd84 	bl	25e34 <at_parser_params_from_str>
						&at_param_list);
			if (ret) {
   1232c:	4601      	mov	r1, r0
   1232e:	b180      	cbz	r0, 12352 <slm_at_udp_proxy_parse+0x52>
   12330:	4b13      	ldr	r3, [pc, #76]	; (12380 <slm_at_udp_proxy_parse+0x80>)
   12332:	4a14      	ldr	r2, [pc, #80]	; (12384 <slm_at_udp_proxy_parse+0x84>)
				LOG_ERR("Failed to parse AT command %d", ret);
   12334:	4814      	ldr	r0, [pc, #80]	; (12388 <slm_at_udp_proxy_parse+0x88>)
   12336:	1ad2      	subs	r2, r2, r3
   12338:	08d2      	lsrs	r2, r2, #3
   1233a:	0192      	lsls	r2, r2, #6
   1233c:	f042 0201 	orr.w	r2, r2, #1
   12340:	f011 fa38 	bl	237b4 <log_1>
				return -EINVAL;
   12344:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
   12348:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   1234a:	2500      	movs	r5, #0
   1234c:	e7e9      	b.n	12322 <slm_at_udp_proxy_parse+0x22>
   1234e:	2501      	movs	r5, #1
   12350:	e7e7      	b.n	12322 <slm_at_udp_proxy_parse+0x22>
			type = at_parser_cmd_type_get(at_cmd);
   12352:	4620      	mov	r0, r4
   12354:	f013 fd71 	bl	25e3a <at_parser_cmd_type_get>
			ret = m_udp_proxy_at_list[i].handler(type);
   12358:	220c      	movs	r2, #12
   1235a:	4b0c      	ldr	r3, [pc, #48]	; (1238c <slm_at_udp_proxy_parse+0x8c>)
   1235c:	fb02 3505 	mla	r5, r2, r5, r3
   12360:	68ab      	ldr	r3, [r5, #8]
}
   12362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ret = m_udp_proxy_at_list[i].handler(type);
   12366:	4718      	bx	r3
	int ret = -ENOTSUP;
   12368:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1236c:	e7ec      	b.n	12348 <slm_at_udp_proxy_parse+0x48>
   1236e:	bf00      	nop
   12370:	000298ff 	.word	0x000298ff
   12374:	0002990a 	.word	0x0002990a
   12378:	00029915 	.word	0x00029915
   1237c:	200213d0 	.word	0x200213d0
   12380:	00027b20 	.word	0x00027b20
   12384:	00027bd8 	.word	0x00027bd8
   12388:	00028a38 	.word	0x00028a38
   1238c:	00027ed4 	.word	0x00027ed4

00012390 <slm_at_udp_proxy_clac>:

/**@brief API to list UDP Proxy AT commands
 */
void slm_at_udp_proxy_clac(void)
{
   12390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   12392:	2400      	movs	r4, #0
   12394:	4d0c      	ldr	r5, [pc, #48]	; (123c8 <slm_at_udp_proxy_clac+0x38>)
		sprintf(rsp_buf, "%s\r\n", m_udp_proxy_at_list[i].string);
   12396:	4f0d      	ldr	r7, [pc, #52]	; (123cc <slm_at_udp_proxy_clac+0x3c>)
   12398:	4e0d      	ldr	r6, [pc, #52]	; (123d0 <slm_at_udp_proxy_clac+0x40>)
   1239a:	686b      	ldr	r3, [r5, #4]
   1239c:	f640 228c 	movw	r2, #2700	; 0xa8c
   123a0:	2100      	movs	r1, #0
   123a2:	9300      	str	r3, [sp, #0]
   123a4:	4630      	mov	r0, r6
   123a6:	463b      	mov	r3, r7
   123a8:	f014 fc84 	bl	26cb4 <__sprintf_chk>
		rsp_send(rsp_buf, strlen(rsp_buf));
   123ac:	4630      	mov	r0, r6
   123ae:	f7fa fd5f 	bl	ce70 <strlen>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   123b2:	3401      	adds	r4, #1
		rsp_send(rsp_buf, strlen(rsp_buf));
   123b4:	4601      	mov	r1, r0
   123b6:	4630      	mov	r0, r6
   123b8:	f7fb fe18 	bl	dfec <rsp_send>
	for (int i = 0; i < AT_UDP_PROXY_MAX; i++) {
   123bc:	2c03      	cmp	r4, #3
   123be:	f105 050c 	add.w	r5, r5, #12
   123c2:	d1ea      	bne.n	1239a <slm_at_udp_proxy_clac+0xa>
	}
}
   123c4:	b003      	add	sp, #12
   123c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123c8:	00027ed4 	.word	0x00027ed4
   123cc:	00028bb2 	.word	0x00028bb2
   123d0:	20026ea6 	.word	0x20026ea6

000123d4 <slm_at_udp_proxy_init>:

/**@brief API to initialize UDP Proxy AT commands handler
 */
int slm_at_udp_proxy_init(void)
{
	udp_sock = INVALID_SOCKET;
   123d4:	f04f 32ff 	mov.w	r2, #4294967295
   123d8:	4b03      	ldr	r3, [pc, #12]	; (123e8 <slm_at_udp_proxy_init+0x14>)
	remote.sin_family = AF_UNSPEC;
	remote.sin_port = INVALID_PORT;

	return 0;
}
   123da:	2000      	movs	r0, #0
	udp_sock = INVALID_SOCKET;
   123dc:	601a      	str	r2, [r3, #0]
	remote.sin_family = AF_UNSPEC;
   123de:	4b03      	ldr	r3, [pc, #12]	; (123ec <slm_at_udp_proxy_init+0x18>)
   123e0:	4a03      	ldr	r2, [pc, #12]	; (123f0 <slm_at_udp_proxy_init+0x1c>)
   123e2:	601a      	str	r2, [r3, #0]
}
   123e4:	4770      	bx	lr
   123e6:	bf00      	nop
   123e8:	200217f4 	.word	0x200217f4
   123ec:	200217ec 	.word	0x200217ec
   123f0:	ffff0000 	.word	0xffff0000

000123f4 <slm_at_udp_proxy_uninit>:

/**@brief API to uninitialize UDP Proxy AT commands handler
 */
int slm_at_udp_proxy_uninit(void)
{
   123f4:	b538      	push	{r3, r4, r5, lr}
	int ret;

	if (udp_sock > 0) {
   123f6:	4d11      	ldr	r5, [pc, #68]	; (1243c <slm_at_udp_proxy_uninit+0x48>)
   123f8:	682b      	ldr	r3, [r5, #0]
   123fa:	2b00      	cmp	r3, #0
   123fc:	dd1c      	ble.n	12438 <slm_at_udp_proxy_uninit+0x44>
		k_thread_abort(udp_thread_id);
   123fe:	4b10      	ldr	r3, [pc, #64]	; (12440 <slm_at_udp_proxy_uninit+0x4c>)
   12400:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_abort(thread);
   12402:	f002 f8cd 	bl	145a0 <z_impl_k_thread_abort>
		ret = close(udp_sock);
   12406:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   12408:	f011 fd23 	bl	23e52 <z_impl_zsock_close>
		if (ret < 0) {
   1240c:	2800      	cmp	r0, #0
   1240e:	da10      	bge.n	12432 <slm_at_udp_proxy_uninit+0x3e>
   12410:	4a0c      	ldr	r2, [pc, #48]	; (12444 <slm_at_udp_proxy_uninit+0x50>)
   12412:	4c0d      	ldr	r4, [pc, #52]	; (12448 <slm_at_udp_proxy_uninit+0x54>)
   12414:	1aa4      	subs	r4, r4, r2
			LOG_WRN("close() failed: %d", -errno);
   12416:	f011 ffa5 	bl	24364 <__errno>
   1241a:	08e4      	lsrs	r4, r4, #3
   1241c:	6801      	ldr	r1, [r0, #0]
   1241e:	01a4      	lsls	r4, r4, #6
   12420:	f044 0402 	orr.w	r4, r4, #2
   12424:	4622      	mov	r2, r4
   12426:	4809      	ldr	r0, [pc, #36]	; (1244c <slm_at_udp_proxy_uninit+0x58>)
   12428:	4249      	negs	r1, r1
   1242a:	f011 f9c3 	bl	237b4 <log_1>
			ret = -errno;
   1242e:	f011 ff99 	bl	24364 <__errno>
		}
		udp_sock = INVALID_SOCKET;
   12432:	f04f 33ff 	mov.w	r3, #4294967295
   12436:	602b      	str	r3, [r5, #0]
	}

	return 0;
   12438:	2000      	movs	r0, #0
   1243a:	bd38      	pop	{r3, r4, r5, pc}
   1243c:	200217f4 	.word	0x200217f4
   12440:	200218b0 	.word	0x200218b0
   12444:	00027b20 	.word	0x00027b20
   12448:	00027bd8 	.word	0x00027bd8
   1244c:	00028cc3 	.word	0x00028cc3

00012450 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   12450:	2803      	cmp	r0, #3
{
   12452:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   12454:	d906      	bls.n	12464 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (fdtable[fd].obj == NULL) {
		errno = EBADF;
   12456:	f011 ff85 	bl	24364 <__errno>
   1245a:	2309      	movs	r3, #9
   1245c:	6003      	str	r3, [r0, #0]
   1245e:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   12462:	bd08      	pop	{r3, pc}
	if (fdtable[fd].obj == NULL) {
   12464:	4b03      	ldr	r3, [pc, #12]	; (12474 <_check_fd+0x24>)
   12466:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1246a:	2b00      	cmp	r3, #0
   1246c:	d0f3      	beq.n	12456 <_check_fd+0x6>
	return 0;
   1246e:	2000      	movs	r0, #0
   12470:	e7f7      	b.n	12462 <_check_fd+0x12>
   12472:	bf00      	nop
   12474:	200218b4 	.word	0x200218b4

00012478 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   12478:	b570      	push	{r4, r5, r6, lr}
   1247a:	4604      	mov	r4, r0
   1247c:	460d      	mov	r5, r1
   1247e:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   12480:	f7ff ffe6 	bl	12450 <_check_fd>
   12484:	2800      	cmp	r0, #0
   12486:	db09      	blt.n	1249c <z_get_fd_obj+0x24>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   12488:	4b07      	ldr	r3, [pc, #28]	; (124a8 <z_get_fd_obj+0x30>)
   1248a:	b14d      	cbz	r5, 124a0 <z_get_fd_obj+0x28>
   1248c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   12490:	6852      	ldr	r2, [r2, #4]
   12492:	42aa      	cmp	r2, r5
   12494:	d004      	beq.n	124a0 <z_get_fd_obj+0x28>
		errno = err;
   12496:	f011 ff65 	bl	24364 <__errno>
   1249a:	6006      	str	r6, [r0, #0]
		return NULL;
   1249c:	2000      	movs	r0, #0
   1249e:	e001      	b.n	124a4 <z_get_fd_obj+0x2c>
		return NULL;
	}

	return fd_entry->obj;
   124a0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
   124a4:	bd70      	pop	{r4, r5, r6, pc}
   124a6:	bf00      	nop
   124a8:	200218b4 	.word	0x200218b4

000124ac <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   124ac:	b538      	push	{r3, r4, r5, lr}
   124ae:	4604      	mov	r4, r0
   124b0:	460d      	mov	r5, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   124b2:	f7ff ffcd 	bl	12450 <_check_fd>
   124b6:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   124b8:	bfa9      	itett	ge
   124ba:	4b05      	ldrge	r3, [pc, #20]	; (124d0 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   124bc:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   124be:	eb03 02c4 	addge.w	r2, r3, r4, lsl #3
   124c2:	6852      	ldrge	r2, [r2, #4]

	return fd_entry->obj;
   124c4:	bfa4      	itt	ge
   124c6:	f853 0034 	ldrge.w	r0, [r3, r4, lsl #3]
	*vtable = fd_entry->vtable;
   124ca:	602a      	strge	r2, [r5, #0]
}
   124cc:	bd38      	pop	{r3, r4, r5, pc}
   124ce:	bf00      	nop
   124d0:	200218b4 	.word	0x200218b4

000124d4 <z_reserve_fd>:

int z_reserve_fd(void)
{
   124d4:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   124d6:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   124d8:	f04f 33ff 	mov.w	r3, #4294967295
   124dc:	f04f 32ff 	mov.w	r2, #4294967295
   124e0:	480c      	ldr	r0, [pc, #48]	; (12514 <z_reserve_fd+0x40>)
   124e2:	f00e fa01 	bl	208e8 <z_impl_k_mutex_lock>
		if (fdtable[fd].obj == NULL) {
   124e6:	4b0c      	ldr	r3, [pc, #48]	; (12518 <z_reserve_fd+0x44>)
   124e8:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   124ec:	b16a      	cbz	r2, 1250a <z_reserve_fd+0x36>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   124ee:	3401      	adds	r4, #1
   124f0:	2c04      	cmp	r4, #4
   124f2:	d1f9      	bne.n	124e8 <z_reserve_fd+0x14>
	errno = ENFILE;
   124f4:	f011 ff36 	bl	24364 <__errno>
   124f8:	2317      	movs	r3, #23
	return -1;
   124fa:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   124fe:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12500:	4804      	ldr	r0, [pc, #16]	; (12514 <z_reserve_fd+0x40>)
   12502:	f00e fa69 	bl	209d8 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   12506:	4620      	mov	r0, r4
   12508:	bd10      	pop	{r4, pc}
		fdtable[fd].obj = FD_OBJ_RESERVED;
   1250a:	2201      	movs	r2, #1
   1250c:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   12510:	e7f6      	b.n	12500 <z_reserve_fd+0x2c>
   12512:	bf00      	nop
   12514:	200207b0 	.word	0x200207b0
   12518:	200218b4 	.word	0x200218b4

0001251c <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
   1251c:	4b03      	ldr	r3, [pc, #12]	; (1252c <z_finalize_fd+0x10>)
   1251e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	fdtable[fd].vtable = vtable;
   12522:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   12526:	6042      	str	r2, [r0, #4]
}
   12528:	4770      	bx	lr
   1252a:	bf00      	nop
   1252c:	200218b4 	.word	0x200218b4

00012530 <z_free_fd>:

void z_free_fd(int fd)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
   12530:	2200      	movs	r2, #0
   12532:	4b02      	ldr	r3, [pc, #8]	; (1253c <z_free_fd+0xc>)
   12534:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
}
   12538:	4770      	bx	lr
   1253a:	bf00      	nop
   1253c:	200218b4 	.word	0x200218b4

00012540 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   12540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12544:	ed2d 8b02 	vpush	{d8}
   12548:	b083      	sub	sp, #12
   1254a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1254c:	469a      	mov	sl, r3
   1254e:	2c01      	cmp	r4, #1
   12550:	bfb8      	it	lt
   12552:	2401      	movlt	r4, #1
   12554:	2b01      	cmp	r3, #1
   12556:	bf0c      	ite	eq
   12558:	2330      	moveq	r3, #48	; 0x30
   1255a:	2320      	movne	r3, #32
   1255c:	4615      	mov	r5, r2
   1255e:	4606      	mov	r6, r0
   12560:	ee08 3a10 	vmov	s16, r3
   12564:	2701      	movs	r7, #1
   12566:	f04f 080a 	mov.w	r8, #10
   1256a:	2200      	movs	r2, #0
   1256c:	f8df b074 	ldr.w	fp, [pc, #116]	; 125e4 <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   12570:	fbb5 f9fb 	udiv	r9, r5, fp
   12574:	b90a      	cbnz	r2, 1257a <_printk_dec_ulong+0x3a>
   12576:	45ab      	cmp	fp, r5
   12578:	d820      	bhi.n	125bc <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   1257a:	f109 0030 	add.w	r0, r9, #48	; 0x30
   1257e:	9100      	str	r1, [sp, #0]
   12580:	47b0      	blx	r6
			found_largest_digit = 1;
   12582:	2201      	movs	r2, #1
			digits++;
   12584:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
   12586:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
   12588:	230a      	movs	r3, #10
		remaining--;
   1258a:	f108 38ff 	add.w	r8, r8, #4294967295
	while (pos >= 10) {
   1258e:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
   12592:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
   12596:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
   1259a:	d1e9      	bne.n	12570 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
   1259c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   125a0:	9100      	str	r1, [sp, #0]
   125a2:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
   125a4:	f1ba 0f03 	cmp.w	sl, #3
   125a8:	9900      	ldr	r1, [sp, #0]
   125aa:	d102      	bne.n	125b2 <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
   125ac:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
   125ae:	2c00      	cmp	r4, #0
   125b0:	dc11      	bgt.n	125d6 <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
   125b2:	b003      	add	sp, #12
   125b4:	ecbd 8b02 	vpop	{d8}
   125b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   125bc:	4544      	cmp	r4, r8
   125be:	dbe3      	blt.n	12588 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
   125c0:	f1ba 0f02 	cmp.w	sl, #2
   125c4:	d8e0      	bhi.n	12588 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   125c6:	ee18 0a10 	vmov	r0, s16
   125ca:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
   125ce:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   125d0:	47b0      	blx	r6
			digits++;
   125d2:	9a01      	ldr	r2, [sp, #4]
   125d4:	e7d7      	b.n	12586 <_printk_dec_ulong+0x46>
			out(' ', ctx);
   125d6:	2020      	movs	r0, #32
   125d8:	9100      	str	r1, [sp, #0]
   125da:	3c01      	subs	r4, #1
   125dc:	47b0      	blx	r6
   125de:	9900      	ldr	r1, [sp, #0]
   125e0:	e7e5      	b.n	125ae <_printk_dec_ulong+0x6e>
   125e2:	bf00      	nop
   125e4:	3b9aca00 	.word	0x3b9aca00

000125e8 <__printk_hook_install>:
	_char_out = fn;
   125e8:	4b01      	ldr	r3, [pc, #4]	; (125f0 <__printk_hook_install+0x8>)
   125ea:	6018      	str	r0, [r3, #0]
}
   125ec:	4770      	bx	lr
   125ee:	bf00      	nop
   125f0:	200200a8 	.word	0x200200a8

000125f4 <z_vprintk>:
{
   125f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   125f8:	2700      	movs	r7, #0
{
   125fa:	4605      	mov	r5, r0
   125fc:	468b      	mov	fp, r1
	int min_width = -1;
   125fe:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   12602:	46b8      	mov	r8, r7
{
   12604:	461c      	mov	r4, r3
   12606:	b08d      	sub	sp, #52	; 0x34
   12608:	1e53      	subs	r3, r2, #1
   1260a:	9303      	str	r3, [sp, #12]
			might_format = 0;
   1260c:	2600      	movs	r6, #0
					break;
   1260e:	e005      	b.n	1261c <z_vprintk+0x28>
		if (!might_format) {
   12610:	b96e      	cbnz	r6, 1262e <z_vprintk+0x3a>
			if (*fmt != '%') {
   12612:	2825      	cmp	r0, #37	; 0x25
   12614:	f000 8171 	beq.w	128fa <z_vprintk+0x306>
				out((int)*fmt, ctx);
   12618:	4659      	mov	r1, fp
   1261a:	47a8      	blx	r5
	while (*fmt) {
   1261c:	9b03      	ldr	r3, [sp, #12]
   1261e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   12622:	9303      	str	r3, [sp, #12]
   12624:	2800      	cmp	r0, #0
   12626:	d1f3      	bne.n	12610 <z_vprintk+0x1c>
}
   12628:	b00d      	add	sp, #52	; 0x34
   1262a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1262e:	287a      	cmp	r0, #122	; 0x7a
   12630:	d80a      	bhi.n	12648 <z_vprintk+0x54>
   12632:	2862      	cmp	r0, #98	; 0x62
   12634:	d810      	bhi.n	12658 <z_vprintk+0x64>
   12636:	2830      	cmp	r0, #48	; 0x30
   12638:	d054      	beq.n	126e4 <z_vprintk+0xf0>
   1263a:	d845      	bhi.n	126c8 <z_vprintk+0xd4>
   1263c:	2825      	cmp	r0, #37	; 0x25
   1263e:	f000 815a 	beq.w	128f6 <z_vprintk+0x302>
   12642:	282d      	cmp	r0, #45	; 0x2d
   12644:	f000 815f 	beq.w	12906 <z_vprintk+0x312>
					out((int)'%', ctx);
   12648:	4659      	mov	r1, fp
   1264a:	2025      	movs	r0, #37	; 0x25
   1264c:	47a8      	blx	r5
					out((int)*fmt, ctx);
   1264e:	4659      	mov	r1, fp
   12650:	9b03      	ldr	r3, [sp, #12]
   12652:	7818      	ldrb	r0, [r3, #0]
   12654:	47a8      	blx	r5
   12656:	e7d9      	b.n	1260c <z_vprintk+0x18>
   12658:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   1265c:	2b17      	cmp	r3, #23
   1265e:	d8f3      	bhi.n	12648 <z_vprintk+0x54>
   12660:	a201      	add	r2, pc, #4	; (adr r2, 12668 <z_vprintk+0x74>)
   12662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12666:	bf00      	nop
   12668:	000128ef 	.word	0x000128ef
   1266c:	00012733 	.word	0x00012733
   12670:	00012649 	.word	0x00012649
   12674:	00012649 	.word	0x00012649
   12678:	00012649 	.word	0x00012649
   1267c:	00012715 	.word	0x00012715
   12680:	00012733 	.word	0x00012733
   12684:	00012649 	.word	0x00012649
   12688:	00012649 	.word	0x00012649
   1268c:	00012715 	.word	0x00012715
   12690:	00012649 	.word	0x00012649
   12694:	00012649 	.word	0x00012649
   12698:	00012649 	.word	0x00012649
   1269c:	000127d5 	.word	0x000127d5
   126a0:	00012649 	.word	0x00012649
   126a4:	00012649 	.word	0x00012649
   126a8:	000128bf 	.word	0x000128bf
   126ac:	00012649 	.word	0x00012649
   126b0:	000127a3 	.word	0x000127a3
   126b4:	00012649 	.word	0x00012649
   126b8:	00012649 	.word	0x00012649
   126bc:	000126d1 	.word	0x000126d1
   126c0:	00012649 	.word	0x00012649
   126c4:	00012715 	.word	0x00012715
			switch (*fmt) {
   126c8:	2839      	cmp	r0, #57	; 0x39
   126ca:	d91a      	bls.n	12702 <z_vprintk+0x10e>
   126cc:	2858      	cmp	r0, #88	; 0x58
   126ce:	d1bb      	bne.n	12648 <z_vprintk+0x54>
				if (*fmt == 'p') {
   126d0:	9b03      	ldr	r3, [sp, #12]
   126d2:	781b      	ldrb	r3, [r3, #0]
   126d4:	2b70      	cmp	r3, #112	; 0x70
   126d6:	f040 8088 	bne.w	127ea <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
   126da:	f854 3b04 	ldr.w	r3, [r4], #4
   126de:	2200      	movs	r2, #0
   126e0:	9306      	str	r3, [sp, #24]
   126e2:	e090      	b.n	12806 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
   126e4:	f1b9 0f00 	cmp.w	r9, #0
   126e8:	da0e      	bge.n	12708 <z_vprintk+0x114>
   126ea:	f1b8 0f00 	cmp.w	r8, #0
   126ee:	f000 810d 	beq.w	1290c <z_vprintk+0x318>
					min_width = *fmt - '0';
   126f2:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   126f6:	f1b8 0f00 	cmp.w	r8, #0
   126fa:	bf08      	it	eq
   126fc:	f04f 0802 	moveq.w	r8, #2
   12700:	e78c      	b.n	1261c <z_vprintk+0x28>
				if (min_width < 0) {
   12702:	f1b9 0f00 	cmp.w	r9, #0
   12706:	dbf4      	blt.n	126f2 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
   12708:	230a      	movs	r3, #10
   1270a:	fb03 0909 	mla	r9, r3, r9, r0
   1270e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   12712:	e7f0      	b.n	126f6 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
   12714:	2868      	cmp	r0, #104	; 0x68
   12716:	d103      	bne.n	12720 <z_vprintk+0x12c>
   12718:	2f68      	cmp	r7, #104	; 0x68
   1271a:	d106      	bne.n	1272a <z_vprintk+0x136>
					length_mod = 'H';
   1271c:	2748      	movs	r7, #72	; 0x48
   1271e:	e77d      	b.n	1261c <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
   12720:	286c      	cmp	r0, #108	; 0x6c
   12722:	d102      	bne.n	1272a <z_vprintk+0x136>
   12724:	2f6c      	cmp	r7, #108	; 0x6c
   12726:	f000 80f4 	beq.w	12912 <z_vprintk+0x31e>
				} else if (length_mod == 0) {
   1272a:	2f00      	cmp	r7, #0
   1272c:	d18c      	bne.n	12648 <z_vprintk+0x54>
   1272e:	4607      	mov	r7, r0
   12730:	e774      	b.n	1261c <z_vprintk+0x28>
				if (length_mod == 'z') {
   12732:	2f7a      	cmp	r7, #122	; 0x7a
   12734:	d102      	bne.n	1273c <z_vprintk+0x148>
					d = va_arg(ap, int);
   12736:	f854 6b04 	ldr.w	r6, [r4], #4
   1273a:	e021      	b.n	12780 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
   1273c:	2f6c      	cmp	r7, #108	; 0x6c
   1273e:	d0fa      	beq.n	12736 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
   12740:	2f4c      	cmp	r7, #76	; 0x4c
   12742:	d1f8      	bne.n	12736 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
   12744:	3407      	adds	r4, #7
   12746:	f024 0407 	bic.w	r4, r4, #7
   1274a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1274e:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
   12752:	9b04      	ldr	r3, [sp, #16]
   12754:	f04f 30ff 	mov.w	r0, #4294967295
   12758:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   1275c:	9b05      	ldr	r3, [sp, #20]
   1275e:	9108      	str	r1, [sp, #32]
   12760:	f143 0100 	adc.w	r1, r3, #0
   12764:	9109      	str	r1, [sp, #36]	; 0x24
   12766:	2100      	movs	r1, #0
   12768:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1276c:	4299      	cmp	r1, r3
   1276e:	bf08      	it	eq
   12770:	4290      	cmpeq	r0, r2
   12772:	d204      	bcs.n	1277e <z_vprintk+0x18a>
						print_err(out, ctx);
   12774:	4659      	mov	r1, fp
   12776:	4628      	mov	r0, r5
   12778:	f010 fd16 	bl	231a8 <print_err>
						break;
   1277c:	e746      	b.n	1260c <z_vprintk+0x18>
					d = lld;
   1277e:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
   12780:	2e00      	cmp	r6, #0
   12782:	da05      	bge.n	12790 <z_vprintk+0x19c>
					out((int)'-', ctx);
   12784:	4659      	mov	r1, fp
   12786:	202d      	movs	r0, #45	; 0x2d
   12788:	47a8      	blx	r5
					d = -d;
   1278a:	4276      	negs	r6, r6
					min_width--;
   1278c:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   12790:	4643      	mov	r3, r8
   12792:	4632      	mov	r2, r6
   12794:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   12798:	4659      	mov	r1, fp
   1279a:	4628      	mov	r0, r5
   1279c:	f7ff fed0 	bl	12540 <_printk_dec_ulong>
				break;
   127a0:	e734      	b.n	1260c <z_vprintk+0x18>
				if (length_mod == 'z') {
   127a2:	2f7a      	cmp	r7, #122	; 0x7a
   127a4:	d102      	bne.n	127ac <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
   127a6:	f854 2b04 	ldr.w	r2, [r4], #4
   127aa:	e00f      	b.n	127cc <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
   127ac:	2f6c      	cmp	r7, #108	; 0x6c
   127ae:	d0fa      	beq.n	127a6 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
   127b0:	2f4c      	cmp	r7, #76	; 0x4c
   127b2:	d1f8      	bne.n	127a6 <z_vprintk+0x1b2>
					if (llu > ~0UL) {
   127b4:	2100      	movs	r1, #0
   127b6:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   127ba:	3407      	adds	r4, #7
   127bc:	f024 0407 	bic.w	r4, r4, #7
   127c0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   127c4:	4299      	cmp	r1, r3
   127c6:	bf08      	it	eq
   127c8:	4290      	cmpeq	r0, r2
   127ca:	d3d3      	bcc.n	12774 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
   127cc:	4643      	mov	r3, r8
   127ce:	f8cd 9000 	str.w	r9, [sp]
   127d2:	e7e1      	b.n	12798 <z_vprintk+0x1a4>
				out('0', ctx);
   127d4:	4659      	mov	r1, fp
   127d6:	2030      	movs	r0, #48	; 0x30
   127d8:	47a8      	blx	r5
				out('x', ctx);
   127da:	4659      	mov	r1, fp
   127dc:	2078      	movs	r0, #120	; 0x78
   127de:	47a8      	blx	r5
					min_width = 8;
   127e0:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   127e4:	f04f 0801 	mov.w	r8, #1
   127e8:	e772      	b.n	126d0 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   127ea:	2f6c      	cmp	r7, #108	; 0x6c
   127ec:	f43f af75 	beq.w	126da <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
   127f0:	2f4c      	cmp	r7, #76	; 0x4c
   127f2:	f47f af72 	bne.w	126da <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
   127f6:	1de3      	adds	r3, r4, #7
   127f8:	f023 0307 	bic.w	r3, r3, #7
   127fc:	461c      	mov	r4, r3
   127fe:	f854 2b08 	ldr.w	r2, [r4], #8
   12802:	9206      	str	r2, [sp, #24]
   12804:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
   12806:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   12808:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
   1280a:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
   1280e:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
   12810:	9107      	str	r1, [sp, #28]
		shift -= 4;
   12812:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
   12816:	9906      	ldr	r1, [sp, #24]
   12818:	f1ca 0e20 	rsb	lr, sl, #32
   1281c:	f1aa 0c20 	sub.w	ip, sl, #32
   12820:	fa21 f00a 	lsr.w	r0, r1, sl
   12824:	fa02 fe0e 	lsl.w	lr, r2, lr
   12828:	ea40 000e 	orr.w	r0, r0, lr
   1282c:	fa22 fc0c 	lsr.w	ip, r2, ip
   12830:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   12834:	f010 000f 	ands.w	r0, r0, #15
   12838:	d107      	bne.n	1284a <z_vprintk+0x256>
   1283a:	9907      	ldr	r1, [sp, #28]
   1283c:	b911      	cbnz	r1, 12844 <z_vprintk+0x250>
   1283e:	f1ba 0f00 	cmp.w	sl, #0
   12842:	d125      	bne.n	12890 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
   12844:	f04f 0c30 	mov.w	ip, #48	; 0x30
   12848:	e005      	b.n	12856 <z_vprintk+0x262>
   1284a:	2809      	cmp	r0, #9
   1284c:	bf8c      	ite	hi
   1284e:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   12852:	f04f 0c30 	movls.w	ip, #48	; 0x30
   12856:	4460      	add	r0, ip
			out((int)nibble, ctx);
   12858:	4659      	mov	r1, fp
   1285a:	b240      	sxtb	r0, r0
   1285c:	920a      	str	r2, [sp, #40]	; 0x28
   1285e:	9307      	str	r3, [sp, #28]
   12860:	47a8      	blx	r5
			digits++;
   12862:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
   12864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
   12866:	3301      	adds	r3, #1
   12868:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
   1286a:	9b07      	ldr	r3, [sp, #28]
   1286c:	f1ba 0f00 	cmp.w	sl, #0
   12870:	d123      	bne.n	128ba <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
   12872:	f1b8 0f03 	cmp.w	r8, #3
   12876:	f47f aec9 	bne.w	1260c <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
   1287a:	9b04      	ldr	r3, [sp, #16]
   1287c:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
   12880:	2e00      	cmp	r6, #0
   12882:	f77f aec3 	ble.w	1260c <z_vprintk+0x18>
			out(' ', ctx);
   12886:	4659      	mov	r1, fp
   12888:	2020      	movs	r0, #32
   1288a:	47a8      	blx	r5
   1288c:	3e01      	subs	r6, #1
   1288e:	e7f7      	b.n	12880 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
   12890:	1e59      	subs	r1, r3, #1
   12892:	4599      	cmp	r9, r3
   12894:	910a      	str	r1, [sp, #40]	; 0x28
   12896:	db07      	blt.n	128a8 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
   12898:	f1b8 0f01 	cmp.w	r8, #1
   1289c:	d106      	bne.n	128ac <z_vprintk+0x2b8>
				out('0', ctx);
   1289e:	4659      	mov	r1, fp
   128a0:	2030      	movs	r0, #48	; 0x30
   128a2:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
   128a4:	47a8      	blx	r5
   128a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
   128a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   128aa:	e7b2      	b.n	12812 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
   128ac:	f1b8 0f02 	cmp.w	r8, #2
   128b0:	d1fa      	bne.n	128a8 <z_vprintk+0x2b4>
				out(' ', ctx);
   128b2:	4659      	mov	r1, fp
   128b4:	2020      	movs	r0, #32
   128b6:	920b      	str	r2, [sp, #44]	; 0x2c
   128b8:	e7f4      	b.n	128a4 <z_vprintk+0x2b0>
			found_largest_digit = 1;
   128ba:	9607      	str	r6, [sp, #28]
   128bc:	e7a9      	b.n	12812 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
   128be:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
   128c2:	46b2      	mov	sl, r6
   128c4:	4653      	mov	r3, sl
   128c6:	f81a 0b01 	ldrb.w	r0, [sl], #1
   128ca:	b968      	cbnz	r0, 128e8 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
   128cc:	f1b8 0f03 	cmp.w	r8, #3
   128d0:	d121      	bne.n	12916 <z_vprintk+0x322>
					int remaining = min_width - (s - start);
   128d2:	1b9e      	subs	r6, r3, r6
   128d4:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
   128d8:	2e00      	cmp	r6, #0
   128da:	f77f ae97 	ble.w	1260c <z_vprintk+0x18>
						out(' ', ctx);
   128de:	4659      	mov	r1, fp
   128e0:	2020      	movs	r0, #32
   128e2:	47a8      	blx	r5
   128e4:	3e01      	subs	r6, #1
   128e6:	e7f7      	b.n	128d8 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
   128e8:	4659      	mov	r1, fp
   128ea:	47a8      	blx	r5
   128ec:	e7ea      	b.n	128c4 <z_vprintk+0x2d0>
				out(c, ctx);
   128ee:	4659      	mov	r1, fp
   128f0:	f854 0b04 	ldr.w	r0, [r4], #4
   128f4:	e6ae      	b.n	12654 <z_vprintk+0x60>
				out((int)'%', ctx);
   128f6:	4659      	mov	r1, fp
   128f8:	e6ac      	b.n	12654 <z_vprintk+0x60>
				length_mod = 0;
   128fa:	4637      	mov	r7, r6
				padding = PAD_NONE;
   128fc:	46b0      	mov	r8, r6
				min_width = -1;
   128fe:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   12902:	2601      	movs	r6, #1
   12904:	e68a      	b.n	1261c <z_vprintk+0x28>
			switch (*fmt) {
   12906:	f04f 0803 	mov.w	r8, #3
   1290a:	e687      	b.n	1261c <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
   1290c:	f04f 0801 	mov.w	r8, #1
   12910:	e684      	b.n	1261c <z_vprintk+0x28>
					length_mod = 'L';
   12912:	274c      	movs	r7, #76	; 0x4c
   12914:	e682      	b.n	1261c <z_vprintk+0x28>
			might_format = 0;
   12916:	4606      	mov	r6, r0
		++fmt;
   12918:	e680      	b.n	1261c <z_vprintk+0x28>
   1291a:	bf00      	nop

0001291c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1291c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   1291e:	2500      	movs	r5, #0
{
   12920:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   12922:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   12926:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   12928:	a901      	add	r1, sp, #4
   1292a:	4805      	ldr	r0, [pc, #20]	; (12940 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   1292c:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   1292e:	f7ff fe61 	bl	125f4 <z_vprintk>

	if (ctx.count < ctx.max) {
   12932:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   12936:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12938:	bfb8      	it	lt
   1293a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1293c:	b005      	add	sp, #20
   1293e:	bd30      	pop	{r4, r5, pc}
   12940:	000231c5 	.word	0x000231c5

00012944 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   12944:	f04f 0220 	mov.w	r2, #32
   12948:	f3ef 8311 	mrs	r3, BASEPRI
   1294c:	f382 8811 	msr	BASEPRI, r2
   12950:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12954:	2101      	movs	r1, #1
   12956:	4a04      	ldr	r2, [pc, #16]	; (12968 <nordicsemi_nrf91_init+0x24>)
   12958:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1295c:	f383 8811 	msr	BASEPRI, r3
   12960:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12964:	2000      	movs	r0, #0
   12966:	4770      	bx	lr
   12968:	40039000 	.word	0x40039000

0001296c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1296c:	b120      	cbz	r0, 12978 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1296e:	4b03      	ldr	r3, [pc, #12]	; (1297c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12970:	0180      	lsls	r0, r0, #6
   12972:	f043 0301 	orr.w	r3, r3, #1
   12976:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12978:	4770      	bx	lr
   1297a:	bf00      	nop
   1297c:	00027c50 	.word	0x00027c50

00012980 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   12980:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12982:	2200      	movs	r2, #0
{
   12984:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12986:	490f      	ldr	r1, [pc, #60]	; (129c4 <enable_logger+0x44>)
   12988:	480f      	ldr	r0, [pc, #60]	; (129c8 <enable_logger+0x48>)
   1298a:	f013 fee5 	bl	26758 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1298e:	2200      	movs	r2, #0
   12990:	2300      	movs	r3, #0
   12992:	2400      	movs	r4, #0
   12994:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12998:	230e      	movs	r3, #14
   1299a:	4d0c      	ldr	r5, [pc, #48]	; (129cc <enable_logger+0x4c>)
   1299c:	e9cd 3403 	strd	r3, r4, [sp, #12]
   129a0:	f44f 7240 	mov.w	r2, #768	; 0x300
   129a4:	4628      	mov	r0, r5
   129a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   129aa:	4b09      	ldr	r3, [pc, #36]	; (129d0 <enable_logger+0x50>)
   129ac:	4909      	ldr	r1, [pc, #36]	; (129d4 <enable_logger+0x54>)
   129ae:	9400      	str	r4, [sp, #0]
   129b0:	f00e fce2 	bl	21378 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   129b4:	4908      	ldr	r1, [pc, #32]	; (129d8 <enable_logger+0x58>)
   129b6:	4628      	mov	r0, r5
   129b8:	f013 fe59 	bl	2666e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   129bc:	4620      	mov	r0, r4
   129be:	b009      	add	sp, #36	; 0x24
   129c0:	bd30      	pop	{r4, r5, pc}
   129c2:	bf00      	nop
   129c4:	000129dd 	.word	0x000129dd
   129c8:	20021258 	.word	0x20021258
   129cc:	20021904 	.word	0x20021904
   129d0:	00012e2d 	.word	0x00012e2d
   129d4:	2002bc50 	.word	0x2002bc50
   129d8:	0002992f 	.word	0x0002992f

000129dc <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   129dc:	4801      	ldr	r0, [pc, #4]	; (129e4 <log_process_thread_timer_expiry_fn+0x8>)
   129de:	f00e bc23 	b.w	21228 <z_impl_k_sem_give>
   129e2:	bf00      	nop
   129e4:	20020738 	.word	0x20020738

000129e8 <z_log_get_s_mask>:
{
   129e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   129ea:	4605      	mov	r5, r0
	u32_t mask = 0;
   129ec:	2000      	movs	r0, #0
				mask |= BIT(arg);
   129ee:	2701      	movs	r7, #1
	u32_t arg = 0;
   129f0:	4603      	mov	r3, r0
	bool arm = false;
   129f2:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   129f4:	4e0d      	ldr	r6, [pc, #52]	; (12a2c <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
   129f6:	f815 4b01 	ldrb.w	r4, [r5], #1
   129fa:	b10c      	cbz	r4, 12a00 <z_log_get_s_mask+0x18>
   129fc:	428b      	cmp	r3, r1
   129fe:	d300      	bcc.n	12a02 <z_log_get_s_mask+0x1a>
}
   12a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   12a02:	2c25      	cmp	r4, #37	; 0x25
   12a04:	d102      	bne.n	12a0c <z_log_get_s_mask+0x24>
			arm = !arm;
   12a06:	f082 0201 	eor.w	r2, r2, #1
   12a0a:	e7f4      	b.n	129f6 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
   12a0c:	2a00      	cmp	r2, #0
   12a0e:	d0f2      	beq.n	129f6 <z_log_get_s_mask+0xe>
   12a10:	f814 c006 	ldrb.w	ip, [r4, r6]
   12a14:	f01c 0f03 	tst.w	ip, #3
   12a18:	d0ed      	beq.n	129f6 <z_log_get_s_mask+0xe>
			if (curr == 's') {
   12a1a:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   12a1c:	bf04      	itt	eq
   12a1e:	fa07 f203 	lsleq.w	r2, r7, r3
   12a22:	4310      	orreq	r0, r2
			arg++;
   12a24:	3301      	adds	r3, #1
			arm = false;
   12a26:	2200      	movs	r2, #0
   12a28:	e7e5      	b.n	129f6 <z_log_get_s_mask+0xe>
   12a2a:	bf00      	nop
   12a2c:	0002a974 	.word	0x0002a974

00012a30 <log_core_init>:
{
   12a30:	b508      	push	{r3, lr}
		log_msg_pool_init();
   12a32:	f000 fa59 	bl	12ee8 <log_msg_pool_init>
		log_list_init(&list);
   12a36:	4809      	ldr	r0, [pc, #36]	; (12a5c <log_core_init+0x2c>)
   12a38:	f010 fe8a 	bl	23750 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12a3c:	2304      	movs	r3, #4
   12a3e:	2234      	movs	r2, #52	; 0x34
   12a40:	4907      	ldr	r1, [pc, #28]	; (12a60 <log_core_init+0x30>)
   12a42:	4808      	ldr	r0, [pc, #32]	; (12a64 <log_core_init+0x34>)
   12a44:	f013 fbf1 	bl	2622a <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   12a48:	4b07      	ldr	r3, [pc, #28]	; (12a68 <log_core_init+0x38>)
   12a4a:	4a08      	ldr	r2, [pc, #32]	; (12a6c <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   12a4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   12a50:	601a      	str	r2, [r3, #0]
}
   12a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   12a56:	f000 bc91 	b.w	1337c <log_output_timestamp_freq_set>
   12a5a:	bf00      	nop
   12a5c:	200218e0 	.word	0x200218e0
   12a60:	20030490 	.word	0x20030490
   12a64:	200218e8 	.word	0x200218e8
   12a68:	200200ac 	.word	0x200200ac
   12a6c:	0002378f 	.word	0x0002378f

00012a70 <dropped_notify>:
{
   12a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12a72:	2500      	movs	r5, #0
   12a74:	4b0c      	ldr	r3, [pc, #48]	; (12aa8 <dropped_notify+0x38>)
   12a76:	e8d3 7fef 	ldaex	r7, [r3]
   12a7a:	e8c3 5fe2 	stlex	r2, r5, [r3]
   12a7e:	2a00      	cmp	r2, #0
   12a80:	d1f9      	bne.n	12a76 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   12a82:	4c0a      	ldr	r4, [pc, #40]	; (12aac <dropped_notify+0x3c>)
   12a84:	4e0a      	ldr	r6, [pc, #40]	; (12ab0 <dropped_notify+0x40>)
   12a86:	1b36      	subs	r6, r6, r4
   12a88:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12a8a:	42b5      	cmp	r5, r6
   12a8c:	db00      	blt.n	12a90 <dropped_notify+0x20>
}
   12a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12a90:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12a92:	795b      	ldrb	r3, [r3, #5]
   12a94:	b12b      	cbz	r3, 12aa2 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
   12a96:	6823      	ldr	r3, [r4, #0]
   12a98:	68db      	ldr	r3, [r3, #12]
   12a9a:	b113      	cbz	r3, 12aa2 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
   12a9c:	4639      	mov	r1, r7
   12a9e:	4620      	mov	r0, r4
   12aa0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12aa2:	3501      	adds	r5, #1
   12aa4:	3410      	adds	r4, #16
   12aa6:	e7f0      	b.n	12a8a <dropped_notify+0x1a>
   12aa8:	200218d8 	.word	0x200218d8
   12aac:	00027be0 	.word	0x00027be0
   12ab0:	00027bf0 	.word	0x00027bf0

00012ab4 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12ab4:	4b04      	ldr	r3, [pc, #16]	; (12ac8 <log_dropped+0x14>)
   12ab6:	e8d3 2fef 	ldaex	r2, [r3]
   12aba:	3201      	adds	r2, #1
   12abc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12ac0:	2900      	cmp	r1, #0
   12ac2:	d1f8      	bne.n	12ab6 <log_dropped+0x2>
}
   12ac4:	4770      	bx	lr
   12ac6:	bf00      	nop
   12ac8:	200218d8 	.word	0x200218d8

00012acc <log_source_name_get>:
   12acc:	4a04      	ldr	r2, [pc, #16]	; (12ae0 <log_source_name_get+0x14>)
   12ace:	4b05      	ldr	r3, [pc, #20]	; (12ae4 <log_source_name_get+0x18>)
   12ad0:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12ad2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   12ad6:	bf34      	ite	cc
   12ad8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   12adc:	2000      	movcs	r0, #0
}
   12ade:	4770      	bx	lr
   12ae0:	00027b20 	.word	0x00027b20
   12ae4:	00027be0 	.word	0x00027be0

00012ae8 <log_backend_enable>:
	id += backend - log_backend_get(0);
   12ae8:	4b09      	ldr	r3, [pc, #36]	; (12b10 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   12aea:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   12aec:	1ac3      	subs	r3, r0, r3
   12aee:	111b      	asrs	r3, r3, #4
   12af0:	3301      	adds	r3, #1
{
   12af2:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   12af4:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   12af6:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   12af8:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   12afa:	4c06      	ldr	r4, [pc, #24]	; (12b14 <log_backend_enable+0x2c>)
   12afc:	715a      	strb	r2, [r3, #5]
   12afe:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   12b00:	6019      	str	r1, [r3, #0]
   12b02:	b912      	cbnz	r2, 12b0a <log_backend_enable+0x22>
   12b04:	4804      	ldr	r0, [pc, #16]	; (12b18 <log_backend_enable+0x30>)
   12b06:	f00e fb8f 	bl	21228 <z_impl_k_sem_give>
	backend_attached = true;
   12b0a:	2301      	movs	r3, #1
   12b0c:	7023      	strb	r3, [r4, #0]
}
   12b0e:	bd10      	pop	{r4, pc}
   12b10:	00027be0 	.word	0x00027be0
   12b14:	20029998 	.word	0x20029998
   12b18:	20020738 	.word	0x20020738

00012b1c <log_init>:
{
   12b1c:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   12b1e:	4b14      	ldr	r3, [pc, #80]	; (12b70 <log_init+0x54>)
   12b20:	4c14      	ldr	r4, [pc, #80]	; (12b74 <log_init+0x58>)
   12b22:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12b24:	2b9f      	cmp	r3, #159	; 0x9f
   12b26:	ea4f 1623 	mov.w	r6, r3, asr #4
   12b2a:	d906      	bls.n	12b3a <log_init+0x1e>
   12b2c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   12b30:	4b11      	ldr	r3, [pc, #68]	; (12b78 <log_init+0x5c>)
   12b32:	4a12      	ldr	r2, [pc, #72]	; (12b7c <log_init+0x60>)
   12b34:	4812      	ldr	r0, [pc, #72]	; (12b80 <log_init+0x64>)
   12b36:	f00e fecb 	bl	218d0 <__assert_func>
   12b3a:	4b12      	ldr	r3, [pc, #72]	; (12b84 <log_init+0x68>)
   12b3c:	e8d3 5fef 	ldaex	r5, [r3]
   12b40:	1c6a      	adds	r2, r5, #1
   12b42:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12b46:	2900      	cmp	r1, #0
   12b48:	d1f8      	bne.n	12b3c <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
   12b4a:	b90d      	cbnz	r5, 12b50 <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
   12b4c:	42b5      	cmp	r5, r6
   12b4e:	d100      	bne.n	12b52 <log_init+0x36>
}
   12b50:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   12b52:	7b23      	ldrb	r3, [r4, #12]
   12b54:	b143      	cbz	r3, 12b68 <log_init+0x4c>
			if (backend->api->init != NULL) {
   12b56:	6823      	ldr	r3, [r4, #0]
   12b58:	695b      	ldr	r3, [r3, #20]
   12b5a:	b103      	cbz	r3, 12b5e <log_init+0x42>
				backend->api->init();
   12b5c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   12b5e:	2204      	movs	r2, #4
   12b60:	2100      	movs	r1, #0
   12b62:	4620      	mov	r0, r4
   12b64:	f7ff ffc0 	bl	12ae8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12b68:	3501      	adds	r5, #1
   12b6a:	3410      	adds	r4, #16
   12b6c:	e7ee      	b.n	12b4c <log_init+0x30>
   12b6e:	bf00      	nop
   12b70:	00027bf0 	.word	0x00027bf0
   12b74:	00027be0 	.word	0x00027be0
   12b78:	00029964 	.word	0x00029964
   12b7c:	000299f4 	.word	0x000299f4
   12b80:	00029937 	.word	0x00029937
   12b84:	200218dc 	.word	0x200218dc

00012b88 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   12b88:	4b14      	ldr	r3, [pc, #80]	; (12bdc <log_strdup+0x54>)
{
   12b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   12b8c:	4298      	cmp	r0, r3
{
   12b8e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12b90:	d302      	bcc.n	12b98 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   12b92:	4b13      	ldr	r3, [pc, #76]	; (12be0 <log_strdup+0x58>)
   12b94:	4298      	cmp	r0, r3
   12b96:	d31c      	bcc.n	12bd2 <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12b98:	2200      	movs	r2, #0
   12b9a:	2300      	movs	r3, #0
   12b9c:	4811      	ldr	r0, [pc, #68]	; (12be4 <log_strdup+0x5c>)
   12b9e:	a901      	add	r1, sp, #4
   12ba0:	f00d fd74 	bl	2068c <k_mem_slab_alloc>
	if (err != 0) {
   12ba4:	4605      	mov	r5, r0
   12ba6:	b9b8      	cbnz	r0, 12bd8 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12ba8:	2201      	movs	r2, #1
   12baa:	9b01      	ldr	r3, [sp, #4]
   12bac:	e8d3 1fef 	ldaex	r1, [r3]
   12bb0:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12bb4:	2800      	cmp	r0, #0
   12bb6:	d1f9      	bne.n	12bac <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   12bb8:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12bba:	222d      	movs	r2, #45	; 0x2d
   12bbc:	1d33      	adds	r3, r6, #4
   12bbe:	4621      	mov	r1, r4
   12bc0:	4618      	mov	r0, r3
   12bc2:	f014 f8d4 	bl	26d6e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12bc6:	227e      	movs	r2, #126	; 0x7e
	return dup->buf;
   12bc8:	4604      	mov	r4, r0
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12bca:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   12bce:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
}
   12bd2:	4620      	mov	r0, r4
   12bd4:	b002      	add	sp, #8
   12bd6:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   12bd8:	4c03      	ldr	r4, [pc, #12]	; (12be8 <log_strdup+0x60>)
   12bda:	e7fa      	b.n	12bd2 <log_strdup+0x4a>
   12bdc:	0002785c 	.word	0x0002785c
   12be0:	0002aaf8 	.word	0x0002aaf8
   12be4:	200218e8 	.word	0x200218e8
   12be8:	00029997 	.word	0x00029997

00012bec <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
   12bec:	b148      	cbz	r0, 12c02 <log_is_strdup+0x16>
   12bee:	4b05      	ldr	r3, [pc, #20]	; (12c04 <log_is_strdup+0x18>)
   12bf0:	4298      	cmp	r0, r3
   12bf2:	d305      	bcc.n	12c00 <log_is_strdup+0x14>
   12bf4:	33d0      	adds	r3, #208	; 0xd0
   12bf6:	4298      	cmp	r0, r3
   12bf8:	bf2c      	ite	cs
   12bfa:	2000      	movcs	r0, #0
   12bfc:	2001      	movcc	r0, #1
   12bfe:	4770      	bx	lr
   12c00:	2000      	movs	r0, #0
}
   12c02:	4770      	bx	lr
   12c04:	20030490 	.word	0x20030490

00012c08 <z_impl_log_process>:
{
   12c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   12c0c:	4b4a      	ldr	r3, [pc, #296]	; (12d38 <z_impl_log_process+0x130>)
{
   12c0e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   12c10:	781b      	ldrb	r3, [r3, #0]
{
   12c12:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   12c14:	b903      	cbnz	r3, 12c18 <z_impl_log_process+0x10>
   12c16:	b340      	cbz	r0, 12c6a <z_impl_log_process+0x62>
	__asm__ volatile(
   12c18:	f04f 0320 	mov.w	r3, #32
   12c1c:	f3ef 8611 	mrs	r6, BASEPRI
   12c20:	f383 8811 	msr	BASEPRI, r3
   12c24:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   12c28:	4844      	ldr	r0, [pc, #272]	; (12d3c <z_impl_log_process+0x134>)
   12c2a:	f010 fda1 	bl	23770 <log_list_head_get>
   12c2e:	4605      	mov	r5, r0
	__asm__ volatile(
   12c30:	f386 8811 	msr	BASEPRI, r6
   12c34:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   12c38:	b158      	cbz	r0, 12c52 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12c3a:	4b41      	ldr	r3, [pc, #260]	; (12d40 <z_impl_log_process+0x138>)
   12c3c:	e8d3 2fef 	ldaex	r2, [r3]
   12c40:	3a01      	subs	r2, #1
   12c42:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12c46:	2900      	cmp	r1, #0
   12c48:	d1f8      	bne.n	12c3c <z_impl_log_process+0x34>
	if (!bypass) {
   12c4a:	b194      	cbz	r4, 12c72 <z_impl_log_process+0x6a>
	log_msg_put(msg);
   12c4c:	4628      	mov	r0, r5
   12c4e:	f010 fea1 	bl	23994 <log_msg_put>
	if (!bypass && dropped_cnt) {
   12c52:	b924      	cbnz	r4, 12c5e <z_impl_log_process+0x56>
   12c54:	4b3b      	ldr	r3, [pc, #236]	; (12d44 <z_impl_log_process+0x13c>)
   12c56:	681b      	ldr	r3, [r3, #0]
   12c58:	b10b      	cbz	r3, 12c5e <z_impl_log_process+0x56>
		dropped_notify();
   12c5a:	f7ff ff09 	bl	12a70 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   12c5e:	4837      	ldr	r0, [pc, #220]	; (12d3c <z_impl_log_process+0x134>)
   12c60:	f010 fd84 	bl	2376c <log_list_head_peek>
   12c64:	1e04      	subs	r4, r0, #0
   12c66:	bf18      	it	ne
   12c68:	2401      	movne	r4, #1
}
   12c6a:	4620      	mov	r0, r4
   12c6c:	b005      	add	sp, #20
   12c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   12c72:	4b35      	ldr	r3, [pc, #212]	; (12d48 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   12c74:	781b      	ldrb	r3, [r3, #0]
   12c76:	b9cb      	cbnz	r3, 12cac <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12c78:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   12c7a:	07db      	lsls	r3, r3, #31
   12c7c:	d416      	bmi.n	12cac <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
   12c7e:	f010 fe98 	bl	239b2 <log_msg_str_get>
   12c82:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12c84:	4628      	mov	r0, r5
   12c86:	f010 fe63 	bl	23950 <log_msg_nargs_get>
   12c8a:	4601      	mov	r1, r0
   12c8c:	4640      	mov	r0, r8
   12c8e:	f7ff feab 	bl	129e8 <z_log_get_s_mask>
   12c92:	4606      	mov	r6, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   12c94:	4f2d      	ldr	r7, [pc, #180]	; (12d4c <z_impl_log_process+0x144>)
   12c96:	4b2e      	ldr	r3, [pc, #184]	; (12d50 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12c98:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 12d6c <z_impl_log_process+0x164>
   12c9c:	1bdb      	subs	r3, r3, r7
   12c9e:	08db      	lsrs	r3, r3, #3
   12ca0:	9303      	str	r3, [sp, #12]
   12ca2:	4b2c      	ldr	r3, [pc, #176]	; (12d54 <z_impl_log_process+0x14c>)
   12ca4:	1bdb      	subs	r3, r3, r7
   12ca6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   12caa:	b936      	cbnz	r6, 12cba <z_impl_log_process+0xb2>
   12cac:	4e2a      	ldr	r6, [pc, #168]	; (12d58 <z_impl_log_process+0x150>)
   12cae:	4f2b      	ldr	r7, [pc, #172]	; (12d5c <z_impl_log_process+0x154>)
   12cb0:	f04f 0800 	mov.w	r8, #0
   12cb4:	1bbf      	subs	r7, r7, r6
   12cb6:	113f      	asrs	r7, r7, #4
   12cb8:	e03a      	b.n	12d30 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
   12cba:	fab6 f186 	clz	r1, r6
   12cbe:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   12cc2:	4649      	mov	r1, r9
   12cc4:	4628      	mov	r0, r5
   12cc6:	f010 fe46 	bl	23956 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   12cca:	4b25      	ldr	r3, [pc, #148]	; (12d60 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   12ccc:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12cce:	4298      	cmp	r0, r3
   12cd0:	d302      	bcc.n	12cd8 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12cd2:	4a24      	ldr	r2, [pc, #144]	; (12d64 <z_impl_log_process+0x15c>)
   12cd4:	4290      	cmp	r0, r2
   12cd6:	d31a      	bcc.n	12d0e <z_impl_log_process+0x106>
   12cd8:	4608      	mov	r0, r1
   12cda:	f7ff ff87 	bl	12bec <log_is_strdup>
   12cde:	4602      	mov	r2, r0
   12ce0:	b9a8      	cbnz	r0, 12d0e <z_impl_log_process+0x106>
   12ce2:	4b21      	ldr	r3, [pc, #132]	; (12d68 <z_impl_log_process+0x160>)
   12ce4:	4299      	cmp	r1, r3
   12ce6:	d012      	beq.n	12d0e <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
   12ce8:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12cea:	9903      	ldr	r1, [sp, #12]
   12cec:	f3c3 1389 	ubfx	r3, r3, #6, #10
   12cf0:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   12cf2:	bf38      	it	cc
   12cf4:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12cf8:	ea4f 138a 	mov.w	r3, sl, lsl #6
   12cfc:	f043 0301 	orr.w	r3, r3, #1
   12d00:	f8ad 3000 	strh.w	r3, [sp]
   12d04:	4649      	mov	r1, r9
   12d06:	4643      	mov	r3, r8
   12d08:	4658      	mov	r0, fp
   12d0a:	f010 fd83 	bl	23814 <log_3>
		mask &= ~BIT(idx);
   12d0e:	2301      	movs	r3, #1
   12d10:	fa03 f109 	lsl.w	r1, r3, r9
   12d14:	ea26 0601 	bic.w	r6, r6, r1
   12d18:	e7c7      	b.n	12caa <z_impl_log_process+0xa2>
	return backend->cb->active;
   12d1a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   12d1c:	795b      	ldrb	r3, [r3, #5]
   12d1e:	b123      	cbz	r3, 12d2a <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
   12d20:	6833      	ldr	r3, [r6, #0]
   12d22:	4629      	mov	r1, r5
   12d24:	4630      	mov	r0, r6
   12d26:	681b      	ldr	r3, [r3, #0]
   12d28:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   12d2a:	f108 0801 	add.w	r8, r8, #1
   12d2e:	3610      	adds	r6, #16
   12d30:	45b8      	cmp	r8, r7
   12d32:	dbf2      	blt.n	12d1a <z_impl_log_process+0x112>
   12d34:	e78a      	b.n	12c4c <z_impl_log_process+0x44>
   12d36:	bf00      	nop
   12d38:	20029998 	.word	0x20029998
   12d3c:	200218e0 	.word	0x200218e0
   12d40:	200218d4 	.word	0x200218d4
   12d44:	200218d8 	.word	0x200218d8
   12d48:	20029999 	.word	0x20029999
   12d4c:	00027b20 	.word	0x00027b20
   12d50:	00027be0 	.word	0x00027be0
   12d54:	00027b78 	.word	0x00027b78
   12d58:	00027be0 	.word	0x00027be0
   12d5c:	00027bf0 	.word	0x00027bf0
   12d60:	0002785c 	.word	0x0002785c
   12d64:	0002aaf8 	.word	0x0002aaf8
   12d68:	00029997 	.word	0x00029997
   12d6c:	000299b1 	.word	0x000299b1

00012d70 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   12d70:	4b27      	ldr	r3, [pc, #156]	; (12e10 <msg_finalize+0xa0>)
{
   12d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   12d74:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   12d76:	8141      	strh	r1, [r0, #10]
{
   12d78:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   12d7a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12d7c:	4d25      	ldr	r5, [pc, #148]	; (12e14 <msg_finalize+0xa4>)
   12d7e:	60e0      	str	r0, [r4, #12]
   12d80:	e8d5 3fef 	ldaex	r3, [r5]
   12d84:	3301      	adds	r3, #1
   12d86:	e8c5 3fe2 	stlex	r2, r3, [r5]
   12d8a:	2a00      	cmp	r2, #0
   12d8c:	d1f8      	bne.n	12d80 <msg_finalize+0x10>
	__asm__ volatile(
   12d8e:	f04f 0320 	mov.w	r3, #32
   12d92:	f3ef 8611 	mrs	r6, BASEPRI
   12d96:	f383 8811 	msr	BASEPRI, r3
   12d9a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12d9e:	481e      	ldr	r0, [pc, #120]	; (12e18 <msg_finalize+0xa8>)
   12da0:	4621      	mov	r1, r4
   12da2:	f010 fcd9 	bl	23758 <log_list_add_tail>
	__asm__ volatile(
   12da6:	f386 8811 	msr	BASEPRI, r6
   12daa:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   12dae:	4b1b      	ldr	r3, [pc, #108]	; (12e1c <msg_finalize+0xac>)
   12db0:	781b      	ldrb	r3, [r3, #0]
   12db2:	b183      	cbz	r3, 12dd6 <msg_finalize+0x66>
	__asm__ volatile(
   12db4:	f04f 0320 	mov.w	r3, #32
   12db8:	f3ef 8411 	mrs	r4, BASEPRI
   12dbc:	f383 8811 	msr	BASEPRI, r3
   12dc0:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   12dc4:	2000      	movs	r0, #0
   12dc6:	f7ff ff1f 	bl	12c08 <z_impl_log_process>
	__asm__ volatile(
   12dca:	f384 8811 	msr	BASEPRI, r4
   12dce:	f3bf 8f6f 	isb	sy
}
   12dd2:	b002      	add	sp, #8
   12dd4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   12dd6:	4a12      	ldr	r2, [pc, #72]	; (12e20 <msg_finalize+0xb0>)
   12dd8:	682b      	ldr	r3, [r5, #0]
   12dda:	6812      	ldr	r2, [r2, #0]
   12ddc:	2a00      	cmp	r2, #0
   12dde:	d0f8      	beq.n	12dd2 <msg_finalize+0x62>
   12de0:	2b01      	cmp	r3, #1
   12de2:	d10a      	bne.n	12dfa <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   12de4:	2200      	movs	r2, #0
   12de6:	2300      	movs	r3, #0
   12de8:	480e      	ldr	r0, [pc, #56]	; (12e24 <msg_finalize+0xb4>)
   12dea:	e9cd 2300 	strd	r2, r3, [sp]
   12dee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12df2:	2300      	movs	r3, #0
   12df4:	f00e fcbe 	bl	21774 <z_impl_k_timer_start>
   12df8:	e7eb      	b.n	12dd2 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12dfa:	2b0a      	cmp	r3, #10
   12dfc:	d1e9      	bne.n	12dd2 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   12dfe:	4809      	ldr	r0, [pc, #36]	; (12e24 <msg_finalize+0xb4>)
   12e00:	f013 fcb6 	bl	26770 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   12e04:	4808      	ldr	r0, [pc, #32]	; (12e28 <msg_finalize+0xb8>)
}
   12e06:	b002      	add	sp, #8
   12e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12e0c:	f00e ba0c 	b.w	21228 <z_impl_k_sem_give>
   12e10:	200200ac 	.word	0x200200ac
   12e14:	200218d4 	.word	0x200218d4
   12e18:	200218e0 	.word	0x200218e0
   12e1c:	20029999 	.word	0x20029999
   12e20:	200219bc 	.word	0x200219bc
   12e24:	20021258 	.word	0x20021258
   12e28:	20020738 	.word	0x20020738

00012e2c <log_process_thread_func>:
{
   12e2c:	b510      	push	{r4, lr}
	log_init();
   12e2e:	f7ff fe75 	bl	12b1c <log_init>
	return z_impl_k_current_get();
   12e32:	f00e f9af 	bl	21194 <z_impl_k_current_get>
	proc_tid = process_tid;
   12e36:	4b0c      	ldr	r3, [pc, #48]	; (12e68 <log_process_thread_func+0x3c>)
   12e38:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12e3a:	b130      	cbz	r0, 12e4a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12e3c:	4b0b      	ldr	r3, [pc, #44]	; (12e6c <log_process_thread_func+0x40>)
	    process_tid &&
   12e3e:	681b      	ldr	r3, [r3, #0]
   12e40:	2b09      	cmp	r3, #9
   12e42:	dd02      	ble.n	12e4a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   12e44:	480a      	ldr	r0, [pc, #40]	; (12e70 <log_process_thread_func+0x44>)
   12e46:	f00e f9ef 	bl	21228 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   12e4a:	4c09      	ldr	r4, [pc, #36]	; (12e70 <log_process_thread_func+0x44>)
   12e4c:	2000      	movs	r0, #0
   12e4e:	f7ff fedb 	bl	12c08 <z_impl_log_process>
		if (log_process(false) == false) {
   12e52:	2800      	cmp	r0, #0
   12e54:	d1fa      	bne.n	12e4c <log_process_thread_func+0x20>
   12e56:	f04f 32ff 	mov.w	r2, #4294967295
   12e5a:	f04f 33ff 	mov.w	r3, #4294967295
   12e5e:	4620      	mov	r0, r4
   12e60:	f00e fa08 	bl	21274 <z_impl_k_sem_take>
   12e64:	e7f2      	b.n	12e4c <log_process_thread_func+0x20>
   12e66:	bf00      	nop
   12e68:	200219bc 	.word	0x200219bc
   12e6c:	200218d4 	.word	0x200218d4
   12e70:	20020738 	.word	0x20020738

00012e74 <z_impl_log_panic>:
{
   12e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   12e76:	4f0e      	ldr	r7, [pc, #56]	; (12eb0 <z_impl_log_panic+0x3c>)
   12e78:	783d      	ldrb	r5, [r7, #0]
   12e7a:	b975      	cbnz	r5, 12e9a <z_impl_log_panic+0x26>
	log_init();
   12e7c:	f7ff fe4e 	bl	12b1c <log_init>
	return __log_backends_end - __log_backends_start;
   12e80:	4c0c      	ldr	r4, [pc, #48]	; (12eb4 <z_impl_log_panic+0x40>)
   12e82:	4e0d      	ldr	r6, [pc, #52]	; (12eb8 <z_impl_log_panic+0x44>)
   12e84:	1b36      	subs	r6, r6, r4
   12e86:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12e88:	42b5      	cmp	r5, r6
   12e8a:	db07      	blt.n	12e9c <z_impl_log_panic+0x28>
   12e8c:	2000      	movs	r0, #0
   12e8e:	f7ff febb 	bl	12c08 <z_impl_log_process>
		while (log_process(false) == true) {
   12e92:	2800      	cmp	r0, #0
   12e94:	d1fa      	bne.n	12e8c <z_impl_log_panic+0x18>
	panic_mode = true;
   12e96:	2301      	movs	r3, #1
   12e98:	703b      	strb	r3, [r7, #0]
}
   12e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   12e9c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12e9e:	795b      	ldrb	r3, [r3, #5]
   12ea0:	b11b      	cbz	r3, 12eaa <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   12ea2:	6823      	ldr	r3, [r4, #0]
   12ea4:	4620      	mov	r0, r4
   12ea6:	691b      	ldr	r3, [r3, #16]
   12ea8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12eaa:	3501      	adds	r5, #1
   12eac:	3410      	adds	r4, #16
   12eae:	e7eb      	b.n	12e88 <z_impl_log_panic+0x14>
   12eb0:	20029999 	.word	0x20029999
   12eb4:	00027be0 	.word	0x00027be0
   12eb8:	00027bf0 	.word	0x00027bf0

00012ebc <log_free>:
{
   12ebc:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   12ebe:	3804      	subs	r0, #4
   12ec0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12ec2:	e8d0 3fef 	ldaex	r3, [r0]
   12ec6:	1e5a      	subs	r2, r3, #1
   12ec8:	e8c0 2fe1 	stlex	r1, r2, [r0]
   12ecc:	2900      	cmp	r1, #0
   12ece:	d1f8      	bne.n	12ec2 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   12ed0:	2b01      	cmp	r3, #1
   12ed2:	d103      	bne.n	12edc <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   12ed4:	4803      	ldr	r0, [pc, #12]	; (12ee4 <log_free+0x28>)
   12ed6:	a901      	add	r1, sp, #4
   12ed8:	f00d fc0a 	bl	206f0 <k_mem_slab_free>
}
   12edc:	b003      	add	sp, #12
   12ede:	f85d fb04 	ldr.w	pc, [sp], #4
   12ee2:	bf00      	nop
   12ee4:	200218e8 	.word	0x200218e8

00012ee8 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   12ee8:	2320      	movs	r3, #32
   12eea:	4902      	ldr	r1, [pc, #8]	; (12ef4 <log_msg_pool_init+0xc>)
   12eec:	461a      	mov	r2, r3
   12eee:	4802      	ldr	r0, [pc, #8]	; (12ef8 <log_msg_pool_init+0x10>)
   12ef0:	f013 b99b 	b.w	2622a <k_mem_slab_init>
   12ef4:	20030560 	.word	0x20030560
   12ef8:	200219c0 	.word	0x200219c0

00012efc <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   12efc:	2300      	movs	r3, #0
{
   12efe:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   12f00:	4d09      	ldr	r5, [pc, #36]	; (12f28 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   12f02:	9301      	str	r3, [sp, #4]
   12f04:	2001      	movs	r0, #1
   12f06:	f7ff fe7f 	bl	12c08 <z_impl_log_process>
   12f0a:	4604      	mov	r4, r0
			log_dropped();
   12f0c:	f7ff fdd2 	bl	12ab4 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   12f10:	2200      	movs	r2, #0
   12f12:	2300      	movs	r3, #0
   12f14:	4628      	mov	r0, r5
   12f16:	a901      	add	r1, sp, #4
   12f18:	f00d fbb8 	bl	2068c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   12f1c:	b108      	cbz	r0, 12f22 <log_msg_no_space_handle+0x26>
   12f1e:	2c00      	cmp	r4, #0
   12f20:	d1f0      	bne.n	12f04 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   12f22:	9801      	ldr	r0, [sp, #4]
   12f24:	b003      	add	sp, #12
   12f26:	bd30      	pop	{r4, r5, pc}
   12f28:	200219c0 	.word	0x200219c0

00012f2c <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   12f2c:	2300      	movs	r3, #0
{
   12f2e:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12f30:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   12f32:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12f34:	4806      	ldr	r0, [pc, #24]	; (12f50 <log_msg_chunk_alloc+0x24>)
   12f36:	2300      	movs	r3, #0
   12f38:	a901      	add	r1, sp, #4
   12f3a:	f00d fba7 	bl	2068c <k_mem_slab_alloc>
	if (err != 0) {
   12f3e:	b110      	cbz	r0, 12f46 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   12f40:	f7ff ffdc 	bl	12efc <log_msg_no_space_handle>
   12f44:	9001      	str	r0, [sp, #4]
}
   12f46:	9801      	ldr	r0, [sp, #4]
   12f48:	b003      	add	sp, #12
   12f4a:	f85d fb04 	ldr.w	pc, [sp], #4
   12f4e:	bf00      	nop
   12f50:	200219c0 	.word	0x200219c0

00012f54 <msg_free>:
{
   12f54:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12f56:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   12f58:	7a45      	ldrb	r5, [r0, #9]
{
   12f5a:	b085      	sub	sp, #20
   12f5c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   12f5e:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   12f60:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   12f64:	d41c      	bmi.n	12fa0 <msg_free+0x4c>
   12f66:	b1dd      	cbz	r5, 12fa0 <msg_free+0x4c>
		u32_t smask = 0;
   12f68:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   12f6a:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   12f6c:	4631      	mov	r1, r6
   12f6e:	9801      	ldr	r0, [sp, #4]
   12f70:	f010 fcf1 	bl	23956 <log_msg_arg_get>
   12f74:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   12f76:	f7ff fe39 	bl	12bec <log_is_strdup>
   12f7a:	b170      	cbz	r0, 12f9a <msg_free+0x46>
				if (smask == 0) {
   12f7c:	b934      	cbnz	r4, 12f8c <msg_free+0x38>
					smask = z_log_get_s_mask(
   12f7e:	9b01      	ldr	r3, [sp, #4]
   12f80:	4629      	mov	r1, r5
   12f82:	6918      	ldr	r0, [r3, #16]
   12f84:	f7ff fd30 	bl	129e8 <z_log_get_s_mask>
					if (smask == 0) {
   12f88:	4604      	mov	r4, r0
   12f8a:	b148      	cbz	r0, 12fa0 <msg_free+0x4c>
				if (smask & BIT(i)) {
   12f8c:	fa24 f306 	lsr.w	r3, r4, r6
   12f90:	07d9      	lsls	r1, r3, #31
   12f92:	d502      	bpl.n	12f9a <msg_free+0x46>
					log_free(buf);
   12f94:	4638      	mov	r0, r7
   12f96:	f7ff ff91 	bl	12ebc <log_free>
		for (i = 0; i < nargs; i++) {
   12f9a:	3601      	adds	r6, #1
   12f9c:	42ae      	cmp	r6, r5
   12f9e:	d3e5      	bcc.n	12f6c <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   12fa0:	9b01      	ldr	r3, [sp, #4]
   12fa2:	7a1a      	ldrb	r2, [r3, #8]
   12fa4:	0792      	lsls	r2, r2, #30
   12fa6:	d504      	bpl.n	12fb2 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   12fa8:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12faa:	4c08      	ldr	r4, [pc, #32]	; (12fcc <msg_free+0x78>)
   12fac:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   12fae:	9b03      	ldr	r3, [sp, #12]
   12fb0:	b92b      	cbnz	r3, 12fbe <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   12fb2:	4806      	ldr	r0, [pc, #24]	; (12fcc <msg_free+0x78>)
   12fb4:	a901      	add	r1, sp, #4
   12fb6:	f00d fb9b 	bl	206f0 <k_mem_slab_free>
}
   12fba:	b005      	add	sp, #20
   12fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   12fbe:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12fc0:	4620      	mov	r0, r4
   12fc2:	a903      	add	r1, sp, #12
   12fc4:	f00d fb94 	bl	206f0 <k_mem_slab_free>
		cont = next;
   12fc8:	9503      	str	r5, [sp, #12]
   12fca:	e7f0      	b.n	12fae <msg_free+0x5a>
   12fcc:	200219c0 	.word	0x200219c0

00012fd0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   12fd0:	b40e      	push	{r1, r2, r3}
   12fd2:	b503      	push	{r0, r1, lr}
   12fd4:	ab03      	add	r3, sp, #12
   12fd6:	f853 2b04 	ldr.w	r2, [r3], #4
   12fda:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   12fdc:	4804      	ldr	r0, [pc, #16]	; (12ff0 <print_formatted+0x20>)
	va_start(args, fmt);
   12fde:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   12fe0:	f7ff fb08 	bl	125f4 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   12fe4:	2000      	movs	r0, #0
   12fe6:	b002      	add	sp, #8
   12fe8:	f85d eb04 	ldr.w	lr, [sp], #4
   12fec:	b003      	add	sp, #12
   12fee:	4770      	bx	lr
   12ff0:	00023dff 	.word	0x00023dff

00012ff4 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   12ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   12ff8:	f011 0402 	ands.w	r4, r1, #2
{
   12ffc:	b085      	sub	sp, #20
   12ffe:	4606      	mov	r6, r0
   13000:	4690      	mov	r8, r2
   13002:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   13006:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1300a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1300e:	d007      	beq.n	13020 <prefix_print+0x2c>
	if (!format) {
   13010:	f011 0f44 	tst.w	r1, #68	; 0x44
   13014:	d137      	bne.n	13086 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   13016:	461a      	mov	r2, r3
   13018:	4932      	ldr	r1, [pc, #200]	; (130e4 <prefix_print+0xf0>)
   1301a:	f7ff ffd9 	bl	12fd0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   1301e:	4604      	mov	r4, r0
	if (color) {
   13020:	f1b9 0f00 	cmp.w	r9, #0
   13024:	d00a      	beq.n	1303c <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   13026:	4b30      	ldr	r3, [pc, #192]	; (130e8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   13028:	4630      	mov	r0, r6
		const char *color = start && (colors[level] != NULL) ?
   1302a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   1302e:	4b2f      	ldr	r3, [pc, #188]	; (130ec <prefix_print+0xf8>)
   13030:	492f      	ldr	r1, [pc, #188]	; (130f0 <prefix_print+0xfc>)
   13032:	2a00      	cmp	r2, #0
   13034:	bf08      	it	eq
   13036:	461a      	moveq	r2, r3
   13038:	f7ff ffca 	bl	12fd0 <print_formatted>
	if (level_on) {
   1303c:	b13d      	cbz	r5, 1304e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   1303e:	4b2d      	ldr	r3, [pc, #180]	; (130f4 <prefix_print+0x100>)
   13040:	4630      	mov	r0, r6
   13042:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   13046:	492c      	ldr	r1, [pc, #176]	; (130f8 <prefix_print+0x104>)
   13048:	f7ff ffc2 	bl	12fd0 <print_formatted>
   1304c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   1304e:	f1b8 0f00 	cmp.w	r8, #0
   13052:	d044      	beq.n	130de <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   13054:	2301      	movs	r3, #1
   13056:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   1305a:	4b28      	ldr	r3, [pc, #160]	; (130fc <prefix_print+0x108>)
   1305c:	f017 0f10 	tst.w	r7, #16
   13060:	4f27      	ldr	r7, [pc, #156]	; (13100 <prefix_print+0x10c>)
   13062:	bf18      	it	ne
   13064:	461f      	movne	r7, r3
   13066:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1306a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1306e:	f7ff fd2d 	bl	12acc <log_source_name_get>
   13072:	4639      	mov	r1, r7
   13074:	4602      	mov	r2, r0
   13076:	4630      	mov	r0, r6
   13078:	f7ff ffaa 	bl	12fd0 <print_formatted>
   1307c:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   1307e:	4420      	add	r0, r4
   13080:	b005      	add	sp, #20
   13082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   13086:	4a1f      	ldr	r2, [pc, #124]	; (13104 <prefix_print+0x110>)
   13088:	6811      	ldr	r1, [r2, #0]
   1308a:	b331      	cbz	r1, 130da <prefix_print+0xe6>
		timestamp /= timestamp_div;
   1308c:	4a1e      	ldr	r2, [pc, #120]	; (13108 <prefix_print+0x114>)
   1308e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   13092:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   13094:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   13098:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   1309c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   130a0:	fbb4 f2fe 	udiv	r2, r4, lr
   130a4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   130a8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   130ac:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   130b0:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   130b4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   130b8:	fb01 441b 	mls	r4, r1, fp, r4
   130bc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   130c0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   130c4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   130c8:	e9cd b101 	strd	fp, r1, [sp, #4]
   130cc:	fb0a e113 	mls	r1, sl, r3, lr
   130d0:	9100      	str	r1, [sp, #0]
   130d2:	490e      	ldr	r1, [pc, #56]	; (1310c <prefix_print+0x118>)
   130d4:	f7ff ff7c 	bl	12fd0 <print_formatted>
   130d8:	e7a1      	b.n	1301e <prefix_print+0x2a>
		length = 0;
   130da:	4608      	mov	r0, r1
   130dc:	e79f      	b.n	1301e <prefix_print+0x2a>
	total += print_formatted(log_output,
   130de:	4f08      	ldr	r7, [pc, #32]	; (13100 <prefix_print+0x10c>)
   130e0:	e7c1      	b.n	13066 <prefix_print+0x72>
   130e2:	bf00      	nop
   130e4:	00029a0b 	.word	0x00029a0b
   130e8:	00027ef8 	.word	0x00027ef8
   130ec:	000299fd 	.word	0x000299fd
   130f0:	00029a30 	.word	0x00029a30
   130f4:	00027f0c 	.word	0x00027f0c
   130f8:	00029a33 	.word	0x00029a33
   130fc:	00029a07 	.word	0x00029a07
   13100:	00029a02 	.word	0x00029a02
   13104:	200219dc 	.word	0x200219dc
   13108:	200219e0 	.word	0x200219e0
   1310c:	00029a14 	.word	0x00029a14

00013110 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   13110:	b538      	push	{r3, r4, r5, lr}
   13112:	460c      	mov	r4, r1
	if (color) {
   13114:	07e1      	lsls	r1, r4, #31
{
   13116:	4605      	mov	r5, r0
	if (color) {
   13118:	d503      	bpl.n	13122 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   1311a:	4a08      	ldr	r2, [pc, #32]	; (1313c <postfix_print+0x2c>)
   1311c:	4908      	ldr	r1, [pc, #32]	; (13140 <postfix_print+0x30>)
   1311e:	f7ff ff57 	bl	12fd0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13122:	06e2      	lsls	r2, r4, #27
   13124:	d408      	bmi.n	13138 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13126:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   13128:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1312a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1312e:	bf4c      	ite	mi
   13130:	4904      	ldrmi	r1, [pc, #16]	; (13144 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   13132:	4905      	ldrpl	r1, [pc, #20]	; (13148 <postfix_print+0x38>)
   13134:	f7ff bf4c 	b.w	12fd0 <print_formatted>
}
   13138:	bd38      	pop	{r3, r4, r5, pc}
   1313a:	bf00      	nop
   1313c:	000299fd 	.word	0x000299fd
   13140:	00029a30 	.word	0x00029a30
   13144:	000295b1 	.word	0x000295b1
   13148:	000295b0 	.word	0x000295b0

0001314c <hexdump_line_print>:
{
   1314c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13150:	461d      	mov	r5, r3
   13152:	9b08      	ldr	r3, [sp, #32]
   13154:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13156:	06da      	lsls	r2, r3, #27
{
   13158:	4604      	mov	r4, r0
   1315a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1315c:	d405      	bmi.n	1316a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1315e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   13160:	bf4c      	ite	mi
   13162:	492b      	ldrmi	r1, [pc, #172]	; (13210 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   13164:	492b      	ldrpl	r1, [pc, #172]	; (13214 <hexdump_line_print+0xc8>)
   13166:	f7ff ff33 	bl	12fd0 <print_formatted>
{
   1316a:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   1316e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1321c <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   13172:	45a8      	cmp	r8, r5
   13174:	db2d      	blt.n	131d2 <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13176:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   13178:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 13220 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   1317c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 13224 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   13180:	f8df a098 	ldr.w	sl, [pc, #152]	; 1321c <hexdump_line_print+0xd0>
		if (i < length) {
   13184:	42bd      	cmp	r5, r7
   13186:	d232      	bcs.n	131ee <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   13188:	4649      	mov	r1, r9
   1318a:	4620      	mov	r0, r4
   1318c:	5d72      	ldrb	r2, [r6, r5]
   1318e:	f7ff ff1f 	bl	12fd0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13192:	3501      	adds	r5, #1
   13194:	2d10      	cmp	r5, #16
   13196:	d123      	bne.n	131e0 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   13198:	4620      	mov	r0, r4
   1319a:	491f      	ldr	r1, [pc, #124]	; (13218 <hexdump_line_print+0xcc>)
   1319c:	f7ff ff18 	bl	12fd0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   131a0:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   131a2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1321c <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   131a6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 13228 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   131aa:	f8df a080 	ldr.w	sl, [pc, #128]	; 1322c <hexdump_line_print+0xe0>
		if (i < length) {
   131ae:	42af      	cmp	r7, r5
   131b0:	d929      	bls.n	13206 <hexdump_line_print+0xba>
			char c = (char)data[i];
   131b2:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   131b4:	4651      	mov	r1, sl
   131b6:	f812 3009 	ldrb.w	r3, [r2, r9]
   131ba:	4620      	mov	r0, r4
   131bc:	f013 0f97 	tst.w	r3, #151	; 0x97
   131c0:	bf08      	it	eq
   131c2:	222e      	moveq	r2, #46	; 0x2e
   131c4:	f7ff ff04 	bl	12fd0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   131c8:	3501      	adds	r5, #1
   131ca:	2d10      	cmp	r5, #16
   131cc:	d114      	bne.n	131f8 <hexdump_line_print+0xac>
}
   131ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   131d2:	4649      	mov	r1, r9
   131d4:	4620      	mov	r0, r4
   131d6:	f7ff fefb 	bl	12fd0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   131da:	f108 0801 	add.w	r8, r8, #1
   131de:	e7c8      	b.n	13172 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   131e0:	076a      	lsls	r2, r5, #29
   131e2:	d1cf      	bne.n	13184 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   131e4:	4651      	mov	r1, sl
   131e6:	4620      	mov	r0, r4
   131e8:	f7ff fef2 	bl	12fd0 <print_formatted>
   131ec:	e7ca      	b.n	13184 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   131ee:	4641      	mov	r1, r8
   131f0:	4620      	mov	r0, r4
   131f2:	f7ff feed 	bl	12fd0 <print_formatted>
   131f6:	e7cc      	b.n	13192 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   131f8:	076b      	lsls	r3, r5, #29
   131fa:	d1d8      	bne.n	131ae <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   131fc:	4641      	mov	r1, r8
   131fe:	4620      	mov	r0, r4
   13200:	f7ff fee6 	bl	12fd0 <print_formatted>
   13204:	e7d3      	b.n	131ae <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   13206:	4641      	mov	r1, r8
   13208:	4620      	mov	r0, r4
   1320a:	f7ff fee1 	bl	12fd0 <print_formatted>
   1320e:	e7db      	b.n	131c8 <hexdump_line_print+0x7c>
   13210:	000295b1 	.word	0x000295b1
   13214:	000295b0 	.word	0x000295b0
   13218:	00029a43 	.word	0x00029a43
   1321c:	00029a41 	.word	0x00029a41
   13220:	00029a3f 	.word	0x00029a3f
   13224:	00029a39 	.word	0x00029a39
   13228:	0002a974 	.word	0x0002a974
   1322c:	00028af0 	.word	0x00028af0

00013230 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
   13230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   13234:	7a8b      	ldrb	r3, [r1, #10]
   13236:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13238:	f013 0807 	ands.w	r8, r3, #7
{
   1323c:	4605      	mov	r5, r0
   1323e:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13240:	7a0a      	ldrb	r2, [r1, #8]
   13242:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13244:	d021      	beq.n	1328a <log_output_msg_process+0x5a>
   13246:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   13248:	8949      	ldrh	r1, [r1, #10]
   1324a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1324e:	f3c1 1189 	ubfx	r1, r1, #6, #10
   13252:	e9cd 8300 	strd	r8, r3, [sp]
   13256:	9102      	str	r1, [sp, #8]
   13258:	68f3      	ldr	r3, [r6, #12]
   1325a:	4639      	mov	r1, r7
   1325c:	f002 0201 	and.w	r2, r2, #1
   13260:	f7ff fec8 	bl	12ff4 <prefix_print>
   13264:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13266:	7a34      	ldrb	r4, [r6, #8]
   13268:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1326a:	f014 0401 	ands.w	r4, r4, #1
   1326e:	d00e      	beq.n	1328e <log_output_msg_process+0x5e>
		std_print(msg, log_output);
   13270:	4629      	mov	r1, r5
   13272:	4630      	mov	r0, r6
   13274:	f010 fc59 	bl	23b2a <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   13278:	f1b8 0f00 	cmp.w	r8, #0
   1327c:	d02b      	beq.n	132d6 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
   1327e:	4642      	mov	r2, r8
   13280:	4639      	mov	r1, r7
   13282:	4628      	mov	r0, r5
   13284:	f7ff ff44 	bl	13110 <postfix_print>
   13288:	e025      	b.n	132d6 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   1328a:	46c1      	mov	r9, r8
   1328c:	e7eb      	b.n	13266 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1328e:	f1b8 0f00 	cmp.w	r8, #0
   13292:	d126      	bne.n	132e2 <log_output_msg_process+0xb2>
	size_t offset = 0;
   13294:	4627      	mov	r7, r4
		length = log_output->size;
   13296:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   13298:	aa06      	add	r2, sp, #24
		length = log_output->size;
   1329a:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   1329c:	4630      	mov	r0, r6
   1329e:	463b      	mov	r3, r7
   132a0:	68a9      	ldr	r1, [r5, #8]
   132a2:	f010 fc2e 	bl	23b02 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   132a6:	9a06      	ldr	r2, [sp, #24]
   132a8:	686b      	ldr	r3, [r5, #4]
   132aa:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   132ac:	b13a      	cbz	r2, 132be <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
   132ae:	68ab      	ldr	r3, [r5, #8]
   132b0:	4413      	add	r3, r2
   132b2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   132b6:	f1a4 030a 	sub.w	r3, r4, #10
   132ba:	425c      	negs	r4, r3
   132bc:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   132be:	4628      	mov	r0, r5
   132c0:	f010 fd90 	bl	23de4 <log_output_flush>
		offset += length;
   132c4:	9b06      	ldr	r3, [sp, #24]
   132c6:	441f      	add	r7, r3
	} while (length > 0);
   132c8:	2b00      	cmp	r3, #0
   132ca:	d1e4      	bne.n	13296 <log_output_msg_process+0x66>
	if (eol) {
   132cc:	b11c      	cbz	r4, 132d6 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
   132ce:	4628      	mov	r0, r5
   132d0:	4913      	ldr	r1, [pc, #76]	; (13320 <log_output_msg_process+0xf0>)
   132d2:	f7ff fe7d 	bl	12fd0 <print_formatted>
	}

	log_output_flush(log_output);
   132d6:	4628      	mov	r0, r5
   132d8:	f010 fd84 	bl	23de4 <log_output_flush>
}
   132dc:	b00a      	add	sp, #40	; 0x28
   132de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   132e2:	4630      	mov	r0, r6
   132e4:	f010 fb65 	bl	239b2 <log_msg_str_get>
   132e8:	490e      	ldr	r1, [pc, #56]	; (13324 <log_output_msg_process+0xf4>)
   132ea:	4602      	mov	r2, r0
   132ec:	4628      	mov	r0, r5
   132ee:	f7ff fe6f 	bl	12fd0 <print_formatted>
		length = sizeof(buf);
   132f2:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   132f6:	aa05      	add	r2, sp, #20
   132f8:	4623      	mov	r3, r4
   132fa:	4630      	mov	r0, r6
   132fc:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   132fe:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13302:	f010 fbfe 	bl	23b02 <log_msg_hexdump_data_get>
		if (length) {
   13306:	9a05      	ldr	r2, [sp, #20]
   13308:	2a00      	cmp	r2, #0
   1330a:	d0b8      	beq.n	1327e <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
   1330c:	464b      	mov	r3, r9
   1330e:	4628      	mov	r0, r5
   13310:	9700      	str	r7, [sp, #0]
   13312:	a906      	add	r1, sp, #24
   13314:	f7ff ff1a 	bl	1314c <hexdump_line_print>
			offset += length;
   13318:	9b05      	ldr	r3, [sp, #20]
   1331a:	441c      	add	r4, r3
		length = sizeof(buf);
   1331c:	e7eb      	b.n	132f6 <log_output_msg_process+0xc6>
   1331e:	bf00      	nop
   13320:	00029a45 	.word	0x00029a45
   13324:	00029a30 	.word	0x00029a30

00013328 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
   13328:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
   1332a:	e9d0 4300 	ldrd	r4, r3, [r0]
   1332e:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13330:	f242 730f 	movw	r3, #9999	; 0x270f
   13334:	428b      	cmp	r3, r1
   13336:	bf28      	it	cs
   13338:	460b      	movcs	r3, r1
   1333a:	4668      	mov	r0, sp
   1333c:	2105      	movs	r1, #5
   1333e:	4a0c      	ldr	r2, [pc, #48]	; (13370 <log_output_dropped_process+0x48>)
   13340:	f00f ff60 	bl	23204 <snprintk>
   13344:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
   13346:	462b      	mov	r3, r5
   13348:	4620      	mov	r0, r4
   1334a:	220b      	movs	r2, #11
   1334c:	4909      	ldr	r1, [pc, #36]	; (13374 <log_output_dropped_process+0x4c>)
   1334e:	f010 fbdf 	bl	23b10 <buffer_write>
	buffer_write(outf, buf, len, dev);
   13352:	462b      	mov	r3, r5
   13354:	4632      	mov	r2, r6
   13356:	4669      	mov	r1, sp
   13358:	4620      	mov	r0, r4
   1335a:	f010 fbd9 	bl	23b10 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
   1335e:	462b      	mov	r3, r5
   13360:	221b      	movs	r2, #27
   13362:	4620      	mov	r0, r4
   13364:	4904      	ldr	r1, [pc, #16]	; (13378 <log_output_dropped_process+0x50>)
   13366:	f010 fbd3 	bl	23b10 <buffer_write>
}
   1336a:	b002      	add	sp, #8
   1336c:	bd70      	pop	{r4, r5, r6, pc}
   1336e:	bf00      	nop
   13370:	000294c1 	.word	0x000294c1
   13374:	00029a83 	.word	0x00029a83
   13378:	00029a67 	.word	0x00029a67

0001337c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   1337c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1337e:	2100      	movs	r1, #0
	timestamp_div = 1U;
   13380:	4a07      	ldr	r2, [pc, #28]	; (133a0 <log_output_timestamp_freq_set+0x24>)
{
   13382:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   13384:	4c07      	ldr	r4, [pc, #28]	; (133a4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   13386:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   13388:	42a0      	cmp	r0, r4
   1338a:	d804      	bhi.n	13396 <log_output_timestamp_freq_set+0x1a>
   1338c:	b101      	cbz	r1, 13390 <log_output_timestamp_freq_set+0x14>
   1338e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   13390:	4b05      	ldr	r3, [pc, #20]	; (133a8 <log_output_timestamp_freq_set+0x2c>)
   13392:	6018      	str	r0, [r3, #0]
}
   13394:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   13396:	2101      	movs	r1, #1
		frequency /= 2U;
   13398:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1339a:	005b      	lsls	r3, r3, #1
   1339c:	e7f4      	b.n	13388 <log_output_timestamp_freq_set+0xc>
   1339e:	bf00      	nop
   133a0:	200219e0 	.word	0x200219e0
   133a4:	000f4240 	.word	0x000f4240
   133a8:	200219dc 	.word	0x200219dc

000133ac <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   133ac:	2201      	movs	r2, #1
   133ae:	4b01      	ldr	r3, [pc, #4]	; (133b4 <log_backend_rtt_init+0x8>)
   133b0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   133b2:	4770      	bx	lr
   133b4:	200299aa 	.word	0x200299aa

000133b8 <panic>:

static void panic(struct log_backend const *const backend)
{
   133b8:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   133ba:	4803      	ldr	r0, [pc, #12]	; (133c8 <panic+0x10>)
   133bc:	f010 fd12 	bl	23de4 <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
   133c0:	2201      	movs	r2, #1
   133c2:	4b02      	ldr	r3, [pc, #8]	; (133cc <panic+0x14>)
   133c4:	701a      	strb	r2, [r3, #0]
}
   133c6:	bd08      	pop	{r3, pc}
   133c8:	00027f38 	.word	0x00027f38
   133cc:	200299ab 	.word	0x200299ab

000133d0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   133d0:	4801      	ldr	r0, [pc, #4]	; (133d8 <dropped+0x8>)
   133d2:	f7ff bfa9 	b.w	13328 <log_output_dropped_process>
   133d6:	bf00      	nop
   133d8:	00027f38 	.word	0x00027f38

000133dc <put>:
{
   133dc:	b510      	push	{r4, lr}
   133de:	460c      	mov	r4, r1
	log_msg_get(msg);
   133e0:	4608      	mov	r0, r1
   133e2:	f010 faac 	bl	2393e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   133e6:	4621      	mov	r1, r4
   133e8:	4804      	ldr	r0, [pc, #16]	; (133fc <put+0x20>)
   133ea:	220f      	movs	r2, #15
   133ec:	f7ff ff20 	bl	13230 <log_output_msg_process>
	log_msg_put(msg);
   133f0:	4620      	mov	r0, r4
}
   133f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   133f6:	f010 bacd 	b.w	23994 <log_msg_put>
   133fa:	bf00      	nop
   133fc:	00027f38 	.word	0x00027f38

00013400 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   13400:	4b05      	ldr	r3, [pc, #20]	; (13418 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   13402:	781b      	ldrb	r3, [r3, #0]
   13404:	b11b      	cbz	r3, 1340e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   13406:	f241 3088 	movw	r0, #5000	; 0x1388
   1340a:	f013 b92e 	b.w	2666a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   1340e:	20a4      	movs	r0, #164	; 0xa4
   13410:	2100      	movs	r1, #0
   13412:	f00d be9f 	b.w	21154 <z_impl_k_sleep>
   13416:	bf00      	nop
   13418:	200299ab 	.word	0x200299ab

0001341c <data_out_block_mode>:
{
   1341c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   13420:	f8df 9090 	ldr.w	r9, [pc, #144]	; 134b4 <data_out_block_mode+0x98>
{
   13424:	4607      	mov	r7, r0
   13426:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
   13428:	2404      	movs	r4, #4
   1342a:	46ca      	mov	sl, r9
	return z_impl_k_mutex_lock(mutex, timeout);
   1342c:	f8df b088 	ldr.w	fp, [pc, #136]	; 134b8 <data_out_block_mode+0x9c>
		if (!is_sync_mode()) {
   13430:	f899 3000 	ldrb.w	r3, [r9]
   13434:	b933      	cbnz	r3, 13444 <data_out_block_mode+0x28>
   13436:	f04f 32ff 	mov.w	r2, #4294967295
   1343a:	f04f 33ff 	mov.w	r3, #4294967295
   1343e:	4658      	mov	r0, fp
   13440:	f00d fa52 	bl	208e8 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13444:	4632      	mov	r2, r6
   13446:	4639      	mov	r1, r7
   13448:	2000      	movs	r0, #0
   1344a:	f000 fbd5 	bl	13bf8 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
   1344e:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13452:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
   13454:	b913      	cbnz	r3, 1345c <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
   13456:	4658      	mov	r0, fp
   13458:	f00d fabe 	bl	209d8 <z_impl_k_mutex_unlock>
		if (ret) {
   1345c:	4d14      	ldr	r5, [pc, #80]	; (134b0 <data_out_block_mode+0x94>)
   1345e:	f1b8 0f00 	cmp.w	r8, #0
   13462:	d018      	beq.n	13496 <data_out_block_mode+0x7a>
	host_present = true;
   13464:	2301      	movs	r3, #1
   13466:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   13468:	f89a 3000 	ldrb.w	r3, [sl]
   1346c:	b933      	cbnz	r3, 1347c <data_out_block_mode+0x60>
}
   1346e:	4630      	mov	r0, r6
   13470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
   13474:	b95c      	cbnz	r4, 1348e <data_out_block_mode+0x72>
		host_present = false;
   13476:	702c      	strb	r4, [r5, #0]
   13478:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   1347c:	2000      	movs	r0, #0
   1347e:	f000 fc3b 	bl	13cf8 <SEGGER_RTT_HasDataUp>
   13482:	2800      	cmp	r0, #0
   13484:	d0f3      	beq.n	1346e <data_out_block_mode+0x52>
   13486:	782b      	ldrb	r3, [r5, #0]
   13488:	2b00      	cmp	r3, #0
   1348a:	d1f3      	bne.n	13474 <data_out_block_mode+0x58>
   1348c:	e7ef      	b.n	1346e <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
   1348e:	3c01      	subs	r4, #1
   13490:	f7ff ffb6 	bl	13400 <on_failed_write.part.0>
   13494:	e7f2      	b.n	1347c <data_out_block_mode+0x60>
		} else if (host_present) {
   13496:	782b      	ldrb	r3, [r5, #0]
   13498:	b113      	cbz	r3, 134a0 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
   1349a:	3c01      	subs	r4, #1
   1349c:	d104      	bne.n	134a8 <data_out_block_mode+0x8c>
		host_present = false;
   1349e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   134a0:	782b      	ldrb	r3, [r5, #0]
   134a2:	2b00      	cmp	r3, #0
   134a4:	d1c4      	bne.n	13430 <data_out_block_mode+0x14>
   134a6:	e7e2      	b.n	1346e <data_out_block_mode+0x52>
   134a8:	f7ff ffaa 	bl	13400 <on_failed_write.part.0>
   134ac:	e7f8      	b.n	134a0 <data_out_block_mode+0x84>
   134ae:	bf00      	nop
   134b0:	200299aa 	.word	0x200299aa
   134b4:	200299ab 	.word	0x200299ab
   134b8:	200207c4 	.word	0x200207c4

000134bc <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   134bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   134be:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   134c0:	4c0f      	ldr	r4, [pc, #60]	; (13500 <z_impl_zsock_socket+0x44>)
   134c2:	4e10      	ldr	r6, [pc, #64]	; (13504 <z_impl_zsock_socket+0x48>)
   134c4:	42b4      	cmp	r4, r6
   134c6:	d307      	bcc.n	134d8 <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   134c8:	f010 ff4c 	bl	24364 <__errno>
   134cc:	236a      	movs	r3, #106	; 0x6a
   134ce:	6003      	str	r3, [r0, #0]
	return -1;
}
   134d0:	f04f 30ff 	mov.w	r0, #4294967295
   134d4:	b002      	add	sp, #8
   134d6:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
   134d8:	6823      	ldr	r3, [r4, #0]
   134da:	42ab      	cmp	r3, r5
   134dc:	d000      	beq.n	134e0 <z_impl_zsock_socket+0x24>
   134de:	b96b      	cbnz	r3, 134fc <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
   134e0:	4628      	mov	r0, r5
   134e2:	6863      	ldr	r3, [r4, #4]
   134e4:	e9cd 1200 	strd	r1, r2, [sp]
   134e8:	4798      	blx	r3
   134ea:	e9dd 1200 	ldrd	r1, r2, [sp]
   134ee:	b128      	cbz	r0, 134fc <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
   134f0:	4628      	mov	r0, r5
   134f2:	68a3      	ldr	r3, [r4, #8]
}
   134f4:	b002      	add	sp, #8
   134f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
   134fa:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   134fc:	340c      	adds	r4, #12
   134fe:	e7e1      	b.n	134c4 <z_impl_zsock_socket+0x8>
   13500:	00027b14 	.word	0x00027b14
   13504:	00027b20 	.word	0x00027b20

00013508 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   13508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct k_poll_event *pev_end = poll_events + ARRAY_SIZE(poll_events);
	const struct fd_op_vtable *vtable;
	k_timeout_t timeout;
	u64_t end;

	if (poll_timeout < 0) {
   1350c:	1e16      	subs	r6, r2, #0
{
   1350e:	4680      	mov	r8, r0
   13510:	4689      	mov	r9, r1
   13512:	b099      	sub	sp, #100	; 0x64
	if (poll_timeout < 0) {
   13514:	db4e      	blt.n	135b4 <z_impl_zsock_poll+0xac>
			return (u32_t)((t * to_hz + off) / from_hz);
   13516:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1351a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1351e:	2100      	movs	r1, #0
   13520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13524:	fbc4 0106 	smlal	r0, r1, r4, r6
   13528:	2300      	movs	r3, #0
   1352a:	f7f9 f845 	bl	c5b8 <__aeabi_uldivmod>
		timeout = K_FOREVER;
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
   1352e:	2500      	movs	r5, #0
   13530:	4604      	mov	r4, r0
	}

	end = z_timeout_end_calc(timeout);
   13532:	4620      	mov	r0, r4
   13534:	4629      	mov	r1, r5
   13536:	f013 f8e6 	bl	26706 <z_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   1353a:	464f      	mov	r7, r9
   1353c:	46c3      	mov	fp, r8
	end = z_timeout_end_calc(timeout);
   1353e:	e9cd 0103 	strd	r0, r1, [sp, #12]
	pev = poll_events;
   13542:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
   13546:	f8cd a01c 	str.w	sl, [sp, #28]
	for (pfd = fds, i = nfds; i--; pfd++) {
   1354a:	2f00      	cmp	r7, #0
   1354c:	d139      	bne.n	135c2 <z_impl_zsock_poll+0xba>
			errno = -result;
			return -1;
		}
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1354e:	ea54 0305 	orrs.w	r3, r4, r5
   13552:	d011      	beq.n	13578 <z_impl_zsock_poll+0x70>
   13554:	1c6a      	adds	r2, r5, #1
   13556:	bf08      	it	eq
   13558:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1355c:	d00c      	beq.n	13578 <z_impl_zsock_poll+0x70>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   1355e:	f00e f8c9 	bl	216f4 <z_tick_get>
   13562:	9b03      	ldr	r3, [sp, #12]
   13564:	1a1c      	subs	r4, r3, r0
   13566:	9b04      	ldr	r3, [sp, #16]
   13568:	eb63 0501 	sbc.w	r5, r3, r1
   1356c:	2c00      	cmp	r4, #0
   1356e:	f175 0300 	sbcs.w	r3, r5, #0
   13572:	bfbc      	itt	lt
   13574:	2400      	movlt	r4, #0
   13576:	2500      	movlt	r5, #0
			timeout = Z_TIMEOUT_TICKS(remaining);
		}
	}

	do {
		ret = k_poll(poll_events, pev - poll_events, timeout);
   13578:	9907      	ldr	r1, [sp, #28]
   1357a:	4b52      	ldr	r3, [pc, #328]	; (136c4 <z_impl_zsock_poll+0x1bc>)
   1357c:	eba1 010a 	sub.w	r1, r1, sl
   13580:	1089      	asrs	r1, r1, #2
   13582:	4359      	muls	r1, r3
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   13584:	462b      	mov	r3, r5
   13586:	4622      	mov	r2, r4
   13588:	4650      	mov	r0, sl
   1358a:	f00e f941 	bl	21810 <z_impl_k_poll>
		/* EAGAIN when timeout expired, EINTR when cancelled (i.e. EOF) */
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   1358e:	f100 030b 	add.w	r3, r0, #11
   13592:	2b0b      	cmp	r3, #11
   13594:	4606      	mov	r6, r0
   13596:	d806      	bhi.n	135a6 <z_impl_zsock_poll+0x9e>
   13598:	f640 0781 	movw	r7, #2177	; 0x881
   1359c:	40df      	lsrs	r7, r3
   1359e:	43ff      	mvns	r7, r7
   135a0:	f017 0701 	ands.w	r7, r7, #1
   135a4:	d044      	beq.n	13630 <z_impl_zsock_poll+0x128>
			errno = -ret;
   135a6:	f010 fedd 	bl	24364 <__errno>
   135aa:	4276      	negs	r6, r6
   135ac:	6006      	str	r6, [r0, #0]
			return -1;
   135ae:	f04f 36ff 	mov.w	r6, #4294967295
   135b2:	e02b      	b.n	1360c <z_impl_zsock_poll+0x104>
		timeout = K_FOREVER;
   135b4:	f04f 34ff 	mov.w	r4, #4294967295
   135b8:	f04f 35ff 	mov.w	r5, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   135bc:	f04f 36ff 	mov.w	r6, #4294967295
   135c0:	e7b7      	b.n	13532 <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   135c2:	f8db 0000 	ldr.w	r0, [fp]
   135c6:	2800      	cmp	r0, #0
   135c8:	db2e      	blt.n	13628 <z_impl_zsock_poll+0x120>
		ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
   135ca:	a908      	add	r1, sp, #32
   135cc:	f7fe ff6e 	bl	124ac <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   135d0:	4601      	mov	r1, r0
   135d2:	b348      	cbz	r0, 13628 <z_impl_zsock_poll+0x120>
		result = z_fdtable_call_ioctl(vtable, ctx,
   135d4:	ab18      	add	r3, sp, #96	; 0x60
   135d6:	9301      	str	r3, [sp, #4]
   135d8:	ab07      	add	r3, sp, #28
   135da:	f240 1203 	movw	r2, #259	; 0x103
   135de:	9300      	str	r3, [sp, #0]
   135e0:	9005      	str	r0, [sp, #20]
   135e2:	465b      	mov	r3, fp
   135e4:	9808      	ldr	r0, [sp, #32]
   135e6:	f010 fc25 	bl	23e34 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   135ea:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   135ee:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   135f0:	d018      	beq.n	13624 <z_impl_zsock_poll+0x11c>
		} else if (result == -EXDEV) {
   135f2:	f110 0f12 	cmn.w	r0, #18
   135f6:	9905      	ldr	r1, [sp, #20]
   135f8:	d10c      	bne.n	13614 <z_impl_zsock_poll+0x10c>
			return z_fdtable_call_ioctl(vtable, ctx,
   135fa:	e9cd 9600 	strd	r9, r6, [sp]
   135fe:	4643      	mov	r3, r8
   13600:	f240 1205 	movw	r2, #261	; 0x105
   13604:	9808      	ldr	r0, [sp, #32]
   13606:	f010 fc15 	bl	23e34 <z_fdtable_call_ioctl>
   1360a:	4606      	mov	r6, r0
			}
		}
	} while (retry);

	return ret;
}
   1360c:	4630      	mov	r0, r6
   1360e:	b019      	add	sp, #100	; 0x64
   13610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (result != 0) {
   13614:	b140      	cbz	r0, 13628 <z_impl_zsock_poll+0x120>
   13616:	9203      	str	r2, [sp, #12]
				errno = -result;
   13618:	f010 fea4 	bl	24364 <__errno>
   1361c:	9a03      	ldr	r2, [sp, #12]
   1361e:	4252      	negs	r2, r2
   13620:	6002      	str	r2, [r0, #0]
				return -1;
   13622:	e7c4      	b.n	135ae <z_impl_zsock_poll+0xa6>
			timeout = K_NO_WAIT;
   13624:	2400      	movs	r4, #0
   13626:	2500      	movs	r5, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   13628:	f10b 0b08 	add.w	fp, fp, #8
   1362c:	3f01      	subs	r7, #1
   1362e:	e78c      	b.n	1354a <z_impl_zsock_poll+0x42>
		for (pfd = fds, i = nfds; i--; pfd++) {
   13630:	46cb      	mov	fp, r9
   13632:	4643      	mov	r3, r8
		ret = 0;
   13634:	463e      	mov	r6, r7
		pev = poll_events;
   13636:	f8cd a01c 	str.w	sl, [sp, #28]
		for (pfd = fds, i = nfds; i--; pfd++) {
   1363a:	f1bb 0f00 	cmp.w	fp, #0
   1363e:	d117      	bne.n	13670 <z_impl_zsock_poll+0x168>
		if (retry) {
   13640:	2f00      	cmp	r7, #0
   13642:	d0e3      	beq.n	1360c <z_impl_zsock_poll+0x104>
			if (ret > 0) {
   13644:	2e00      	cmp	r6, #0
   13646:	dce1      	bgt.n	1360c <z_impl_zsock_poll+0x104>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13648:	ea54 0305 	orrs.w	r3, r4, r5
   1364c:	d0de      	beq.n	1360c <z_impl_zsock_poll+0x104>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1364e:	1c6b      	adds	r3, r5, #1
   13650:	bf08      	it	eq
   13652:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   13656:	d08f      	beq.n	13578 <z_impl_zsock_poll+0x70>
				s64_t remaining = end - z_tick_get();
   13658:	f00e f84c 	bl	216f4 <z_tick_get>
   1365c:	9b03      	ldr	r3, [sp, #12]
   1365e:	1a1c      	subs	r4, r3, r0
   13660:	9b04      	ldr	r3, [sp, #16]
   13662:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   13666:	2c01      	cmp	r4, #1
   13668:	f175 0300 	sbcs.w	r3, r5, #0
   1366c:	da84      	bge.n	13578 <z_impl_zsock_poll+0x70>
   1366e:	e7cd      	b.n	1360c <z_impl_zsock_poll+0x104>
			pfd->revents = 0;
   13670:	f04f 0200 	mov.w	r2, #0
			if (pfd->fd < 0) {
   13674:	6818      	ldr	r0, [r3, #0]
			pfd->revents = 0;
   13676:	80da      	strh	r2, [r3, #6]
			if (pfd->fd < 0) {
   13678:	2800      	cmp	r0, #0
   1367a:	db1d      	blt.n	136b8 <z_impl_zsock_poll+0x1b0>
			ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
   1367c:	a908      	add	r1, sp, #32
   1367e:	9305      	str	r3, [sp, #20]
   13680:	f7fe ff14 	bl	124ac <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   13684:	9b05      	ldr	r3, [sp, #20]
   13686:	4601      	mov	r1, r0
   13688:	b918      	cbnz	r0, 13692 <z_impl_zsock_poll+0x18a>
				pfd->revents = ZSOCK_POLLNVAL;
   1368a:	2220      	movs	r2, #32
   1368c:	80da      	strh	r2, [r3, #6]
				ret++;
   1368e:	3601      	adds	r6, #1
   13690:	e012      	b.n	136b8 <z_impl_zsock_poll+0x1b0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   13692:	aa07      	add	r2, sp, #28
   13694:	9200      	str	r2, [sp, #0]
   13696:	9808      	ldr	r0, [sp, #32]
   13698:	f44f 7282 	mov.w	r2, #260	; 0x104
   1369c:	9305      	str	r3, [sp, #20]
   1369e:	f010 fbc9 	bl	23e34 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   136a2:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   136a6:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   136a8:	9b05      	ldr	r3, [sp, #20]
   136aa:	d009      	beq.n	136c0 <z_impl_zsock_poll+0x1b8>
			} else if (result != 0) {
   136ac:	2800      	cmp	r0, #0
   136ae:	d1b2      	bne.n	13616 <z_impl_zsock_poll+0x10e>
			if (pfd->revents != 0) {
   136b0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   136b4:	2a00      	cmp	r2, #0
   136b6:	d1ea      	bne.n	1368e <z_impl_zsock_poll+0x186>
		for (pfd = fds, i = nfds; i--; pfd++) {
   136b8:	3308      	adds	r3, #8
   136ba:	f10b 3bff 	add.w	fp, fp, #4294967295
   136be:	e7bc      	b.n	1363a <z_impl_zsock_poll+0x132>
				retry = true;
   136c0:	2701      	movs	r7, #1
   136c2:	e7f9      	b.n	136b8 <z_impl_zsock_poll+0x1b0>
   136c4:	cccccccd 	.word	0xcccccccd

000136c8 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   136c8:	4b01      	ldr	r3, [pc, #4]	; (136d0 <socket_offload_dns_register+0x8>)
   136ca:	6018      	str	r0, [r3, #0]
}
   136cc:	4770      	bx	lr
   136ce:	bf00      	nop
   136d0:	200219f8 	.word	0x200219f8

000136d4 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   136d4:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   136d6:	4c03      	ldr	r4, [pc, #12]	; (136e4 <socket_offload_getaddrinfo+0x10>)
   136d8:	6824      	ldr	r4, [r4, #0]
   136da:	6824      	ldr	r4, [r4, #0]
   136dc:	46a4      	mov	ip, r4
}
   136de:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
   136e2:	4760      	bx	ip
   136e4:	200219f8 	.word	0x200219f8

000136e8 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   136e8:	4b01      	ldr	r3, [pc, #4]	; (136f0 <socket_offload_freeaddrinfo+0x8>)
   136ea:	681b      	ldr	r3, [r3, #0]
   136ec:	685b      	ldr	r3, [r3, #4]
   136ee:	4718      	bx	r3
   136f0:	200219f8 	.word	0x200219f8

000136f4 <sys_pm_create_device_list>:
		++pmi;
	}
}

void sys_pm_create_device_list(void)
{
   136f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136f8:	b085      	sub	sp, #20
	/*
	 * Create an ordered list of devices that will be suspended.
	 * Ordering should be done based on dependencies. Devices
	 * in the beginning of the list will be resumed first.
	 */
	device_list_get(&all_devices, &count);
   136fa:	481d      	ldr	r0, [pc, #116]	; (13770 <sys_pm_create_device_list+0x7c>)
   136fc:	a903      	add	r1, sp, #12
   136fe:	f00c fe33 	bl	20368 <device_list_get>

	__ASSERT_NO_MSG((0 <= count) && (count <= DEVICE_IDX_MAX));

	/* Reserve initial slots for core devices. */
	num_pm = ARRAY_SIZE(core_devices);
   13702:	2303      	movs	r3, #3

	for (pmi = 0; (pmi < count) && (num_pm < MAX_PM_DEVICES); pmi++) {
   13704:	2600      	movs	r6, #0
	num_pm = ARRAY_SIZE(core_devices);
   13706:	4c1b      	ldr	r4, [pc, #108]	; (13774 <sys_pm_create_device_list+0x80>)
		device_idx_t cdi = 0;
		const struct device *dev = &all_devices[pmi];
   13708:	f8df a064 	ldr.w	sl, [pc, #100]	; 13770 <sys_pm_create_device_list+0x7c>

		/* Ignore "device"s that don't support PM */
		if (dev->device_pm_control == device_pm_control_nop) {
   1370c:	f8df b06c 	ldr.w	fp, [pc, #108]	; 1377c <sys_pm_create_device_list+0x88>
			++cdi;
		}

		/* Append the device if it doesn't have a reserved slot. */
		if (cdi == ARRAY_SIZE(core_devices)) {
			pm_devices[num_pm++] = pmi;
   13710:	f8df 806c 	ldr.w	r8, [pc, #108]	; 13780 <sys_pm_create_device_list+0x8c>
	num_pm = ARRAY_SIZE(core_devices);
   13714:	8023      	strh	r3, [r4, #0]
	for (pmi = 0; (pmi < count) && (num_pm < MAX_PM_DEVICES); pmi++) {
   13716:	9b03      	ldr	r3, [sp, #12]
   13718:	fa1f f986 	uxth.w	r9, r6
   1371c:	4599      	cmp	r9, r3
   1371e:	464d      	mov	r5, r9
   13720:	da02      	bge.n	13728 <sys_pm_create_device_list+0x34>
   13722:	8823      	ldrh	r3, [r4, #0]
   13724:	2b0e      	cmp	r3, #14
   13726:	d902      	bls.n	1372e <sys_pm_create_device_list+0x3a>
		}
	}
}
   13728:	b005      	add	sp, #20
   1372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct device *dev = &all_devices[pmi];
   1372e:	2218      	movs	r2, #24
   13730:	f8da 3000 	ldr.w	r3, [sl]
   13734:	fb02 3505 	mla	r5, r2, r5, r3
		if (dev->device_pm_control == device_pm_control_nop) {
   13738:	692b      	ldr	r3, [r5, #16]
   1373a:	455b      	cmp	r3, fp
   1373c:	d00c      	beq.n	13758 <sys_pm_create_device_list+0x64>
   1373e:	2700      	movs	r7, #0
   13740:	4b0d      	ldr	r3, [pc, #52]	; (13778 <sys_pm_create_device_list+0x84>)
			if (strcmp(dev->name, core_devices[cdi]) == 0) {
   13742:	f853 1b04 	ldr.w	r1, [r3], #4
   13746:	6828      	ldr	r0, [r5, #0]
   13748:	e9cd 3300 	strd	r3, r3, [sp]
   1374c:	f7f9 fb86 	bl	ce5c <strcmp>
   13750:	9b00      	ldr	r3, [sp, #0]
   13752:	b918      	cbnz	r0, 1375c <sys_pm_create_device_list+0x68>
				pm_devices[cdi] = pmi;
   13754:	f828 9017 	strh.w	r9, [r8, r7, lsl #1]
	for (pmi = 0; (pmi < count) && (num_pm < MAX_PM_DEVICES); pmi++) {
   13758:	3601      	adds	r6, #1
   1375a:	e7dc      	b.n	13716 <sys_pm_create_device_list+0x22>
		while (cdi < ARRAY_SIZE(core_devices)) {
   1375c:	3701      	adds	r7, #1
   1375e:	2f03      	cmp	r7, #3
   13760:	d1ef      	bne.n	13742 <sys_pm_create_device_list+0x4e>
			pm_devices[num_pm++] = pmi;
   13762:	8823      	ldrh	r3, [r4, #0]
   13764:	1c5a      	adds	r2, r3, #1
   13766:	8022      	strh	r2, [r4, #0]
   13768:	f828 9013 	strh.w	r9, [r8, r3, lsl #1]
   1376c:	e7f4      	b.n	13758 <sys_pm_create_device_list+0x64>
   1376e:	bf00      	nop
   13770:	200219fc 	.word	0x200219fc
   13774:	20026e7c 	.word	0x20026e7c
   13778:	00027f48 	.word	0x00027f48
   1377c:	00026119 	.word	0x00026119
   13780:	20026e7e 	.word	0x20026e7e

00013784 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
   13784:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   13786:	4804      	ldr	r0, [pc, #16]	; (13798 <rtt_console_init+0x14>)
   13788:	f7fe ff2e 	bl	125e8 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1378c:	4802      	ldr	r0, [pc, #8]	; (13798 <rtt_console_init+0x14>)
   1378e:	f001 f8dd 	bl	1494c <__stdout_hook_install>

	return 0;
}
   13792:	2000      	movs	r0, #0
   13794:	bd08      	pop	{r3, pc}
   13796:	bf00      	nop
   13798:	0001379d 	.word	0x0001379d

0001379c <rtt_console_out>:
{
   1379c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   137a0:	4604      	mov	r4, r0
	char c = (char)character;
   137a2:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
   137a4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 13804 <rtt_console_out+0x68>
   137a8:	4e15      	ldr	r6, [pc, #84]	; (13800 <rtt_console_out+0x64>)
   137aa:	f88d 0007 	strb.w	r0, [sp, #7]
   137ae:	f04f 33ff 	mov.w	r3, #4294967295
   137b2:	f04f 32ff 	mov.w	r2, #4294967295
   137b6:	4640      	mov	r0, r8
   137b8:	f00d f896 	bl	208e8 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   137bc:	2201      	movs	r2, #1
   137be:	f10d 0107 	add.w	r1, sp, #7
   137c2:	2000      	movs	r0, #0
   137c4:	f000 fa64 	bl	13c90 <SEGGER_RTT_WriteNoLock>
   137c8:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   137ca:	4640      	mov	r0, r8
   137cc:	f00d f904 	bl	209d8 <z_impl_k_mutex_unlock>
		if (cnt) {
   137d0:	b12f      	cbz	r7, 137de <rtt_console_out+0x42>
			host_present = true;
   137d2:	2301      	movs	r3, #1
   137d4:	7033      	strb	r3, [r6, #0]
}
   137d6:	4620      	mov	r0, r4
   137d8:	b002      	add	sp, #8
   137da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   137de:	7833      	ldrb	r3, [r6, #0]
   137e0:	2b00      	cmp	r3, #0
   137e2:	d0f8      	beq.n	137d6 <rtt_console_out+0x3a>
			if (max_cnt) {
   137e4:	3d01      	subs	r5, #1
   137e6:	d008      	beq.n	137fa <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
   137e8:	f012 ff39 	bl	2665e <k_is_in_isr>
   137ec:	2800      	cmp	r0, #0
   137ee:	d1de      	bne.n	137ae <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   137f0:	2100      	movs	r1, #0
   137f2:	2042      	movs	r0, #66	; 0x42
   137f4:	f00d fcae 	bl	21154 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   137f8:	e7d9      	b.n	137ae <rtt_console_out+0x12>
				host_present = false;
   137fa:	7035      	strb	r5, [r6, #0]
   137fc:	e7eb      	b.n	137d6 <rtt_console_out+0x3a>
   137fe:	bf00      	nop
   13800:	200299ac 	.word	0x200299ac
   13804:	200207c4 	.word	0x200207c4

00013808 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
   13808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
   1380c:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   1380e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   13812:	b2cf      	uxtb	r7, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
   13814:	b14a      	cbz	r2, 1382a <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   13816:	230c      	movs	r3, #12
   13818:	437b      	muls	r3, r7
   1381a:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   1381e:	429a      	cmp	r2, r3
   13820:	d053      	beq.n	138ca <clock_async_start+0xc2>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   13822:	b113      	cbz	r3, 1382a <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13824:	681b      	ldr	r3, [r3, #0]
	} while (item);
   13826:	2b00      	cmp	r3, #0
   13828:	d1f9      	bne.n	1381e <clock_async_start+0x16>
	__asm__ volatile(
   1382a:	f04f 0320 	mov.w	r3, #32
   1382e:	f3ef 8c11 	mrs	ip, BASEPRI
   13832:	f383 8811 	msr	BASEPRI, r3
   13836:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
   1383a:	250c      	movs	r5, #12
   1383c:	437d      	muls	r5, r7
   1383e:	eb0e 0305 	add.w	r3, lr, r5
   13842:	7a1c      	ldrb	r4, [r3, #8]
   13844:	3401      	adds	r4, #1
   13846:	b2e4      	uxtb	r4, r4
   13848:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   1384a:	f38c 8811 	msr	BASEPRI, ip
   1384e:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
   13852:	b352      	cbz	r2, 138aa <clock_async_start+0xa2>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   13854:	f04f 0803 	mov.w	r8, #3
   13858:	f8df c078 	ldr.w	ip, [pc, #120]	; 138d4 <clock_async_start+0xcc>
   1385c:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
   13860:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   13864:	f1bc 0f00 	cmp.w	ip, #0
   13868:	d115      	bne.n	13896 <clock_async_start+0x8e>
	__asm__ volatile(
   1386a:	f04f 0820 	mov.w	r8, #32
   1386e:	f3ef 8911 	mrs	r9, BASEPRI
   13872:	f388 8811 	msr	BASEPRI, r8
   13876:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1387a:	f8c2 c000 	str.w	ip, [r2]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1387e:	f8d3 8004 	ldr.w	r8, [r3, #4]
   13882:	f1b8 0f00 	cmp.w	r8, #0
   13886:	d11c      	bne.n	138c2 <clock_async_start+0xba>
	list->tail = node;
   13888:	605a      	str	r2, [r3, #4]
	list->head = node;
   1388a:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   1388e:	f389 8811 	msr	BASEPRI, r9
   13892:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   13896:	2503      	movs	r5, #3
   13898:	4b0e      	ldr	r3, [pc, #56]	; (138d4 <clock_async_start+0xcc>)
   1389a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
   1389e:	f1bc 0f00 	cmp.w	ip, #0
   138a2:	d002      	beq.n	138aa <clock_async_start+0xa2>
			data->cb(dev, subsys, data->user_data);
   138a4:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   138a8:	4798      	blx	r3
		}
	}

	if (ref == 1) {
   138aa:	2c01      	cmp	r4, #1
   138ac:	d107      	bne.n	138be <clock_async_start+0xb6>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   138ae:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   138b2:	78b3      	ldrb	r3, [r6, #2]
   138b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   138b8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   138bc:	601c      	str	r4, [r3, #0]
	}

	return 0;
   138be:	2000      	movs	r0, #0
   138c0:	e005      	b.n	138ce <clock_async_start+0xc6>
	parent->next = child;
   138c2:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   138c6:	605a      	str	r2, [r3, #4]
}
   138c8:	e7e1      	b.n	1388e <clock_async_start+0x86>
		return -EBUSY;
   138ca:	f06f 000f 	mvn.w	r0, #15
}
   138ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   138d2:	bf00      	nop
   138d4:	40005000 	.word	0x40005000

000138d8 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   138d8:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   138da:	2200      	movs	r2, #0
{
   138dc:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   138de:	2101      	movs	r1, #1
   138e0:	2005      	movs	r0, #5
   138e2:	f000 fa51 	bl	13d88 <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
   138e6:	2005      	movs	r0, #5
   138e8:	f000 fa2a 	bl	13d40 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   138ec:	2202      	movs	r2, #2
   138ee:	4b07      	ldr	r3, [pc, #28]	; (1390c <clk_init+0x34>)
	list->head = NULL;
   138f0:	2000      	movs	r0, #0
   138f2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   138f6:	2203      	movs	r2, #3
   138f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   138fc:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   138fe:	e9c3 0000 	strd	r0, r0, [r3]
   13902:	68e3      	ldr	r3, [r4, #12]
   13904:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   13908:	bd10      	pop	{r4, pc}
   1390a:	bf00      	nop
   1390c:	40005000 	.word	0x40005000

00013910 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
   13910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
   13912:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13914:	4f11      	ldr	r7, [pc, #68]	; (1395c <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
   13916:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13918:	68fb      	ldr	r3, [r7, #12]
	sub_data->started = true;
   1391a:	fb04 3400 	mla	r4, r4, r0, r3
   1391e:	2301      	movs	r3, #1
   13920:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   13922:	f04f 0320 	mov.w	r3, #32
   13926:	f3ef 8111 	mrs	r1, BASEPRI
   1392a:	f383 8811 	msr	BASEPRI, r3
   1392e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   13932:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13934:	b12b      	cbz	r3, 13942 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13936:	6866      	ldr	r6, [r4, #4]
   13938:	681a      	ldr	r2, [r3, #0]
   1393a:	42b3      	cmp	r3, r6
	list->head = node;
   1393c:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1393e:	bf08      	it	eq
   13940:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   13942:	f381 8811 	msr	BASEPRI, r1
   13946:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1394a:	b903      	cbnz	r3, 1394e <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
   1394c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
   1394e:	4629      	mov	r1, r5
   13950:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
   13954:	4638      	mov	r0, r7
   13956:	47b0      	blx	r6
   13958:	e7e3      	b.n	13922 <clkstarted_handle.constprop.0+0x12>
   1395a:	bf00      	nop
   1395c:	200205b4 	.word	0x200205b4

00013960 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   13960:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13962:	4b10      	ldr	r3, [pc, #64]	; (139a4 <nrf_power_clock_isr+0x44>)
   13964:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   13966:	b162      	cbz	r2, 13982 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   13968:	4a0f      	ldr	r2, [pc, #60]	; (139a8 <nrf_power_clock_isr+0x48>)
   1396a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1396e:	07d1      	lsls	r1, r2, #31
   13970:	d507      	bpl.n	13982 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13972:	2200      	movs	r2, #0
   13974:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   13976:	4b0d      	ldr	r3, [pc, #52]	; (139ac <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   13978:	68db      	ldr	r3, [r3, #12]
   1397a:	7a58      	ldrb	r0, [r3, #9]
   1397c:	b908      	cbnz	r0, 13982 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1397e:	f7ff ffc7 	bl	13910 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13982:	4b0b      	ldr	r3, [pc, #44]	; (139b0 <nrf_power_clock_isr+0x50>)
   13984:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   13986:	b15a      	cbz	r2, 139a0 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
   13988:	4a07      	ldr	r2, [pc, #28]	; (139a8 <nrf_power_clock_isr+0x48>)
   1398a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1398e:	0792      	lsls	r2, r2, #30
   13990:	d506      	bpl.n	139a0 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13992:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13994:	2001      	movs	r0, #1
   13996:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   13998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1399c:	f7ff bfb8 	b.w	13910 <clkstarted_handle.constprop.0>
}
   139a0:	bd08      	pop	{r3, pc}
   139a2:	bf00      	nop
   139a4:	40005100 	.word	0x40005100
   139a8:	40005000 	.word	0x40005000
   139ac:	200205b4 	.word	0x200205b4
   139b0:	40005104 	.word	0x40005104

000139b4 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
   139b4:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   139b6:	4b08      	ldr	r3, [pc, #32]	; (139d8 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   139b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   139bc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   139c0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   139c4:	4290      	cmp	r0, r2
   139c6:	d100      	bne.n	139ca <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   139c8:	4770      	bx	lr
   139ca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   139ce:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   139d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   139d4:	e7f2      	b.n	139bc <handle_next_tick_case+0x8>
   139d6:	bf00      	nop
   139d8:	40015000 	.word	0x40015000

000139dc <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   139dc:	2200      	movs	r2, #0
   139de:	4b06      	ldr	r3, [pc, #24]	; (139f8 <rtc1_nrf_isr+0x1c>)
   139e0:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   139e2:	4a06      	ldr	r2, [pc, #24]	; (139fc <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
   139e4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   139e8:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   139ea:	1ac0      	subs	r0, r0, r3
   139ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   139f0:	4403      	add	r3, r0
   139f2:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   139f4:	f00d be2a 	b.w	2164c <z_clock_announce>
   139f8:	40015140 	.word	0x40015140
   139fc:	20021a18 	.word	0x20021a18

00013a00 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   13a00:	b538      	push	{r3, r4, r5, lr}
   13a02:	4814      	ldr	r0, [pc, #80]	; (13a54 <z_clock_driver_init+0x54>)
   13a04:	f00c fc8c 	bl	20320 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
   13a08:	b300      	cbz	r0, 13a4c <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   13a0a:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   13a0c:	2400      	movs	r4, #0
   13a0e:	2101      	movs	r1, #1
   13a10:	681b      	ldr	r3, [r3, #0]
   13a12:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13a18:	4d0f      	ldr	r5, [pc, #60]	; (13a58 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13a1a:	4b10      	ldr	r3, [pc, #64]	; (13a5c <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   13a1c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13a20:	601c      	str	r4, [r3, #0]
   13a22:	4b0f      	ldr	r3, [pc, #60]	; (13a60 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   13a24:	2101      	movs	r1, #1
   13a26:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   13a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13a2e:	4622      	mov	r2, r4
   13a30:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   13a34:	2015      	movs	r0, #21
   13a36:	f000 f9a7 	bl	13d88 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   13a3a:	2015      	movs	r0, #21
   13a3c:	f000 f980 	bl	13d40 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13a40:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   13a42:	4620      	mov	r0, r4
   13a44:	4a07      	ldr	r2, [pc, #28]	; (13a64 <z_clock_driver_init+0x64>)
   13a46:	6013      	str	r3, [r2, #0]
   13a48:	602b      	str	r3, [r5, #0]
}
   13a4a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   13a4c:	f04f 30ff 	mov.w	r0, #4294967295
   13a50:	e7fb      	b.n	13a4a <z_clock_driver_init+0x4a>
   13a52:	bf00      	nop
   13a54:	00029ac2 	.word	0x00029ac2
   13a58:	40015000 	.word	0x40015000
   13a5c:	40015140 	.word	0x40015140
   13a60:	e000e100 	.word	0xe000e100
   13a64:	40015008 	.word	0x40015008

00013a68 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   13a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   13a6a:	4b2c      	ldr	r3, [pc, #176]	; (13b1c <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13a6c:	4c2c      	ldr	r4, [pc, #176]	; (13b20 <z_clock_set_timeout+0xb8>)
   13a6e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
   13a72:	4b2c      	ldr	r3, [pc, #176]	; (13b24 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13a74:	f1b0 3fff 	cmp.w	r0, #4294967295
   13a78:	bf08      	it	eq
   13a7a:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
   13a7c:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   13a7e:	1a52      	subs	r2, r2, r1
   13a80:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   13a84:	0212      	lsls	r2, r2, #8
   13a86:	d436      	bmi.n	13af6 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   13a88:	3801      	subs	r0, #1
   13a8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   13a8e:	42a0      	cmp	r0, r4
   13a90:	bfa8      	it	ge
   13a92:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13a94:	3301      	adds	r3, #1
   13a96:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   13a98:	42a0      	cmp	r0, r4
   13a9a:	bf94      	ite	ls
   13a9c:	180c      	addls	r4, r1, r0
   13a9e:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   13aa0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13aa4:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   13aa6:	4b1d      	ldr	r3, [pc, #116]	; (13b1c <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13aa8:	4e1f      	ldr	r6, [pc, #124]	; (13b28 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
   13aaa:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   13aae:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   13ab2:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   13ab6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
   13aba:	1a52      	subs	r2, r2, r1
   13abc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   13ac0:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13ac2:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
   13ac4:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   13ac8:	461d      	mov	r5, r3
   13aca:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
   13ace:	d103      	bne.n	13ad8 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
   13ad0:	200f      	movs	r0, #15
   13ad2:	f012 fdca 	bl	2666a <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13ad6:	6037      	str	r7, [r6, #0]
   13ad8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13adc:	4b13      	ldr	r3, [pc, #76]	; (13b2c <z_clock_set_timeout+0xc4>)
   13ade:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   13ae2:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13ae6:	1a23      	subs	r3, r4, r0
   13ae8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   13aec:	2b01      	cmp	r3, #1
   13aee:	d104      	bne.n	13afa <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
   13af0:	f7ff ff60 	bl	139b4 <handle_next_tick_case>
   13af4:	e00b      	b.n	13b0e <z_clock_set_timeout+0xa6>
		ticks = 0;
   13af6:	2000      	movs	r0, #0
   13af8:	e7cc      	b.n	13a94 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   13afa:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   13afe:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
   13b02:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13b06:	1a24      	subs	r4, r4, r0
   13b08:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
   13b0a:	0223      	lsls	r3, r4, #8
   13b0c:	d4f0      	bmi.n	13af0 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
   13b0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13b12:	4b02      	ldr	r3, [pc, #8]	; (13b1c <z_clock_set_timeout+0xb4>)
   13b14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
   13b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b1a:	bf00      	nop
   13b1c:	40015000 	.word	0x40015000
   13b20:	007fffff 	.word	0x007fffff
   13b24:	20021a18 	.word	0x20021a18
   13b28:	40015140 	.word	0x40015140
   13b2c:	e000e100 	.word	0xe000e100

00013b30 <z_clock_elapsed>:
	__asm__ volatile(
   13b30:	f04f 0220 	mov.w	r2, #32
   13b34:	f3ef 8311 	mrs	r3, BASEPRI
   13b38:	f382 8811 	msr	BASEPRI, r2
   13b3c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   13b40:	4a06      	ldr	r2, [pc, #24]	; (13b5c <z_clock_elapsed+0x2c>)
   13b42:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   13b46:	4a06      	ldr	r2, [pc, #24]	; (13b60 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   13b48:	6812      	ldr	r2, [r2, #0]
   13b4a:	1a80      	subs	r0, r0, r2
   13b4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   13b50:	f383 8811 	msr	BASEPRI, r3
   13b54:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   13b58:	4770      	bx	lr
   13b5a:	bf00      	nop
   13b5c:	40015000 	.word	0x40015000
   13b60:	20021a18 	.word	0x20021a18

00013b64 <z_timer_cycle_get_32>:
	__asm__ volatile(
   13b64:	f04f 0320 	mov.w	r3, #32
   13b68:	f3ef 8211 	mrs	r2, BASEPRI
   13b6c:	f383 8811 	msr	BASEPRI, r3
   13b70:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   13b74:	4906      	ldr	r1, [pc, #24]	; (13b90 <z_timer_cycle_get_32+0x2c>)
   13b76:	4b07      	ldr	r3, [pc, #28]	; (13b94 <z_timer_cycle_get_32+0x30>)
   13b78:	6808      	ldr	r0, [r1, #0]
   13b7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   13b7e:	f382 8811 	msr	BASEPRI, r2
   13b82:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   13b86:	1a1b      	subs	r3, r3, r0
   13b88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   13b8c:	4418      	add	r0, r3
   13b8e:	4770      	bx	lr
   13b90:	20021a18 	.word	0x20021a18
   13b94:	40015000 	.word	0x40015000

00013b98 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13b98:	2303      	movs	r3, #3
static void _DoInit(void) {
   13b9a:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13b9c:	4c10      	ldr	r4, [pc, #64]	; (13be0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   13b9e:	4a11      	ldr	r2, [pc, #68]	; (13be4 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   13ba0:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   13ba4:	4b10      	ldr	r3, [pc, #64]	; (13be8 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   13ba6:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   13ba8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   13bae:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   13bb0:	4a0e      	ldr	r2, [pc, #56]	; (13bec <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13bb2:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   13bb4:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   13bb6:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13bb8:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   13bba:	490d      	ldr	r1, [pc, #52]	; (13bf0 <_DoInit+0x58>)
   13bbc:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   13bbe:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   13bc0:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13bc2:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   13bc4:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   13bc6:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13bc8:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13bca:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   13bcc:	f013 f899 	bl	26d02 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   13bd0:	4620      	mov	r0, r4
   13bd2:	4908      	ldr	r1, [pc, #32]	; (13bf4 <_DoInit+0x5c>)
   13bd4:	f013 f895 	bl	26d02 <strcpy>
  p->acID[6] = ' ';
   13bd8:	2320      	movs	r3, #32
   13bda:	71a3      	strb	r3, [r4, #6]
}
   13bdc:	bd10      	pop	{r4, pc}
   13bde:	bf00      	nop
   13be0:	20021a1c 	.word	0x20021a1c
   13be4:	00029aec 	.word	0x00029aec
   13be8:	200299bd 	.word	0x200299bd
   13bec:	200299ad 	.word	0x200299ad
   13bf0:	00029af5 	.word	0x00029af5
   13bf4:	00029af9 	.word	0x00029af9

00013bf8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   13bfc:	f04f 0b18 	mov.w	fp, #24
   13c00:	4f22      	ldr	r7, [pc, #136]	; (13c8c <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13c02:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   13c04:	fb0b 7200 	mla	r2, fp, r0, r7
   13c08:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   13c0a:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13c0c:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   13c0e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13c10:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   13c12:	d834      	bhi.n	13c7e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   13c14:	f8d2 a020 	ldr.w	sl, [r2, #32]
   13c18:	ebaa 0905 	sub.w	r9, sl, r5
   13c1c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   13c20:	4294      	cmp	r4, r2
   13c22:	d811      	bhi.n	13c48 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   13c24:	f04f 0918 	mov.w	r9, #24
   13c28:	fb06 9309 	mla	r3, r6, r9, r9
   13c2c:	443b      	add	r3, r7
   13c2e:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13c30:	4622      	mov	r2, r4
   13c32:	4641      	mov	r1, r8
   13c34:	4428      	add	r0, r5
   13c36:	f012 fee6 	bl	26a06 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   13c3a:	fb09 7606 	mla	r6, r9, r6, r7
   13c3e:	442c      	add	r4, r5
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
   13c40:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   13c42:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   13c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   13c48:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   13c4a:	429c      	cmp	r4, r3
   13c4c:	d81b      	bhi.n	13c86 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   13c4e:	fb00 bb0b 	mla	fp, r0, fp, fp
   13c52:	44bb      	add	fp, r7
   13c54:	f8db 0004 	ldr.w	r0, [fp, #4]
   13c58:	464a      	mov	r2, r9
   13c5a:	4428      	add	r0, r5
   13c5c:	442c      	add	r4, r5
   13c5e:	f012 fed2 	bl	26a06 <memcpy>
      if (NumBytes) {
   13c62:	ebb4 040a 	subs.w	r4, r4, sl
   13c66:	d006      	beq.n	13c76 <SEGGER_RTT_WriteSkipNoLock+0x7e>
   13c68:	4622      	mov	r2, r4
   13c6a:	f8db 0004 	ldr.w	r0, [fp, #4]
   13c6e:	eb08 0109 	add.w	r1, r8, r9
   13c72:	f012 fec8 	bl	26a06 <memcpy>
      pRing->WrOff = NumBytes;
   13c76:	2018      	movs	r0, #24
   13c78:	fb00 7606 	mla	r6, r0, r6, r7
   13c7c:	e7e0      	b.n	13c40 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   13c7e:	3b01      	subs	r3, #1
   13c80:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   13c82:	42a3      	cmp	r3, r4
   13c84:	d2ce      	bcs.n	13c24 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   13c86:	2000      	movs	r0, #0
   13c88:	e7dc      	b.n	13c44 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   13c8a:	bf00      	nop
   13c8c:	20021a1c 	.word	0x20021a1c

00013c90 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   13c92:	2318      	movs	r3, #24
   13c94:	4c17      	ldr	r4, [pc, #92]	; (13cf4 <SEGGER_RTT_WriteNoLock+0x64>)
   13c96:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   13c9a:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   13c9e:	4425      	add	r5, r4
  switch (pRing->Flags) {
   13ca0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13ca2:	460f      	mov	r7, r1
  switch (pRing->Flags) {
   13ca4:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13ca6:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   13ca8:	d00f      	beq.n	13cca <SEGGER_RTT_WriteNoLock+0x3a>
   13caa:	2c02      	cmp	r4, #2
   13cac:	d01a      	beq.n	13ce4 <SEGGER_RTT_WriteNoLock+0x54>
   13cae:	b9f4      	cbnz	r4, 13cee <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   13cb0:	4628      	mov	r0, r5
   13cb2:	f010 faa6 	bl	24202 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   13cb6:	4286      	cmp	r6, r0
   13cb8:	d805      	bhi.n	13cc6 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   13cba:	4632      	mov	r2, r6
   13cbc:	4639      	mov	r1, r7
   13cbe:	4628      	mov	r0, r5
   13cc0:	f010 faad 	bl	2421e <_WriteNoCheck>
   13cc4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   13cc6:	4620      	mov	r0, r4
   13cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   13cca:	4628      	mov	r0, r5
   13ccc:	f010 fa99 	bl	24202 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   13cd0:	4286      	cmp	r6, r0
   13cd2:	4634      	mov	r4, r6
   13cd4:	bf28      	it	cs
   13cd6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   13cd8:	4639      	mov	r1, r7
   13cda:	4622      	mov	r2, r4
   13cdc:	4628      	mov	r0, r5
   13cde:	f010 fa9e 	bl	2421e <_WriteNoCheck>
    break;
   13ce2:	e7f0      	b.n	13cc6 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   13ce4:	4628      	mov	r0, r5
}
   13ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   13cea:	f010 bab4 	b.w	24256 <_WriteBlocking>
  switch (pRing->Flags) {
   13cee:	2400      	movs	r4, #0
  return Status;
   13cf0:	e7e9      	b.n	13cc6 <SEGGER_RTT_WriteNoLock+0x36>
   13cf2:	bf00      	nop
   13cf4:	20021a1c 	.word	0x20021a1c

00013cf8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   13cf8:	2218      	movs	r2, #24
   13cfa:	4b03      	ldr	r3, [pc, #12]	; (13d08 <SEGGER_RTT_HasDataUp+0x10>)
   13cfc:	fb02 3000 	mla	r0, r2, r0, r3
   13d00:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
   13d02:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   13d04:	1ac0      	subs	r0, r0, r3
   13d06:	4770      	bx	lr
   13d08:	20021a1c 	.word	0x20021a1c

00013d0c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   13d0c:	4a09      	ldr	r2, [pc, #36]	; (13d34 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   13d0e:	490a      	ldr	r1, [pc, #40]	; (13d38 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   13d10:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   13d12:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   13d14:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
   13d16:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13d18:	4908      	ldr	r1, [pc, #32]	; (13d3c <arch_swap+0x30>)
   13d1a:	684b      	ldr	r3, [r1, #4]
   13d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13d20:	604b      	str	r3, [r1, #4]
   13d22:	2300      	movs	r3, #0
   13d24:	f383 8811 	msr	BASEPRI, r3
   13d28:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13d2c:	6893      	ldr	r3, [r2, #8]
}
   13d2e:	6f18      	ldr	r0, [r3, #112]	; 0x70
   13d30:	4770      	bx	lr
   13d32:	bf00      	nop
   13d34:	20026d48 	.word	0x20026d48
   13d38:	0002852c 	.word	0x0002852c
   13d3c:	e000ed00 	.word	0xe000ed00

00013d40 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13d40:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   13d42:	2b00      	cmp	r3, #0
   13d44:	db08      	blt.n	13d58 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13d46:	2201      	movs	r2, #1
   13d48:	f000 001f 	and.w	r0, r0, #31
   13d4c:	fa02 f000 	lsl.w	r0, r2, r0
   13d50:	4a02      	ldr	r2, [pc, #8]	; (13d5c <arch_irq_enable+0x1c>)
   13d52:	095b      	lsrs	r3, r3, #5
   13d54:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13d58:	4770      	bx	lr
   13d5a:	bf00      	nop
   13d5c:	e000e100 	.word	0xe000e100

00013d60 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13d60:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   13d62:	2b00      	cmp	r3, #0
   13d64:	db0d      	blt.n	13d82 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13d66:	2201      	movs	r2, #1
   13d68:	f000 001f 	and.w	r0, r0, #31
   13d6c:	fa02 f000 	lsl.w	r0, r2, r0
   13d70:	095b      	lsrs	r3, r3, #5
   13d72:	4a04      	ldr	r2, [pc, #16]	; (13d84 <arch_irq_disable+0x24>)
   13d74:	3320      	adds	r3, #32
   13d76:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   13d7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13d7e:	f3bf 8f6f 	isb	sy
}
   13d82:	4770      	bx	lr
   13d84:	e000e100 	.word	0xe000e100

00013d88 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13d88:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13d8a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   13d8c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d90:	bfac      	ite	ge
   13d92:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d96:	4b06      	ldrlt	r3, [pc, #24]	; (13db0 <z_arm_irq_priority_set+0x28>)
   13d98:	ea4f 1141 	mov.w	r1, r1, lsl #5
   13d9c:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d9e:	bfab      	itete	ge
   13da0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13da4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13da8:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13dac:	5419      	strblt	r1, [r3, r0]
}
   13dae:	4770      	bx	lr
   13db0:	e000ed14 	.word	0xe000ed14

00013db4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   13db4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13db6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13db8:	4b04      	ldr	r3, [pc, #16]	; (13dcc <_arch_isr_direct_pm+0x18>)
   13dba:	6a18      	ldr	r0, [r3, #32]
   13dbc:	b118      	cbz	r0, 13dc6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   13dbe:	2200      	movs	r2, #0
   13dc0:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   13dc2:	f012 f9ab 	bl	2611c <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13dc6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13dc8:	bd08      	pop	{r3, pc}
   13dca:	bf00      	nop
   13dcc:	20026d48 	.word	0x20026d48

00013dd0 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
   13dd0:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   13dd4:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
   13dd6:	3a20      	subs	r2, #32
   13dd8:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
   13ddc:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   13dde:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
   13de0:	4908      	ldr	r1, [pc, #32]	; (13e04 <arch_new_thread+0x34>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
   13de2:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   13de4:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
   13de6:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
   13dea:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   13dec:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
   13dee:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   13df0:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
   13df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13df6:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
   13df8:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   13dfa:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13dfc:	66c3      	str	r3, [r0, #108]	; 0x6c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   13dfe:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13e02:	4770      	bx	lr
   13e04:	00023247 	.word	0x00023247

00013e08 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   13e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e0a:	461d      	mov	r5, r3
   13e0c:	4606      	mov	r6, r0
   13e0e:	460c      	mov	r4, r1
   13e10:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   13e12:	2300      	movs	r3, #0
   13e14:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   13e18:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   13e1c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   13e20:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   13e24:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   13e28:	f000 fbe2 	bl	145f0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
   13e2c:	4b08      	ldr	r3, [pc, #32]	; (13e50 <arch_switch_to_main_thread+0x48>)
	start_of_main_stack =
   13e2e:	19e2      	adds	r2, r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
   13e30:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
   13e34:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13e36:	4628      	mov	r0, r5
   13e38:	f384 8809 	msr	PSP, r4
   13e3c:	2100      	movs	r1, #0
   13e3e:	b663      	cpsie	if
   13e40:	f381 8811 	msr	BASEPRI, r1
   13e44:	f3bf 8f6f 	isb	sy
   13e48:	2200      	movs	r2, #0
   13e4a:	2300      	movs	r3, #0
   13e4c:	f00f f9fb 	bl	23246 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13e50:	20026d48 	.word	0x20026d48

00013e54 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13e58:	4606      	mov	r6, r0

	if (esf != NULL) {
   13e5a:	460d      	mov	r5, r1
{
   13e5c:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   13e5e:	2900      	cmp	r1, #0
   13e60:	d054      	beq.n	13f0c <z_arm_fatal_error+0xb8>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   13e62:	4b2e      	ldr	r3, [pc, #184]	; (13f1c <z_arm_fatal_error+0xc8>)
   13e64:	4c2e      	ldr	r4, [pc, #184]	; (13f20 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13e66:	482f      	ldr	r0, [pc, #188]	; (13f24 <z_arm_fatal_error+0xd0>)
   13e68:	1ae4      	subs	r4, r4, r3
   13e6a:	08e4      	lsrs	r4, r4, #3
   13e6c:	01a4      	lsls	r4, r4, #6
   13e6e:	f044 0401 	orr.w	r4, r4, #1
   13e72:	f8ad 4000 	strh.w	r4, [sp]
   13e76:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   13e7a:	6809      	ldr	r1, [r1, #0]
   13e7c:	f00f fcca 	bl	23814 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13e80:	f8ad 4000 	strh.w	r4, [sp]
   13e84:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   13e88:	68e9      	ldr	r1, [r5, #12]
   13e8a:	4827      	ldr	r0, [pc, #156]	; (13f28 <z_arm_fatal_error+0xd4>)
   13e8c:	f00f fcc2 	bl	23814 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13e90:	4622      	mov	r2, r4
   13e92:	69e9      	ldr	r1, [r5, #28]
   13e94:	4825      	ldr	r0, [pc, #148]	; (13f2c <z_arm_fatal_error+0xd8>)
   13e96:	f00f fc8d 	bl	237b4 <log_1>
	for (int i = 0; i < 16; i += 4) {
   13e9a:	46a8      	mov	r8, r5
   13e9c:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   13e9e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 13f38 <z_arm_fatal_error+0xe4>
   13ea2:	edd8 7a08 	vldr	s15, [r8, #32]
   13ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13eaa:	edcd 7a03 	vstr	s15, [sp, #12]
   13eae:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   13eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13eb6:	edcd 7a05 	vstr	s15, [sp, #20]
   13eba:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   13ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13ec2:	edcd 7a07 	vstr	s15, [sp, #28]
   13ec6:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   13eca:	2208      	movs	r2, #8
   13ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13ed0:	1c7b      	adds	r3, r7, #1
   13ed2:	9304      	str	r3, [sp, #16]
   13ed4:	1cbb      	adds	r3, r7, #2
   13ed6:	9306      	str	r3, [sp, #24]
   13ed8:	1cfb      	adds	r3, r7, #3
   13eda:	9702      	str	r7, [sp, #8]
   13edc:	9308      	str	r3, [sp, #32]
   13ede:	4648      	mov	r0, r9
   13ee0:	4623      	mov	r3, r4
   13ee2:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   13ee6:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   13ee8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   13eec:	f00f fcb1 	bl	23852 <log_n>
	for (int i = 0; i < 16; i += 4) {
   13ef0:	2f10      	cmp	r7, #16
   13ef2:	f108 0810 	add.w	r8, r8, #16
   13ef6:	d1d4      	bne.n	13ea2 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   13ef8:	4622      	mov	r2, r4
   13efa:	6e29      	ldr	r1, [r5, #96]	; 0x60
   13efc:	480c      	ldr	r0, [pc, #48]	; (13f30 <z_arm_fatal_error+0xdc>)
   13efe:	f00f fc59 	bl	237b4 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13f02:	4622      	mov	r2, r4
   13f04:	69a9      	ldr	r1, [r5, #24]
   13f06:	480b      	ldr	r0, [pc, #44]	; (13f34 <z_arm_fatal_error+0xe0>)
   13f08:	f00f fc54 	bl	237b4 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   13f0c:	4629      	mov	r1, r5
   13f0e:	4630      	mov	r0, r6
   13f10:	f00c fa40 	bl	20394 <z_fatal_error>
}
   13f14:	b00b      	add	sp, #44	; 0x2c
   13f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13f1a:	bf00      	nop
   13f1c:	00027b20 	.word	0x00027b20
   13f20:	00027bb0 	.word	0x00027bb0
   13f24:	00029b00 	.word	0x00029b00
   13f28:	00029b2f 	.word	0x00029b2f
   13f2c:	00029b5e 	.word	0x00029b5e
   13f30:	00029bb0 	.word	0x00029bb0
   13f34:	00029bbf 	.word	0x00029bbf
   13f38:	00029b6d 	.word	0x00029b6d

00013f3c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13f3c:	4a14      	ldr	r2, [pc, #80]	; (13f90 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13f3e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13f40:	4b14      	ldr	r3, [pc, #80]	; (13f94 <z_arm_prep_c+0x58>)
   13f42:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13f46:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13f48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13f4c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13f50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13f54:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   13f5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13f60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   13f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   13f68:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   13f6c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   13f70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13f74:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   13f78:	2300      	movs	r3, #0
   13f7a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13f7e:	f00c fa87 	bl	20490 <z_bss_zero>
	z_data_copy();
   13f82:	f00c fa8f 	bl	204a4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13f86:	f000 faff 	bl	14588 <z_arm_interrupt_init>
	z_cstart();
   13f8a:	f00c fac9 	bl	20520 <z_cstart>
   13f8e:	bf00      	nop
   13f90:	0000c000 	.word	0x0000c000
   13f94:	e000ed00 	.word	0xe000ed00

00013f98 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13f98:	4926      	ldr	r1, [pc, #152]	; (14034 <in_fp_endif+0x20>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13f9a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13f9c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13fa0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13fa2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13fa6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   13faa:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   13fae:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   13fb2:	d004      	beq.n	13fbe <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   13fb4:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   13fb8:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   13fbc:	e007      	b.n	13fce <out_fp_endif>

00013fbe <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   13fbe:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vstmia r0, {s16-s31}
   13fc2:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   13fc6:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   13fca:	f050 0004 	orrs.w	r0, r0, #4

00013fce <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   13fce:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13fd2:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13fd4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13fd8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13fdc:	4f16      	ldr	r7, [pc, #88]	; (14038 <in_fp_endif+0x24>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13fde:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13fe2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   13fe4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13fe6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13fe8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
   13fea:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13fec:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13fee:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   13ff2:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   13ff6:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   13ffa:	d105      	bne.n	14008 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   13ffc:	2300      	movs	r3, #0
    vmsr fpscr, r3
   13ffe:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   14002:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   14006:	e005      	b.n	14014 <in_fp_endif>

00014008 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   14008:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   1400c:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vldmia r0, {s16-s31}
   14010:	ec90 8a10 	vldmia	r0, {s16-s31}

00014014 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   14014:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   14018:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   1401c:	f383 8814 	msr	CONTROL, r3
    isb
   14020:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14024:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14028:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1402c:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   14030:	4770      	bx	lr
   14032:	0000      	.short	0x0000
    ldr r1, =_kernel
   14034:	20026d48 	.word	0x20026d48
    ldr v4, =_SCS_ICSR
   14038:	e000ed04 	.word	0xe000ed04

0001403c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   1403c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14040:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14042:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14046:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1404a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1404c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14050:	2902      	cmp	r1, #2
    beq _oops
   14052:	d0ff      	beq.n	14054 <_oops>

00014054 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14054:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   14056:	f010 f932 	bl	242be <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1405a:	bd01      	pop	{r0, pc}

0001405c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1405c:	4901      	ldr	r1, [pc, #4]	; (14064 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1405e:	2210      	movs	r2, #16
	str	r2, [r1]
   14060:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14062:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14064:	e000ed10 	.word	0xe000ed10

00014068 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14068:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1406a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1406c:	f380 8811 	msr	BASEPRI, r0
	isb
   14070:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   14074:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   14078:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1407a:	b662      	cpsie	i
	isb
   1407c:	f3bf 8f6f 	isb	sy

	bx	lr
   14080:	4770      	bx	lr
   14082:	bf00      	nop

00014084 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14084:	bf30      	wfi
    b z_SysNmiOnReset
   14086:	f7ff bffd 	b.w	14084 <z_SysNmiOnReset>
   1408a:	bf00      	nop

0001408c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1408c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1408e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14090:	4a0b      	ldr	r2, [pc, #44]	; (140c0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14092:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   14094:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14096:	bf1e      	ittt	ne
	movne	r1, #0
   14098:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1409a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   1409c:	f012 f83e 	blne	2611c <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   140a0:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   140a2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   140a6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   140aa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   140ae:	4905      	ldr	r1, [pc, #20]	; (140c4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   140b0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   140b2:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   140b4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   140b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   140ba:	4903      	ldr	r1, [pc, #12]	; (140c8 <_isr_wrapper+0x3c>)
	bx r1
   140bc:	4708      	bx	r1
   140be:	0000      	.short	0x0000
	ldr r2, =_kernel
   140c0:	20026d48 	.word	0x20026d48
	ldr r1, =_sw_isr_table
   140c4:	0002790c 	.word	0x0002790c
	ldr r1, =z_arm_int_exit
   140c8:	00014111 	.word	0x00014111

000140cc <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   140cc:	f00f fb3e 	bl	2374c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   140d0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   140d2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   140d6:	4808      	ldr	r0, [pc, #32]	; (140f8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   140d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   140dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
   140de:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   140e2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   140e6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   140e8:	4308      	orrs	r0, r1
    msr CONTROL, r0
   140ea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   140ee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   140f2:	f7ff ff23 	bl	13f3c <z_arm_prep_c>
   140f6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   140f8:	2002dc90 	.word	0x2002dc90

000140fc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   140fc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14100:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   14104:	4672      	mov	r2, lr

	push {r0, lr}
   14106:	b501      	push	{r0, lr}

	bl z_arm_fault
   14108:	f000 f950 	bl	143ac <z_arm_fault>

	pop {r0, pc}
   1410c:	bd01      	pop	{r0, pc}
   1410e:	bf00      	nop

00014110 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14110:	4b07      	ldr	r3, [pc, #28]	; (14130 <_EXIT_EXC+0xe>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14112:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14114:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   14116:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14118:	d003      	beq.n	14122 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1411a:	4906      	ldr	r1, [pc, #24]	; (14134 <_EXIT_EXC+0x12>)
	ldr r2, =_SCS_ICSR_PENDSV
   1411c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14120:	600a      	str	r2, [r1, #0]

00014122 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
	push {r0, lr}
   14122:	b501      	push	{r0, lr}
	bl z_check_stack_sentinel
   14124:	f00d f8e8 	bl	212f8 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r1}
	mov lr, r1
#else
	pop {r0, lr}
   14128:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1412c:	4770      	bx	lr
   1412e:	0000      	.short	0x0000
	ldr r3, =_kernel
   14130:	20026d48 	.word	0x20026d48
	ldr r1, =_SCS_ICSR
   14134:	e000ed04 	.word	0xe000ed04

00014138 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   14138:	b570      	push	{r4, r5, r6, lr}
   1413a:	4b27      	ldr	r3, [pc, #156]	; (141d8 <usage_fault.isra.0+0xa0>)
   1413c:	4c27      	ldr	r4, [pc, #156]	; (141dc <usage_fault.isra.0+0xa4>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1413e:	4d28      	ldr	r5, [pc, #160]	; (141e0 <usage_fault.isra.0+0xa8>)
   14140:	1ae4      	subs	r4, r4, r3
   14142:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   14144:	01a4      	lsls	r4, r4, #6
   14146:	f044 0601 	orr.w	r6, r4, #1
   1414a:	4631      	mov	r1, r6
   1414c:	4825      	ldr	r0, [pc, #148]	; (141e4 <usage_fault.isra.0+0xac>)
   1414e:	f00f fb22 	bl	23796 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14152:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14154:	0192      	lsls	r2, r2, #6
   14156:	d503      	bpl.n	14160 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   14158:	4631      	mov	r1, r6
   1415a:	4823      	ldr	r0, [pc, #140]	; (141e8 <usage_fault.isra.0+0xb0>)
   1415c:	f00f fb1b 	bl	23796 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14160:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14162:	01db      	lsls	r3, r3, #7
   14164:	d504      	bpl.n	14170 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   14166:	4821      	ldr	r0, [pc, #132]	; (141ec <usage_fault.isra.0+0xb4>)
   14168:	f044 0101 	orr.w	r1, r4, #1
   1416c:	f00f fb13 	bl	23796 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   14170:	4d1b      	ldr	r5, [pc, #108]	; (141e0 <usage_fault.isra.0+0xa8>)
   14172:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14174:	02d6      	lsls	r6, r2, #11
   14176:	d504      	bpl.n	14182 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   14178:	481d      	ldr	r0, [pc, #116]	; (141f0 <usage_fault.isra.0+0xb8>)
   1417a:	f044 0101 	orr.w	r1, r4, #1
   1417e:	f00f fb0a 	bl	23796 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14182:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14184:	0318      	lsls	r0, r3, #12
   14186:	d504      	bpl.n	14192 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  No coprocessor instructions");
   14188:	481a      	ldr	r0, [pc, #104]	; (141f4 <usage_fault.isra.0+0xbc>)
   1418a:	f044 0101 	orr.w	r1, r4, #1
   1418e:	f00f fb02 	bl	23796 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14192:	4d13      	ldr	r5, [pc, #76]	; (141e0 <usage_fault.isra.0+0xa8>)
   14194:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14196:	0351      	lsls	r1, r2, #13
   14198:	d504      	bpl.n	141a4 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1419a:	4817      	ldr	r0, [pc, #92]	; (141f8 <usage_fault.isra.0+0xc0>)
   1419c:	f044 0101 	orr.w	r1, r4, #1
   141a0:	f00f faf9 	bl	23796 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   141a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   141a6:	039a      	lsls	r2, r3, #14
   141a8:	d504      	bpl.n	141b4 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   141aa:	4814      	ldr	r0, [pc, #80]	; (141fc <usage_fault.isra.0+0xc4>)
   141ac:	f044 0101 	orr.w	r1, r4, #1
   141b0:	f00f faf1 	bl	23796 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   141b4:	4d0a      	ldr	r5, [pc, #40]	; (141e0 <usage_fault.isra.0+0xa8>)
   141b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   141b8:	03db      	lsls	r3, r3, #15
   141ba:	d504      	bpl.n	141c6 <usage_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   141bc:	4810      	ldr	r0, [pc, #64]	; (14200 <usage_fault.isra.0+0xc8>)
   141be:	f044 0101 	orr.w	r1, r4, #1
   141c2:	f00f fae8 	bl	23796 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   141c6:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   141c8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   141ca:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   141ce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   141d2:	62ab      	str	r3, [r5, #40]	; 0x28
}
   141d4:	bd70      	pop	{r4, r5, r6, pc}
   141d6:	bf00      	nop
   141d8:	00027b20 	.word	0x00027b20
   141dc:	00027bb0 	.word	0x00027bb0
   141e0:	e000ed00 	.word	0xe000ed00
   141e4:	00029bed 	.word	0x00029bed
   141e8:	00029c05 	.word	0x00029c05
   141ec:	00029c18 	.word	0x00029c18
   141f0:	00029c32 	.word	0x00029c32
   141f4:	00029c5c 	.word	0x00029c5c
   141f8:	00029c7a 	.word	0x00029c7a
   141fc:	00029c9f 	.word	0x00029c9f
   14200:	00029cb9 	.word	0x00029cb9

00014204 <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14208:	4b27      	ldr	r3, [pc, #156]	; (142a8 <mem_manage_fault.isra.0+0xa4>)
   1420a:	4c28      	ldr	r4, [pc, #160]	; (142ac <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1420c:	4d28      	ldr	r5, [pc, #160]	; (142b0 <mem_manage_fault.isra.0+0xac>)
   1420e:	1ae4      	subs	r4, r4, r3
   14210:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   14212:	01a4      	lsls	r4, r4, #6
   14214:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14218:	4607      	mov	r7, r0
   1421a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1421c:	4825      	ldr	r0, [pc, #148]	; (142b4 <mem_manage_fault.isra.0+0xb0>)
   1421e:	4641      	mov	r1, r8
   14220:	f00f fab9 	bl	23796 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14224:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14226:	06d1      	lsls	r1, r2, #27
   14228:	d503      	bpl.n	14232 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1422a:	4641      	mov	r1, r8
   1422c:	4822      	ldr	r0, [pc, #136]	; (142b8 <mem_manage_fault.isra.0+0xb4>)
   1422e:	f00f fab2 	bl	23796 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14232:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14234:	071a      	lsls	r2, r3, #28
   14236:	d504      	bpl.n	14242 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14238:	4820      	ldr	r0, [pc, #128]	; (142bc <mem_manage_fault.isra.0+0xb8>)
   1423a:	f044 0101 	orr.w	r1, r4, #1
   1423e:	f00f faaa 	bl	23796 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14242:	4d1b      	ldr	r5, [pc, #108]	; (142b0 <mem_manage_fault.isra.0+0xac>)
   14244:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14246:	079b      	lsls	r3, r3, #30
   14248:	d512      	bpl.n	14270 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   1424a:	f044 0801 	orr.w	r8, r4, #1
   1424e:	4641      	mov	r1, r8
   14250:	481b      	ldr	r0, [pc, #108]	; (142c0 <mem_manage_fault.isra.0+0xbc>)
   14252:	f00f faa0 	bl	23796 <log_0>
		mmfar = SCB->MMFAR;
   14256:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14258:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1425a:	0618      	lsls	r0, r3, #24
   1425c:	d508      	bpl.n	14270 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1425e:	4642      	mov	r2, r8
   14260:	4818      	ldr	r0, [pc, #96]	; (142c4 <mem_manage_fault.isra.0+0xc0>)
   14262:	f00f faa7 	bl	237b4 <log_1>
			if (from_hard_fault) {
   14266:	b11f      	cbz	r7, 14270 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14268:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1426a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1426e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14270:	4d0f      	ldr	r5, [pc, #60]	; (142b0 <mem_manage_fault.isra.0+0xac>)
   14272:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14274:	07d2      	lsls	r2, r2, #31
   14276:	d504      	bpl.n	14282 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   14278:	4813      	ldr	r0, [pc, #76]	; (142c8 <mem_manage_fault.isra.0+0xc4>)
   1427a:	f044 0101 	orr.w	r1, r4, #1
   1427e:	f00f fa8a 	bl	23796 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14282:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14284:	069b      	lsls	r3, r3, #26
   14286:	d504      	bpl.n	14292 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   14288:	4810      	ldr	r0, [pc, #64]	; (142cc <mem_manage_fault.isra.0+0xc8>)
   1428a:	f044 0101 	orr.w	r1, r4, #1
   1428e:	f00f fa82 	bl	23796 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   14292:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   14294:	4b06      	ldr	r3, [pc, #24]	; (142b0 <mem_manage_fault.isra.0+0xac>)
   14296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1429a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1429e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   142a0:	7030      	strb	r0, [r6, #0]
}
   142a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   142a6:	bf00      	nop
   142a8:	00027b20 	.word	0x00027b20
   142ac:	00027bb0 	.word	0x00027bb0
   142b0:	e000ed00 	.word	0xe000ed00
   142b4:	00029ce4 	.word	0x00029ce4
   142b8:	00029cfa 	.word	0x00029cfa
   142bc:	00029d2d 	.word	0x00029d2d
   142c0:	00029d40 	.word	0x00029d40
   142c4:	00029d58 	.word	0x00029d58
   142c8:	00029d6e 	.word	0x00029d6e
   142cc:	00029d8d 	.word	0x00029d8d

000142d0 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   142d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142d4:	4b2a      	ldr	r3, [pc, #168]	; (14380 <bus_fault.isra.0+0xb0>)
   142d6:	4c2b      	ldr	r4, [pc, #172]	; (14384 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   142d8:	4d2b      	ldr	r5, [pc, #172]	; (14388 <bus_fault.isra.0+0xb8>)
   142da:	1ae4      	subs	r4, r4, r3
   142dc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   142de:	01a4      	lsls	r4, r4, #6
   142e0:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   142e4:	4607      	mov	r7, r0
   142e6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   142e8:	4828      	ldr	r0, [pc, #160]	; (1438c <bus_fault.isra.0+0xbc>)
   142ea:	4641      	mov	r1, r8
   142ec:	f00f fa53 	bl	23796 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   142f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   142f2:	04d1      	lsls	r1, r2, #19
   142f4:	d503      	bpl.n	142fe <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   142f6:	4641      	mov	r1, r8
   142f8:	4825      	ldr	r0, [pc, #148]	; (14390 <bus_fault.isra.0+0xc0>)
   142fa:	f00f fa4c 	bl	23796 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   142fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14300:	051a      	lsls	r2, r3, #20
   14302:	d504      	bpl.n	1430e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14304:	4823      	ldr	r0, [pc, #140]	; (14394 <bus_fault.isra.0+0xc4>)
   14306:	f044 0101 	orr.w	r1, r4, #1
   1430a:	f00f fa44 	bl	23796 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1430e:	4d1e      	ldr	r5, [pc, #120]	; (14388 <bus_fault.isra.0+0xb8>)
   14310:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14312:	059b      	lsls	r3, r3, #22
   14314:	d512      	bpl.n	1433c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   14316:	f044 0801 	orr.w	r8, r4, #1
   1431a:	4641      	mov	r1, r8
   1431c:	481e      	ldr	r0, [pc, #120]	; (14398 <bus_fault.isra.0+0xc8>)
   1431e:	f00f fa3a 	bl	23796 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   14322:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14324:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14326:	0418      	lsls	r0, r3, #16
   14328:	d508      	bpl.n	1433c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1432a:	4642      	mov	r2, r8
   1432c:	481b      	ldr	r0, [pc, #108]	; (1439c <bus_fault.isra.0+0xcc>)
   1432e:	f00f fa41 	bl	237b4 <log_1>
			if (from_hard_fault) {
   14332:	b11f      	cbz	r7, 1433c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14334:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14336:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1433a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1433c:	4d12      	ldr	r5, [pc, #72]	; (14388 <bus_fault.isra.0+0xb8>)
   1433e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14340:	0559      	lsls	r1, r3, #21
   14342:	d504      	bpl.n	1434e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   14344:	4816      	ldr	r0, [pc, #88]	; (143a0 <bus_fault.isra.0+0xd0>)
   14346:	f044 0101 	orr.w	r1, r4, #1
   1434a:	f00f fa24 	bl	23796 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1434e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14350:	05da      	lsls	r2, r3, #23
   14352:	d50d      	bpl.n	14370 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   14354:	4813      	ldr	r0, [pc, #76]	; (143a4 <bus_fault.isra.0+0xd4>)
   14356:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1435a:	f00f fa1c 	bl	23796 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   1435e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14360:	4a09      	ldr	r2, [pc, #36]	; (14388 <bus_fault.isra.0+0xb8>)
   14362:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14364:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14368:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1436a:	7030      	strb	r0, [r6, #0]
}
   1436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14370:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14372:	049b      	lsls	r3, r3, #18
   14374:	d5f3      	bpl.n	1435e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14376:	480c      	ldr	r0, [pc, #48]	; (143a8 <bus_fault.isra.0+0xd8>)
   14378:	f044 0101 	orr.w	r1, r4, #1
   1437c:	e7ed      	b.n	1435a <bus_fault.isra.0+0x8a>
   1437e:	bf00      	nop
   14380:	00027b20 	.word	0x00027b20
   14384:	00027bb0 	.word	0x00027bb0
   14388:	e000ed00 	.word	0xe000ed00
   1438c:	00029dbc 	.word	0x00029dbc
   14390:	00029dd2 	.word	0x00029dd2
   14394:	00029d2d 	.word	0x00029d2d
   14398:	00029de3 	.word	0x00029de3
   1439c:	00029dfc 	.word	0x00029dfc
   143a0:	00029e11 	.word	0x00029e11
   143a4:	00029e2c 	.word	0x00029e2c
   143a8:	00029d8d 	.word	0x00029d8d

000143ac <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   143ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   143b0:	4b5a      	ldr	r3, [pc, #360]	; (1451c <z_arm_fault+0x170>)
{
   143b2:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   143b4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   143b8:	460f      	mov	r7, r1
   143ba:	4614      	mov	r4, r2
   143bc:	2500      	movs	r5, #0
   143be:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   143c0:	f3c8 0608 	ubfx	r6, r8, #0, #9
   143c4:	f385 8811 	msr	BASEPRI, r5
   143c8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   143cc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   143d0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   143d4:	d123      	bne.n	1441e <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   143d6:	07d0      	lsls	r0, r2, #31
   143d8:	d421      	bmi.n	1441e <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   143da:	0651      	lsls	r1, r2, #25
   143dc:	d403      	bmi.n	143e6 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   143de:	0722      	lsls	r2, r4, #28
   143e0:	d40e      	bmi.n	14400 <z_arm_fault+0x54>
			*nested_exc = true;
   143e2:	2501      	movs	r5, #1
   143e4:	e00e      	b.n	14404 <z_arm_fault+0x58>
   143e6:	494e      	ldr	r1, [pc, #312]	; (14520 <z_arm_fault+0x174>)
   143e8:	4b4e      	ldr	r3, [pc, #312]	; (14524 <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   143ea:	484f      	ldr	r0, [pc, #316]	; (14528 <z_arm_fault+0x17c>)
   143ec:	1a5b      	subs	r3, r3, r1
   143ee:	08db      	lsrs	r3, r3, #3
   143f0:	019b      	lsls	r3, r3, #6
   143f2:	f043 0101 	orr.w	r1, r3, #1
   143f6:	f00f f9ce 	bl	23796 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   143fa:	f014 0504 	ands.w	r5, r4, #4
   143fe:	d001      	beq.n	14404 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   14400:	46b9      	mov	r9, r7
	*nested_exc = false;
   14402:	2500      	movs	r5, #0
	*recoverable = false;
   14404:	2300      	movs	r3, #0
   14406:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1440a:	1ef3      	subs	r3, r6, #3
   1440c:	2b09      	cmp	r3, #9
   1440e:	d86c      	bhi.n	144ea <z_arm_fault+0x13e>
   14410:	e8df f003 	tbb	[pc, r3]
   14414:	3e5e5a07 	.word	0x3e5e5a07
   14418:	6b6b6b6b 	.word	0x6b6b6b6b
   1441c:	626b      	.short	0x626b
		return NULL;
   1441e:	46a9      	mov	r9, r5
   14420:	e7f0      	b.n	14404 <z_arm_fault+0x58>
	*recoverable = false;
   14422:	f04f 0800 	mov.w	r8, #0
   14426:	4b3e      	ldr	r3, [pc, #248]	; (14520 <z_arm_fault+0x174>)
   14428:	4e3e      	ldr	r6, [pc, #248]	; (14524 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   1442a:	4840      	ldr	r0, [pc, #256]	; (1452c <z_arm_fault+0x180>)
   1442c:	1af6      	subs	r6, r6, r3
   1442e:	08f6      	lsrs	r6, r6, #3
   14430:	01b6      	lsls	r6, r6, #6
   14432:	f046 0601 	orr.w	r6, r6, #1
   14436:	4631      	mov	r1, r6
   14438:	f00f f9ad 	bl	23796 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1443c:	4b37      	ldr	r3, [pc, #220]	; (1451c <z_arm_fault+0x170>)
	*recoverable = false;
   1443e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14442:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   14444:	f014 0402 	ands.w	r4, r4, #2
   14448:	d005      	beq.n	14456 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   1444a:	4631      	mov	r1, r6
   1444c:	4838      	ldr	r0, [pc, #224]	; (14530 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   1444e:	f00f f9a2 	bl	23796 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   14452:	2400      	movs	r4, #0
}
   14454:	e01f      	b.n	14496 <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14458:	005b      	lsls	r3, r3, #1
   1445a:	d51c      	bpl.n	14496 <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   1445c:	4631      	mov	r1, r6
   1445e:	4835      	ldr	r0, [pc, #212]	; (14534 <z_arm_fault+0x188>)
   14460:	f00f f999 	bl	23796 <log_0>
		if (SCB_MMFSR != 0) {
   14464:	4b34      	ldr	r3, [pc, #208]	; (14538 <z_arm_fault+0x18c>)
   14466:	781b      	ldrb	r3, [r3, #0]
   14468:	b12b      	cbz	r3, 14476 <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   1446a:	2001      	movs	r0, #1
   1446c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   14470:	f7ff fec8 	bl	14204 <mem_manage_fault.isra.0>
   14474:	e00e      	b.n	14494 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   14476:	4b31      	ldr	r3, [pc, #196]	; (1453c <z_arm_fault+0x190>)
   14478:	781b      	ldrb	r3, [r3, #0]
   1447a:	b12b      	cbz	r3, 14488 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   1447c:	2001      	movs	r0, #1
   1447e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   14482:	f7ff ff25 	bl	142d0 <bus_fault.isra.0>
   14486:	e005      	b.n	14494 <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   14488:	4b2d      	ldr	r3, [pc, #180]	; (14540 <z_arm_fault+0x194>)
   1448a:	881b      	ldrh	r3, [r3, #0]
   1448c:	b29b      	uxth	r3, r3
   1448e:	b113      	cbz	r3, 14496 <z_arm_fault+0xea>
			reason = usage_fault(esf);
   14490:	f7ff fe52 	bl	14138 <usage_fault.isra.0>
   14494:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14496:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1449a:	b993      	cbnz	r3, 144c2 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1449c:	2268      	movs	r2, #104	; 0x68
   1449e:	4649      	mov	r1, r9
   144a0:	a802      	add	r0, sp, #8
   144a2:	f012 fab0 	bl	26a06 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   144a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   144a8:	b39d      	cbz	r5, 14512 <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   144aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
   144ae:	b922      	cbnz	r2, 144ba <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   144b0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   144b4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   144b8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   144ba:	4620      	mov	r0, r4
   144bc:	a902      	add	r1, sp, #8
   144be:	f7ff fcc9 	bl	13e54 <z_arm_fatal_error>
}
   144c2:	b01d      	add	sp, #116	; 0x74
   144c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   144c8:	2000      	movs	r0, #0
   144ca:	f10d 0107 	add.w	r1, sp, #7
   144ce:	e7cf      	b.n	14470 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   144d0:	2000      	movs	r0, #0
   144d2:	f10d 0107 	add.w	r1, sp, #7
   144d6:	e7d4      	b.n	14482 <z_arm_fault+0xd6>
   144d8:	4912      	ldr	r1, [pc, #72]	; (14524 <z_arm_fault+0x178>)
   144da:	4b11      	ldr	r3, [pc, #68]	; (14520 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   144dc:	4819      	ldr	r0, [pc, #100]	; (14544 <z_arm_fault+0x198>)
   144de:	1ac9      	subs	r1, r1, r3
   144e0:	08c9      	lsrs	r1, r1, #3
   144e2:	0189      	lsls	r1, r1, #6
   144e4:	f041 0101 	orr.w	r1, r1, #1
   144e8:	e7b1      	b.n	1444e <z_arm_fault+0xa2>
   144ea:	4a0d      	ldr	r2, [pc, #52]	; (14520 <z_arm_fault+0x174>)
   144ec:	4b0d      	ldr	r3, [pc, #52]	; (14524 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   144ee:	4816      	ldr	r0, [pc, #88]	; (14548 <z_arm_fault+0x19c>)
   144f0:	1a9b      	subs	r3, r3, r2
   144f2:	08db      	lsrs	r3, r3, #3
   144f4:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   144f8:	ea4f 1383 	mov.w	r3, r3, lsl #6
   144fc:	4913      	ldr	r1, [pc, #76]	; (1454c <z_arm_fault+0x1a0>)
   144fe:	f043 0301 	orr.w	r3, r3, #1
   14502:	bf18      	it	ne
   14504:	4601      	movne	r1, r0
   14506:	f1a6 0210 	sub.w	r2, r6, #16
   1450a:	4811      	ldr	r0, [pc, #68]	; (14550 <z_arm_fault+0x1a4>)
   1450c:	f00f f969 	bl	237e2 <log_2>
   14510:	e79f      	b.n	14452 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14512:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14516:	f023 0301 	bic.w	r3, r3, #1
   1451a:	e7cd      	b.n	144b8 <z_arm_fault+0x10c>
   1451c:	e000ed00 	.word	0xe000ed00
   14520:	00027b20 	.word	0x00027b20
   14524:	00027bb0 	.word	0x00027bb0
   14528:	00029e44 	.word	0x00029e44
   1452c:	00029e67 	.word	0x00029e67
   14530:	00029e7e 	.word	0x00029e7e
   14534:	00029e9f 	.word	0x00029e9f
   14538:	e000ed28 	.word	0xe000ed28
   1453c:	e000ed29 	.word	0xe000ed29
   14540:	e000ed2a 	.word	0xe000ed2a
   14544:	00029ebe 	.word	0x00029ebe
   14548:	00029f09 	.word	0x00029f09
   1454c:	00029ef4 	.word	0x00029ef4
   14550:	00029f22 	.word	0x00029f22

00014554 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14554:	4a02      	ldr	r2, [pc, #8]	; (14560 <z_arm_fault_init+0xc>)
   14556:	6953      	ldr	r3, [r2, #20]
   14558:	f043 0310 	orr.w	r3, r3, #16
   1455c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1455e:	4770      	bx	lr
   14560:	e000ed00 	.word	0xe000ed00

00014564 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   14564:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14568:	4905      	ldr	r1, [pc, #20]	; (14580 <sys_arch_reboot+0x1c>)
   1456a:	4b06      	ldr	r3, [pc, #24]	; (14584 <sys_arch_reboot+0x20>)
   1456c:	68ca      	ldr	r2, [r1, #12]
   1456e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14572:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14574:	60cb      	str	r3, [r1, #12]
   14576:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1457a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1457c:	e7fd      	b.n	1457a <sys_arch_reboot+0x16>
   1457e:	bf00      	nop
   14580:	e000ed00 	.word	0xe000ed00
   14584:	05fa0004 	.word	0x05fa0004

00014588 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14588:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1458a:	2120      	movs	r1, #32
   1458c:	4803      	ldr	r0, [pc, #12]	; (1459c <z_arm_interrupt_init+0x14>)
   1458e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14590:	3301      	adds	r3, #1
   14592:	2b41      	cmp	r3, #65	; 0x41
   14594:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14598:	d1f9      	bne.n	1458e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1459a:	4770      	bx	lr
   1459c:	e000e100 	.word	0xe000e100

000145a0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   145a0:	b538      	push	{r3, r4, r5, lr}
   145a2:	4604      	mov	r4, r0
	__asm__ volatile(
   145a4:	f04f 0320 	mov.w	r3, #32
   145a8:	f3ef 8511 	mrs	r5, BASEPRI
   145ac:	f383 8811 	msr	BASEPRI, r3
   145b0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   145b4:	f00c fc52 	bl	20e5c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   145b8:	4b0b      	ldr	r3, [pc, #44]	; (145e8 <z_impl_k_thread_abort+0x48>)
   145ba:	689b      	ldr	r3, [r3, #8]
   145bc:	42a3      	cmp	r3, r4
   145be:	d10d      	bne.n	145dc <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   145c0:	4b0a      	ldr	r3, [pc, #40]	; (145ec <z_impl_k_thread_abort+0x4c>)
   145c2:	685a      	ldr	r2, [r3, #4]
   145c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
   145c8:	b922      	cbnz	r2, 145d4 <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
   145ca:	f00c fe95 	bl	212f8 <z_check_stack_sentinel>
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   145ce:	4628      	mov	r0, r5
   145d0:	f7ff fb9c 	bl	13d0c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   145d4:	685a      	ldr	r2, [r3, #4]
   145d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   145da:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   145dc:	4628      	mov	r0, r5
}
   145de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   145e2:	f011 bf3c 	b.w	2645e <z_reschedule_irqlock>
   145e6:	bf00      	nop
   145e8:	20026d48 	.word	0x20026d48
   145ec:	e000ed00 	.word	0xe000ed00

000145f0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   145f0:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   145f2:	4b0e      	ldr	r3, [pc, #56]	; (1462c <z_arm_configure_static_mpu_regions+0x3c>)
{
   145f4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   145f6:	9302      	str	r3, [sp, #8]
   145f8:	4b0d      	ldr	r3, [pc, #52]	; (14630 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   145fa:	4c0e      	ldr	r4, [pc, #56]	; (14634 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   145fc:	9303      	str	r3, [sp, #12]
   145fe:	4b0e      	ldr	r3, [pc, #56]	; (14638 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14600:	4a0e      	ldr	r2, [pc, #56]	; (1463c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   14602:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   14604:	ab02      	add	r3, sp, #8
   14606:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14608:	a801      	add	r0, sp, #4
   1460a:	4623      	mov	r3, r4
   1460c:	2101      	movs	r1, #1
   1460e:	f000 f93d 	bl	1488c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   14612:	2300      	movs	r3, #0
   14614:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   14616:	4b0a      	ldr	r3, [pc, #40]	; (14640 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14618:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1461a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1461c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1461e:	9305      	str	r3, [sp, #20]
   14620:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14622:	f000 f93d 	bl	148a0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   14626:	b008      	add	sp, #32
   14628:	bd10      	pop	{r4, pc}
   1462a:	bf00      	nop
   1462c:	20020000 	.word	0x20020000
   14630:	00000000 	.word	0x00000000
   14634:	20040000 	.word	0x20040000
   14638:	00010006 	.word	0x00010006
   1463c:	20020000 	.word	0x20020000
   14640:	20020880 	.word	0x20020880

00014644 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   14644:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   14646:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   14648:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1464a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1464e:	f004 031f 	and.w	r3, r4, #31
   14652:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14654:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   14656:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14658:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1465c:	4904      	ldr	r1, [pc, #16]	; (14670 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1465e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   14662:	f043 0301 	orr.w	r3, r3, #1
   14666:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   14668:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1466a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1466c:	bd10      	pop	{r4, pc}
   1466e:	bf00      	nop
   14670:	e000ed90 	.word	0xe000ed90

00014674 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   14674:	b508      	push	{r3, lr}
   14676:	4a07      	ldr	r2, [pc, #28]	; (14694 <region_allocate_and_init.part.0+0x20>)
   14678:	4b07      	ldr	r3, [pc, #28]	; (14698 <region_allocate_and_init.part.0+0x24>)
   1467a:	4601      	mov	r1, r0
   1467c:	1ad2      	subs	r2, r2, r3
   1467e:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14680:	0192      	lsls	r2, r2, #6
   14682:	4806      	ldr	r0, [pc, #24]	; (1469c <region_allocate_and_init.part.0+0x28>)
   14684:	f042 0201 	orr.w	r2, r2, #1
   14688:	f00f f894 	bl	237b4 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1468c:	f06f 0015 	mvn.w	r0, #21
   14690:	bd08      	pop	{r3, pc}
   14692:	bf00      	nop
   14694:	00027b98 	.word	0x00027b98
   14698:	00027b20 	.word	0x00027b20
   1469c:	00029f39 	.word	0x00029f39

000146a0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   146a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146a4:	4607      	mov	r7, r0
   146a6:	4688      	mov	r8, r1
   146a8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   146aa:	2600      	movs	r6, #0
	MPU->RNR = index;
   146ac:	4d56      	ldr	r5, [pc, #344]	; (14808 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   146ae:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   146b0:	4546      	cmp	r6, r8
   146b2:	da35      	bge.n	14720 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   146b4:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   146b8:	f8d3 9004 	ldr.w	r9, [r3, #4]
   146bc:	f1b9 0f00 	cmp.w	r9, #0
   146c0:	d051      	beq.n	14766 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   146c2:	f1b9 0f1f 	cmp.w	r9, #31
   146c6:	d91e      	bls.n	14706 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   146c8:	f019 0f1f 	tst.w	r9, #31
   146cc:	d11b      	bne.n	14706 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   146ce:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   146d2:	f01a 0f1f 	tst.w	sl, #31
   146d6:	d116      	bne.n	14706 <mpu_configure_regions_and_partition.constprop.0+0x66>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   146d8:	4650      	mov	r0, sl
   146da:	f00f fe1c 	bl	24316 <arm_cmse_mpu_region_get>
   146de:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   146e0:	eb09 000a 	add.w	r0, r9, sl
   146e4:	3801      	subs	r0, #1
   146e6:	f00f fe16 	bl	24316 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   146ea:	4583      	cmp	fp, r0
   146ec:	d01c      	beq.n	14728 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   146ee:	f06f 0b15 	mvn.w	fp, #21
   146f2:	4a46      	ldr	r2, [pc, #280]	; (1480c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   146f4:	4b46      	ldr	r3, [pc, #280]	; (14810 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   146f6:	4659      	mov	r1, fp
   146f8:	1ad2      	subs	r2, r2, r3
   146fa:	08d2      	lsrs	r2, r2, #3
   146fc:	0192      	lsls	r2, r2, #6
   146fe:	4845      	ldr	r0, [pc, #276]	; (14814 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   14700:	f042 0201 	orr.w	r2, r2, #1
   14704:	e008      	b.n	14718 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   14706:	4631      	mov	r1, r6
   14708:	4a40      	ldr	r2, [pc, #256]	; (1480c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   1470a:	4b41      	ldr	r3, [pc, #260]	; (14810 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   1470c:	4842      	ldr	r0, [pc, #264]	; (14818 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   1470e:	1ad2      	subs	r2, r2, r3
   14710:	08d2      	lsrs	r2, r2, #3
   14712:	0192      	lsls	r2, r2, #6
   14714:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   14718:	f00f f84c 	bl	237b4 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   1471c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   14720:	4620      	mov	r0, r4
   14722:	b005      	add	sp, #20
   14724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   14728:	f11b 0f16 	cmn.w	fp, #22
   1472c:	d0e1      	beq.n	146f2 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   1472e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   14730:	455b      	cmp	r3, fp
   14732:	dbde      	blt.n	146f2 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   14734:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14738:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   1473a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1473e:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   14740:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14744:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   14748:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1474c:	e9d1 3200 	ldrd	r3, r2, [r1]
   14750:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   14752:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   14754:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   14758:	d118      	bne.n	1478c <mpu_configure_regions_and_partition.constprop.0+0xec>
   1475a:	45ca      	cmp	sl, r9
   1475c:	d105      	bne.n	1476a <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   1475e:	fa5f f08b 	uxtb.w	r0, fp
   14762:	f00f fdb7 	bl	242d4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   14766:	3601      	adds	r6, #1
   14768:	e7a2      	b.n	146b0 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   1476a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1476e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   14770:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14774:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   14778:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1477a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   1477c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1477e:	f00f fda9 	bl	242d4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   14782:	f110 0f16 	cmn.w	r0, #22
   14786:	d0c9      	beq.n	1471c <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   14788:	1c44      	adds	r4, r0, #1
   1478a:	e7ec      	b.n	14766 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   1478c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   14790:	692a      	ldr	r2, [r5, #16]
   14792:	3b01      	subs	r3, #1
   14794:	f023 031f 	bic.w	r3, r3, #31
   14798:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1479c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1479e:	45ca      	cmp	sl, r9
   147a0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   147a2:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   147a4:	d0eb      	beq.n	1477e <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   147a6:	f00f fd95 	bl	242d4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   147aa:	f110 0f16 	cmn.w	r0, #22
   147ae:	d0b5      	beq.n	1471c <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   147b0:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   147b4:	68ea      	ldr	r2, [r5, #12]
   147b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   147ba:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   147be:	f362 0304 	bfi	r3, r2, #0, #5
   147c2:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   147c6:	692b      	ldr	r3, [r5, #16]
   147c8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   147cc:	085b      	lsrs	r3, r3, #1
   147ce:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   147d2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   147d6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   147da:	e9d3 1300 	ldrd	r1, r3, [r3]
   147de:	440b      	add	r3, r1
   147e0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   147e2:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   147e6:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   147e8:	4453      	add	r3, sl
   147ea:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   147ee:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   147f0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   147f4:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   147f6:	9303      	str	r3, [sp, #12]
   147f8:	d902      	bls.n	14800 <mpu_configure_regions_and_partition.constprop.0+0x160>
   147fa:	f7ff ff3b 	bl	14674 <region_allocate_and_init.part.0>
   147fe:	e7c0      	b.n	14782 <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   14800:	4669      	mov	r1, sp
   14802:	f7ff ff1f 	bl	14644 <region_init>
			if (reg_index == -EINVAL) {
   14806:	e7bf      	b.n	14788 <mpu_configure_regions_and_partition.constprop.0+0xe8>
   14808:	e000ed90 	.word	0xe000ed90
   1480c:	00027b98 	.word	0x00027b98
   14810:	00027b20 	.word	0x00027b20
   14814:	00029f82 	.word	0x00029f82
   14818:	00029f5f 	.word	0x00029f5f

0001481c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1481c:	2205      	movs	r2, #5
   1481e:	4b03      	ldr	r3, [pc, #12]	; (1482c <arm_core_mpu_enable+0x10>)
   14820:	605a      	str	r2, [r3, #4]
   14822:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14826:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1482a:	4770      	bx	lr
   1482c:	e000ed90 	.word	0xe000ed90

00014830 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   14830:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14834:	2200      	movs	r2, #0
   14836:	4b01      	ldr	r3, [pc, #4]	; (1483c <arm_core_mpu_disable+0xc>)
   14838:	605a      	str	r2, [r3, #4]
}
   1483a:	4770      	bx	lr
   1483c:	e000ed90 	.word	0xe000ed90

00014840 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   14840:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14842:	4c0e      	ldr	r4, [pc, #56]	; (1487c <arm_mpu_init+0x3c>)
   14844:	6825      	ldr	r5, [r4, #0]
   14846:	2d10      	cmp	r5, #16
   14848:	d814      	bhi.n	14874 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1484a:	f7ff fff1 	bl	14830 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1484e:	2000      	movs	r0, #0
	MPU->MAIR0 =
   14850:	4b0b      	ldr	r3, [pc, #44]	; (14880 <arm_mpu_init+0x40>)
   14852:	4a0c      	ldr	r2, [pc, #48]	; (14884 <arm_mpu_init+0x44>)
   14854:	631a      	str	r2, [r3, #48]	; 0x30
   14856:	4285      	cmp	r5, r0
   14858:	d105      	bne.n	14866 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1485a:	4b0b      	ldr	r3, [pc, #44]	; (14888 <arm_mpu_init+0x48>)
   1485c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1485e:	f7ff ffdd 	bl	1481c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   14862:	2000      	movs	r0, #0
}
   14864:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   14866:	6861      	ldr	r1, [r4, #4]
   14868:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1486c:	f7ff feea 	bl	14644 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14870:	3001      	adds	r0, #1
   14872:	e7f0      	b.n	14856 <arm_mpu_init+0x16>
		return -1;
   14874:	f04f 30ff 	mov.w	r0, #4294967295
   14878:	e7f4      	b.n	14864 <arm_mpu_init+0x24>
   1487a:	bf00      	nop
   1487c:	00027f78 	.word	0x00027f78
   14880:	e000ed90 	.word	0xe000ed90
   14884:	0044ffaa 	.word	0x0044ffaa
   14888:	20029dbd 	.word	0x20029dbd

0001488c <arm_core_mpu_configure_static_mpu_regions>:
{
   1488c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1488e:	4c03      	ldr	r4, [pc, #12]	; (1489c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   14890:	7822      	ldrb	r2, [r4, #0]
   14892:	f7ff ff05 	bl	146a0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14896:	7020      	strb	r0, [r4, #0]
}
   14898:	bd10      	pop	{r4, pc}
   1489a:	bf00      	nop
   1489c:	20029dbd 	.word	0x20029dbd

000148a0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   148a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148a4:	4d26      	ldr	r5, [pc, #152]	; (14940 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   148a6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   148a8:	4606      	mov	r6, r0
   148aa:	f04f 0800 	mov.w	r8, #0
   148ae:	46ab      	mov	fp, r5
	MPU->RNR = index;
   148b0:	4f24      	ldr	r7, [pc, #144]	; (14944 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   148b2:	45d0      	cmp	r8, sl
   148b4:	da1b      	bge.n	148ee <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   148b6:	f8d6 9004 	ldr.w	r9, [r6, #4]
   148ba:	f1b9 0f00 	cmp.w	r9, #0
   148be:	d039      	beq.n	14934 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   148c0:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   148c2:	4608      	mov	r0, r1
   148c4:	9101      	str	r1, [sp, #4]
   148c6:	f00f fd26 	bl	24316 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   148ca:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   148cc:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   148ce:	eb09 0001 	add.w	r0, r9, r1
   148d2:	3801      	subs	r0, #1
   148d4:	f00f fd1f 	bl	24316 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   148d8:	4284      	cmp	r4, r0
   148da:	f04f 0214 	mov.w	r2, #20
   148de:	4b1a      	ldr	r3, [pc, #104]	; (14948 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   148e0:	d008      	beq.n	148f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   148e2:	f06f 0315 	mvn.w	r3, #21
   148e6:	fb02 f808 	mul.w	r8, r2, r8
   148ea:	f84b 3008 	str.w	r3, [fp, r8]
}
   148ee:	b003      	add	sp, #12
   148f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   148f4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   148f8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   148fa:	d0f8      	beq.n	148ee <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   148fc:	7819      	ldrb	r1, [r3, #0]
   148fe:	42a1      	cmp	r1, r4
   14900:	ddf5      	ble.n	148ee <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   14902:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   14906:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   14908:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   1490a:	68fc      	ldr	r4, [r7, #12]
   1490c:	f100 0108 	add.w	r1, r0, #8
   14910:	7b00      	ldrb	r0, [r0, #12]
   14912:	f364 0004 	bfi	r0, r4, #0, #5
   14916:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14918:	6938      	ldr	r0, [r7, #16]
   1491a:	790c      	ldrb	r4, [r1, #4]
   1491c:	0840      	lsrs	r0, r0, #1
   1491e:	f360 1447 	bfi	r4, r0, #5, #3
   14922:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   14924:	68f9      	ldr	r1, [r7, #12]
   14926:	f021 011f 	bic.w	r1, r1, #31
   1492a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1492c:	6939      	ldr	r1, [r7, #16]
   1492e:	f021 011f 	bic.w	r1, r1, #31
   14932:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14934:	f108 0801 	add.w	r8, r8, #1
   14938:	3514      	adds	r5, #20
   1493a:	360c      	adds	r6, #12
   1493c:	e7b9      	b.n	148b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1493e:	bf00      	nop
   14940:	20021ac4 	.word	0x20021ac4
   14944:	e000ed90 	.word	0xe000ed90
   14948:	20029dbd 	.word	0x20029dbd

0001494c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1494c:	4b01      	ldr	r3, [pc, #4]	; (14954 <__stdout_hook_install+0x8>)
   1494e:	6018      	str	r0, [r3, #0]
}
   14950:	4770      	bx	lr
   14952:	bf00      	nop
   14954:	20020164 	.word	0x20020164

00014958 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   14958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1495a:	4606      	mov	r6, r0
   1495c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1495e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   14960:	4f06      	ldr	r7, [pc, #24]	; (1497c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   14962:	42ac      	cmp	r4, r5
   14964:	da08      	bge.n	14978 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   14966:	683b      	ldr	r3, [r7, #0]
   14968:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1496a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1496c:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1496e:	f104 0401 	add.w	r4, r4, #1
   14972:	d001      	beq.n	14978 <z_impl_zephyr_read_stdin+0x20>
   14974:	280d      	cmp	r0, #13
   14976:	d1f4      	bne.n	14962 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   14978:	4620      	mov	r0, r4
   1497a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1497c:	20020160 	.word	0x20020160

00014980 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   14980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14982:	460d      	mov	r5, r1
   14984:	4f09      	ldr	r7, [pc, #36]	; (149ac <z_impl_zephyr_write_stdout+0x2c>)
   14986:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   14988:	f1c0 0401 	rsb	r4, r0, #1
   1498c:	19a3      	adds	r3, r4, r6
   1498e:	429d      	cmp	r5, r3
   14990:	dc01      	bgt.n	14996 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   14992:	4628      	mov	r0, r5
   14994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   14996:	7873      	ldrb	r3, [r6, #1]
   14998:	2b0a      	cmp	r3, #10
   1499a:	d102      	bne.n	149a2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1499c:	200d      	movs	r0, #13
   1499e:	683b      	ldr	r3, [r7, #0]
   149a0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   149a2:	683b      	ldr	r3, [r7, #0]
   149a4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   149a8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   149aa:	e7ef      	b.n	1498c <z_impl_zephyr_write_stdout+0xc>
   149ac:	20020164 	.word	0x20020164

000149b0 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   149b0:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   149b2:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   149b4:	4801      	ldr	r0, [pc, #4]	; (149bc <_exit+0xc>)
   149b6:	f7ff ffe3 	bl	14980 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   149ba:	e7fe      	b.n	149ba <_exit+0xa>
   149bc:	00029fa5 	.word	0x00029fa5

000149c0 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   149c0:	b510      	push	{r4, lr}
   149c2:	4604      	mov	r4, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   149c4:	f04f 32ff 	mov.w	r2, #4294967295
   149c8:	f04f 33ff 	mov.w	r3, #4294967295
   149cc:	480a      	ldr	r0, [pc, #40]	; (149f8 <_sbrk+0x38>)
   149ce:	f00e fc2b 	bl	23228 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   149d2:	490a      	ldr	r1, [pc, #40]	; (149fc <_sbrk+0x3c>)
   149d4:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   149d6:	18e0      	adds	r0, r4, r3
   149d8:	4c09      	ldr	r4, [pc, #36]	; (14a00 <_sbrk+0x40>)
   149da:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   149de:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   149e2:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   149e4:	bf2e      	itee	cs
   149e6:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   149ea:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   149ec:	6008      	strcc	r0, [r1, #0]
	}

	sys_sem_give(&heap_sem);
   149ee:	4802      	ldr	r0, [pc, #8]	; (149f8 <_sbrk+0x38>)
   149f0:	f00e fc15 	bl	2321e <sys_sem_give>

	return ret;
}
   149f4:	4620      	mov	r0, r4
   149f6:	bd10      	pop	{r4, pc}
   149f8:	20020798 	.word	0x20020798
   149fc:	20021ad8 	.word	0x20021ad8
   14a00:	20031ea0 	.word	0x20031ea0

00014a04 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   14a04:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   14a06:	4c07      	ldr	r4, [pc, #28]	; (14a24 <net_if_init+0x20>)
   14a08:	4d07      	ldr	r5, [pc, #28]	; (14a28 <net_if_init+0x24>)
   14a0a:	42ac      	cmp	r4, r5
   14a0c:	d100      	bne.n	14a10 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   14a0e:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   14a10:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   14a12:	681b      	ldr	r3, [r3, #0]
   14a14:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   14a16:	b11b      	cbz	r3, 14a20 <net_if_init+0x1c>
   14a18:	681b      	ldr	r3, [r3, #0]
   14a1a:	b10b      	cbz	r3, 14a20 <net_if_init+0x1c>
	api->init(iface);
   14a1c:	4620      	mov	r0, r4
   14a1e:	4798      	blx	r3
	     iface++, if_count++) {
   14a20:	3420      	adds	r4, #32
   14a22:	e7f2      	b.n	14a0a <net_if_init+0x6>
   14a24:	20020840 	.word	0x20020840
   14a28:	20020860 	.word	0x20020860

00014a2c <net_if_post_init>:

void net_if_post_init(void)
{
   14a2c:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   14a2e:	4c08      	ldr	r4, [pc, #32]	; (14a50 <net_if_post_init+0x24>)
   14a30:	4d08      	ldr	r5, [pc, #32]	; (14a54 <net_if_post_init+0x28>)
   14a32:	42ac      	cmp	r4, r5
   14a34:	d100      	bne.n	14a38 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   14a36:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a38:	6823      	ldr	r3, [r4, #0]
   14a3a:	330c      	adds	r3, #12
   14a3c:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   14a40:	071b      	lsls	r3, r3, #28
   14a42:	d402      	bmi.n	14a4a <net_if_post_init+0x1e>
			net_if_up(iface);
   14a44:	4620      	mov	r0, r4
   14a46:	f00f fca8 	bl	2439a <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   14a4a:	3420      	adds	r4, #32
   14a4c:	e7f1      	b.n	14a32 <net_if_post_init+0x6>
   14a4e:	bf00      	nop
   14a50:	20020840 	.word	0x20020840
   14a54:	20020860 	.word	0x20020860

00014a58 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   14a58:	2300      	movs	r3, #0
{
   14a5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   14a5e:	2802      	cmp	r0, #2
{
   14a60:	b089      	sub	sp, #36	; 0x24
   14a62:	4607      	mov	r7, r0
   14a64:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   14a66:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   14a6a:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   14a6c:	d13e      	bne.n	14aec <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   14a6e:	a806      	add	r0, sp, #24
   14a70:	9105      	str	r1, [sp, #20]
   14a72:	4601      	mov	r1, r0
{
   14a74:	461a      	mov	r2, r3
   14a76:	e006      	b.n	14a86 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   14a78:	780c      	ldrb	r4, [r1, #0]
   14a7a:	3201      	adds	r2, #1
   14a7c:	3401      	adds	r4, #1
   14a7e:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   14a80:	b2d4      	uxtb	r4, r2
   14a82:	2c07      	cmp	r4, #7
   14a84:	d804      	bhi.n	14a90 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   14a86:	9c04      	ldr	r4, [sp, #16]
   14a88:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   14a8c:	2c00      	cmp	r4, #0
   14a8e:	d0f3      	beq.n	14a78 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   14a90:	3301      	adds	r3, #1
   14a92:	2b08      	cmp	r3, #8
   14a94:	f101 0101 	add.w	r1, r1, #1
   14a98:	d1ec      	bne.n	14a74 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   14a9a:	f04f 38ff 	mov.w	r8, #4294967295
	u8_t i, bl, bh, longest = 1U;
   14a9e:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   14aa2:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   14aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
   14aa8:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   14aaa:	bf88      	it	hi
   14aac:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   14ab0:	f103 0301 	add.w	r3, r3, #1
   14ab4:	b2db      	uxtb	r3, r3
				pos = i;
   14ab6:	bf88      	it	hi
   14ab8:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   14aba:	2b08      	cmp	r3, #8
   14abc:	d1f2      	bne.n	14aa4 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   14abe:	469b      	mov	fp, r3
   14ac0:	f1b9 0f01 	cmp.w	r9, #1
   14ac4:	f04f 033a 	mov.w	r3, #58	; 0x3a
   14ac8:	bf08      	it	eq
   14aca:	f04f 38ff 	moveq.w	r8, #4294967295
   14ace:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   14ad0:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   14ad2:	4634      	mov	r4, r6
   14ad4:	460d      	mov	r5, r1
   14ad6:	455d      	cmp	r5, fp
   14ad8:	db17      	blt.n	14b0a <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   14ada:	42b4      	cmp	r4, r6
   14adc:	d008      	beq.n	14af0 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   14ade:	2300      	movs	r3, #0
   14ae0:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   14ae2:	bf0c      	ite	eq
   14ae4:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   14ae8:	7023      	strbne	r3, [r4, #0]
   14aea:	e002      	b.n	14af2 <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   14aec:	2801      	cmp	r0, #1
   14aee:	d004      	beq.n	14afa <z_impl_net_addr_ntop+0xa2>
		return NULL;
   14af0:	2600      	movs	r6, #0
	}

	return dst;
}
   14af2:	4630      	mov	r0, r6
   14af4:	b009      	add	sp, #36	; 0x24
   14af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   14afa:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   14afc:	f04f 0b04 	mov.w	fp, #4
	s8_t pos = -1;
   14b00:	f04f 38ff 	mov.w	r8, #4294967295
	u8_t i, bl, bh, longest = 1U;
   14b04:	4681      	mov	r9, r0
		delim = '.';
   14b06:	9303      	str	r3, [sp, #12]
   14b08:	e7e2      	b.n	14ad0 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   14b0a:	f1bb 0f04 	cmp.w	fp, #4
   14b0e:	d13b      	bne.n	14b88 <z_impl_net_addr_ntop+0x130>
			value = (u32_t)addr->s4_addr[i];
   14b10:	9b04      	ldr	r3, [sp, #16]
   14b12:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   14b14:	b94a      	cbnz	r2, 14b2a <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   14b16:	2330      	movs	r3, #48	; 0x30
   14b18:	4620      	mov	r0, r4
   14b1a:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   14b1e:	9b03      	ldr	r3, [sp, #12]
   14b20:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   14b22:	3501      	adds	r5, #1
   14b24:	4604      	mov	r4, r0
   14b26:	b2ed      	uxtb	r5, r5
   14b28:	e7d5      	b.n	14ad6 <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   14b2a:	f04f 0e09 	mov.w	lr, #9
   14b2e:	f04f 0a00 	mov.w	sl, #0
   14b32:	e9cd 2401 	strd	r2, r4, [sp, #4]
   14b36:	483a      	ldr	r0, [pc, #232]	; (14c20 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   14b38:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   14b3c:	45f2      	cmp	sl, lr
		value = value % divisor;
   14b3e:	fbbc f2f0 	udiv	r2, ip, r0
   14b42:	fb00 c212 	mls	r2, r0, r2, ip
   14b46:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   14b48:	dc01      	bgt.n	14b4e <z_impl_net_addr_ntop+0xf6>
   14b4a:	4584      	cmp	ip, r0
   14b4c:	d308      	bcc.n	14b60 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   14b4e:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   14b52:	46f2      	mov	sl, lr
   14b54:	9b02      	ldr	r3, [sp, #8]
   14b56:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   14b5a:	f803 cb01 	strb.w	ip, [r3], #1
   14b5e:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   14b60:	220a      	movs	r2, #10
   14b62:	f10e 3eff 	add.w	lr, lr, #4294967295
   14b66:	f1be 3fff 	cmp.w	lr, #4294967295
   14b6a:	fbb0 f0f2 	udiv	r0, r0, r2
   14b6e:	d1e3      	bne.n	14b38 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   14b70:	f04f 0200 	mov.w	r2, #0
   14b74:	9b02      	ldr	r3, [sp, #8]
   14b76:	701a      	strb	r2, [r3, #0]
	return buf - start;
   14b78:	1b1b      	subs	r3, r3, r4
			ptr += l;
   14b7a:	b2da      	uxtb	r2, r3
   14b7c:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   14b80:	1c58      	adds	r0, r3, #1
   14b82:	9b03      	ldr	r3, [sp, #12]
   14b84:	54a3      	strb	r3, [r4, r2]
			continue;
   14b86:	e7cc      	b.n	14b22 <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   14b88:	45a8      	cmp	r8, r5
   14b8a:	d110      	bne.n	14bae <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   14b8c:	b911      	cbnz	r1, 14b94 <z_impl_net_addr_ntop+0x13c>
   14b8e:	f1b8 0f00 	cmp.w	r8, #0
   14b92:	d102      	bne.n	14b9a <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   14b94:	233a      	movs	r3, #58	; 0x3a
   14b96:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   14b9a:	233a      	movs	r3, #58	; 0x3a
   14b9c:	4620      	mov	r0, r4
   14b9e:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   14ba2:	f109 33ff 	add.w	r3, r9, #4294967295
   14ba6:	441d      	add	r5, r3
			needcolon = false;
   14ba8:	2100      	movs	r1, #0
			i += longest - 1U;
   14baa:	b2ed      	uxtb	r5, r5
			continue;
   14bac:	e7b9      	b.n	14b22 <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   14bae:	b111      	cbz	r1, 14bb6 <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   14bb0:	233a      	movs	r3, #58	; 0x3a
   14bb2:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   14bb6:	9b05      	ldr	r3, [sp, #20]
   14bb8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   14bbc:	0219      	lsls	r1, r3, #8
   14bbe:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   14bc2:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   14bc6:	b20a      	sxth	r2, r1
		bh = value >> 8;
   14bc8:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   14bcc:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   14bd0:	d016      	beq.n	14c00 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   14bd2:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   14bd4:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   14bd6:	d90b      	bls.n	14bf0 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   14bd8:	2300      	movs	r3, #0
   14bda:	2261      	movs	r2, #97	; 0x61
   14bdc:	4620      	mov	r0, r4
   14bde:	f00f fc0d 	bl	243fc <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   14be2:	2301      	movs	r3, #1
   14be4:	2261      	movs	r2, #97	; 0x61
   14be6:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   14be8:	f00f fc08 	bl	243fc <net_byte_to_hex>
		needcolon = true;
   14bec:	2101      	movs	r1, #1
   14bee:	e798      	b.n	14b22 <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   14bf0:	b25b      	sxtb	r3, r3
   14bf2:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   14bf4:	bf94      	ite	ls
   14bf6:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   14bf8:	3357      	addhi	r3, #87	; 0x57
   14bfa:	1c60      	adds	r0, r4, #1
   14bfc:	7023      	strb	r3, [r4, #0]
   14bfe:	e7f0      	b.n	14be2 <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   14c00:	f1ba 0f0f 	cmp.w	sl, #15
   14c04:	d903      	bls.n	14c0e <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   14c06:	2261      	movs	r2, #97	; 0x61
   14c08:	4651      	mov	r1, sl
   14c0a:	4620      	mov	r0, r4
   14c0c:	e7ec      	b.n	14be8 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   14c0e:	b253      	sxtb	r3, r2
   14c10:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   14c14:	bf94      	ite	ls
   14c16:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   14c18:	3357      	addhi	r3, #87	; 0x57
   14c1a:	1c60      	adds	r0, r4, #1
   14c1c:	7023      	strb	r3, [r4, #0]
   14c1e:	e7e5      	b.n	14bec <z_impl_net_addr_ntop+0x194>
   14c20:	3b9aca00 	.word	0x3b9aca00

00014c24 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   14c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   14c28:	680d      	ldr	r5, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   14c2a:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   14c2e:	4b3b      	ldr	r3, [pc, #236]	; (14d1c <connect_request_encode+0xf8>)
   14c30:	4a3b      	ldr	r2, [pc, #236]	; (14d20 <connect_request_encode+0xfc>)
{
   14c32:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   14c34:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   14c38:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   14c3a:	2804      	cmp	r0, #4
   14c3c:	bf0c      	ite	eq
   14c3e:	4610      	moveq	r0, r2
   14c40:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   14c42:	600d      	str	r5, [r1, #0]
{
   14c44:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   14c46:	f00f fd7e 	bl	24746 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   14c4a:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   14c4e:	4603      	mov	r3, r0
   14c50:	b938      	cbnz	r0, 14c62 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   14c52:	e9d8 2000 	ldrd	r2, r0, [r8]
   14c56:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   14c58:	f897 107a 	ldrb.w	r1, [r7, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   14c5c:	d104      	bne.n	14c68 <connect_request_encode+0x44>
		return -ENOMEM;
   14c5e:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   14c62:	4618      	mov	r0, r3
   14c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   14c68:	1c50      	adds	r0, r2, #1
   14c6a:	f8c8 0000 	str.w	r0, [r8]
   14c6e:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   14c70:	e9d8 6200 	ldrd	r6, r2, [r8]
   14c74:	4296      	cmp	r6, r2
   14c76:	d0f2      	beq.n	14c5e <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   14c78:	1c72      	adds	r2, r6, #1
   14c7a:	f8c8 2000 	str.w	r2, [r8]
   14c7e:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   14c80:	4641      	mov	r1, r8
   14c82:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
   14c86:	f00f fd4c 	bl	24722 <pack_uint16>
	if (err_code != 0) {
   14c8a:	4603      	mov	r3, r0
   14c8c:	2800      	cmp	r0, #0
   14c8e:	d1e8      	bne.n	14c62 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   14c90:	f107 0048 	add.w	r0, r7, #72	; 0x48
   14c94:	f00f fd57 	bl	24746 <pack_utf8_str>
	if (err_code != 0) {
   14c98:	4603      	mov	r3, r0
   14c9a:	2800      	cmp	r0, #0
   14c9c:	d1e1      	bne.n	14c62 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   14c9e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
	u8_t connect_flags = client->clean_session << 1;
   14ca0:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   14ca2:	b1d8      	cbz	r0, 14cdc <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   14ca4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   14ca8:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   14cac:	f003 0301 	and.w	r3, r3, #1
   14cb0:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   14cb4:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   14cb6:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   14cb8:	00db      	lsls	r3, r3, #3
   14cba:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   14cbe:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   14cc0:	f00f fd41 	bl	24746 <pack_utf8_str>
		if (err_code != 0) {
   14cc4:	4603      	mov	r3, r0
   14cc6:	2800      	cmp	r0, #0
   14cc8:	d1cb      	bne.n	14c62 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   14cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   14ccc:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   14cce:	b30b      	cbz	r3, 14d14 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   14cd0:	4618      	mov	r0, r3
   14cd2:	f00f fd38 	bl	24746 <pack_utf8_str>
			if (err_code != 0) {
   14cd6:	4603      	mov	r3, r0
   14cd8:	2800      	cmp	r0, #0
   14cda:	d1c2      	bne.n	14c62 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   14cdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
   14cde:	b138      	cbz	r0, 14cf0 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   14ce0:	4641      	mov	r1, r8
   14ce2:	f00f fd30 	bl	24746 <pack_utf8_str>
		if (err_code != 0) {
   14ce6:	4603      	mov	r3, r0
   14ce8:	2800      	cmp	r0, #0
   14cea:	d1ba      	bne.n	14c62 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   14cec:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   14cf0:	6db8      	ldr	r0, [r7, #88]	; 0x58
   14cf2:	b138      	cbz	r0, 14d04 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   14cf4:	4641      	mov	r1, r8
   14cf6:	f00f fd26 	bl	24746 <pack_utf8_str>
		if (err_code != 0) {
   14cfa:	4603      	mov	r3, r0
   14cfc:	2800      	cmp	r0, #0
   14cfe:	d1b0      	bne.n	14c62 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   14d00:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   14d04:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   14d06:	4642      	mov	r2, r8
   14d08:	4629      	mov	r1, r5
}
   14d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   14d0e:	2010      	movs	r0, #16
   14d10:	f00f bd34 	b.w	2477c <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   14d14:	f00f fd05 	bl	24722 <pack_uint16>
   14d18:	e7dd      	b.n	14cd6 <connect_request_encode+0xb2>
   14d1a:	bf00      	nop
   14d1c:	00027fa0 	.word	0x00027fa0
   14d20:	00027fa8 	.word	0x00027fa8

00014d24 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   14d24:	e9d0 2300 	ldrd	r2, r3, [r0]
   14d28:	1a9b      	subs	r3, r3, r2
   14d2a:	2b01      	cmp	r3, #1
   14d2c:	bf81      	itttt	hi
   14d2e:	4b05      	ldrhi	r3, [pc, #20]	; (14d44 <disconnect_encode+0x20>)
   14d30:	881b      	ldrhhi	r3, [r3, #0]
   14d32:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   14d34:	6803      	ldrhi	r3, [r0, #0]
   14d36:	bf83      	ittte	hi
   14d38:	3302      	addhi	r3, #2
   14d3a:	6043      	strhi	r3, [r0, #4]

	return 0;
   14d3c:	2000      	movhi	r0, #0
		return -ENOMEM;
   14d3e:	f06f 000b 	mvnls.w	r0, #11
}
   14d42:	4770      	bx	lr
   14d44:	00029fc2 	.word	0x00029fc2

00014d48 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   14d48:	e9d0 2300 	ldrd	r2, r3, [r0]
   14d4c:	1a9b      	subs	r3, r3, r2
   14d4e:	2b01      	cmp	r3, #1
   14d50:	bf81      	itttt	hi
   14d52:	4b05      	ldrhi	r3, [pc, #20]	; (14d68 <ping_request_encode+0x20>)
   14d54:	881b      	ldrhhi	r3, [r3, #0]
   14d56:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   14d58:	6803      	ldrhi	r3, [r0, #0]
   14d5a:	bf83      	ittte	hi
   14d5c:	3302      	addhi	r3, #2
   14d5e:	6043      	strhi	r3, [r0, #4]

	return 0;
   14d60:	2000      	movhi	r0, #0
		return -ENOMEM;
   14d62:	f06f 000b 	mvnls.w	r0, #11
}
   14d66:	4770      	bx	lr
   14d68:	00029fc4 	.word	0x00029fc4

00014d6c <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   14d6c:	2314      	movs	r3, #20
   14d6e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   14d72:	4353      	muls	r3, r2
   14d74:	4a01      	ldr	r2, [pc, #4]	; (14d7c <mqtt_transport_connect+0x10>)
   14d76:	58d3      	ldr	r3, [r2, r3]
   14d78:	4718      	bx	r3
   14d7a:	bf00      	nop
   14d7c:	00027fb0 	.word	0x00027fb0

00014d80 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   14d80:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   14d82:	2514      	movs	r5, #20
   14d84:	4c03      	ldr	r4, [pc, #12]	; (14d94 <mqtt_transport_write+0x14>)
   14d86:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   14d8a:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   14d8e:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   14d90:	685b      	ldr	r3, [r3, #4]
   14d92:	4718      	bx	r3
   14d94:	00027fb0 	.word	0x00027fb0

00014d98 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   14d98:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   14d9a:	2414      	movs	r4, #20
   14d9c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   14da0:	4a03      	ldr	r2, [pc, #12]	; (14db0 <mqtt_transport_write_msg+0x18>)
   14da2:	fb04 2303 	mla	r3, r4, r3, r2
}
   14da6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   14daa:	689b      	ldr	r3, [r3, #8]
   14dac:	4718      	bx	r3
   14dae:	bf00      	nop
   14db0:	00027fb0 	.word	0x00027fb0

00014db4 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   14db4:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   14db6:	2614      	movs	r6, #20
   14db8:	4d04      	ldr	r5, [pc, #16]	; (14dcc <mqtt_transport_read+0x18>)
   14dba:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   14dbe:	fb06 5404 	mla	r4, r6, r4, r5
   14dc2:	68e4      	ldr	r4, [r4, #12]
   14dc4:	46a4      	mov	ip, r4
							 shall_block);
}
   14dc6:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   14dc8:	4760      	bx	ip
   14dca:	bf00      	nop
   14dcc:	00027fb0 	.word	0x00027fb0

00014dd0 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   14dd0:	2114      	movs	r1, #20
   14dd2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   14dd6:	4a02      	ldr	r2, [pc, #8]	; (14de0 <mqtt_transport_disconnect+0x10>)
   14dd8:	fb01 2303 	mla	r3, r1, r3, r2
   14ddc:	691b      	ldr	r3, [r3, #16]
   14dde:	4718      	bx	r3
   14de0:	00027fb0 	.word	0x00027fb0

00014de4 <sys_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   14de4:	68c2      	ldr	r2, [r0, #12]
{
   14de6:	b508      	push	{r3, lr}
	if (mutex->kernel_mutex.lock_count == 0) {
   14de8:	b142      	cbz	r2, 14dfc <sys_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   14dea:	4b07      	ldr	r3, [pc, #28]	; (14e08 <sys_mutex_unlock+0x24>)
   14dec:	6882      	ldr	r2, [r0, #8]
   14dee:	689b      	ldr	r3, [r3, #8]
   14df0:	429a      	cmp	r2, r3
   14df2:	d106      	bne.n	14e02 <sys_mutex_unlock+0x1e>
	return z_impl_k_mutex_unlock(mutex);
   14df4:	f00b fdf0 	bl	209d8 <z_impl_k_mutex_unlock>
		return -EPERM;
	}

	k_mutex_unlock(&mutex->kernel_mutex);
	return 0;
   14df8:	2000      	movs	r0, #0
}
   14dfa:	bd08      	pop	{r3, pc}
		return -EINVAL;
   14dfc:	f06f 0015 	mvn.w	r0, #21
   14e00:	e7fb      	b.n	14dfa <sys_mutex_unlock+0x16>
		return -EPERM;
   14e02:	f04f 30ff 	mov.w	r0, #4294967295
   14e06:	e7f8      	b.n	14dfa <sys_mutex_unlock+0x16>
   14e08:	20026d48 	.word	0x20026d48

00014e0c <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   14e0c:	b513      	push	{r0, r1, r4, lr}
	struct device *dev = entropy_driver;
   14e0e:	4c0a      	ldr	r4, [pc, #40]	; (14e38 <sys_rand32_get+0x2c>)
   14e10:	6820      	ldr	r0, [r4, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   14e12:	b918      	cbnz	r0, 14e1c <sys_rand32_get+0x10>
   14e14:	4809      	ldr	r0, [pc, #36]	; (14e3c <sys_rand32_get+0x30>)
   14e16:	f00b fa83 	bl	20320 <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   14e1a:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   14e1c:	2204      	movs	r2, #4
   14e1e:	6883      	ldr	r3, [r0, #8]
   14e20:	eb0d 0102 	add.w	r1, sp, r2
   14e24:	681b      	ldr	r3, [r3, #0]
   14e26:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   14e28:	2800      	cmp	r0, #0
   14e2a:	da02      	bge.n	14e32 <sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   14e2c:	f7fe fe9a 	bl	13b64 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   14e30:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   14e32:	9801      	ldr	r0, [sp, #4]
   14e34:	b002      	add	sp, #8
   14e36:	bd10      	pop	{r4, pc}
   14e38:	20021adc 	.word	0x20021adc
   14e3c:	00029fd2 	.word	0x00029fd2

00014e40 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   14e40:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   14e42:	4b09      	ldr	r3, [pc, #36]	; (14e68 <gpio_nrfx_init+0x28>)
   14e44:	781a      	ldrb	r2, [r3, #0]
   14e46:	b96a      	cbnz	r2, 14e64 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   14e48:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14e4a:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   14e4c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14e4e:	2105      	movs	r1, #5
   14e50:	f7fe ff9a 	bl	13d88 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   14e54:	2031      	movs	r0, #49	; 0x31
   14e56:	f7fe ff73 	bl	13d40 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14e5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14e5e:	4b03      	ldr	r3, [pc, #12]	; (14e6c <gpio_nrfx_init+0x2c>)
   14e60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   14e64:	2000      	movs	r0, #0
   14e66:	bd08      	pop	{r3, pc}
   14e68:	20029dbe 	.word	0x20029dbe
   14e6c:	40031000 	.word	0x40031000

00014e70 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14e70:	4b29      	ldr	r3, [pc, #164]	; (14f18 <gpio_nrfx_config+0xa8>)
{
   14e72:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14e74:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14e76:	4829      	ldr	r0, [pc, #164]	; (14f1c <gpio_nrfx_config+0xac>)
   14e78:	4013      	ands	r3, r2
   14e7a:	4283      	cmp	r3, r0
   14e7c:	d03d      	beq.n	14efa <gpio_nrfx_config+0x8a>
   14e7e:	d80d      	bhi.n	14e9c <gpio_nrfx_config+0x2c>
   14e80:	2b06      	cmp	r3, #6
   14e82:	d015      	beq.n	14eb0 <gpio_nrfx_config+0x40>
   14e84:	d805      	bhi.n	14e92 <gpio_nrfx_config+0x22>
   14e86:	b19b      	cbz	r3, 14eb0 <gpio_nrfx_config+0x40>
   14e88:	2b02      	cmp	r3, #2
   14e8a:	d038      	beq.n	14efe <gpio_nrfx_config+0x8e>
   14e8c:	f06f 0015 	mvn.w	r0, #21
   14e90:	e032      	b.n	14ef8 <gpio_nrfx_config+0x88>
   14e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14e96:	d1f9      	bne.n	14e8c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   14e98:	2301      	movs	r3, #1
   14e9a:	e009      	b.n	14eb0 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14e9c:	4820      	ldr	r0, [pc, #128]	; (14f20 <gpio_nrfx_config+0xb0>)
   14e9e:	4283      	cmp	r3, r0
   14ea0:	d02f      	beq.n	14f02 <gpio_nrfx_config+0x92>
   14ea2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14ea6:	d02e      	beq.n	14f06 <gpio_nrfx_config+0x96>
   14ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   14eac:	d1ee      	bne.n	14e8c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   14eae:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   14eb0:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   14eb2:	bf4c      	ite	mi
   14eb4:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   14eb6:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14eba:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   14ebe:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   14ec0:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14ec4:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14ec8:	d506      	bpl.n	14ed8 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14eca:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14ece:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14ed0:	d01b      	beq.n	14f0a <gpio_nrfx_config+0x9a>
			nrf_gpio_port_out_set(reg, BIT(pin));
   14ed2:	2201      	movs	r2, #1
   14ed4:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   14ed6:	60ba      	str	r2, [r7, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   14ed8:	7a32      	ldrb	r2, [r6, #8]
   14eda:	f001 011f 	and.w	r1, r1, #31
   14ede:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   14ee2:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   14ee6:	2000      	movs	r0, #0
   14ee8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14eec:	4a0d      	ldr	r2, [pc, #52]	; (14f24 <gpio_nrfx_config+0xb4>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   14eee:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14ef2:	3180      	adds	r1, #128	; 0x80
   14ef4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   14efa:	2307      	movs	r3, #7
   14efc:	e7d8      	b.n	14eb0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   14efe:	2304      	movs	r3, #4
   14f00:	e7d6      	b.n	14eb0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   14f02:	2305      	movs	r3, #5
   14f04:	e7d4      	b.n	14eb0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   14f06:	2303      	movs	r3, #3
   14f08:	e7d2      	b.n	14eb0 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   14f0a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   14f0c:	bf42      	ittt	mi
   14f0e:	2201      	movmi	r2, #1
   14f10:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   14f12:	60fa      	strmi	r2, [r7, #12]
}
   14f14:	e7e0      	b.n	14ed8 <gpio_nrfx_config+0x68>
   14f16:	bf00      	nop
   14f18:	00f00006 	.word	0x00f00006
   14f1c:	00100006 	.word	0x00100006
   14f20:	00400002 	.word	0x00400002
   14f24:	40842500 	.word	0x40842500

00014f28 <gpiote_pin_int_cfg>:
{
   14f28:	b570      	push	{r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14f2a:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   14f2c:	4c4c      	ldr	r4, [pc, #304]	; (15060 <gpiote_pin_int_cfg+0x138>)
   14f2e:	7a1a      	ldrb	r2, [r3, #8]
   14f30:	f001 031f 	and.w	r3, r1, #31
   14f34:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14f38:	2200      	movs	r2, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   14f3a:	68c6      	ldr	r6, [r0, #12]
   14f3c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   14f40:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14f42:	f502 75a2 	add.w	r5, r2, #324	; 0x144
   14f46:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   14f4a:	f3c5 2504 	ubfx	r5, r5, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   14f4e:	42ab      	cmp	r3, r5
   14f50:	d16c      	bne.n	1502c <gpiote_pin_int_cfg+0x104>
		    && (intenset & BIT(i))) {
   14f52:	fa20 f502 	lsr.w	r5, r0, r2
   14f56:	07ed      	lsls	r5, r5, #31
   14f58:	d568      	bpl.n	1502c <gpiote_pin_int_cfg+0x104>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   14f5a:	0090      	lsls	r0, r2, #2
   14f5c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   14f60:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
   14f64:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510
   14f68:	f025 0501 	bic.w	r5, r5, #1
   14f6c:	f8c0 5510 	str.w	r5, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   14f70:	2001      	movs	r0, #1
   14f72:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
   14f76:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14f7a:	4d3a      	ldr	r5, [pc, #232]	; (15064 <gpiote_pin_int_cfg+0x13c>)
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   14f7c:	68f0      	ldr	r0, [r6, #12]
   14f7e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14f82:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
   14f86:	40c8      	lsrs	r0, r1
   14f88:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
   14f8c:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14f90:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
   14f94:	d049      	beq.n	1502a <gpiote_pin_int_cfg+0x102>
   14f96:	6930      	ldr	r0, [r6, #16]
   14f98:	40c8      	lsrs	r0, r1
   14f9a:	f010 0001 	ands.w	r0, r0, #1
   14f9e:	d044      	beq.n	1502a <gpiote_pin_int_cfg+0x102>
		if (data->trig_edge & BIT(pin)) {
   14fa0:	69b0      	ldr	r0, [r6, #24]
   14fa2:	40c8      	lsrs	r0, r1
   14fa4:	f010 0001 	ands.w	r0, r0, #1
   14fa8:	d04a      	beq.n	15040 <gpiote_pin_int_cfg+0x118>
			if (data->double_edge & BIT(pin)) {
   14faa:	69f2      	ldr	r2, [r6, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14fac:	2500      	movs	r5, #0
			if (data->double_edge & BIT(pin)) {
   14fae:	40ca      	lsrs	r2, r1
   14fb0:	07d2      	lsls	r2, r2, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14fb2:	bf4f      	iteee	mi
   14fb4:	2203      	movmi	r2, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14fb6:	6972      	ldrpl	r2, [r6, #20]
   14fb8:	40ca      	lsrpl	r2, r1
   14fba:	f002 0201 	andpl.w	r2, r2, #1
   14fbe:	bf5c      	itt	pl
   14fc0:	f1c2 0202 	rsbpl	r2, r2, #2
   14fc4:	b2d2      	uxtbpl	r2, r2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   14fc6:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   14fca:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   14fce:	f010 0003 	ands.w	r0, r0, #3
   14fd2:	d12f      	bne.n	15034 <gpiote_pin_int_cfg+0x10c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14fd4:	00a9      	lsls	r1, r5, #2
   14fd6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   14fda:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   14fde:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14fe2:	021b      	lsls	r3, r3, #8
   14fe4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14fe8:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   14fec:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14ff0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			nrf_gpiote_event_t evt =
   14ff4:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14ff8:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
   14ffc:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14ffe:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   15002:	b29b      	uxth	r3, r3
   15004:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15008:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1500c:	4332      	orrs	r2, r6
   1500e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15012:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15014:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
   15018:	f043 0301 	orr.w	r3, r3, #1
   1501c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   15020:	2301      	movs	r3, #1
   15022:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   15026:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   1502a:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1502c:	3201      	adds	r2, #1
   1502e:	2a08      	cmp	r2, #8
   15030:	d187      	bne.n	14f42 <gpiote_pin_int_cfg+0x1a>
   15032:	e7a2      	b.n	14f7a <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   15034:	3501      	adds	r5, #1
   15036:	2d08      	cmp	r5, #8
   15038:	d1c5      	bne.n	14fc6 <gpiote_pin_int_cfg+0x9e>
	return -ENODEV;
   1503a:	f06f 0012 	mvn.w	r0, #18
   1503e:	e7f4      	b.n	1502a <gpiote_pin_int_cfg+0x102>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15040:	6972      	ldr	r2, [r6, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   15042:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   15046:	40ca      	lsrs	r2, r1
   15048:	f002 0201 	and.w	r2, r2, #1
   1504c:	f1c2 0203 	rsb	r2, r2, #3
   15050:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   15054:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   15058:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
}
   1505c:	e7e5      	b.n	1502a <gpiote_pin_int_cfg+0x102>
   1505e:	bf00      	nop
   15060:	40031000 	.word	0x40031000
   15064:	40842500 	.word	0x40842500

00015068 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15068:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1506c:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
   1506e:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15070:	d10f      	bne.n	15092 <gpio_nrfx_pin_interrupt_configure+0x2a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15072:	6845      	ldr	r5, [r0, #4]
   15074:	7a2e      	ldrb	r6, [r5, #8]
   15076:	f001 051f 	and.w	r5, r1, #31
   1507a:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1507e:	4e1d      	ldr	r6, [pc, #116]	; (150f4 <gpio_nrfx_pin_interrupt_configure+0x8c>)
   15080:	3580      	adds	r5, #128	; 0x80
   15082:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15086:	07ed      	lsls	r5, r5, #31
   15088:	d507      	bpl.n	1509a <gpio_nrfx_pin_interrupt_configure+0x32>
}
   1508a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1508e:	bc70      	pop	{r4, r5, r6}
   15090:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15092:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15096:	68e5      	ldr	r5, [r4, #12]
   15098:	d026      	beq.n	150e8 <gpio_nrfx_pin_interrupt_configure+0x80>
   1509a:	2501      	movs	r5, #1
   1509c:	68e6      	ldr	r6, [r4, #12]
   1509e:	408d      	lsls	r5, r1
   150a0:	4335      	orrs	r5, r6
   150a2:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   150a4:	2501      	movs	r5, #1
   150a6:	6926      	ldr	r6, [r4, #16]
   150a8:	408d      	lsls	r5, r1
   150aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   150ae:	bf14      	ite	ne
   150b0:	432e      	orrne	r6, r5
   150b2:	43ae      	biceq	r6, r5
   150b4:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   150b6:	69a6      	ldr	r6, [r4, #24]
   150b8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   150bc:	69e2      	ldr	r2, [r4, #28]
   150be:	bf0c      	ite	eq
   150c0:	432e      	orreq	r6, r5
   150c2:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   150c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   150c8:	bf0c      	ite	eq
   150ca:	432a      	orreq	r2, r5
   150cc:	43aa      	bicne	r2, r5
   150ce:	61e2      	str	r2, [r4, #28]
   150d0:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   150d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   150d6:	bf0c      	ite	eq
   150d8:	4315      	orreq	r5, r2
   150da:	ea22 0505 	bicne.w	r5, r2, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   150de:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   150e0:	6165      	str	r5, [r4, #20]
}
   150e2:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
   150e4:	f7ff bf20 	b.w	14f28 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   150e8:	2601      	movs	r6, #1
   150ea:	408e      	lsls	r6, r1
   150ec:	ea25 0506 	bic.w	r5, r5, r6
   150f0:	e7d7      	b.n	150a2 <gpio_nrfx_pin_interrupt_configure+0x3a>
   150f2:	bf00      	nop
   150f4:	40842500 	.word	0x40842500

000150f8 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150f8:	494e      	ldr	r1, [pc, #312]	; (15234 <gpiote_event_handler+0x13c>)
{
   150fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150fe:	680e      	ldr	r6, [r1, #0]
	if (port_event) {
   15100:	2e00      	cmp	r6, #0
   15102:	d05e      	beq.n	151c2 <gpiote_event_handler+0xca>
	struct gpio_nrfx_data *data = get_port_data(port);
   15104:	4b4c      	ldr	r3, [pc, #304]	; (15238 <gpiote_event_handler+0x140>)
	u32_t pin = 0U;
   15106:	2500      	movs	r5, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   15108:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1510a:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1510e:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
   15112:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   15114:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
   15118:	4320      	orrs	r0, r4
   1511a:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1511e:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   15122:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
   15124:	6904      	ldr	r4, [r0, #16]
	u32_t bit = 1U << pin;
   15126:	2001      	movs	r0, #1
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   15128:	4054      	eors	r4, r2
   1512a:	f8df e118 	ldr.w	lr, [pc, #280]	; 15244 <gpiote_event_handler+0x14c>
	u32_t out = pin_states & level_pins;
   1512e:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   15132:	bb8b      	cbnz	r3, 15198 <gpiote_event_handler+0xa0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15134:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   15136:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15138:	2001      	movs	r0, #1
   1513a:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1513c:	493f      	ldr	r1, [pc, #252]	; (1523c <gpiote_event_handler+0x144>)
   1513e:	4d40      	ldr	r5, [pc, #256]	; (15240 <gpiote_event_handler+0x148>)
   15140:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   15144:	fa00 fc03 	lsl.w	ip, r0, r3
   15148:	ea1c 0f02 	tst.w	ip, r2
   1514c:	d00d      	beq.n	1516a <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1514e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   15152:	b152      	cbz	r2, 1516a <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15154:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   15158:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1515c:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15160:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15164:	fa00 f202 	lsl.w	r2, r0, r2
   15168:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1516a:	3301      	adds	r3, #1
   1516c:	2b08      	cmp	r3, #8
   1516e:	d1e7      	bne.n	15140 <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   15170:	bb4c      	cbnz	r4, 151c6 <gpiote_event_handler+0xce>
	if (port_event) {
   15172:	b17e      	cbz	r6, 15194 <gpiote_event_handler+0x9c>
	u32_t bit = 1U << pin;
   15174:	2401      	movs	r4, #1
	u32_t pin = 0U;
   15176:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   15178:	4b2f      	ldr	r3, [pc, #188]	; (15238 <gpiote_event_handler+0x140>)
   1517a:	4f32      	ldr	r7, [pc, #200]	; (15244 <gpiote_event_handler+0x14c>)
   1517c:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1517e:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   15180:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   15184:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   15186:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
   1518a:	430a      	orrs	r2, r1
   1518c:	ea23 0302 	bic.w	r3, r3, r2
	while (level_pins) {
   15190:	2b00      	cmp	r3, #0
   15192:	d133      	bne.n	151fc <gpiote_event_handler+0x104>
}
   15194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   15198:	4203      	tst	r3, r0
   1519a:	d00f      	beq.n	151bc <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1519c:	f89c 7008 	ldrb.w	r7, [ip, #8]
   151a0:	f005 021f 	and.w	r2, r5, #31
   151a4:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   151a8:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   151ac:	f8d2 7200 	ldr.w	r7, [r2, #512]	; 0x200
			level_pins &= ~bit;
   151b0:	ea23 0300 	bic.w	r3, r3, r0
   151b4:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   151b8:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
		++pin;
   151bc:	3501      	adds	r5, #1
		bit <<= 1;
   151be:	0040      	lsls	r0, r0, #1
   151c0:	e7b7      	b.n	15132 <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   151c2:	4634      	mov	r4, r6
   151c4:	e7b7      	b.n	15136 <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   151c6:	481c      	ldr	r0, [pc, #112]	; (15238 <gpiote_event_handler+0x140>)
   151c8:	68c7      	ldr	r7, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   151ca:	6879      	ldr	r1, [r7, #4]
   151cc:	2900      	cmp	r1, #0
   151ce:	d0d0      	beq.n	15172 <gpiote_event_handler+0x7a>
	return node->next;
   151d0:	680d      	ldr	r5, [r1, #0]
			cb->handler(port, cb, cb->pin_mask & pins);
   151d2:	4680      	mov	r8, r0
   151d4:	2d00      	cmp	r5, #0
   151d6:	bf38      	it	cc
   151d8:	2500      	movcc	r5, #0
		if ((cb->pin_mask & pins) & data->int_en) {
   151da:	688a      	ldr	r2, [r1, #8]
   151dc:	693b      	ldr	r3, [r7, #16]
   151de:	4022      	ands	r2, r4
   151e0:	421a      	tst	r2, r3
   151e2:	d002      	beq.n	151ea <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
   151e4:	4640      	mov	r0, r8
   151e6:	684b      	ldr	r3, [r1, #4]
   151e8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   151ea:	2d00      	cmp	r5, #0
   151ec:	d0c1      	beq.n	15172 <gpiote_event_handler+0x7a>
   151ee:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   151f0:	4629      	mov	r1, r5
   151f2:	2b00      	cmp	r3, #0
   151f4:	bf38      	it	cc
   151f6:	2300      	movcc	r3, #0
   151f8:	461d      	mov	r5, r3
   151fa:	e7ee      	b.n	151da <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   151fc:	421c      	tst	r4, r3
   151fe:	d016      	beq.n	1522e <gpiote_event_handler+0x136>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15200:	7a32      	ldrb	r2, [r6, #8]
   15202:	f005 011f 	and.w	r1, r5, #31
   15206:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1520a:	6942      	ldr	r2, [r0, #20]
   1520c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   15210:	f8d1 c200 	ldr.w	ip, [r1, #512]	; 0x200
   15214:	40ea      	lsrs	r2, r5
   15216:	f002 0201 	and.w	r2, r2, #1
   1521a:	f1c2 0203 	rsb	r2, r2, #3
   1521e:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   15222:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   15226:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
			level_pins &= ~bit;
   1522a:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   1522e:	3501      	adds	r5, #1
		bit <<= 1;
   15230:	0064      	lsls	r4, r4, #1
   15232:	e7ad      	b.n	15190 <gpiote_event_handler+0x98>
   15234:	4003117c 	.word	0x4003117c
   15238:	20020644 	.word	0x20020644
   1523c:	40031000 	.word	0x40031000
   15240:	40031100 	.word	0x40031100
   15244:	40842500 	.word	0x40842500

00015248 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   15248:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1524a:	794b      	ldrb	r3, [r1, #5]
   1524c:	2b01      	cmp	r3, #1
   1524e:	d029      	beq.n	152a4 <uarte_nrfx_configure+0x5c>
   15250:	2b03      	cmp	r3, #3
   15252:	d124      	bne.n	1529e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15254:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15256:	798b      	ldrb	r3, [r1, #6]
   15258:	2b03      	cmp	r3, #3
   1525a:	d120      	bne.n	1529e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1525c:	79cc      	ldrb	r4, [r1, #7]
   1525e:	b124      	cbz	r4, 1526a <uarte_nrfx_configure+0x22>
   15260:	2c01      	cmp	r4, #1
   15262:	d11c      	bne.n	1529e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15264:	6843      	ldr	r3, [r0, #4]
   15266:	791b      	ldrb	r3, [r3, #4]
   15268:	b1cb      	cbz	r3, 1529e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1526a:	790a      	ldrb	r2, [r1, #4]
   1526c:	b112      	cbz	r2, 15274 <uarte_nrfx_configure+0x2c>
   1526e:	2a02      	cmp	r2, #2
   15270:	d115      	bne.n	1529e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   15272:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15274:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   15276:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   15278:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1527c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1527e:	d064      	beq.n	1534a <uarte_nrfx_configure+0x102>
   15280:	d82d      	bhi.n	152de <uarte_nrfx_configure+0x96>
   15282:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15286:	d063      	beq.n	15350 <uarte_nrfx_configure+0x108>
   15288:	d816      	bhi.n	152b8 <uarte_nrfx_configure+0x70>
   1528a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1528e:	d061      	beq.n	15354 <uarte_nrfx_configure+0x10c>
   15290:	d80a      	bhi.n	152a8 <uarte_nrfx_configure+0x60>
   15292:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15296:	d060      	beq.n	1535a <uarte_nrfx_configure+0x112>
   15298:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1529c:	d060      	beq.n	15360 <uarte_nrfx_configure+0x118>
   1529e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   152a2:	e051      	b.n	15348 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   152a4:	2600      	movs	r6, #0
   152a6:	e7d6      	b.n	15256 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   152a8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   152ac:	d05b      	beq.n	15366 <uarte_nrfx_configure+0x11e>
   152ae:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   152b2:	d1f4      	bne.n	1529e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   152b4:	4b36      	ldr	r3, [pc, #216]	; (15390 <uarte_nrfx_configure+0x148>)
   152b6:	e03c      	b.n	15332 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   152b8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   152bc:	d056      	beq.n	1536c <uarte_nrfx_configure+0x124>
   152be:	d807      	bhi.n	152d0 <uarte_nrfx_configure+0x88>
   152c0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   152c4:	d054      	beq.n	15370 <uarte_nrfx_configure+0x128>
   152c6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   152ca:	d1e8      	bne.n	1529e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   152cc:	4b31      	ldr	r3, [pc, #196]	; (15394 <uarte_nrfx_configure+0x14c>)
   152ce:	e030      	b.n	15332 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   152d0:	f647 2712 	movw	r7, #31250	; 0x7a12
   152d4:	42bb      	cmp	r3, r7
   152d6:	d1e2      	bne.n	1529e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   152d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   152dc:	e029      	b.n	15332 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   152de:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   152e2:	d047      	beq.n	15374 <uarte_nrfx_configure+0x12c>
   152e4:	d813      	bhi.n	1530e <uarte_nrfx_configure+0xc6>
   152e6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   152ea:	d046      	beq.n	1537a <uarte_nrfx_configure+0x132>
   152ec:	d809      	bhi.n	15302 <uarte_nrfx_configure+0xba>
   152ee:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   152f2:	42bb      	cmp	r3, r7
   152f4:	d043      	beq.n	1537e <uarte_nrfx_configure+0x136>
   152f6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   152fa:	d1d0      	bne.n	1529e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   152fc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15300:	e017      	b.n	15332 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15302:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15306:	d1ca      	bne.n	1529e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15308:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1530c:	e011      	b.n	15332 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1530e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15312:	d037      	beq.n	15384 <uarte_nrfx_configure+0x13c>
   15314:	d808      	bhi.n	15328 <uarte_nrfx_configure+0xe0>
   15316:	4f20      	ldr	r7, [pc, #128]	; (15398 <uarte_nrfx_configure+0x150>)
   15318:	42bb      	cmp	r3, r7
   1531a:	d036      	beq.n	1538a <uarte_nrfx_configure+0x142>
   1531c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15320:	d1bd      	bne.n	1529e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15322:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15326:	e004      	b.n	15332 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15328:	4f1c      	ldr	r7, [pc, #112]	; (1539c <uarte_nrfx_configure+0x154>)
   1532a:	42bb      	cmp	r3, r7
   1532c:	d1b7      	bne.n	1529e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1532e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15332:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   15336:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   15338:	68c3      	ldr	r3, [r0, #12]
   1533a:	4322      	orrs	r2, r4
   1533c:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1533e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   15342:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15346:	2000      	movs	r0, #0
}
   15348:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1534a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1534e:	e7f0      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15350:	4b13      	ldr	r3, [pc, #76]	; (153a0 <uarte_nrfx_configure+0x158>)
   15352:	e7ee      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15354:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15358:	e7eb      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1535a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1535e:	e7e8      	b.n	15332 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15360:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15364:	e7e5      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   15366:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1536a:	e7e2      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1536c:	4b0d      	ldr	r3, [pc, #52]	; (153a4 <uarte_nrfx_configure+0x15c>)
   1536e:	e7e0      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15370:	4b0d      	ldr	r3, [pc, #52]	; (153a8 <uarte_nrfx_configure+0x160>)
   15372:	e7de      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   15374:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15378:	e7db      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1537a:	4b0c      	ldr	r3, [pc, #48]	; (153ac <uarte_nrfx_configure+0x164>)
   1537c:	e7d9      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1537e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15382:	e7d6      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   15384:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15388:	e7d3      	b.n	15332 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1538a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1538e:	e7d0      	b.n	15332 <uarte_nrfx_configure+0xea>
   15390:	0013b000 	.word	0x0013b000
   15394:	004ea000 	.word	0x004ea000
   15398:	0003d090 	.word	0x0003d090
   1539c:	000f4240 	.word	0x000f4240
   153a0:	00275000 	.word	0x00275000
   153a4:	0075c000 	.word	0x0075c000
   153a8:	003af000 	.word	0x003af000
   153ac:	013a9000 	.word	0x013a9000

000153b0 <uarte_nrfx_pins_enable>:
}

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT

static void uarte_nrfx_pins_enable(struct device *dev, bool enable)
{
   153b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!get_dev_config(dev)->gpio_mgmt) {
   153b2:	6845      	ldr	r5, [r0, #4]
   153b4:	796b      	ldrb	r3, [r5, #5]
   153b6:	b32b      	cbz	r3, 15404 <uarte_nrfx_pins_enable+0x54>
	return config->uarte_regs;
   153b8:	682b      	ldr	r3, [r5, #0]
    return p_reg->PSEL.TXD;
   153ba:	792d      	ldrb	r5, [r5, #4]
   153bc:	f8d3 750c 	ldr.w	r7, [r3, #1292]	; 0x50c
    return p_reg->PSEL.RXD;
   153c0:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
    return p_reg->PSEL.CTS;
   153c4:	f107 0680 	add.w	r6, r7, #128	; 0x80
   153c8:	f8d3 4510 	ldr.w	r4, [r3, #1296]	; 0x510
    return p_reg->PSEL.RTS;
   153cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
	u32_t tx_pin = nrf_uarte_tx_pin_get(uarte);
	u32_t rx_pin = nrf_uarte_rx_pin_get(uarte);
	u32_t cts_pin = nrf_uarte_cts_pin_get(uarte);
	u32_t rts_pin = nrf_uarte_rts_pin_get(uarte);

	if (enable) {
   153d0:	4b16      	ldr	r3, [pc, #88]	; (1542c <uarte_nrfx_pins_enable+0x7c>)
   153d2:	b1c1      	cbz	r1, 15406 <uarte_nrfx_pins_enable+0x56>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   153d4:	2101      	movs	r1, #1
   153d6:	40b9      	lsls	r1, r7
    p_reg->OUTSET = set_mask;
   153d8:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   153da:	2103      	movs	r1, #3
		nrf_gpio_pin_write(tx_pin, 1);
		nrf_gpio_cfg_output(tx_pin);
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   153dc:	1c57      	adds	r7, r2, #1
   153de:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   153e2:	bf1e      	ittt	ne
   153e4:	2100      	movne	r1, #0
   153e6:	3280      	addne	r2, #128	; 0x80
   153e8:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]
			nrf_gpio_cfg_input(rx_pin, NRF_GPIO_PIN_NOPULL);
		}

		if (get_dev_config(dev)->rts_cts_pins_set) {
   153ec:	b155      	cbz	r5, 15404 <uarte_nrfx_pins_enable+0x54>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   153ee:	2201      	movs	r2, #1
   153f0:	4082      	lsls	r2, r0
    p_reg->OUTSET = set_mask;
   153f2:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   153f4:	2203      	movs	r2, #3
   153f6:	3080      	adds	r0, #128	; 0x80
   153f8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   153fc:	2200      	movs	r2, #0
   153fe:	3480      	adds	r4, #128	; 0x80
   15400:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if (get_dev_config(dev)->rts_cts_pins_set) {
			nrf_gpio_cfg_default(cts_pin);
			nrf_gpio_cfg_default(rts_pin);
		}
	}
}
   15404:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15406:	2102      	movs	r1, #2
   15408:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1540c:	1c56      	adds	r6, r2, #1
   1540e:	bf1c      	itt	ne
   15410:	3280      	addne	r2, #128	; 0x80
   15412:	f843 1022 	strne.w	r1, [r3, r2, lsl #2]
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15416:	2d00      	cmp	r5, #0
   15418:	d0f4      	beq.n	15404 <uarte_nrfx_pins_enable+0x54>
   1541a:	2202      	movs	r2, #2
   1541c:	3480      	adds	r4, #128	; 0x80
   1541e:	3080      	adds	r0, #128	; 0x80
   15420:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   15424:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   15428:	e7ec      	b.n	15404 <uarte_nrfx_pins_enable+0x54>
   1542a:	bf00      	nop
   1542c:	40842500 	.word	0x40842500

00015430 <uarte_nrfx_tx>:
{
   15430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15432:	68c6      	ldr	r6, [r0, #12]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   15434:	f001 4460 	and.w	r4, r1, #3758096384	; 0xe0000000
	return config->uarte_regs;
   15438:	6840      	ldr	r0, [r0, #4]
	if (!nrfx_is_in_ram(buf)) {
   1543a:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
	return config->uarte_regs;
   1543e:	6800      	ldr	r0, [r0, #0]
	if (!nrfx_is_in_ram(buf)) {
   15440:	d13c      	bne.n	154bc <uarte_nrfx_tx+0x8c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15442:	68b4      	ldr	r4, [r6, #8]
   15444:	340c      	adds	r4, #12
   15446:	e8d4 5fef 	ldaex	r5, [r4]
   1544a:	2d00      	cmp	r5, #0
   1544c:	d103      	bne.n	15456 <uarte_nrfx_tx+0x26>
   1544e:	e8c4 2fe7 	stlex	r7, r2, [r4]
   15452:	2f00      	cmp	r7, #0
   15454:	d1f7      	bne.n	15446 <uarte_nrfx_tx+0x16>
	if (atomic_cas((atomic_t *) &data->async->tx_size,
   15456:	d134      	bne.n	154c2 <uarte_nrfx_tx+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15458:	2400      	movs	r4, #0
	data->async->tx_buf = buf;
   1545a:	68b5      	ldr	r5, [r6, #8]
   1545c:	60a9      	str	r1, [r5, #8]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1545e:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15462:	f8c0 2548 	str.w	r2, [r0, #1352]	; 0x548
    p_reg->INTENSET = mask;
   15466:	4a18      	ldr	r2, [pc, #96]	; (154c8 <uarte_nrfx_tx+0x98>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15468:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
   1546c:	f8c0 4158 	str.w	r4, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   15470:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15474:	2201      	movs	r2, #1
   15476:	6082      	str	r2, [r0, #8]
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   15478:	79f2      	ldrb	r2, [r6, #7]
   1547a:	2a01      	cmp	r2, #1
   1547c:	d11b      	bne.n	154b6 <uarte_nrfx_tx+0x86>
	    && timeout != SYS_FOREVER_MS) {
   1547e:	1c5a      	adds	r2, r3, #1
   15480:	d019      	beq.n	154b6 <uarte_nrfx_tx+0x86>
   15482:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   15486:	f240 36e7 	movw	r6, #999	; 0x3e7
   1548a:	2700      	movs	r7, #0
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   1548c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   15490:	fbc0 6701 	smlal	r6, r7, r0, r1
   15494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15498:	2300      	movs	r3, #0
   1549a:	4630      	mov	r0, r6
   1549c:	4639      	mov	r1, r7
   1549e:	f7f7 f88b 	bl	c5b8 <__aeabi_uldivmod>
   154a2:	4602      	mov	r2, r0
	z_impl_k_timer_start(timer, duration, period);
   154a4:	2000      	movs	r0, #0
   154a6:	2100      	movs	r1, #0
   154a8:	4623      	mov	r3, r4
   154aa:	e9cd 0100 	strd	r0, r1, [sp]
   154ae:	f105 0010 	add.w	r0, r5, #16
   154b2:	f00c f95f 	bl	21774 <z_impl_k_timer_start>
}
   154b6:	4620      	mov	r0, r4
   154b8:	b003      	add	sp, #12
   154ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
   154bc:	f06f 0485 	mvn.w	r4, #133	; 0x85
   154c0:	e7f9      	b.n	154b6 <uarte_nrfx_tx+0x86>
		return -EBUSY;
   154c2:	f06f 040f 	mvn.w	r4, #15
   154c6:	e7f6      	b.n	154b6 <uarte_nrfx_tx+0x86>
   154c8:	00400100 	.word	0x00400100

000154cc <uarte_instance_init.isra.0>:
static int uarte_instance_init(struct device *dev,
   154cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   154d0:	2201      	movs	r2, #1
	return config->uarte_regs;
   154d2:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   154d4:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int uarte_instance_init(struct device *dev,
   154d8:	4605      	mov	r5, r0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   154da:	2003      	movs	r0, #3
   154dc:	460f      	mov	r7, r1
	nrf_gpio_pin_write(config->pseltxd, 1);
   154de:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
   154e0:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   154e2:	4b64      	ldr	r3, [pc, #400]	; (15674 <uarte_instance_init.isra.0+0x1a8>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   154e4:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   154e6:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   154e8:	f101 0280 	add.w	r2, r1, #128	; 0x80
   154ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   154f0:	687a      	ldr	r2, [r7, #4]
   154f2:	1c50      	adds	r0, r2, #1
   154f4:	bf1e      	ittt	ne
   154f6:	2600      	movne	r6, #0
   154f8:	f102 0080 	addne.w	r0, r2, #128	; 0x80
   154fc:	f843 6020 	strne.w	r6, [r3, r0, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   15500:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   15504:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.RXD = pselrxd;
   15506:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1550a:	1c4e      	adds	r6, r1, #1
   1550c:	d013      	beq.n	15536 <uarte_instance_init.isra.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1550e:	68fa      	ldr	r2, [r7, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   15510:	1c50      	adds	r0, r2, #1
   15512:	d010      	beq.n	15536 <uarte_instance_init.isra.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15514:	2001      	movs	r0, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15516:	2603      	movs	r6, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15518:	4090      	lsls	r0, r2
    p_reg->OUTSET = set_mask;
   1551a:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1551c:	f102 0080 	add.w	r0, r2, #128	; 0x80
   15520:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
   15524:	2600      	movs	r6, #0
   15526:	f101 0080 	add.w	r0, r1, #128	; 0x80
   1552a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1552e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   15532:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15536:	4641      	mov	r1, r8
   15538:	4628      	mov	r0, r5
   1553a:	f7ff fe85 	bl	15248 <uarte_nrfx_configure>
	if (err) {
   1553e:	4606      	mov	r6, r0
   15540:	2800      	cmp	r0, #0
   15542:	f040 8083 	bne.w	1564c <uarte_instance_init.isra.0+0x180>
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
   15546:	2301      	movs	r3, #1
	if (data->async) {
   15548:	f8d8 2008 	ldr.w	r2, [r8, #8]
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
   1554c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (data->async) {
   15550:	2a00      	cmp	r2, #0
   15552:	d07f      	beq.n	15654 <uarte_instance_init.isra.0+0x188>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15554:	68ec      	ldr	r4, [r5, #12]
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   15556:	f8d5 8004 	ldr.w	r8, [r5, #4]
		return data->async->hw_rx_counting;
   1555a:	68a3      	ldr	r3, [r4, #8]
	return config->uarte_regs;
   1555c:	f8d8 7000 	ldr.w	r7, [r8]
	if (hw_rx_counting_enabled(data)) {
   15560:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   15564:	b1cb      	cbz	r3, 1559a <uarte_instance_init.isra.0+0xce>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   15566:	4b44      	ldr	r3, [pc, #272]	; (15678 <uarte_instance_init.isra.0+0x1ac>)
		ret = nrfx_timer_init(&cfg->timer,
   15568:	f108 0908 	add.w	r9, r8, #8
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1556c:	e9cd 3000 	strd	r3, r0, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   15570:	4669      	mov	r1, sp
   15572:	4648      	mov	r0, r9
   15574:	4a41      	ldr	r2, [pc, #260]	; (1567c <uarte_instance_init.isra.0+0x1b0>)
   15576:	f00a fe37 	bl	201e8 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   1557a:	4b41      	ldr	r3, [pc, #260]	; (15680 <uarte_instance_init.isra.0+0x1b4>)
   1557c:	4298      	cmp	r0, r3
   1557e:	d044      	beq.n	1560a <uarte_instance_init.isra.0+0x13e>
   15580:	4b40      	ldr	r3, [pc, #256]	; (15684 <uarte_instance_init.isra.0+0x1b8>)
   15582:	4941      	ldr	r1, [pc, #260]	; (15688 <uarte_instance_init.isra.0+0x1bc>)
			LOG_ERR("Timer already initialized, "
   15584:	4841      	ldr	r0, [pc, #260]	; (1568c <uarte_instance_init.isra.0+0x1c0>)
   15586:	1ac9      	subs	r1, r1, r3
   15588:	08c9      	lsrs	r1, r1, #3
   1558a:	0189      	lsls	r1, r1, #6
   1558c:	f041 0101 	orr.w	r1, r1, #1
   15590:	f00e f901 	bl	23796 <log_0>
			data->async->hw_rx_counting = false;
   15594:	68a3      	ldr	r3, [r4, #8]
   15596:	f883 609d 	strb.w	r6, [r3, #157]	; 0x9d
	if (hw_rx_counting_enabled(data)) {
   1559a:	68a0      	ldr	r0, [r4, #8]
   1559c:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
   155a0:	b1bb      	cbz	r3, 155d2 <uarte_instance_init.isra.0+0x106>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   155a2:	3098      	adds	r0, #152	; 0x98
   155a4:	f00a fdea 	bl	2017c <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   155a8:	4b35      	ldr	r3, [pc, #212]	; (15680 <uarte_instance_init.isra.0+0x1b4>)
   155aa:	4298      	cmp	r0, r3
   155ac:	d011      	beq.n	155d2 <uarte_instance_init.isra.0+0x106>
   155ae:	4b35      	ldr	r3, [pc, #212]	; (15684 <uarte_instance_init.isra.0+0x1b8>)
   155b0:	4935      	ldr	r1, [pc, #212]	; (15688 <uarte_instance_init.isra.0+0x1bc>)
			LOG_ERR("Failed to allocate PPI Channel, "
   155b2:	4837      	ldr	r0, [pc, #220]	; (15690 <uarte_instance_init.isra.0+0x1c4>)
   155b4:	1ac9      	subs	r1, r1, r3
   155b6:	08c9      	lsrs	r1, r1, #3
   155b8:	0189      	lsls	r1, r1, #6
   155ba:	f041 0101 	orr.w	r1, r1, #1
   155be:	f00e f8ea 	bl	23796 <log_0>
			data->async->hw_rx_counting = false;
   155c2:	2200      	movs	r2, #0
   155c4:	68a3      	ldr	r3, [r4, #8]
			nrfx_timer_uninit(&cfg->timer);
   155c6:	f108 0008 	add.w	r0, r8, #8
			data->async->hw_rx_counting = false;
   155ca:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			nrfx_timer_uninit(&cfg->timer);
   155ce:	f00a fe73 	bl	202b8 <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
   155d2:	68a3      	ldr	r3, [r4, #8]
   155d4:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   155d8:	b1f2      	cbz	r2, 15618 <uarte_instance_init.isra.0+0x14c>
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   155da:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   155de:	f8d8 1008 	ldr.w	r1, [r8, #8]
   155e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   155e6:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   155ea:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   155ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   155f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   155f6:	f893 0098 	ldrb.w	r0, [r3, #152]	; 0x98
   155fa:	f00a fddd 	bl	201b8 <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   155fe:	4b20      	ldr	r3, [pc, #128]	; (15680 <uarte_instance_init.isra.0+0x1b4>)
   15600:	4298      	cmp	r0, r3
   15602:	d00c      	beq.n	1561e <uarte_instance_init.isra.0+0x152>
			return -EIO;
   15604:	f06f 0604 	mvn.w	r6, #4
   15608:	e020      	b.n	1564c <uarte_instance_init.isra.0+0x180>
			nrfx_timer_enable(&cfg->timer);
   1560a:	4648      	mov	r0, r9
   1560c:	f00a fe3a 	bl	20284 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   15610:	4648      	mov	r0, r9
   15612:	f010 fd72 	bl	260fa <nrfx_timer_clear>
   15616:	e7c0      	b.n	1559a <uarte_instance_init.isra.0+0xce>
    p_reg->INTENSET = mask;
   15618:	2304      	movs	r3, #4
   1561a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
   1561e:	4b1d      	ldr	r3, [pc, #116]	; (15694 <uarte_instance_init.isra.0+0x1c8>)
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   15620:	68a0      	ldr	r0, [r4, #8]
   15622:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15626:	2308      	movs	r3, #8
   15628:	2200      	movs	r2, #0
   1562a:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
   1562e:	491a      	ldr	r1, [pc, #104]	; (15698 <uarte_instance_init.isra.0+0x1cc>)
   15630:	3068      	adds	r0, #104	; 0x68
   15632:	f011 f891 	bl	26758 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, dev);
   15636:	68a3      	ldr	r3, [r4, #8]
	timer->user_data = user_data;
   15638:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1563c:	68a0      	ldr	r0, [r4, #8]
   1563e:	2200      	movs	r2, #0
   15640:	4916      	ldr	r1, [pc, #88]	; (1569c <uarte_instance_init.isra.0+0x1d0>)
   15642:	3010      	adds	r0, #16
   15644:	f011 f888 	bl	26758 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, dev);
   15648:	68a3      	ldr	r3, [r4, #8]
   1564a:	63dd      	str	r5, [r3, #60]	; 0x3c
}
   1564c:	4630      	mov	r0, r6
   1564e:	b003      	add	sp, #12
   15650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15654:	2208      	movs	r2, #8
   15656:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1565a:	687a      	ldr	r2, [r7, #4]
   1565c:	3201      	adds	r2, #1
   1565e:	d0f5      	beq.n	1564c <uarte_instance_init.isra.0+0x180>
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   15660:	f108 0114 	add.w	r1, r8, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15664:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15668:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1566c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15670:	6023      	str	r3, [r4, #0]
}
   15672:	e7eb      	b.n	1564c <uarte_instance_init.isra.0+0x180>
   15674:	40842500 	.word	0x40842500
   15678:	07030100 	.word	0x07030100
   1567c:	000253e3 	.word	0x000253e3
   15680:	0bad0000 	.word	0x0bad0000
   15684:	00027b20 	.word	0x00027b20
   15688:	00027bd0 	.word	0x00027bd0
   1568c:	00029fe0 	.word	0x00029fe0
   15690:	0002a020 	.word	0x0002a020
   15694:	000a0210 	.word	0x000a0210
   15698:	0002558d 	.word	0x0002558d
   1569c:	00025673 	.word	0x00025673

000156a0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   156a0:	b530      	push	{r4, r5, lr}
   156a2:	b085      	sub	sp, #20
   156a4:	466c      	mov	r4, sp
   156a6:	4605      	mov	r5, r0
   156a8:	4b08      	ldr	r3, [pc, #32]	; (156cc <uarte_0_init+0x2c>)
   156aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   156ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   156b0:	2200      	movs	r2, #0
   156b2:	2101      	movs	r1, #1
   156b4:	2008      	movs	r0, #8
   156b6:	f7fe fb67 	bl	13d88 <z_arm_irq_priority_set>
   156ba:	2008      	movs	r0, #8
   156bc:	f7fe fb40 	bl	13d40 <arch_irq_enable>
   156c0:	4621      	mov	r1, r4
   156c2:	4628      	mov	r0, r5
   156c4:	f7ff ff02 	bl	154cc <uarte_instance_init.isra.0>
   156c8:	b005      	add	sp, #20
   156ca:	bd30      	pop	{r4, r5, pc}
   156cc:	00027bf0 	.word	0x00027bf0

000156d0 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   156d0:	b530      	push	{r4, r5, lr}
   156d2:	b085      	sub	sp, #20
   156d4:	466c      	mov	r4, sp
   156d6:	4605      	mov	r5, r0
   156d8:	4b08      	ldr	r3, [pc, #32]	; (156fc <uarte_1_init+0x2c>)
   156da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   156dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   156e0:	2200      	movs	r2, #0
   156e2:	2101      	movs	r1, #1
   156e4:	2009      	movs	r0, #9
   156e6:	f7fe fb4f 	bl	13d88 <z_arm_irq_priority_set>
   156ea:	2009      	movs	r0, #9
   156ec:	f7fe fb28 	bl	13d40 <arch_irq_enable>
   156f0:	4621      	mov	r1, r4
   156f2:	4628      	mov	r0, r5
   156f4:	f7ff feea 	bl	154cc <uarte_instance_init.isra.0>
   156f8:	b005      	add	sp, #20
   156fa:	bd30      	pop	{r4, r5, pc}
   156fc:	00027c00 	.word	0x00027c00

00015700 <uarte_2_init>:
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   15700:	b530      	push	{r4, r5, lr}
   15702:	b085      	sub	sp, #20
   15704:	466c      	mov	r4, sp
   15706:	4605      	mov	r5, r0
   15708:	4b08      	ldr	r3, [pc, #32]	; (1572c <uarte_2_init+0x2c>)
   1570a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1570c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   15710:	2200      	movs	r2, #0
   15712:	2101      	movs	r1, #1
   15714:	200a      	movs	r0, #10
   15716:	f7fe fb37 	bl	13d88 <z_arm_irq_priority_set>
   1571a:	200a      	movs	r0, #10
   1571c:	f7fe fb10 	bl	13d40 <arch_irq_enable>
   15720:	4621      	mov	r1, r4
   15722:	4628      	mov	r0, r5
   15724:	f7ff fed2 	bl	154cc <uarte_instance_init.isra.0>
   15728:	b005      	add	sp, #20
   1572a:	bd30      	pop	{r4, r5, pc}
   1572c:	00027c10 	.word	0x00027c10

00015730 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   15730:	6843      	ldr	r3, [r0, #4]
{
   15732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return config->uarte_regs;
   15736:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
   15738:	68c3      	ldr	r3, [r0, #12]
{
   1573a:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
   1573c:	689b      	ldr	r3, [r3, #8]
{
   1573e:	b088      	sub	sp, #32
	if (!hw_rx_counting_enabled(data)
   15740:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   15744:	b962      	cbnz	r2, 15760 <uarte_nrfx_isr_async+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15746:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   1574a:	b149      	cbz	r1, 15760 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1574c:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   15750:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
   15754:	3201      	adds	r2, #1
   15756:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
   1575a:	b008      	add	sp, #32
   1575c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15760:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   15764:	b30b      	cbz	r3, 157aa <uarte_nrfx_isr_async+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15766:	2100      	movs	r1, #0
   15768:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1576c:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   15770:	2214      	movs	r2, #20
    p_reg->ERRORSRC = errsrc_mask;
   15772:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
   15776:	a803      	add	r0, sp, #12
   15778:	f011 f952 	bl	26a20 <memset>
   1577c:	2306      	movs	r3, #6
   1577e:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   15782:	07f3      	lsls	r3, r6, #31
   15784:	f100 80d1 	bmi.w	1592a <uarte_nrfx_isr_async+0x1fa>
   15788:	07b7      	lsls	r7, r6, #30
   1578a:	f100 80d0 	bmi.w	1592e <uarte_nrfx_isr_async+0x1fe>
   1578e:	0770      	lsls	r0, r6, #29
   15790:	f100 80cf 	bmi.w	15932 <uarte_nrfx_isr_async+0x202>
   15794:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   15798:	4620      	mov	r0, r4
   1579a:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1579c:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   157a0:	f00f fe3d 	bl	2541e <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   157a4:	4620      	mov	r0, r4
   157a6:	f00f ff67 	bl	25678 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   157aa:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   157ae:	b1b3      	cbz	r3, 157de <uarte_nrfx_isr_async+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   157b0:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   157b2:	68e6      	ldr	r6, [r4, #12]
   157b4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
	if (!data->async->rx_enabled) {
   157b8:	68b0      	ldr	r0, [r6, #8]
   157ba:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
   157be:	2b00      	cmp	r3, #0
   157c0:	f040 80b9 	bne.w	15936 <uarte_nrfx_isr_async+0x206>
		if (data->async->rx_buf == NULL) {
   157c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   157c6:	b951      	cbnz	r1, 157de <uarte_nrfx_isr_async+0xae>
			struct uart_event evt = {
   157c8:	2214      	movs	r2, #20
   157ca:	a803      	add	r0, sp, #12
   157cc:	f011 f928 	bl	26a20 <memset>
   157d0:	2305      	movs	r3, #5
			user_callback(dev, &evt);
   157d2:	4620      	mov	r0, r4
   157d4:	a903      	add	r1, sp, #12
			struct uart_event evt = {
   157d6:	f88d 300c 	strb.w	r3, [sp, #12]
			user_callback(dev, &evt);
   157da:	f00f fe20 	bl	2541e <user_callback>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   157de:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   157e2:	b35b      	cbz	r3, 1583c <uarte_nrfx_isr_async+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   157e4:	2700      	movs	r7, #0
	struct uart_event evt = {
   157e6:	2214      	movs	r2, #20
   157e8:	4639      	mov	r1, r7
   157ea:	f8c5 714c 	str.w	r7, [r5, #332]	; 0x14c
   157ee:	a803      	add	r0, sp, #12
	struct uarte_nrfx_data *data = get_dev_data(dev);
   157f0:	68e6      	ldr	r6, [r4, #12]
	struct uart_event evt = {
   157f2:	f011 f915 	bl	26a20 <memset>
   157f6:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   157f8:	a903      	add	r1, sp, #12
   157fa:	4620      	mov	r0, r4
	struct uart_event evt = {
   157fc:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   15800:	f00f fe0d 	bl	2541e <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   15804:	68b6      	ldr	r6, [r6, #8]
   15806:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   15808:	1c59      	adds	r1, r3, #1
   1580a:	d017      	beq.n	1583c <uarte_nrfx_isr_async+0x10c>
   1580c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   15810:	f240 30e7 	movw	r0, #999	; 0x3e7
   15814:	2100      	movs	r1, #0
		data->async->rx_timeout_left = data->async->rx_timeout;
   15816:	6673      	str	r3, [r6, #100]	; 0x64
			      K_MSEC(data->async->rx_timeout_slab),
   15818:	6e33      	ldr	r3, [r6, #96]	; 0x60
   1581a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1581e:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   15822:	fbce 010c 	smlal	r0, r1, lr, ip
   15826:	2300      	movs	r3, #0
   15828:	f7f6 fec6 	bl	c5b8 <__aeabi_uldivmod>
   1582c:	4602      	mov	r2, r0
   1582e:	e9cd 0700 	strd	r0, r7, [sp]
   15832:	463b      	mov	r3, r7
   15834:	f106 0068 	add.w	r0, r6, #104	; 0x68
   15838:	f00b ff9c 	bl	21774 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1583c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   15840:	b353      	cbz	r3, 15898 <uarte_nrfx_isr_async+0x168>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15842:	2600      	movs	r6, #0
	struct uart_event evt = {
   15844:	f04f 0804 	mov.w	r8, #4
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15848:	68e7      	ldr	r7, [r4, #12]
	struct uart_event evt = {
   1584a:	2214      	movs	r2, #20
   1584c:	4631      	mov	r1, r6
   1584e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
   15852:	a803      	add	r0, sp, #12
   15854:	f011 f8e4 	bl	26a20 <memset>
   15858:	f88d 800c 	strb.w	r8, [sp, #12]
		.data.rx_buf.buf = data->async->rx_buf,
   1585c:	68bb      	ldr	r3, [r7, #8]
	user_callback(dev, &evt);
   1585e:	4620      	mov	r0, r4
	struct uart_event evt = {
   15860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	user_callback(dev, &evt);
   15862:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   15864:	9304      	str	r3, [sp, #16]
	user_callback(dev, &evt);
   15866:	f00f fdda 	bl	2541e <user_callback>
	data->async->rx_buf = NULL;
   1586a:	68bb      	ldr	r3, [r7, #8]
   1586c:	641e      	str	r6, [r3, #64]	; 0x40
	if (data->async->rx_next_buf) {
   1586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15870:	b143      	cbz	r3, 15884 <uarte_nrfx_isr_async+0x154>
		user_callback(dev, &evt);
   15872:	4620      	mov	r0, r4
   15874:	a903      	add	r1, sp, #12
		evt.data.rx_buf.buf = data->async->rx_next_buf;
   15876:	9304      	str	r3, [sp, #16]
		evt.type = UART_RX_BUF_RELEASED;
   15878:	f88d 800c 	strb.w	r8, [sp, #12]
		user_callback(dev, &evt);
   1587c:	f00f fdcf 	bl	2541e <user_callback>
		data->async->rx_next_buf = NULL;
   15880:	68bb      	ldr	r3, [r7, #8]
   15882:	64de      	str	r6, [r3, #76]	; 0x4c
	return config->uarte_regs;
   15884:	6863      	ldr	r3, [r4, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15886:	4a58      	ldr	r2, [pc, #352]	; (159e8 <uarte_nrfx_isr_async+0x2b8>)
   15888:	681b      	ldr	r3, [r3, #0]
   1588a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1588e:	2205      	movs	r2, #5
   15890:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15894:	2201      	movs	r2, #1
   15896:	62da      	str	r2, [r3, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15898:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1589c:	b19b      	cbz	r3, 158c6 <uarte_nrfx_isr_async+0x196>
    return p_reg->INTENSET & mask;
   1589e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   158a2:	05da      	lsls	r2, r3, #23
   158a4:	d50f      	bpl.n	158c6 <uarte_nrfx_isr_async+0x196>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158a6:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   158a8:	f44f 7180 	mov.w	r1, #256	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158ac:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
	return config->uarte_regs;
   158b0:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   158b2:	68e2      	ldr	r2, [r4, #12]
	return config->uarte_regs;
   158b4:	681b      	ldr	r3, [r3, #0]
	k_timer_stop(&data->async->tx_timeout_timer);
   158b6:	6890      	ldr	r0, [r2, #8]
    p_reg->INTENCLR = mask;
   158b8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   158bc:	2101      	movs	r1, #1
   158be:	3010      	adds	r0, #16
   158c0:	60d9      	str	r1, [r3, #12]
	z_impl_k_timer_stop(timer);
   158c2:	f010 ff55 	bl	26770 <z_impl_k_timer_stop>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   158c6:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   158ca:	2b00      	cmp	r3, #0
   158cc:	f43f af45 	beq.w	1575a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   158d0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   158d4:	025b      	lsls	r3, r3, #9
   158d6:	f57f af40 	bpl.w	1575a <uarte_nrfx_isr_async+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158da:	2600      	movs	r6, #0
	if (!data->async->tx_buf) {
   158dc:	68e3      	ldr	r3, [r4, #12]
   158de:	f8c5 6158 	str.w	r6, [r5, #344]	; 0x158
   158e2:	689d      	ldr	r5, [r3, #8]
   158e4:	68ab      	ldr	r3, [r5, #8]
   158e6:	2b00      	cmp	r3, #0
   158e8:	f43f af37 	beq.w	1575a <uarte_nrfx_isr_async+0x2a>
	return config->uarte_regs;
   158ec:	6863      	ldr	r3, [r4, #4]
	struct uart_event evt = {
   158ee:	4631      	mov	r1, r6
	return config->uarte_regs;
   158f0:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   158f2:	2214      	movs	r2, #20
   158f4:	a803      	add	r0, sp, #12
    return p_reg->TXD.AMOUNT;
   158f6:	f8d3 754c 	ldr.w	r7, [r3, #1356]	; 0x54c
   158fa:	f011 f891 	bl	26a20 <memset>
		.data.tx.buf = data->async->tx_buf,
   158fe:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   15900:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	struct uart_event evt = {
   15904:	e9cd 3704 	strd	r3, r7, [sp, #16]
	if (amount == data->async->tx_size) {
   15908:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1590a:	4620      	mov	r0, r4
	if (amount == data->async->tx_size) {
   1590c:	1bdb      	subs	r3, r3, r7
   1590e:	bf18      	it	ne
   15910:	2301      	movne	r3, #1
   15912:	f88d 300c 	strb.w	r3, [sp, #12]
	data->async->tx_buf = NULL;
   15916:	60ae      	str	r6, [r5, #8]
	return config->uarte_regs;
   15918:	6863      	ldr	r3, [r4, #4]
	data->async->tx_size = 0;
   1591a:	60ee      	str	r6, [r5, #12]
	return config->uarte_regs;
   1591c:	681b      	ldr	r3, [r3, #0]
	user_callback(dev, &evt);
   1591e:	a903      	add	r1, sp, #12
   15920:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   15924:	f00f fd7b 	bl	2541e <user_callback>
   15928:	e717      	b.n	1575a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1592a:	2601      	movs	r6, #1
   1592c:	e734      	b.n	15798 <uarte_nrfx_isr_async+0x68>
   1592e:	2602      	movs	r6, #2
   15930:	e732      	b.n	15798 <uarte_nrfx_isr_async+0x68>
   15932:	2604      	movs	r6, #4
   15934:	e730      	b.n	15798 <uarte_nrfx_isr_async+0x68>
	return config->uarte_regs;
   15936:	6863      	ldr	r3, [r4, #4]
   15938:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1593a:	2301      	movs	r3, #1
   1593c:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
   15940:	3068      	adds	r0, #104	; 0x68
   15942:	f010 ff15 	bl	26770 <z_impl_k_timer_stop>
	int rx_len = rx_amount - data->async->rx_offset;
   15946:	68b3      	ldr	r3, [r6, #8]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   15948:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
   1594c:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
	data->async->rx_total_user_byte_cnt += rx_len;
   15950:	6d99      	ldr	r1, [r3, #88]	; 0x58
	int rx_len = rx_amount - data->async->rx_offset;
   15952:	eba2 0208 	sub.w	r2, r2, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   15956:	ea22 79e2 	bic.w	r9, r2, r2, asr #31
	if (!hw_rx_counting_enabled(data)) {
   1595a:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
	data->async->rx_total_user_byte_cnt += rx_len;
   1595e:	4449      	add	r1, r9
   15960:	6599      	str	r1, [r3, #88]	; 0x58
	if (!hw_rx_counting_enabled(data)) {
   15962:	b908      	cbnz	r0, 15968 <uarte_nrfx_isr_async+0x238>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   15964:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	if (rx_len > 0) {
   15968:	2a00      	cmp	r2, #0
   1596a:	dd11      	ble.n	15990 <uarte_nrfx_isr_async+0x260>
		struct uart_event evt = {
   1596c:	2100      	movs	r1, #0
   1596e:	2214      	movs	r2, #20
   15970:	a803      	add	r0, sp, #12
   15972:	f8d3 a040 	ldr.w	sl, [r3, #64]	; 0x40
   15976:	f011 f853 	bl	26a20 <memset>
   1597a:	2302      	movs	r3, #2
		user_callback(dev, &evt);
   1597c:	4620      	mov	r0, r4
   1597e:	a903      	add	r1, sp, #12
		struct uart_event evt = {
   15980:	e9cd a804 	strd	sl, r8, [sp, #16]
   15984:	f88d 300c 	strb.w	r3, [sp, #12]
   15988:	f8cd 9018 	str.w	r9, [sp, #24]
		user_callback(dev, &evt);
   1598c:	f00f fd47 	bl	2541e <user_callback>
	struct uart_event evt = {
   15990:	2214      	movs	r2, #20
   15992:	2100      	movs	r1, #0
   15994:	a803      	add	r0, sp, #12
   15996:	f011 f843 	bl	26a20 <memset>
   1599a:	2304      	movs	r3, #4
   1599c:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_buf.buf = data->async->rx_buf,
   159a0:	68b3      	ldr	r3, [r6, #8]
	user_callback(dev, &evt);
   159a2:	4620      	mov	r0, r4
	struct uart_event evt = {
   159a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	user_callback(dev, &evt);
   159a6:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   159a8:	9304      	str	r3, [sp, #16]
	user_callback(dev, &evt);
   159aa:	f00f fd38 	bl	2541e <user_callback>
	if (data->async->rx_next_buf) {
   159ae:	68b3      	ldr	r3, [r6, #8]
   159b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		data->async->rx_buf = data->async->rx_next_buf;
   159b2:	641a      	str	r2, [r3, #64]	; 0x40
	if (data->async->rx_next_buf) {
   159b4:	b182      	cbz	r2, 159d8 <uarte_nrfx_isr_async+0x2a8>
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   159b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   159b8:	645a      	str	r2, [r3, #68]	; 0x44
		data->async->rx_next_buf = NULL;
   159ba:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   159bc:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
		data->async->rx_offset = 0;
   159c0:	649a      	str	r2, [r3, #72]	; 0x48
    p_reg->SHORTS &= ~(mask);
   159c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   159c6:	f023 0320 	bic.w	r3, r3, #32
   159ca:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	data->async->is_in_irq = false;
   159ce:	2200      	movs	r2, #0
   159d0:	68b3      	ldr	r3, [r6, #8]
   159d2:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
   159d6:	e702      	b.n	157de <uarte_nrfx_isr_async+0xae>
		evt.type = UART_RX_DISABLED;
   159d8:	2305      	movs	r3, #5
		user_callback(dev, &evt);
   159da:	4620      	mov	r0, r4
   159dc:	a903      	add	r1, sp, #12
		evt.type = UART_RX_DISABLED;
   159de:	f88d 300c 	strb.w	r3, [sp, #12]
		user_callback(dev, &evt);
   159e2:	f00f fd1c 	bl	2541e <user_callback>
   159e6:	e7f2      	b.n	159ce <uarte_nrfx_isr_async+0x29e>
   159e8:	20029dbf 	.word	0x20029dbf

000159ec <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(struct device *unused)
{
   159ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   159ee:	2200      	movs	r2, #0
   159f0:	202a      	movs	r0, #42	; 0x2a
   159f2:	4611      	mov	r1, r2
   159f4:	f7fe f9c8 	bl	13d88 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   159f8:	4a06      	ldr	r2, [pc, #24]	; (15a14 <_bsdlib_init+0x28>)
   159fa:	ab01      	add	r3, sp, #4
   159fc:	ca07      	ldmia	r2, {r0, r1, r2}
   159fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   15a02:	4618      	mov	r0, r3
   15a04:	f008 fb34 	bl	1e070 <bsd_init>
   15a08:	4b03      	ldr	r3, [pc, #12]	; (15a18 <_bsdlib_init+0x2c>)
   15a0a:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   15a0c:	2000      	movs	r0, #0
   15a0e:	b005      	add	sp, #20
   15a10:	f85d fb04 	ldr.w	pc, [sp], #4
   15a14:	00027c20 	.word	0x00027c20
   15a18:	20021b00 	.word	0x20021b00

00015a1c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   15a1c:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   15a1e:	4c0d      	ldr	r4, [pc, #52]	; (15a54 <thread_monitor_entry_get+0x38>)
{
   15a20:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   15a22:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   15a24:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   15a26:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   15a28:	4b0b      	ldr	r3, [pc, #44]	; (15a58 <thread_monitor_entry_get+0x3c>)
   15a2a:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   15a2c:	6801      	ldr	r1, [r0, #0]
   15a2e:	4291      	cmp	r1, r2
   15a30:	d00e      	beq.n	15a50 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   15a32:	b151      	cbz	r1, 15a4a <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   15a34:	6841      	ldr	r1, [r0, #4]
   15a36:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   15a38:	42b1      	cmp	r1, r6
   15a3a:	bfc4      	itt	gt
   15a3c:	4604      	movgt	r4, r0
   15a3e:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   15a40:	3d01      	subs	r5, #1
   15a42:	f100 0008 	add.w	r0, r0, #8
   15a46:	d1f1      	bne.n	15a2c <thread_monitor_entry_get+0x10>
   15a48:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   15a4a:	3b01      	subs	r3, #1
	new_entry->id = id;
   15a4c:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   15a4e:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   15a50:	bd70      	pop	{r4, r5, r6, pc}
   15a52:	bf00      	nop
   15a54:	20021b10 	.word	0x20021b10
   15a58:	20021b04 	.word	0x20021b04

00015a5c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15a5c:	4668      	mov	r0, sp
   15a5e:	f020 0107 	bic.w	r1, r0, #7
   15a62:	468d      	mov	sp, r1
   15a64:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15a66:	4b0f      	ldr	r3, [pc, #60]	; (15aa4 <rpc_proxy_irq_handler+0x48>)
   15a68:	e8d3 2fef 	ldaex	r2, [r3]
   15a6c:	3201      	adds	r2, #1
   15a6e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   15a72:	2900      	cmp	r1, #0
   15a74:	d1f8      	bne.n	15a68 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   15a76:	f003 f975 	bl	18d64 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   15a7a:	4b0b      	ldr	r3, [pc, #44]	; (15aa8 <rpc_proxy_irq_handler+0x4c>)
   15a7c:	681c      	ldr	r4, [r3, #0]
   15a7e:	2c00      	cmp	r4, #0
   15a80:	bf38      	it	cc
   15a82:	2400      	movcc	r4, #0
   15a84:	b12c      	cbz	r4, 15a92 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   15a86:	1d20      	adds	r0, r4, #4
   15a88:	f00b fbce 	bl	21228 <z_impl_k_sem_give>
   15a8c:	6824      	ldr	r4, [r4, #0]
   15a8e:	2c00      	cmp	r4, #0
   15a90:	d1f8      	bne.n	15a84 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   15a92:	f7fe f98f 	bl	13db4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   15a96:	f7fe fb3b 	bl	14110 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15a9a:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   15a9e:	4685      	mov	sp, r0
   15aa0:	4770      	bx	lr
   15aa2:	bf00      	nop
   15aa4:	20021b04 	.word	0x20021b04
   15aa8:	20021b08 	.word	0x20021b08

00015aac <bsd_os_timedwait>:
{
   15aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ab0:	460c      	mov	r4, r1
   15ab2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   15ab4:	f010 fe25 	bl	26702 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   15ab8:	6823      	ldr	r3, [r4, #0]
   15aba:	4680      	mov	r8, r0
   15abc:	2b00      	cmp	r3, #0
   15abe:	468a      	mov	sl, r1
   15ac0:	d103      	bne.n	15aca <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   15ac2:	f00b faf9 	bl	210b8 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   15ac6:	203c      	movs	r0, #60	; 0x3c
   15ac8:	e091      	b.n	15bee <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   15aca:	bfbc      	itt	lt
   15acc:	f04f 33ff 	movlt.w	r3, #4294967295
   15ad0:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   15ad2:	2201      	movs	r2, #1
   15ad4:	2100      	movs	r1, #0
   15ad6:	a802      	add	r0, sp, #8
   15ad8:	f010 fdb1 	bl	2663e <z_impl_k_sem_init>
   15adc:	ad01      	add	r5, sp, #4
   15ade:	f04f 0320 	mov.w	r3, #32
   15ae2:	f3ef 8b11 	mrs	fp, BASEPRI
   15ae6:	f383 8811 	msr	BASEPRI, r3
   15aea:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   15aee:	f00b fb51 	bl	21194 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   15af2:	f7ff ff93 	bl	15a1c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   15af6:	4946      	ldr	r1, [pc, #280]	; (15c10 <bsd_os_timedwait+0x164>)
   15af8:	6843      	ldr	r3, [r0, #4]
   15afa:	680a      	ldr	r2, [r1, #0]
   15afc:	4689      	mov	r9, r1
   15afe:	4293      	cmp	r3, r2
   15b00:	f04f 0300 	mov.w	r3, #0
   15b04:	d108      	bne.n	15b18 <bsd_os_timedwait+0x6c>
	parent->next = child;
   15b06:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   15b08:	4b42      	ldr	r3, [pc, #264]	; (15c14 <bsd_os_timedwait+0x168>)
   15b0a:	685a      	ldr	r2, [r3, #4]
   15b0c:	2a00      	cmp	r2, #0
   15b0e:	d171      	bne.n	15bf4 <bsd_os_timedwait+0x148>
	list->head = node;
   15b10:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   15b14:	2301      	movs	r3, #1
}
   15b16:	e000      	b.n	15b1a <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   15b18:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   15b1a:	f38b 8811 	msr	BASEPRI, fp
   15b1e:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   15b22:	2b00      	cmp	r3, #0
   15b24:	d062      	beq.n	15bec <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   15b26:	6820      	ldr	r0, [r4, #0]
   15b28:	1c42      	adds	r2, r0, #1
   15b2a:	d066      	beq.n	15bfa <bsd_os_timedwait+0x14e>
   15b2c:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   15b30:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   15b34:	f240 30e7 	movw	r0, #999	; 0x3e7
   15b38:	2100      	movs	r1, #0
   15b3a:	2300      	movs	r3, #0
   15b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15b40:	fbce 010c 	smlal	r0, r1, lr, ip
   15b44:	f7f6 fd38 	bl	c5b8 <__aeabi_uldivmod>
   15b48:	2300      	movs	r3, #0
	return z_impl_k_sem_take(sem, timeout);
   15b4a:	4602      	mov	r2, r0
   15b4c:	a802      	add	r0, sp, #8
   15b4e:	f00b fb91 	bl	21274 <z_impl_k_sem_take>
	__asm__ volatile(
   15b52:	f04f 0320 	mov.w	r3, #32
   15b56:	f3ef 8b11 	mrs	fp, BASEPRI
   15b5a:	f383 8811 	msr	BASEPRI, r3
   15b5e:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15b62:	2000      	movs	r0, #0
   15b64:	4b2b      	ldr	r3, [pc, #172]	; (15c14 <bsd_os_timedwait+0x168>)
   15b66:	681a      	ldr	r2, [r3, #0]
   15b68:	b15a      	cbz	r2, 15b82 <bsd_os_timedwait+0xd6>
   15b6a:	42aa      	cmp	r2, r5
   15b6c:	d14d      	bne.n	15c0a <bsd_os_timedwait+0x15e>
Z_GENLIST_REMOVE(slist, snode)
   15b6e:	9d01      	ldr	r5, [sp, #4]
   15b70:	2800      	cmp	r0, #0
   15b72:	d144      	bne.n	15bfe <bsd_os_timedwait+0x152>
   15b74:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   15b76:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   15b78:	4291      	cmp	r1, r2
   15b7a:	d100      	bne.n	15b7e <bsd_os_timedwait+0xd2>
	list->tail = node;
   15b7c:	605d      	str	r5, [r3, #4]
	parent->next = child;
   15b7e:	2300      	movs	r3, #0
   15b80:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   15b82:	f00b fb07 	bl	21194 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   15b86:	f7ff ff49 	bl	15a1c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   15b8a:	f8d9 3000 	ldr.w	r3, [r9]
   15b8e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   15b90:	f38b 8811 	msr	BASEPRI, fp
   15b94:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   15b98:	6825      	ldr	r5, [r4, #0]
   15b9a:	1c6b      	adds	r3, r5, #1
   15b9c:	d026      	beq.n	15bec <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   15b9e:	f010 fdb0 	bl	26702 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   15ba2:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   15ba6:	468e      	mov	lr, r1
   15ba8:	fba8 890c 	umull	r8, r9, r8, ip
   15bac:	fba0 010c 	umull	r0, r1, r0, ip
   15bb0:	fb0c 990a 	mla	r9, ip, sl, r9
   15bb4:	fb0c 110e 	mla	r1, ip, lr, r1
   15bb8:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   15bbc:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   15bc0:	1952      	adds	r2, r2, r5
   15bc2:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   15bc6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   15bca:	0bc5      	lsrs	r5, r0, #15
   15bcc:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   15bd0:	1b56      	subs	r6, r2, r5
   15bd2:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   15bd6:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   15bda:	2e00      	cmp	r6, #0
   15bdc:	f177 0300 	sbcs.w	r3, r7, #0
   15be0:	bfb8      	it	lt
   15be2:	2600      	movlt	r6, #0
   15be4:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   15be6:	2e00      	cmp	r6, #0
   15be8:	f43f af6d 	beq.w	15ac6 <bsd_os_timedwait+0x1a>
	return 0;
   15bec:	2000      	movs	r0, #0
}
   15bee:	b009      	add	sp, #36	; 0x24
   15bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bf4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   15bf6:	605d      	str	r5, [r3, #4]
   15bf8:	e78c      	b.n	15b14 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   15bfa:	4603      	mov	r3, r0
   15bfc:	e7a5      	b.n	15b4a <bsd_os_timedwait+0x9e>
	parent->next = child;
   15bfe:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   15c00:	6859      	ldr	r1, [r3, #4]
   15c02:	4291      	cmp	r1, r2
	list->tail = node;
   15c04:	bf08      	it	eq
   15c06:	6058      	streq	r0, [r3, #4]
}
   15c08:	e7b9      	b.n	15b7e <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15c0a:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15c0c:	6812      	ldr	r2, [r2, #0]
   15c0e:	e7ab      	b.n	15b68 <bsd_os_timedwait+0xbc>
   15c10:	20021b04 	.word	0x20021b04
   15c14:	20021b08 	.word	0x20021b08

00015c18 <bsd_os_errno_set>:
	switch (err_code) {
   15c18:	283c      	cmp	r0, #60	; 0x3c
{
   15c1a:	4601      	mov	r1, r0
   15c1c:	b508      	push	{r3, lr}
	switch (err_code) {
   15c1e:	f300 808f 	bgt.w	15d40 <bsd_os_errno_set+0x128>
   15c22:	2800      	cmp	r0, #0
   15c24:	dc0d      	bgt.n	15c42 <bsd_os_errno_set+0x2a>
   15c26:	4bb0      	ldr	r3, [pc, #704]	; (15ee8 <bsd_os_errno_set+0x2d0>)
   15c28:	4ab0      	ldr	r2, [pc, #704]	; (15eec <bsd_os_errno_set+0x2d4>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   15c2a:	48b1      	ldr	r0, [pc, #708]	; (15ef0 <bsd_os_errno_set+0x2d8>)
   15c2c:	1ad2      	subs	r2, r2, r3
   15c2e:	08d2      	lsrs	r2, r2, #3
   15c30:	0192      	lsls	r2, r2, #6
   15c32:	f042 0201 	orr.w	r2, r2, #1
   15c36:	f00d fdbd 	bl	237b4 <log_1>
		errno = 0xBAADBAAD;
   15c3a:	f00e fb93 	bl	24364 <__errno>
   15c3e:	4bad      	ldr	r3, [pc, #692]	; (15ef4 <bsd_os_errno_set+0x2dc>)
   15c40:	e0bf      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
   15c42:	1e43      	subs	r3, r0, #1
   15c44:	2b3b      	cmp	r3, #59	; 0x3b
   15c46:	d8ee      	bhi.n	15c26 <bsd_os_errno_set+0xe>
   15c48:	a201      	add	r2, pc, #4	; (adr r2, 15c50 <bsd_os_errno_set+0x38>)
   15c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15c4e:	bf00      	nop
   15c50:	00015dbd 	.word	0x00015dbd
   15c54:	00015dc7 	.word	0x00015dc7
   15c58:	00015c27 	.word	0x00015c27
   15c5c:	00015c27 	.word	0x00015c27
   15c60:	00015dcf 	.word	0x00015dcf
   15c64:	00015c27 	.word	0x00015c27
   15c68:	00015c27 	.word	0x00015c27
   15c6c:	00015dd7 	.word	0x00015dd7
   15c70:	00015ddf 	.word	0x00015ddf
   15c74:	00015c27 	.word	0x00015c27
   15c78:	00015c27 	.word	0x00015c27
   15c7c:	00015de7 	.word	0x00015de7
   15c80:	00015def 	.word	0x00015def
   15c84:	00015df7 	.word	0x00015df7
   15c88:	00015c27 	.word	0x00015c27
   15c8c:	00015c27 	.word	0x00015c27
   15c90:	00015c27 	.word	0x00015c27
   15c94:	00015c27 	.word	0x00015c27
   15c98:	00015c27 	.word	0x00015c27
   15c9c:	00015c27 	.word	0x00015c27
   15ca0:	00015c27 	.word	0x00015c27
   15ca4:	00015dff 	.word	0x00015dff
   15ca8:	00015c27 	.word	0x00015c27
   15cac:	00015e07 	.word	0x00015e07
   15cb0:	00015c27 	.word	0x00015c27
   15cb4:	00015c27 	.word	0x00015c27
   15cb8:	00015c27 	.word	0x00015c27
   15cbc:	00015c27 	.word	0x00015c27
   15cc0:	00015c27 	.word	0x00015c27
   15cc4:	00015c27 	.word	0x00015c27
   15cc8:	00015c27 	.word	0x00015c27
   15ccc:	00015c27 	.word	0x00015c27
   15cd0:	00015c27 	.word	0x00015c27
   15cd4:	00015c27 	.word	0x00015c27
   15cd8:	00015e0f 	.word	0x00015e0f
   15cdc:	00015c27 	.word	0x00015c27
   15ce0:	00015e17 	.word	0x00015e17
   15ce4:	00015c27 	.word	0x00015c27
   15ce8:	00015c27 	.word	0x00015c27
   15cec:	00015edf 	.word	0x00015edf
   15cf0:	00015e1f 	.word	0x00015e1f
   15cf4:	00015e27 	.word	0x00015e27
   15cf8:	00015e2f 	.word	0x00015e2f
   15cfc:	00015e37 	.word	0x00015e37
   15d00:	00015e3f 	.word	0x00015e3f
   15d04:	00015c27 	.word	0x00015c27
   15d08:	00015e47 	.word	0x00015e47
   15d0c:	00015e4f 	.word	0x00015e4f
   15d10:	00015c27 	.word	0x00015c27
   15d14:	00015e57 	.word	0x00015e57
   15d18:	00015e5f 	.word	0x00015e5f
   15d1c:	00015e67 	.word	0x00015e67
   15d20:	00015c27 	.word	0x00015c27
   15d24:	00015e6f 	.word	0x00015e6f
   15d28:	00015c27 	.word	0x00015c27
   15d2c:	00015e77 	.word	0x00015e77
   15d30:	00015e7f 	.word	0x00015e7f
   15d34:	00015c27 	.word	0x00015c27
   15d38:	00015c27 	.word	0x00015c27
   15d3c:	00015e87 	.word	0x00015e87
	switch (err_code) {
   15d40:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   15d44:	2b18      	cmp	r3, #24
   15d46:	f63f af6e 	bhi.w	15c26 <bsd_os_errno_set+0xe>
   15d4a:	2b18      	cmp	r3, #24
   15d4c:	f63f af6b 	bhi.w	15c26 <bsd_os_errno_set+0xe>
   15d50:	a201      	add	r2, pc, #4	; (adr r2, 15d58 <bsd_os_errno_set+0x140>)
   15d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15d56:	bf00      	nop
   15d58:	00015e8f 	.word	0x00015e8f
   15d5c:	00015c27 	.word	0x00015c27
   15d60:	00015c27 	.word	0x00015c27
   15d64:	00015c27 	.word	0x00015c27
   15d68:	00015c27 	.word	0x00015c27
   15d6c:	00015c27 	.word	0x00015c27
   15d70:	00015c27 	.word	0x00015c27
   15d74:	00015e97 	.word	0x00015e97
   15d78:	00015c27 	.word	0x00015c27
   15d7c:	00015ea7 	.word	0x00015ea7
   15d80:	00015e9f 	.word	0x00015e9f
   15d84:	00015c27 	.word	0x00015c27
   15d88:	00015c27 	.word	0x00015c27
   15d8c:	00015c27 	.word	0x00015c27
   15d90:	00015c27 	.word	0x00015c27
   15d94:	00015c27 	.word	0x00015c27
   15d98:	00015c27 	.word	0x00015c27
   15d9c:	00015c27 	.word	0x00015c27
   15da0:	00015c27 	.word	0x00015c27
   15da4:	00015c27 	.word	0x00015c27
   15da8:	00015eaf 	.word	0x00015eaf
   15dac:	00015eb7 	.word	0x00015eb7
   15db0:	00015ec1 	.word	0x00015ec1
   15db4:	00015ecb 	.word	0x00015ecb
   15db8:	00015ed5 	.word	0x00015ed5
		errno = EPERM;
   15dbc:	f00e fad2 	bl	24364 <__errno>
   15dc0:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   15dc2:	6003      	str	r3, [r0, #0]
}
   15dc4:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   15dc6:	f00e facd 	bl	24364 <__errno>
   15dca:	2302      	movs	r3, #2
   15dcc:	e7f9      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EIO;
   15dce:	f00e fac9 	bl	24364 <__errno>
   15dd2:	2305      	movs	r3, #5
   15dd4:	e7f5      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ENOEXEC;
   15dd6:	f00e fac5 	bl	24364 <__errno>
   15dda:	2308      	movs	r3, #8
   15ddc:	e7f1      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EBADF;
   15dde:	f00e fac1 	bl	24364 <__errno>
   15de2:	2309      	movs	r3, #9
   15de4:	e7ed      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ENOMEM;
   15de6:	f00e fabd 	bl	24364 <__errno>
   15dea:	230c      	movs	r3, #12
   15dec:	e7e9      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EACCES;
   15dee:	f00e fab9 	bl	24364 <__errno>
   15df2:	230d      	movs	r3, #13
   15df4:	e7e5      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EFAULT;
   15df6:	f00e fab5 	bl	24364 <__errno>
   15dfa:	230e      	movs	r3, #14
   15dfc:	e7e1      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EINVAL;
   15dfe:	f00e fab1 	bl	24364 <__errno>
   15e02:	2316      	movs	r3, #22
   15e04:	e7dd      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EMFILE;
   15e06:	f00e faad 	bl	24364 <__errno>
   15e0a:	2318      	movs	r3, #24
   15e0c:	e7d9      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EAGAIN;
   15e0e:	f00e faa9 	bl	24364 <__errno>
   15e12:	230b      	movs	r3, #11
   15e14:	e7d5      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EDOM;
   15e16:	f00e faa5 	bl	24364 <__errno>
   15e1a:	2321      	movs	r3, #33	; 0x21
   15e1c:	e7d1      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   15e1e:	f00e faa1 	bl	24364 <__errno>
   15e22:	236b      	movs	r3, #107	; 0x6b
   15e24:	e7cd      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   15e26:	f00e fa9d 	bl	24364 <__errno>
   15e2a:	236d      	movs	r3, #109	; 0x6d
   15e2c:	e7c9      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   15e2e:	f00e fa99 	bl	24364 <__errno>
   15e32:	237b      	movs	r3, #123	; 0x7b
   15e34:	e7c5      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   15e36:	f00e fa95 	bl	24364 <__errno>
   15e3a:	237c      	movs	r3, #124	; 0x7c
   15e3c:	e7c1      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   15e3e:	f00e fa91 	bl	24364 <__errno>
   15e42:	235f      	movs	r3, #95	; 0x5f
   15e44:	e7bd      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   15e46:	f00e fa8d 	bl	24364 <__errno>
   15e4a:	236a      	movs	r3, #106	; 0x6a
   15e4c:	e7b9      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   15e4e:	f00e fa89 	bl	24364 <__errno>
   15e52:	2370      	movs	r3, #112	; 0x70
   15e54:	e7b5      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ENETDOWN;
   15e56:	f00e fa85 	bl	24364 <__errno>
   15e5a:	2373      	movs	r3, #115	; 0x73
   15e5c:	e7b1      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   15e5e:	f00e fa81 	bl	24364 <__errno>
   15e62:	2372      	movs	r3, #114	; 0x72
   15e64:	e7ad      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ENETRESET;
   15e66:	f00e fa7d 	bl	24364 <__errno>
   15e6a:	237e      	movs	r3, #126	; 0x7e
   15e6c:	e7a9      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ECONNRESET;
   15e6e:	f00e fa79 	bl	24364 <__errno>
   15e72:	2368      	movs	r3, #104	; 0x68
   15e74:	e7a5      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EISCONN;
   15e76:	f00e fa75 	bl	24364 <__errno>
   15e7a:	237f      	movs	r3, #127	; 0x7f
   15e7c:	e7a1      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ENOTCONN;
   15e7e:	f00e fa71 	bl	24364 <__errno>
   15e82:	2380      	movs	r3, #128	; 0x80
   15e84:	e79d      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   15e86:	f00e fa6d 	bl	24364 <__errno>
   15e8a:	2374      	movs	r3, #116	; 0x74
   15e8c:	e799      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ENOBUFS;
   15e8e:	f00e fa69 	bl	24364 <__errno>
   15e92:	2369      	movs	r3, #105	; 0x69
   15e94:	e795      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   15e96:	f00e fa65 	bl	24364 <__errno>
   15e9a:	2375      	movs	r3, #117	; 0x75
   15e9c:	e791      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   15e9e:	f00e fa61 	bl	24364 <__errno>
   15ea2:	2377      	movs	r3, #119	; 0x77
   15ea4:	e78d      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EALREADY;
   15ea6:	f00e fa5d 	bl	24364 <__errno>
   15eaa:	2378      	movs	r3, #120	; 0x78
   15eac:	e789      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ECANCELED;
   15eae:	f00e fa59 	bl	24364 <__errno>
   15eb2:	238c      	movs	r3, #140	; 0x8c
   15eb4:	e785      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = ENOKEY;
   15eb6:	f00e fa55 	bl	24364 <__errno>
   15eba:	f240 73d1 	movw	r3, #2001	; 0x7d1
   15ebe:	e780      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   15ec0:	f00e fa50 	bl	24364 <__errno>
   15ec4:	f240 73d2 	movw	r3, #2002	; 0x7d2
   15ec8:	e77b      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   15eca:	f00e fa4b 	bl	24364 <__errno>
   15ece:	f240 73d3 	movw	r3, #2003	; 0x7d3
   15ed2:	e776      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   15ed4:	f00e fa46 	bl	24364 <__errno>
   15ed8:	f240 73d4 	movw	r3, #2004	; 0x7d4
   15edc:	e771      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   15ede:	f00e fa41 	bl	24364 <__errno>
   15ee2:	237a      	movs	r3, #122	; 0x7a
   15ee4:	e76d      	b.n	15dc2 <bsd_os_errno_set+0x1aa>
   15ee6:	bf00      	nop
   15ee8:	00027b20 	.word	0x00027b20
   15eec:	00027b40 	.word	0x00027b40
   15ef0:	0002a083 	.word	0x0002a083
   15ef4:	baadbaad 	.word	0xbaadbaad

00015ef8 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15efc:	4b01      	ldr	r3, [pc, #4]	; (15f04 <bsd_os_application_irq_set+0xc>)
   15efe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15f02:	4770      	bx	lr
   15f04:	e000e100 	.word	0xe000e100

00015f08 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15f0c:	4b01      	ldr	r3, [pc, #4]	; (15f14 <bsd_os_application_irq_clear+0xc>)
   15f0e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15f12:	4770      	bx	lr
   15f14:	e000e100 	.word	0xe000e100

00015f18 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15f18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15f1c:	4b01      	ldr	r3, [pc, #4]	; (15f24 <bsd_os_trace_irq_set+0xc>)
   15f1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15f22:	4770      	bx	lr
   15f24:	e000e100 	.word	0xe000e100

00015f28 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15f28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15f2c:	4b01      	ldr	r3, [pc, #4]	; (15f34 <bsd_os_trace_irq_clear+0xc>)
   15f2e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15f32:	4770      	bx	lr
   15f34:	e000e100 	.word	0xe000e100

00015f38 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   15f38:	b508      	push	{r3, lr}
	list->head = NULL;
   15f3a:	2300      	movs	r3, #0
   15f3c:	4a07      	ldr	r2, [pc, #28]	; (15f5c <bsd_os_init+0x24>)
	list->tail = NULL;
   15f3e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15f42:	4a07      	ldr	r2, [pc, #28]	; (15f60 <bsd_os_init+0x28>)
   15f44:	e8d2 1fef 	ldaex	r1, [r2]
   15f48:	e8c2 3fe0 	stlex	r0, r3, [r2]
   15f4c:	2800      	cmp	r0, #0
   15f4e:	d1f9      	bne.n	15f44 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   15f50:	f00f fc35 	bl	257be <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   15f54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   15f58:	f00f bc26 	b.w	257a8 <trace_task_create>
   15f5c:	20021b08 	.word	0x20021b08
   15f60:	20021b04 	.word	0x20021b04

00015f64 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   15f64:	f240 2302 	movw	r3, #514	; 0x202
   15f68:	4298      	cmp	r0, r3
   15f6a:	d05c      	beq.n	16026 <z_to_nrf_optname+0xc2>
   15f6c:	dc07      	bgt.n	15f7e <z_to_nrf_optname+0x1a>
   15f6e:	2801      	cmp	r0, #1
   15f70:	d043      	beq.n	15ffa <z_to_nrf_optname+0x96>
   15f72:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   15f76:	d035      	beq.n	15fe4 <z_to_nrf_optname+0x80>
   15f78:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   15f7c:	4770      	bx	lr
	switch (z_in_level) {
   15f7e:	f240 2303 	movw	r3, #515	; 0x203
   15f82:	4298      	cmp	r0, r3
   15f84:	d1f8      	bne.n	15f78 <z_to_nrf_optname+0x14>
		switch (z_in_optname) {
   15f86:	3901      	subs	r1, #1
   15f88:	2913      	cmp	r1, #19
   15f8a:	d8f5      	bhi.n	15f78 <z_to_nrf_optname+0x14>
   15f8c:	a301      	add	r3, pc, #4	; (adr r3, 15f94 <z_to_nrf_optname+0x30>)
   15f8e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   15f92:	bf00      	nop
   15f94:	00016033 	.word	0x00016033
   15f98:	00016017 	.word	0x00016017
   15f9c:	00015ff7 	.word	0x00015ff7
   15fa0:	00016007 	.word	0x00016007
   15fa4:	0001601b 	.word	0x0001601b
   15fa8:	0001601f 	.word	0x0001601f
   15fac:	00016023 	.word	0x00016023
   15fb0:	00015f79 	.word	0x00015f79
   15fb4:	00015f79 	.word	0x00015f79
   15fb8:	00015f79 	.word	0x00015f79
   15fbc:	00015f79 	.word	0x00015f79
   15fc0:	00015f79 	.word	0x00015f79
   15fc4:	00015f79 	.word	0x00015f79
   15fc8:	00015f79 	.word	0x00015f79
   15fcc:	00015f79 	.word	0x00015f79
   15fd0:	00015f79 	.word	0x00015f79
   15fd4:	00015f79 	.word	0x00015f79
   15fd8:	00015f79 	.word	0x00015f79
   15fdc:	00015f79 	.word	0x00015f79
   15fe0:	0001600d 	.word	0x0001600d
		switch (z_in_optname) {
   15fe4:	3901      	subs	r1, #1
   15fe6:	2906      	cmp	r1, #6
   15fe8:	d8c6      	bhi.n	15f78 <z_to_nrf_optname+0x14>
   15fea:	e8df f001 	tbb	[pc, r1]
   15fee:	1614      	.short	0x1614
   15ff0:	220c1a18 	.word	0x220c1a18
   15ff4:	04          	.byte	0x04
   15ff5:	00          	.byte	0x00
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   15ff6:	2303      	movs	r3, #3
   15ff8:	e006      	b.n	16008 <z_to_nrf_optname+0xa4>
		switch (z_in_optname) {
   15ffa:	2914      	cmp	r1, #20
   15ffc:	d006      	beq.n	1600c <z_to_nrf_optname+0xa8>
   15ffe:	2919      	cmp	r1, #25
   16000:	d006      	beq.n	16010 <z_to_nrf_optname+0xac>
   16002:	2904      	cmp	r1, #4
   16004:	d1b8      	bne.n	15f78 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   16006:	2304      	movs	r3, #4
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   16008:	6013      	str	r3, [r2, #0]
   1600a:	e002      	b.n	16012 <z_to_nrf_optname+0xae>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1600c:	2314      	movs	r3, #20
   1600e:	e7fb      	b.n	16008 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   16010:	6011      	str	r1, [r2, #0]
	int retval = 0;
   16012:	2000      	movs	r0, #0
			break;
   16014:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   16016:	2302      	movs	r3, #2
   16018:	e7f6      	b.n	16008 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1601a:	2305      	movs	r3, #5
   1601c:	e7f4      	b.n	16008 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   1601e:	2306      	movs	r3, #6
   16020:	e7f2      	b.n	16008 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   16022:	2307      	movs	r3, #7
   16024:	e7f0      	b.n	16008 <z_to_nrf_optname+0xa4>
		switch (z_in_optname) {
   16026:	2902      	cmp	r1, #2
   16028:	d0f5      	beq.n	16016 <z_to_nrf_optname+0xb2>
   1602a:	2903      	cmp	r1, #3
   1602c:	d0e3      	beq.n	15ff6 <z_to_nrf_optname+0x92>
   1602e:	2901      	cmp	r1, #1
   16030:	d1a2      	bne.n	15f78 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   16032:	2301      	movs	r3, #1
   16034:	e7e8      	b.n	16008 <z_to_nrf_optname+0xa4>
   16036:	bf00      	nop

00016038 <nrf91_socket_offload_ioctl>:
	return retval;
}

static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
   16038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1603c:	f5a1 7380 	sub.w	r3, r1, #256	; 0x100
   16040:	b091      	sub	sp, #68	; 0x44
	int sd = OBJ_TO_SD(obj);
   16042:	3801      	subs	r0, #1

	switch (request) {
   16044:	2b05      	cmp	r3, #5
   16046:	d879      	bhi.n	1613c <nrf91_socket_offload_ioctl+0x104>
   16048:	e8df f003 	tbb	[pc, r3]
   1604c:	94787809 	.word	0x94787809
   16050:	0d03      	.short	0x0d03
	int sd = OBJ_TO_SD(obj);
   16052:	f06f 045e 	mvn.w	r4, #94	; 0x5e
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   16056:	4620      	mov	r0, r4
   16058:	b011      	add	sp, #68	; 0x44
   1605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return nrf_close(sd);
   1605e:	f008 fa49 	bl	1e4f4 <nrf_close>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   16062:	4604      	mov	r4, r0
		break;
   16064:	e7f7      	b.n	16056 <nrf91_socket_offload_ioctl+0x1e>
	for (int i = 0; i < nfds; i++) {
   16066:	f04f 0800 	mov.w	r8, #0
		nfds = va_arg(args, int);
   1606a:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1606e:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   16070:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   16074:	4668      	mov	r0, sp
   16076:	2240      	movs	r2, #64	; 0x40
   16078:	f010 fcd2 	bl	26a20 <memset>
	for (int i = 0; i < nfds; i++) {
   1607c:	466e      	mov	r6, sp
   1607e:	4655      	mov	r5, sl
   16080:	4657      	mov	r7, sl
	int retval = 0;
   16082:	4644      	mov	r4, r8
		tmp[i].events = 0;
   16084:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   16086:	493d      	ldr	r1, [pc, #244]	; (1617c <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   16088:	45c1      	cmp	r9, r8
   1608a:	dc32      	bgt.n	160f2 <nrf91_socket_offload_ioctl+0xba>
	if (retval > 0) {
   1608c:	2c00      	cmp	r4, #0
   1608e:	dce2      	bgt.n	16056 <nrf91_socket_offload_ioctl+0x1e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   16090:	465a      	mov	r2, fp
   16092:	4649      	mov	r1, r9
   16094:	4668      	mov	r0, sp
   16096:	f008 fb2d 	bl	1e6f4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1609a:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1609c:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   1609e:	4599      	cmp	r9, r3
   160a0:	ddd9      	ble.n	16056 <nrf91_socket_offload_ioctl+0x1e>
		if (fds[i].fd < 0) {
   160a2:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   160a6:	2a00      	cmp	r2, #0
   160a8:	db20      	blt.n	160ec <nrf91_socket_offload_ioctl+0xb4>
		if (tmp[i].revents & NRF_POLLIN) {
   160aa:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   160ae:	88d2      	ldrh	r2, [r2, #6]
   160b0:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   160b2:	bf42      	ittt	mi
   160b4:	88e9      	ldrhmi	r1, [r5, #6]
   160b6:	f041 0101 	orrmi.w	r1, r1, #1
   160ba:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   160bc:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   160be:	bf42      	ittt	mi
   160c0:	88e9      	ldrhmi	r1, [r5, #6]
   160c2:	f041 0104 	orrmi.w	r1, r1, #4
   160c6:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   160c8:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   160ca:	bf42      	ittt	mi
   160cc:	88e9      	ldrhmi	r1, [r5, #6]
   160ce:	f041 0108 	orrmi.w	r1, r1, #8
   160d2:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   160d4:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   160d6:	bf42      	ittt	mi
   160d8:	88e9      	ldrhmi	r1, [r5, #6]
   160da:	f041 0120 	orrmi.w	r1, r1, #32
   160de:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   160e0:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   160e2:	bf42      	ittt	mi
   160e4:	88ea      	ldrhmi	r2, [r5, #6]
   160e6:	f042 0210 	orrmi.w	r2, r2, #16
   160ea:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   160ec:	3301      	adds	r3, #1
   160ee:	3508      	adds	r5, #8
   160f0:	e7d5      	b.n	1609e <nrf91_socket_offload_ioctl+0x66>
		if (fds[i].fd < 0) {
   160f2:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   160f4:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   160f6:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   160f8:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   160fa:	da05      	bge.n	16108 <nrf91_socket_offload_ioctl+0xd0>
			tmp[i].fd = fds[i].fd;
   160fc:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   160fe:	f108 0801 	add.w	r8, r8, #1
   16102:	3608      	adds	r6, #8
   16104:	3708      	adds	r7, #8
   16106:	e7bf      	b.n	16088 <nrf91_socket_offload_ioctl+0x50>
			obj = z_get_fd_obj(fds[i].fd,
   16108:	2286      	movs	r2, #134	; 0x86
   1610a:	f7fc f9b5 	bl	12478 <z_get_fd_obj>
			if (obj != NULL) {
   1610e:	2300      	movs	r3, #0
   16110:	491a      	ldr	r1, [pc, #104]	; (1617c <nrf91_socket_offload_ioctl+0x144>)
   16112:	b178      	cbz	r0, 16134 <nrf91_socket_offload_ioctl+0xfc>
				tmp[i].fd = OBJ_TO_SD(obj);
   16114:	3801      	subs	r0, #1
   16116:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   16118:	88b8      	ldrh	r0, [r7, #4]
   1611a:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   1611c:	bf42      	ittt	mi
   1611e:	88b2      	ldrhmi	r2, [r6, #4]
   16120:	f042 0201 	orrmi.w	r2, r2, #1
   16124:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   16126:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   16128:	bf42      	ittt	mi
   1612a:	88b2      	ldrhmi	r2, [r6, #4]
   1612c:	f042 0202 	orrmi.w	r2, r2, #2
   16130:	80b2      	strhmi	r2, [r6, #4]
   16132:	e7e4      	b.n	160fe <nrf91_socket_offload_ioctl+0xc6>
				fds[i].revents = POLLNVAL;
   16134:	2220      	movs	r2, #32
				retval++;
   16136:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   16138:	80fa      	strh	r2, [r7, #6]
				retval++;
   1613a:	e7ed      	b.n	16118 <nrf91_socket_offload_ioctl+0xe0>
	switch (cmd) {
   1613c:	2903      	cmp	r1, #3
   1613e:	d00a      	beq.n	16156 <nrf91_socket_offload_ioctl+0x11e>
   16140:	2904      	cmp	r1, #4
   16142:	d110      	bne.n	16166 <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   16144:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   16146:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1614a:	d10c      	bne.n	16166 <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1614c:	2101      	movs	r1, #1
   1614e:	1392      	asrs	r2, r2, #14
   16150:	f008 fad2 	bl	1e6f8 <nrf_fcntl>
   16154:	e785      	b.n	16062 <nrf91_socket_offload_ioctl+0x2a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   16156:	2200      	movs	r2, #0
   16158:	2102      	movs	r1, #2
   1615a:	f008 facd 	bl	1e6f8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1615e:	0380      	lsls	r0, r0, #14
   16160:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   16164:	e777      	b.n	16056 <nrf91_socket_offload_ioctl+0x1e>
	errno = EINVAL;
   16166:	f00e f8fd 	bl	24364 <__errno>
   1616a:	2316      	movs	r3, #22
	return retval;
   1616c:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   16170:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   16172:	e770      	b.n	16056 <nrf91_socket_offload_ioctl+0x1e>
		return -EXDEV;
   16174:	f06f 0411 	mvn.w	r4, #17
   16178:	e76d      	b.n	16056 <nrf91_socket_offload_ioctl+0x1e>
   1617a:	bf00      	nop
   1617c:	0002807c 	.word	0x0002807c

00016180 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   16180:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   16182:	4b03      	ldr	r3, [pc, #12]	; (16190 <nrf91_socket_iface_init+0x10>)
   16184:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   16186:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   16188:	4802      	ldr	r0, [pc, #8]	; (16194 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1618a:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1618c:	f7fd ba9c 	b.w	136c8 <socket_offload_dns_register>
   16190:	20021b60 	.word	0x20021b60
   16194:	00028074 	.word	0x00028074

00016198 <nrf91_socket_offload_accept>:
{
   16198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1619c:	b08a      	sub	sp, #40	; 0x28
   1619e:	4607      	mov	r7, r0
   161a0:	460c      	mov	r4, r1
   161a2:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   161a4:	f7fc f996 	bl	124d4 <z_reserve_fd>
   161a8:	4606      	mov	r6, r0
	if (fd < 0) {
   161aa:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   161ac:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   161b0:	da05      	bge.n	161be <nrf91_socket_offload_accept+0x26>
	return -1;
   161b2:	f04f 36ff 	mov.w	r6, #4294967295
}
   161b6:	4630      	mov	r0, r6
   161b8:	b00a      	add	sp, #40	; 0x28
   161ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   161be:	b31c      	cbz	r4, 16208 <nrf91_socket_offload_accept+0x70>
   161c0:	b32d      	cbz	r5, 1620e <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   161c2:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   161c4:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   161c6:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   161c8:	bf0c      	ite	eq
   161ca:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   161cc:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   161ce:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   161d0:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   161d2:	4639      	mov	r1, r7
   161d4:	f008 fa2a 	bl	1e62c <nrf_accept>
	if (new_sd < 0) {
   161d8:	f1b0 0800 	subs.w	r8, r0, #0
   161dc:	dbe9      	blt.n	161b2 <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   161de:	b164      	cbz	r4, 161fa <nrf91_socket_offload_accept+0x62>
   161e0:	b15d      	cbz	r5, 161fa <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   161e2:	687b      	ldr	r3, [r7, #4]
   161e4:	2b02      	cmp	r3, #2
   161e6:	d115      	bne.n	16214 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   161e8:	2308      	movs	r3, #8
   161ea:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   161ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   161f0:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   161f2:	2301      	movs	r3, #1
   161f4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   161f6:	9b04      	ldr	r3, [sp, #16]
   161f8:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   161fa:	4630      	mov	r0, r6
   161fc:	4a0c      	ldr	r2, [pc, #48]	; (16230 <nrf91_socket_offload_accept+0x98>)
   161fe:	f108 0101 	add.w	r1, r8, #1
   16202:	f7fc f98b 	bl	1251c <z_finalize_fd>
	return fd;
   16206:	e7d6      	b.n	161b6 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   16208:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1620a:	4627      	mov	r7, r4
   1620c:	e7e1      	b.n	161d2 <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1620e:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   16210:	462f      	mov	r7, r5
   16212:	e7de      	b.n	161d2 <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   16214:	2b0a      	cmp	r3, #10
   16216:	d106      	bne.n	16226 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   16218:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1621a:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1621c:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1621e:	a901      	add	r1, sp, #4
   16220:	f00f fbc1 	bl	259a6 <nrf_to_z_ipv6>
   16224:	e7e9      	b.n	161fa <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   16226:	4630      	mov	r0, r6
   16228:	f7fc f982 	bl	12530 <z_free_fd>
   1622c:	e7c1      	b.n	161b2 <nrf91_socket_offload_accept+0x1a>
   1622e:	bf00      	nop
   16230:	0002807c 	.word	0x0002807c

00016234 <nrf91_socket_offload_sendmsg>:
{
   16234:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16238:	4607      	mov	r7, r0
   1623a:	4690      	mov	r8, r2
	if (msg == NULL) {
   1623c:	460c      	mov	r4, r1
   1623e:	b319      	cbz	r1, 16288 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   16240:	2300      	movs	r3, #0
	ssize_t len = 0;
   16242:	461a      	mov	r2, r3
   16244:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   16246:	4283      	cmp	r3, r0
   16248:	d128      	bne.n	1629c <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   1624a:	2a80      	cmp	r2, #128	; 0x80
   1624c:	d857      	bhi.n	162fe <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1624e:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   16250:	f04f 32ff 	mov.w	r2, #4294967295
   16254:	f04f 33ff 	mov.w	r3, #4294967295
   16258:	482a      	ldr	r0, [pc, #168]	; (16304 <nrf91_socket_offload_sendmsg+0xd0>)
   1625a:	f00a fb45 	bl	208e8 <z_impl_k_mutex_lock>
		len = 0;
   1625e:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   16260:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 16308 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   16264:	68e3      	ldr	r3, [r4, #12]
   16266:	42ab      	cmp	r3, r5
   16268:	d81f      	bhi.n	162aa <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   1626a:	6863      	ldr	r3, [r4, #4]
   1626c:	4632      	mov	r2, r6
   1626e:	9301      	str	r3, [sp, #4]
   16270:	6823      	ldr	r3, [r4, #0]
   16272:	4638      	mov	r0, r7
   16274:	9300      	str	r3, [sp, #0]
   16276:	4924      	ldr	r1, [pc, #144]	; (16308 <nrf91_socket_offload_sendmsg+0xd4>)
   16278:	4643      	mov	r3, r8
   1627a:	f00f fce5 	bl	25c48 <nrf91_socket_offload_sendto>
   1627e:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   16280:	4820      	ldr	r0, [pc, #128]	; (16304 <nrf91_socket_offload_sendmsg+0xd0>)
   16282:	f00a fba9 	bl	209d8 <z_impl_k_mutex_unlock>
		return ret;
   16286:	e005      	b.n	16294 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   16288:	f00e f86c 	bl	24364 <__errno>
   1628c:	2316      	movs	r3, #22
		return -1;
   1628e:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   16292:	6003      	str	r3, [r0, #0]
}
   16294:	4628      	mov	r0, r5
   16296:	b002      	add	sp, #8
   16298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1629c:	68a1      	ldr	r1, [r4, #8]
   1629e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   162a2:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   162a4:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   162a6:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   162a8:	e7cd      	b.n	16246 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   162aa:	68a1      	ldr	r1, [r4, #8]
   162ac:	eb09 0006 	add.w	r0, r9, r6
   162b0:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   162b4:	685a      	ldr	r2, [r3, #4]
   162b6:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   162ba:	f010 fba4 	bl	26a06 <memcpy>
			len += msg->msg_iov[i].iov_len;
   162be:	68a3      	ldr	r3, [r4, #8]
   162c0:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   162c4:	4453      	add	r3, sl
   162c6:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   162c8:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   162ca:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   162cc:	e7ca      	b.n	16264 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   162ce:	68a1      	ldr	r1, [r4, #8]
   162d0:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   162d4:	685a      	ldr	r2, [r3, #4]
   162d6:	b162      	cbz	r2, 162f2 <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   162d8:	6863      	ldr	r3, [r4, #4]
   162da:	4638      	mov	r0, r7
   162dc:	9301      	str	r3, [sp, #4]
   162de:	6823      	ldr	r3, [r4, #0]
   162e0:	9300      	str	r3, [sp, #0]
   162e2:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   162e6:	4643      	mov	r3, r8
   162e8:	f00f fcae 	bl	25c48 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   162ec:	1e05      	subs	r5, r0, #0
   162ee:	dbd1      	blt.n	16294 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   162f0:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   162f2:	3601      	adds	r6, #1
   162f4:	68e3      	ldr	r3, [r4, #12]
   162f6:	42b3      	cmp	r3, r6
   162f8:	d8e9      	bhi.n	162ce <nrf91_socket_offload_sendmsg+0x9a>
   162fa:	464d      	mov	r5, r9
   162fc:	e7ca      	b.n	16294 <nrf91_socket_offload_sendmsg+0x60>
   162fe:	2600      	movs	r6, #0
	len = 0;
   16300:	46b1      	mov	r9, r6
   16302:	e7f7      	b.n	162f4 <nrf91_socket_offload_sendmsg+0xc0>
   16304:	200207d8 	.word	0x200207d8
   16308:	20029dc4 	.word	0x20029dc4

0001630c <nrf91_socket_create>:
{
   1630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1630e:	4606      	mov	r6, r0
   16310:	460d      	mov	r5, r1
   16312:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   16314:	f7fc f8de 	bl	124d4 <z_reserve_fd>
	if (fd < 0) {
   16318:	1e04      	subs	r4, r0, #0
   1631a:	db0d      	blt.n	16338 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   1631c:	b2b0      	uxth	r0, r6
   1631e:	f00f fa65 	bl	257ec <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   16322:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   16326:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   16328:	d109      	bne.n	1633e <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   1632a:	f00e f81b 	bl	24364 <__errno>
   1632e:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   16330:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   16332:	4620      	mov	r0, r4
   16334:	f7fc f8fc 	bl	12530 <z_free_fd>
		return -1;
   16338:	f04f 34ff 	mov.w	r4, #4294967295
   1633c:	e01b      	b.n	16376 <nrf91_socket_create+0x6a>
	switch (socktype) {
   1633e:	2d03      	cmp	r5, #3
   16340:	d003      	beq.n	1634a <nrf91_socket_create+0x3e>
   16342:	2d04      	cmp	r5, #4
   16344:	bf08      	it	eq
   16346:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1634a:	4638      	mov	r0, r7
   1634c:	f00f fa6a 	bl	25824 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   16350:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   16354:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   16356:	d103      	bne.n	16360 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   16358:	f00e f804 	bl	24364 <__errno>
   1635c:	237b      	movs	r3, #123	; 0x7b
   1635e:	e7e7      	b.n	16330 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   16360:	4629      	mov	r1, r5
   16362:	4630      	mov	r0, r6
   16364:	f008 f8b4 	bl	1e4d0 <nrf_socket>
	if (sd < 0) {
   16368:	1e01      	subs	r1, r0, #0
   1636a:	dbe2      	blt.n	16332 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   1636c:	4620      	mov	r0, r4
   1636e:	4a03      	ldr	r2, [pc, #12]	; (1637c <nrf91_socket_create+0x70>)
   16370:	3101      	adds	r1, #1
   16372:	f7fc f8d3 	bl	1251c <z_finalize_fd>
}
   16376:	4620      	mov	r0, r4
   16378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1637a:	bf00      	nop
   1637c:	0002807c 	.word	0x0002807c

00016380 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   16380:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   16382:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   16384:	b118      	cbz	r0, 1638e <callback_worker+0xe>
		data->callback(data->data);
   16386:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   1638a:	300c      	adds	r0, #12
   1638c:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   1638e:	4803      	ldr	r0, [pc, #12]	; (1639c <callback_worker+0x1c>)
   16390:	a901      	add	r1, sp, #4
   16392:	f00a f9ad 	bl	206f0 <k_mem_slab_free>
}
   16396:	b003      	add	sp, #12
   16398:	f85d fb04 	ldr.w	pc, [sp], #4
   1639c:	200206d8 	.word	0x200206d8

000163a0 <open_socket>:
{
   163a0:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   163a2:	f240 2201 	movw	r2, #513	; 0x201
   163a6:	2102      	movs	r1, #2
   163a8:	2066      	movs	r0, #102	; 0x66
   163aa:	f7fd f887 	bl	134bc <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   163ae:	4b05      	ldr	r3, [pc, #20]	; (163c4 <open_socket+0x24>)
   163b0:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   163b2:	3001      	adds	r0, #1
   163b4:	d104      	bne.n	163c0 <open_socket+0x20>
		return -errno;
   163b6:	f00d ffd5 	bl	24364 <__errno>
   163ba:	6800      	ldr	r0, [r0, #0]
   163bc:	4240      	negs	r0, r0
}
   163be:	bd08      	pop	{r3, pc}
	return 0;
   163c0:	2000      	movs	r0, #0
   163c2:	e7fc      	b.n	163be <open_socket+0x1e>
   163c4:	20021b64 	.word	0x20021b64

000163c8 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   163c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   163ca:	4604      	mov	r4, r0
   163cc:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   163ce:	f7f6 fd4f 	bl	ce70 <strlen>
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   163d2:	4b20      	ldr	r3, [pc, #128]	; (16454 <at_write+0x8c>)
	int bytes_to_send = strlen(cmd);
   163d4:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   163d6:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   163d8:	2300      	movs	r3, #0
   163da:	4621      	mov	r1, r4
   163dc:	e9cd 3300 	strd	r3, r3, [sp]
   163e0:	4632      	mov	r2, r6
   163e2:	f00d fd91 	bl	23f08 <z_impl_zsock_sendto>

	if (bytes_sent == -1) {
   163e6:	1c43      	adds	r3, r0, #1
   163e8:	4604      	mov	r4, r0
   163ea:	d11c      	bne.n	16426 <at_write+0x5e>
   163ec:	4a1a      	ldr	r2, [pc, #104]	; (16458 <at_write+0x90>)
   163ee:	4c1b      	ldr	r4, [pc, #108]	; (1645c <at_write+0x94>)
   163f0:	1aa4      	subs	r4, r4, r2
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   163f2:	f00d ffb7 	bl	24364 <__errno>
   163f6:	08e4      	lsrs	r4, r4, #3
   163f8:	01a4      	lsls	r4, r4, #6
   163fa:	f044 0401 	orr.w	r4, r4, #1
   163fe:	6801      	ldr	r1, [r0, #0]
   16400:	4622      	mov	r2, r4
   16402:	4817      	ldr	r0, [pc, #92]	; (16460 <at_write+0x98>)
   16404:	f00d f9d6 	bl	237b4 <log_1>
		ret.code  = -errno;
   16408:	f00d ffac 	bl	24364 <__errno>
   1640c:	6803      	ldr	r3, [r0, #0]
   1640e:	425b      	negs	r3, r3
   16410:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_ERROR;
   16412:	2301      	movs	r3, #1
   16414:	f88d 300c 	strb.w	r3, [sp, #12]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   16418:	b115      	cbz	r5, 16420 <at_write+0x58>
		*state = ret.state;
   1641a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1641e:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   16420:	9802      	ldr	r0, [sp, #8]
   16422:	b004      	add	sp, #16
   16424:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_msgq_get(msgq, data, timeout);
   16426:	f04f 32ff 	mov.w	r2, #4294967295
   1642a:	f04f 33ff 	mov.w	r3, #4294967295
   1642e:	480d      	ldr	r0, [pc, #52]	; (16464 <at_write+0x9c>)
   16430:	a902      	add	r1, sp, #8
   16432:	f00a f9fb 	bl	2082c <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   16436:	42a6      	cmp	r6, r4
   16438:	d0ee      	beq.n	16418 <at_write+0x50>
   1643a:	4a07      	ldr	r2, [pc, #28]	; (16458 <at_write+0x90>)
   1643c:	4b07      	ldr	r3, [pc, #28]	; (1645c <at_write+0x94>)
			LOG_ERR("Bytes sent (%d) was not the "
   1643e:	4621      	mov	r1, r4
   16440:	1a9b      	subs	r3, r3, r2
   16442:	08db      	lsrs	r3, r3, #3
   16444:	019b      	lsls	r3, r3, #6
   16446:	4632      	mov	r2, r6
   16448:	4807      	ldr	r0, [pc, #28]	; (16468 <at_write+0xa0>)
   1644a:	f043 0301 	orr.w	r3, r3, #1
   1644e:	f00d f9c8 	bl	237e2 <log_2>
   16452:	e7e1      	b.n	16418 <at_write+0x50>
   16454:	20021b64 	.word	0x20021b64
   16458:	00027b20 	.word	0x00027b20
   1645c:	00027b28 	.word	0x00027b28
   16460:	0002a0bc 	.word	0x0002a0bc
   16464:	20020800 	.word	0x20020800
   16468:	0002a0df 	.word	0x0002a0df

0001646c <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   1646c:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   1646e:	4d16      	ldr	r5, [pc, #88]	; (164c8 <at_cmd_driver_init+0x5c>)
{
   16470:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   16472:	782b      	ldrb	r3, [r5, #0]
   16474:	bb2b      	cbnz	r3, 164c2 <at_cmd_driver_init+0x56>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   16476:	f7ff ff93 	bl	163a0 <open_socket>
	if (err) {
   1647a:	4604      	mov	r4, r0
   1647c:	b168      	cbz	r0, 1649a <at_cmd_driver_init+0x2e>
   1647e:	4a13      	ldr	r2, [pc, #76]	; (164cc <at_cmd_driver_init+0x60>)
   16480:	4b13      	ldr	r3, [pc, #76]	; (164d0 <at_cmd_driver_init+0x64>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   16482:	4601      	mov	r1, r0
   16484:	1ad2      	subs	r2, r2, r3
   16486:	08d2      	lsrs	r2, r2, #3
   16488:	0192      	lsls	r2, r2, #6
   1648a:	4812      	ldr	r0, [pc, #72]	; (164d4 <at_cmd_driver_init+0x68>)
   1648c:	f042 0201 	orr.w	r2, r2, #1
   16490:	f00d f990 	bl	237b4 <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   16494:	4620      	mov	r0, r4
   16496:	b009      	add	sp, #36	; 0x24
   16498:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1649a:	2200      	movs	r2, #0
   1649c:	2300      	movs	r3, #0
   1649e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   164a2:	230a      	movs	r3, #10
   164a4:	e9cd 0000 	strd	r0, r0, [sp]
   164a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   164ac:	9004      	str	r0, [sp, #16]
   164ae:	4b0a      	ldr	r3, [pc, #40]	; (164d8 <at_cmd_driver_init+0x6c>)
   164b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   164b4:	4909      	ldr	r1, [pc, #36]	; (164dc <at_cmd_driver_init+0x70>)
   164b6:	480a      	ldr	r0, [pc, #40]	; (164e0 <at_cmd_driver_init+0x74>)
   164b8:	f00a ff5e 	bl	21378 <z_impl_k_thread_create>
	initialized = true;
   164bc:	2301      	movs	r3, #1
   164be:	702b      	strb	r3, [r5, #0]
	return 0;
   164c0:	e7e8      	b.n	16494 <at_cmd_driver_init+0x28>
		return 0;
   164c2:	2400      	movs	r4, #0
   164c4:	e7e6      	b.n	16494 <at_cmd_driver_init+0x28>
   164c6:	bf00      	nop
   164c8:	20029e44 	.word	0x20029e44
   164cc:	00027b28 	.word	0x00027b28
   164d0:	00027b20 	.word	0x00027b20
   164d4:	0002a111 	.word	0x0002a111
   164d8:	000164e5 	.word	0x000164e5
   164dc:	2002bf50 	.word	0x2002bf50
   164e0:	20021b78 	.word	0x20021b78

000164e4 <socket_thread_fn>:
{
   164e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, item->data,
   164e8:	4f7d      	ldr	r7, [pc, #500]	; (166e0 <socket_thread_fn+0x1fc>)
   164ea:	4e7e      	ldr	r6, [pc, #504]	; (166e4 <socket_thread_fn+0x200>)
   164ec:	46b9      	mov	r9, r7
   164ee:	4b7e      	ldr	r3, [pc, #504]	; (166e8 <socket_thread_fn+0x204>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   164f0:	f8df 823c 	ldr.w	r8, [pc, #572]	; 16730 <socket_thread_fn+0x24c>
   164f4:	1af6      	subs	r6, r6, r3
{
   164f6:	b087      	sub	sp, #28
   164f8:	08f6      	lsrs	r6, r6, #3
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   164fa:	a903      	add	r1, sp, #12
   164fc:	f04f 32ff 	mov.w	r2, #4294967295
   16500:	f04f 33ff 	mov.w	r3, #4294967295
   16504:	4640      	mov	r0, r8
   16506:	f00a f8c1 	bl	2068c <k_mem_slab_alloc>
		ret.code  = 0;
   1650a:	2300      	movs	r3, #0
		item->callback = NULL;
   1650c:	9903      	ldr	r1, [sp, #12]
		bytes_read = recv(common_socket_fd, item->data,
   1650e:	6838      	ldr	r0, [r7, #0]
		ret.code  = 0;
   16510:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   16512:	f88d 3014 	strb.w	r3, [sp, #20]
		item->callback = NULL;
   16516:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1651a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1651e:	310c      	adds	r1, #12
   16520:	e9cd 3300 	strd	r3, r3, [sp]
   16524:	f00d fd1b 	bl	23f5e <z_impl_zsock_recvfrom>
		if (bytes_read < 0) {
   16528:	1e01      	subs	r1, r0, #0
   1652a:	da46      	bge.n	165ba <socket_thread_fn+0xd6>
			LOG_ERR("AT socket recv failed with err %d",
   1652c:	01b4      	lsls	r4, r6, #6
   1652e:	486f      	ldr	r0, [pc, #444]	; (166ec <socket_thread_fn+0x208>)
   16530:	f044 0201 	orr.w	r2, r4, #1
   16534:	f00d f93e 	bl	237b4 <log_1>
			if ((close(common_socket_fd) == 0) &&
   16538:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_close(sock);
   1653a:	f00d fc8a 	bl	23e52 <z_impl_zsock_close>
   1653e:	bb60      	cbnz	r0, 1659a <socket_thread_fn+0xb6>
			    (open_socket() == 0)) {
   16540:	f7ff ff2e 	bl	163a0 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   16544:	bb48      	cbnz	r0, 1659a <socket_thread_fn+0xb6>
				LOG_INF("AT socket recovered");
   16546:	486a      	ldr	r0, [pc, #424]	; (166f0 <socket_thread_fn+0x20c>)
   16548:	f044 0103 	orr.w	r1, r4, #3
   1654c:	f00d f923 	bl	23796 <log_0>
				ret.state = AT_CMD_ERROR;
   16550:	2301      	movs	r3, #1
   16552:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   16556:	f00d ff05 	bl	24364 <__errno>
   1655a:	6803      	ldr	r3, [r0, #0]
   1655c:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   1655e:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   16560:	9903      	ldr	r1, [sp, #12]
   16562:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   16566:	2b00      	cmp	r3, #0
   16568:	f040 8090 	bne.w	1668c <socket_thread_fn+0x1a8>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   1656c:	4640      	mov	r0, r8
   1656e:	a903      	add	r1, sp, #12
   16570:	f00a f8be 	bl	206f0 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   16574:	4b5f      	ldr	r3, [pc, #380]	; (166f4 <socket_thread_fn+0x210>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   16576:	689b      	ldr	r3, [r3, #8]
   16578:	2b00      	cmp	r3, #0
   1657a:	d1be      	bne.n	164fa <socket_thread_fn+0x16>
   1657c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   16580:	2a04      	cmp	r2, #4
   16582:	d0ba      	beq.n	164fa <socket_thread_fn+0x16>
			current_cmd_handler = NULL;
   16584:	4a5c      	ldr	r2, [pc, #368]	; (166f8 <socket_thread_fn+0x214>)
   16586:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   16588:	f04f 32ff 	mov.w	r2, #4294967295
   1658c:	f04f 33ff 	mov.w	r3, #4294967295
   16590:	a904      	add	r1, sp, #16
   16592:	485a      	ldr	r0, [pc, #360]	; (166fc <socket_thread_fn+0x218>)
   16594:	f00a f8f6 	bl	20784 <z_impl_k_msgq_put>
	for (;;) {
   16598:	e7af      	b.n	164fa <socket_thread_fn+0x16>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   1659a:	f00d fee3 	bl	24364 <__errno>
   1659e:	f044 0401 	orr.w	r4, r4, #1
   165a2:	6801      	ldr	r1, [r0, #0]
   165a4:	4622      	mov	r2, r4
   165a6:	4856      	ldr	r0, [pc, #344]	; (16700 <socket_thread_fn+0x21c>)
   165a8:	f00d f904 	bl	237b4 <log_1>
			close(common_socket_fd);
   165ac:	f8d9 0000 	ldr.w	r0, [r9]
   165b0:	f00d fc4f 	bl	23e52 <z_impl_zsock_close>
}
   165b4:	b007      	add	sp, #28
   165b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (item->data[bytes_read - 1] != '\0') {
   165ba:	f8dd a00c 	ldr.w	sl, [sp, #12]
   165be:	4451      	add	r1, sl
   165c0:	f891 b00b 	ldrb.w	fp, [r1, #11]
   165c4:	f1bb 0f00 	cmp.w	fp, #0
   165c8:	d008      	beq.n	165dc <socket_thread_fn+0xf8>
			LOG_ERR("AT message too large for reception buffer or "
   165ca:	01b1      	lsls	r1, r6, #6
   165cc:	484d      	ldr	r0, [pc, #308]	; (16704 <socket_thread_fn+0x220>)
   165ce:	f041 0101 	orr.w	r1, r1, #1
   165d2:	f00d f8e0 	bl	23796 <log_0>
			ret.code  = -ENOBUFS;
   165d6:	f06f 0368 	mvn.w	r3, #104	; 0x68
   165da:	e7c0      	b.n	1655e <socket_thread_fn+0x7a>
	ret->state = AT_CMD_NOTIFICATION;
   165dc:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   165de:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   165e2:	4628      	mov	r0, r5
   165e4:	4948      	ldr	r1, [pc, #288]	; (16708 <socket_thread_fn+0x224>)
	ret->state = AT_CMD_NOTIFICATION;
   165e6:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   165ea:	f010 fbfa 	bl	26de2 <strstr>
		if (tmpstr) {
   165ee:	4604      	mov	r4, r0
   165f0:	b1e8      	cbz	r0, 1662e <socket_thread_fn+0x14a>
			ret->state = AT_CMD_OK;
   165f2:	f88d b014 	strb.w	fp, [sp, #20]
			ret->code  = 0;
   165f6:	f8cd b010 	str.w	fp, [sp, #16]
		buf[new_len++] = '\0';
   165fa:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   165fc:	1b62      	subs	r2, r4, r5
		buf[new_len++] = '\0';
   165fe:	3201      	adds	r2, #1
   16600:	7023      	strb	r3, [r4, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   16602:	f89d 3014 	ldrb.w	r3, [sp, #20]
   16606:	2b04      	cmp	r3, #4
   16608:	d056      	beq.n	166b8 <socket_thread_fn+0x1d4>
			if ((response_buf_len > 0) &&
   1660a:	4d40      	ldr	r5, [pc, #256]	; (1670c <socket_thread_fn+0x228>)
   1660c:	682b      	ldr	r3, [r5, #0]
   1660e:	2b00      	cmp	r3, #0
   16610:	d05b      	beq.n	166ca <socket_thread_fn+0x1e6>
			    (response_buf != NULL)) {
   16612:	4c3f      	ldr	r4, [pc, #252]	; (16710 <socket_thread_fn+0x22c>)
   16614:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   16616:	2800      	cmp	r0, #0
   16618:	d057      	beq.n	166ca <socket_thread_fn+0x1e6>
				if (response_buf_len >= payload_len) {
   1661a:	4293      	cmp	r3, r2
   1661c:	d32c      	bcc.n	16678 <socket_thread_fn+0x194>
   1661e:	9903      	ldr	r1, [sp, #12]
   16620:	310c      	adds	r1, #12
   16622:	f010 f9f0 	bl	26a06 <memcpy>
				response_buf_len = 0;
   16626:	2300      	movs	r3, #0
   16628:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
   1662a:	6023      	str	r3, [r4, #0]
				goto next;
   1662c:	e798      	b.n	16560 <socket_thread_fn+0x7c>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1662e:	4628      	mov	r0, r5
   16630:	4938      	ldr	r1, [pc, #224]	; (16714 <socket_thread_fn+0x230>)
   16632:	f010 fbd6 	bl	26de2 <strstr>
		if (tmpstr) {
   16636:	4604      	mov	r4, r0
   16638:	b140      	cbz	r0, 1664c <socket_thread_fn+0x168>
			ret->state = AT_CMD_ERROR_CMS;
   1663a:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1663c:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   16640:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   16644:	f010 f9bf 	bl	269c6 <atoi>
   16648:	9004      	str	r0, [sp, #16]
			break;
   1664a:	e7d6      	b.n	165fa <socket_thread_fn+0x116>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   1664c:	4628      	mov	r0, r5
   1664e:	4932      	ldr	r1, [pc, #200]	; (16718 <socket_thread_fn+0x234>)
   16650:	f010 fbc7 	bl	26de2 <strstr>
		if (tmpstr) {
   16654:	4604      	mov	r4, r0
   16656:	b108      	cbz	r0, 1665c <socket_thread_fn+0x178>
			ret->state = AT_CMD_ERROR_CME;
   16658:	2303      	movs	r3, #3
   1665a:	e7ef      	b.n	1663c <socket_thread_fn+0x158>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   1665c:	4628      	mov	r0, r5
   1665e:	492f      	ldr	r1, [pc, #188]	; (1671c <socket_thread_fn+0x238>)
   16660:	f010 fbbf 	bl	26de2 <strstr>
		if (tmpstr) {
   16664:	4604      	mov	r4, r0
   16666:	2800      	cmp	r0, #0
   16668:	d034      	beq.n	166d4 <socket_thread_fn+0x1f0>
			ret->state = AT_CMD_ERROR;
   1666a:	2301      	movs	r3, #1
   1666c:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   16670:	f06f 0307 	mvn.w	r3, #7
   16674:	9304      	str	r3, [sp, #16]
			break;
   16676:	e7c0      	b.n	165fa <socket_thread_fn+0x116>
					LOG_ERR("Response buffer not large "
   16678:	01b1      	lsls	r1, r6, #6
   1667a:	4829      	ldr	r0, [pc, #164]	; (16720 <socket_thread_fn+0x23c>)
   1667c:	f041 0101 	orr.w	r1, r1, #1
   16680:	f00d f889 	bl	23796 <log_0>
					ret.code  = -EMSGSIZE;
   16684:	f06f 0379 	mvn.w	r3, #121	; 0x79
   16688:	9304      	str	r3, [sp, #16]
   1668a:	e7cc      	b.n	16626 <socket_thread_fn+0x142>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1668c:	4b25      	ldr	r3, [pc, #148]	; (16724 <socket_thread_fn+0x240>)
   1668e:	2200      	movs	r2, #0
   16690:	604b      	str	r3, [r1, #4]
   16692:	460b      	mov	r3, r1
   16694:	600a      	str	r2, [r1, #0]
   16696:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1669a:	e8d3 2fef 	ldaex	r2, [r3]
   1669e:	f042 0001 	orr.w	r0, r2, #1
   166a2:	e8c3 0fe4 	stlex	r4, r0, [r3]
   166a6:	2c00      	cmp	r4, #0
   166a8:	d1f7      	bne.n	1669a <socket_thread_fn+0x1b6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   166aa:	07d3      	lsls	r3, r2, #31
   166ac:	f53f af62 	bmi.w	16574 <socket_thread_fn+0x90>
		k_queue_append(&work_q->queue, work);
   166b0:	481d      	ldr	r0, [pc, #116]	; (16728 <socket_thread_fn+0x244>)
   166b2:	f00f fe88 	bl	263c6 <k_queue_append>
   166b6:	e75d      	b.n	16574 <socket_thread_fn+0x90>
		if (payload_len == 0) {
   166b8:	2a00      	cmp	r2, #0
   166ba:	f43f af51 	beq.w	16560 <socket_thread_fn+0x7c>
			item->callback = notification_handler;
   166be:	4b1b      	ldr	r3, [pc, #108]	; (1672c <socket_thread_fn+0x248>)
			item->callback = current_cmd_handler;
   166c0:	681a      	ldr	r2, [r3, #0]
   166c2:	9b03      	ldr	r3, [sp, #12]
   166c4:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   166c8:	e74a      	b.n	16560 <socket_thread_fn+0x7c>
		if (payload_len == 0) {
   166ca:	2a00      	cmp	r2, #0
   166cc:	f43f af48 	beq.w	16560 <socket_thread_fn+0x7c>
			item->callback = current_cmd_handler;
   166d0:	4b09      	ldr	r3, [pc, #36]	; (166f8 <socket_thread_fn+0x214>)
   166d2:	e7f5      	b.n	166c0 <socket_thread_fn+0x1dc>
		new_len = strlen(buf) + 1;
   166d4:	4628      	mov	r0, r5
   166d6:	f7f6 fbcb 	bl	ce70 <strlen>
   166da:	1c42      	adds	r2, r0, #1
   166dc:	e791      	b.n	16602 <socket_thread_fn+0x11e>
   166de:	bf00      	nop
   166e0:	20021b64 	.word	0x20021b64
   166e4:	00027b28 	.word	0x00027b28
   166e8:	00027b20 	.word	0x00027b20
   166ec:	0002a133 	.word	0x0002a133
   166f0:	0002a155 	.word	0x0002a155
   166f4:	20020750 	.word	0x20020750
   166f8:	20021b68 	.word	0x20021b68
   166fc:	20020800 	.word	0x20020800
   16700:	0002a169 	.word	0x0002a169
   16704:	0002a1a0 	.word	0x0002a1a0
   16708:	0002a1eb 	.word	0x0002a1eb
   1670c:	20021b74 	.word	0x20021b74
   16710:	20021b70 	.word	0x20021b70
   16714:	0002a1ee 	.word	0x0002a1ee
   16718:	0002a1fa 	.word	0x0002a1fa
   1671c:	0002a206 	.word	0x0002a206
   16720:	0002a20c 	.word	0x0002a20c
   16724:	00016381 	.word	0x00016381
   16728:	20026d88 	.word	0x20026d88
   1672c:	20021b6c 	.word	0x20021b6c
   16730:	200206d8 	.word	0x200206d8

00016734 <at_cmd_write>:
{
   16734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16736:	4604      	mov	r4, r0
   16738:	460e      	mov	r6, r1
   1673a:	4615      	mov	r5, r2
   1673c:	9301      	str	r3, [sp, #4]
	return z_impl_k_sem_take(sem, timeout);
   1673e:	4f0b      	ldr	r7, [pc, #44]	; (1676c <at_cmd_write+0x38>)
   16740:	f04f 32ff 	mov.w	r2, #4294967295
   16744:	f04f 33ff 	mov.w	r3, #4294967295
   16748:	4638      	mov	r0, r7
   1674a:	f00a fd93 	bl	21274 <z_impl_k_sem_take>
	response_buf     = buf;
   1674e:	4b08      	ldr	r3, [pc, #32]	; (16770 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   16750:	4620      	mov	r0, r4
	response_buf     = buf;
   16752:	601e      	str	r6, [r3, #0]
	response_buf_len = buf_len;
   16754:	4b07      	ldr	r3, [pc, #28]	; (16774 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   16756:	9901      	ldr	r1, [sp, #4]
	response_buf_len = buf_len;
   16758:	601d      	str	r5, [r3, #0]
	int return_code = at_write(cmd, state);
   1675a:	f7ff fe35 	bl	163c8 <at_write>
   1675e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   16760:	4638      	mov	r0, r7
   16762:	f00a fd61 	bl	21228 <z_impl_k_sem_give>
}
   16766:	4620      	mov	r0, r4
   16768:	b003      	add	sp, #12
   1676a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1676c:	20020750 	.word	0x20020750
   16770:	20021b70 	.word	0x20021b70
   16774:	20021b74 	.word	0x20021b74

00016778 <at_cmd_set_notification_handler>:
{
   16778:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   1677a:	4c0e      	ldr	r4, [pc, #56]	; (167b4 <at_cmd_set_notification_handler+0x3c>)
{
   1677c:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   1677e:	6821      	ldr	r1, [r4, #0]
   16780:	b159      	cbz	r1, 1679a <at_cmd_set_notification_handler+0x22>
   16782:	4281      	cmp	r1, r0
   16784:	d009      	beq.n	1679a <at_cmd_set_notification_handler+0x22>
   16786:	4a0c      	ldr	r2, [pc, #48]	; (167b8 <at_cmd_set_notification_handler+0x40>)
   16788:	4b0c      	ldr	r3, [pc, #48]	; (167bc <at_cmd_set_notification_handler+0x44>)
		LOG_WRN("Forgetting prior notification handler %p",
   1678a:	480d      	ldr	r0, [pc, #52]	; (167c0 <at_cmd_set_notification_handler+0x48>)
   1678c:	1ad2      	subs	r2, r2, r3
   1678e:	08d2      	lsrs	r2, r2, #3
   16790:	0192      	lsls	r2, r2, #6
   16792:	f042 0202 	orr.w	r2, r2, #2
   16796:	f00d f80d 	bl	237b4 <log_1>
	return z_impl_k_sem_take(sem, timeout);
   1679a:	f04f 32ff 	mov.w	r2, #4294967295
   1679e:	f04f 33ff 	mov.w	r3, #4294967295
   167a2:	4808      	ldr	r0, [pc, #32]	; (167c4 <at_cmd_set_notification_handler+0x4c>)
   167a4:	f00a fd66 	bl	21274 <z_impl_k_sem_take>
	notification_handler = handler;
   167a8:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   167aa:	4806      	ldr	r0, [pc, #24]	; (167c4 <at_cmd_set_notification_handler+0x4c>)
}
   167ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   167b0:	f00a bd3a 	b.w	21228 <z_impl_k_sem_give>
   167b4:	20021b6c 	.word	0x20021b6c
   167b8:	00027b28 	.word	0x00027b28
   167bc:	00027b20 	.word	0x00027b20
   167c0:	0002a22d 	.word	0x0002a22d
   167c4:	20020750 	.word	0x20020750

000167c8 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   167c8:	4b0f      	ldr	r3, [pc, #60]	; (16808 <find_node+0x40>)
{
   167ca:	b570      	push	{r4, r5, r6, lr}
   167cc:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   167ce:	6818      	ldr	r0, [r3, #0]
   167d0:	b170      	cbz	r0, 167f0 <find_node+0x28>
	return node->next;
   167d2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   167d4:	4603      	mov	r3, r0
   167d6:	2d00      	cmp	r5, #0
   167d8:	4628      	mov	r0, r5
   167da:	bf38      	it	cc
   167dc:	2000      	movcc	r0, #0
   167de:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   167e0:	685e      	ldr	r6, [r3, #4]
   167e2:	428e      	cmp	r6, r1
   167e4:	d105      	bne.n	167f2 <find_node+0x2a>
   167e6:	689e      	ldr	r6, [r3, #8]
   167e8:	4296      	cmp	r6, r2
   167ea:	d102      	bne.n	167f2 <find_node+0x2a>
			*prev_out = prev;
			return curr;
   167ec:	4618      	mov	r0, r3
			*prev_out = prev;
   167ee:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   167f0:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   167f2:	2800      	cmp	r0, #0
   167f4:	d0fc      	beq.n	167f0 <find_node+0x28>
	return node->next;
   167f6:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   167f8:	461d      	mov	r5, r3
   167fa:	2e00      	cmp	r6, #0
   167fc:	4603      	mov	r3, r0
   167fe:	4630      	mov	r0, r6
   16800:	bf38      	it	cc
   16802:	2000      	movcc	r0, #0
   16804:	e7ec      	b.n	167e0 <find_node+0x18>
   16806:	bf00      	nop
   16808:	20021c30 	.word	0x20021c30

0001680c <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   1680c:	4a0c      	ldr	r2, [pc, #48]	; (16840 <module_init+0x34>)
{
   1680e:	b508      	push	{r3, lr}
	if (initialized) {
   16810:	7813      	ldrb	r3, [r2, #0]
   16812:	b15b      	cbz	r3, 1682c <module_init+0x20>
   16814:	490b      	ldr	r1, [pc, #44]	; (16844 <module_init+0x38>)
   16816:	4b0c      	ldr	r3, [pc, #48]	; (16848 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   16818:	480c      	ldr	r0, [pc, #48]	; (1684c <module_init+0x40>)
   1681a:	1ac9      	subs	r1, r1, r3
   1681c:	08c9      	lsrs	r1, r1, #3
   1681e:	0189      	lsls	r1, r1, #6
   16820:	f041 0102 	orr.w	r1, r1, #2
   16824:	f00c ffb7 	bl	23796 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   16828:	2000      	movs	r0, #0
   1682a:	bd08      	pop	{r3, pc}
	initialized = true;
   1682c:	2101      	movs	r1, #1
   1682e:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   16830:	4a07      	ldr	r2, [pc, #28]	; (16850 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   16832:	4808      	ldr	r0, [pc, #32]	; (16854 <module_init+0x48>)
	list->tail = NULL;
   16834:	e9c2 3300 	strd	r3, r3, [r2]
   16838:	f7ff ff9e 	bl	16778 <at_cmd_set_notification_handler>
	return 0;
   1683c:	e7f4      	b.n	16828 <module_init+0x1c>
   1683e:	bf00      	nop
   16840:	20029e45 	.word	0x20029e45
   16844:	00027b38 	.word	0x00027b38
   16848:	00027b20 	.word	0x00027b20
   1684c:	0002a25d 	.word	0x0002a25d
   16850:	20021c30 	.word	0x20021c30
   16854:	00016865 	.word	0x00016865

00016858 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   16858:	4801      	ldr	r0, [pc, #4]	; (16860 <k_mutex_unlock.constprop.0+0x8>)
   1685a:	f00a b8bd 	b.w	209d8 <z_impl_k_mutex_unlock>
   1685e:	bf00      	nop
   16860:	200207ec 	.word	0x200207ec

00016864 <notif_dispatch>:
{
   16864:	b538      	push	{r3, r4, r5, lr}
   16866:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   16868:	f04f 33ff 	mov.w	r3, #4294967295
   1686c:	f04f 32ff 	mov.w	r2, #4294967295
   16870:	480d      	ldr	r0, [pc, #52]	; (168a8 <notif_dispatch+0x44>)
   16872:	f00a f839 	bl	208e8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   16876:	4b0d      	ldr	r3, [pc, #52]	; (168ac <notif_dispatch+0x48>)
   16878:	681b      	ldr	r3, [r3, #0]
   1687a:	b91b      	cbnz	r3, 16884 <notif_dispatch+0x20>
}
   1687c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   16880:	f7ff bfea 	b.w	16858 <k_mutex_unlock.constprop.0>
	return node->next;
   16884:	681c      	ldr	r4, [r3, #0]
   16886:	2c00      	cmp	r4, #0
   16888:	bf38      	it	cc
   1688a:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   1688c:	4629      	mov	r1, r5
   1688e:	689a      	ldr	r2, [r3, #8]
   16890:	6858      	ldr	r0, [r3, #4]
   16892:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   16894:	2c00      	cmp	r4, #0
   16896:	d0f1      	beq.n	1687c <notif_dispatch+0x18>
   16898:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1689a:	4623      	mov	r3, r4
   1689c:	2a00      	cmp	r2, #0
   1689e:	bf38      	it	cc
   168a0:	2200      	movcc	r2, #0
   168a2:	4614      	mov	r4, r2
   168a4:	e7f2      	b.n	1688c <notif_dispatch+0x28>
   168a6:	bf00      	nop
   168a8:	200207ec 	.word	0x200207ec
   168ac:	20021c30 	.word	0x20021c30

000168b0 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   168b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   168b2:	4606      	mov	r6, r0
	if (handler == NULL) {
   168b4:	460d      	mov	r5, r1
   168b6:	b979      	cbnz	r1, 168d8 <at_notif_register_handler+0x28>
   168b8:	4a1d      	ldr	r2, [pc, #116]	; (16930 <at_notif_register_handler+0x80>)
   168ba:	4b1e      	ldr	r3, [pc, #120]	; (16934 <at_notif_register_handler+0x84>)
   168bc:	1a9b      	subs	r3, r3, r2
   168be:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   168c0:	019b      	lsls	r3, r3, #6
   168c2:	460a      	mov	r2, r1
   168c4:	f043 0301 	orr.w	r3, r3, #1
   168c8:	4601      	mov	r1, r0
   168ca:	481b      	ldr	r0, [pc, #108]	; (16938 <at_notif_register_handler+0x88>)
   168cc:	f00c ff89 	bl	237e2 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   168d0:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   168d4:	b002      	add	sp, #8
   168d6:	bd70      	pop	{r4, r5, r6, pc}
   168d8:	f04f 32ff 	mov.w	r2, #4294967295
   168dc:	f04f 33ff 	mov.w	r3, #4294967295
   168e0:	4816      	ldr	r0, [pc, #88]	; (1693c <at_notif_register_handler+0x8c>)
   168e2:	f00a f801 	bl	208e8 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   168e6:	462a      	mov	r2, r5
   168e8:	4631      	mov	r1, r6
   168ea:	a801      	add	r0, sp, #4
   168ec:	f7ff ff6c 	bl	167c8 <find_node>
   168f0:	4604      	mov	r4, r0
   168f2:	b118      	cbz	r0, 168fc <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   168f4:	f7ff ffb0 	bl	16858 <k_mutex_unlock.constprop.0>
		return 0;
   168f8:	2000      	movs	r0, #0
   168fa:	e7eb      	b.n	168d4 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   168fc:	200c      	movs	r0, #12
   168fe:	f009 ff21 	bl	20744 <k_malloc>
   16902:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   16904:	b920      	cbnz	r0, 16910 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   16906:	f7ff ffa7 	bl	16858 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   1690a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1690e:	e7e1      	b.n	168d4 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   16910:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   16912:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   16914:	4a0a      	ldr	r2, [pc, #40]	; (16940 <at_notif_register_handler+0x90>)
   16916:	6044      	str	r4, [r0, #4]
   16918:	6084      	str	r4, [r0, #8]
	parent->next = child;
   1691a:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   1691c:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   1691e:	e9c3 6501 	strd	r6, r5, [r3, #4]
   16922:	b911      	cbnz	r1, 1692a <at_notif_register_handler+0x7a>
	list->head = node;
   16924:	e9c2 3300 	strd	r3, r3, [r2]
}
   16928:	e7e4      	b.n	168f4 <at_notif_register_handler+0x44>
	parent->next = child;
   1692a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1692c:	6053      	str	r3, [r2, #4]
}
   1692e:	e7e1      	b.n	168f4 <at_notif_register_handler+0x44>
   16930:	00027b20 	.word	0x00027b20
   16934:	00027b38 	.word	0x00027b38
   16938:	0002a280 	.word	0x0002a280
   1693c:	200207ec 	.word	0x200207ec
   16940:	20021c30 	.word	0x20021c30

00016944 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   16944:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16946:	4605      	mov	r5, r0
	if (handler == NULL) {
   16948:	460c      	mov	r4, r1
   1694a:	b979      	cbnz	r1, 1696c <at_notif_deregister_handler+0x28>
   1694c:	4a20      	ldr	r2, [pc, #128]	; (169d0 <at_notif_deregister_handler+0x8c>)
   1694e:	4b21      	ldr	r3, [pc, #132]	; (169d4 <at_notif_deregister_handler+0x90>)
   16950:	1a9b      	subs	r3, r3, r2
   16952:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   16954:	019b      	lsls	r3, r3, #6
   16956:	460a      	mov	r2, r1
   16958:	f043 0301 	orr.w	r3, r3, #1
   1695c:	4601      	mov	r1, r0
   1695e:	481e      	ldr	r0, [pc, #120]	; (169d8 <at_notif_deregister_handler+0x94>)
   16960:	f00c ff3f 	bl	237e2 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   16964:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   16968:	b003      	add	sp, #12
   1696a:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   1696c:	2300      	movs	r3, #0
   1696e:	9301      	str	r3, [sp, #4]
   16970:	f04f 32ff 	mov.w	r2, #4294967295
   16974:	f04f 33ff 	mov.w	r3, #4294967295
   16978:	4818      	ldr	r0, [pc, #96]	; (169dc <at_notif_deregister_handler+0x98>)
   1697a:	f009 ffb5 	bl	208e8 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   1697e:	4622      	mov	r2, r4
   16980:	4629      	mov	r1, r5
   16982:	a801      	add	r0, sp, #4
   16984:	f7ff ff20 	bl	167c8 <find_node>
	if (curr == NULL) {
   16988:	b968      	cbnz	r0, 169a6 <at_notif_deregister_handler+0x62>
   1698a:	4912      	ldr	r1, [pc, #72]	; (169d4 <at_notif_deregister_handler+0x90>)
   1698c:	4b10      	ldr	r3, [pc, #64]	; (169d0 <at_notif_deregister_handler+0x8c>)
		LOG_WRN("Handler not registered. Nothing to do");
   1698e:	4814      	ldr	r0, [pc, #80]	; (169e0 <at_notif_deregister_handler+0x9c>)
   16990:	1ac9      	subs	r1, r1, r3
   16992:	08c9      	lsrs	r1, r1, #3
   16994:	0189      	lsls	r1, r1, #6
   16996:	f041 0102 	orr.w	r1, r1, #2
   1699a:	f00c fefc 	bl	23796 <log_0>
	k_mutex_unlock(&list_mtx);
   1699e:	f7ff ff5b 	bl	16858 <k_mutex_unlock.constprop.0>
	return remove_notif_handler(context, handler);
   169a2:	2000      	movs	r0, #0
   169a4:	e7e0      	b.n	16968 <at_notif_deregister_handler+0x24>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   169a6:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   169a8:	6801      	ldr	r1, [r0, #0]
   169aa:	4b0e      	ldr	r3, [pc, #56]	; (169e4 <at_notif_deregister_handler+0xa0>)
   169ac:	b94a      	cbnz	r2, 169c2 <at_notif_deregister_handler+0x7e>
   169ae:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   169b0:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   169b2:	4290      	cmp	r0, r2
   169b4:	d100      	bne.n	169b8 <at_notif_deregister_handler+0x74>
	list->tail = node;
   169b6:	6059      	str	r1, [r3, #4]
	parent->next = child;
   169b8:	2300      	movs	r3, #0
   169ba:	6003      	str	r3, [r0, #0]
	k_free(curr);
   169bc:	f00f fc68 	bl	26290 <k_free>
   169c0:	e7ed      	b.n	1699e <at_notif_deregister_handler+0x5a>
   169c2:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   169c4:	6859      	ldr	r1, [r3, #4]
   169c6:	4288      	cmp	r0, r1
	list->tail = node;
   169c8:	bf08      	it	eq
   169ca:	605a      	streq	r2, [r3, #4]
}
   169cc:	e7f4      	b.n	169b8 <at_notif_deregister_handler+0x74>
   169ce:	bf00      	nop
   169d0:	00027b20 	.word	0x00027b20
   169d4:	00027b38 	.word	0x00027b38
   169d8:	0002a280 	.word	0x0002a280
   169dc:	200207ec 	.word	0x200207ec
   169e0:	0002a2b1 	.word	0x0002a2b1
   169e4:	20021c30 	.word	0x20021c30

000169e8 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   169e8:	4b06      	ldr	r3, [pc, #24]	; (16a04 <is_valid_notification_char+0x1c>)
   169ea:	5cc3      	ldrb	r3, [r0, r3]
   169ec:	f003 0303 	and.w	r3, r3, #3
   169f0:	2b02      	cmp	r3, #2
   169f2:	bf08      	it	eq
   169f4:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   169f6:	3841      	subs	r0, #65	; 0x41
   169f8:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   169fa:	2819      	cmp	r0, #25
   169fc:	bf8c      	ite	hi
   169fe:	2000      	movhi	r0, #0
   16a00:	2001      	movls	r0, #1
   16a02:	4770      	bx	lr
   16a04:	0002a974 	.word	0x0002a974

00016a08 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   16a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   16a0c:	6805      	ldr	r5, [r0, #0]
{
   16a0e:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   16a10:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16a12:	782b      	ldrb	r3, [r5, #0]
{
   16a14:	4680      	mov	r8, r0
   16a16:	460f      	mov	r7, r1
   16a18:	4616      	mov	r6, r2
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	f000 80c8 	beq.w	16bb0 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   16a20:	4b65      	ldr	r3, [pc, #404]	; (16bb8 <at_parse_process_element+0x1b0>)
   16a22:	781c      	ldrb	r4, [r3, #0]
   16a24:	2c06      	cmp	r4, #6
   16a26:	d110      	bne.n	16a4a <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   16a28:	1c6b      	adds	r3, r5, #1
   16a2a:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   16a2c:	9a00      	ldr	r2, [sp, #0]
   16a2e:	7810      	ldrb	r0, [r2, #0]
   16a30:	f7ff ffda 	bl	169e8 <is_valid_notification_char>
   16a34:	b930      	cbnz	r0, 16a44 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   16a36:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   16a38:	462a      	mov	r2, r5
   16a3a:	4639      	mov	r1, r7
   16a3c:	4630      	mov	r0, r6
   16a3e:	f00f fab3 	bl	25fa8 <at_params_string_put>
   16a42:	e01b      	b.n	16a7c <at_parse_process_element+0x74>
			tmpstr++;
   16a44:	3201      	adds	r2, #1
   16a46:	9200      	str	r2, [sp, #0]
   16a48:	e7f0      	b.n	16a2c <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   16a4a:	2c07      	cmp	r4, #7
   16a4c:	d124      	bne.n	16a98 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   16a4e:	4668      	mov	r0, sp
   16a50:	f00f f9e2 	bl	25e18 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   16a54:	9a00      	ldr	r2, [sp, #0]
   16a56:	7810      	ldrb	r0, [r2, #0]
   16a58:	f7ff ffc6 	bl	169e8 <is_valid_notification_char>
   16a5c:	b9a8      	cbnz	r0, 16a8a <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   16a5e:	1b53      	subs	r3, r2, r5
   16a60:	4639      	mov	r1, r7
   16a62:	462a      	mov	r2, r5
   16a64:	4630      	mov	r0, r6
   16a66:	f00f fa9f 	bl	25fa8 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   16a6a:	9b00      	ldr	r3, [sp, #0]
   16a6c:	781a      	ldrb	r2, [r3, #0]
   16a6e:	2a3d      	cmp	r2, #61	; 0x3d
   16a70:	d10e      	bne.n	16a90 <at_parse_process_element+0x88>
   16a72:	785a      	ldrb	r2, [r3, #1]
   16a74:	2a3f      	cmp	r2, #63	; 0x3f
   16a76:	d101      	bne.n	16a7c <at_parse_process_element+0x74>
			tmpstr += 2;
   16a78:	3302      	adds	r3, #2
			tmpstr++;
   16a7a:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   16a7c:	2000      	movs	r0, #0
	*str = tmpstr;
   16a7e:	9b00      	ldr	r3, [sp, #0]
   16a80:	f8c8 3000 	str.w	r3, [r8]
}
   16a84:	b023      	add	sp, #140	; 0x8c
   16a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   16a8a:	3201      	adds	r2, #1
   16a8c:	9200      	str	r2, [sp, #0]
   16a8e:	e7e1      	b.n	16a54 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   16a90:	2a3f      	cmp	r2, #63	; 0x3f
   16a92:	d1f3      	bne.n	16a7c <at_parse_process_element+0x74>
			tmpstr++;
   16a94:	3301      	adds	r3, #1
   16a96:	e7f0      	b.n	16a7a <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   16a98:	2c08      	cmp	r4, #8
   16a9a:	d103      	bne.n	16aa4 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   16a9c:	4610      	mov	r0, r2
   16a9e:	f00f fa5e 	bl	25f5e <at_params_empty_put>
   16aa2:	e7eb      	b.n	16a7c <at_parse_process_element+0x74>
	} else if (state == STRING) {
   16aa4:	2c02      	cmp	r4, #2
   16aa6:	d111      	bne.n	16acc <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   16aa8:	9a00      	ldr	r2, [sp, #0]
   16aaa:	7811      	ldrb	r1, [r2, #0]
   16aac:	4608      	mov	r0, r1
   16aae:	f00f f9aa 	bl	25e06 <is_lfcr>
   16ab2:	b918      	cbnz	r0, 16abc <at_parse_process_element+0xb4>
   16ab4:	b111      	cbz	r1, 16abc <at_parse_process_element+0xb4>
			tmpstr++;
   16ab6:	3201      	adds	r2, #1
   16ab8:	9200      	str	r2, [sp, #0]
   16aba:	e7f5      	b.n	16aa8 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   16abc:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   16abe:	462a      	mov	r2, r5
   16ac0:	4639      	mov	r1, r7
   16ac2:	4630      	mov	r0, r6
   16ac4:	f00f fa70 	bl	25fa8 <at_params_string_put>
		tmpstr++;
   16ac8:	9b00      	ldr	r3, [sp, #0]
   16aca:	e7e3      	b.n	16a94 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   16acc:	2c03      	cmp	r4, #3
   16ace:	d109      	bne.n	16ae4 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   16ad0:	9b00      	ldr	r3, [sp, #0]
   16ad2:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   16ad4:	2a22      	cmp	r2, #34	; 0x22
   16ad6:	d003      	beq.n	16ae0 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16ad8:	b112      	cbz	r2, 16ae0 <at_parse_process_element+0xd8>
			tmpstr++;
   16ada:	3301      	adds	r3, #1
   16adc:	9300      	str	r3, [sp, #0]
   16ade:	e7f7      	b.n	16ad0 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   16ae0:	1b5b      	subs	r3, r3, r5
   16ae2:	e7ec      	b.n	16abe <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   16ae4:	2c01      	cmp	r4, #1
   16ae6:	d13c      	bne.n	16b62 <at_parse_process_element+0x15a>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   16ae8:	4628      	mov	r0, r5
   16aea:	220a      	movs	r2, #10
   16aec:	a901      	add	r1, sp, #4
   16aee:	f00b fcfb 	bl	224e8 <strtoul>
		tmpstr = next;
   16af2:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16af4:	4d31      	ldr	r5, [pc, #196]	; (16bbc <at_parse_process_element+0x1b4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   16af6:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   16af8:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   16afa:	9800      	ldr	r0, [sp, #0]
   16afc:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   16afe:	2b29      	cmp	r3, #41	; 0x29
   16b00:	d028      	beq.n	16b54 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16b02:	b33b      	cbz	r3, 16b54 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16b04:	3b2c      	subs	r3, #44	; 0x2c
   16b06:	b2db      	uxtb	r3, r3
   16b08:	3001      	adds	r0, #1
   16b0a:	2b11      	cmp	r3, #17
				tmparray[i++] =
   16b0c:	9000      	str	r0, [sp, #0]
   16b0e:	d803      	bhi.n	16b18 <at_parse_process_element+0x110>
   16b10:	fa25 f303 	lsr.w	r3, r5, r3
   16b14:	07db      	lsls	r3, r3, #31
   16b16:	d408      	bmi.n	16b2a <at_parse_process_element+0x122>
				tmpstr++;
   16b18:	46a1      	mov	r9, r4
   16b1a:	e004      	b.n	16b26 <at_parse_process_element+0x11e>
					tmpstr = next;
   16b1c:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   16b1e:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   16b22:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   16b24:	d015      	beq.n	16b52 <at_parse_process_element+0x14a>
				tmpstr++;
   16b26:	464c      	mov	r4, r9
   16b28:	e7e7      	b.n	16afa <at_parse_process_element+0xf2>
					(u32_t)strtoul(++tmpstr, &next, 10);
   16b2a:	220a      	movs	r2, #10
   16b2c:	a901      	add	r1, sp, #4
   16b2e:	f00b fcdb 	bl	224e8 <strtoul>
				tmparray[i++] =
   16b32:	ab22      	add	r3, sp, #136	; 0x88
   16b34:	f104 0901 	add.w	r9, r4, #1
   16b38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   16b3c:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   16b40:	9800      	ldr	r0, [sp, #0]
   16b42:	f7f6 f995 	bl	ce70 <strlen>
   16b46:	4604      	mov	r4, r0
   16b48:	9801      	ldr	r0, [sp, #4]
   16b4a:	f7f6 f991 	bl	ce70 <strlen>
   16b4e:	4284      	cmp	r4, r0
   16b50:	d1e4      	bne.n	16b1c <at_parse_process_element+0x114>
   16b52:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   16b54:	4639      	mov	r1, r7
   16b56:	4630      	mov	r0, r6
   16b58:	00a3      	lsls	r3, r4, #2
   16b5a:	aa02      	add	r2, sp, #8
   16b5c:	f00f fa47 	bl	25fee <at_params_array_put>
   16b60:	e7b2      	b.n	16ac8 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   16b62:	2c04      	cmp	r4, #4
   16b64:	d115      	bne.n	16b92 <at_parse_process_element+0x18a>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   16b66:	220a      	movs	r2, #10
   16b68:	4628      	mov	r0, r5
   16b6a:	a902      	add	r1, sp, #8
   16b6c:	f00b fcbc 	bl	224e8 <strtoul>
		tmpstr = next;
   16b70:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   16b72:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   16b76:	4602      	mov	r2, r0
		tmpstr = next;
   16b78:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   16b7a:	da05      	bge.n	16b88 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (u16_t)value);
   16b7c:	b282      	uxth	r2, r0
   16b7e:	4639      	mov	r1, r7
   16b80:	4630      	mov	r0, r6
   16b82:	f00f f9d9 	bl	25f38 <at_params_short_put>
   16b86:	e779      	b.n	16a7c <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   16b88:	4639      	mov	r1, r7
   16b8a:	4630      	mov	r0, r6
   16b8c:	f00f f9f9 	bl	25f82 <at_params_int_put>
   16b90:	e774      	b.n	16a7c <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   16b92:	2c05      	cmp	r4, #5
   16b94:	f47f af72 	bne.w	16a7c <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   16b98:	4909      	ldr	r1, [pc, #36]	; (16bc0 <at_parse_process_element+0x1b8>)
   16b9a:	9b00      	ldr	r3, [sp, #0]
   16b9c:	781a      	ldrb	r2, [r3, #0]
   16b9e:	5c52      	ldrb	r2, [r2, r1]
   16ba0:	f012 0f44 	tst.w	r2, #68	; 0x44
   16ba4:	d101      	bne.n	16baa <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   16ba6:	1b5b      	subs	r3, r3, r5
   16ba8:	e746      	b.n	16a38 <at_parse_process_element+0x30>
			tmpstr++;
   16baa:	3301      	adds	r3, #1
   16bac:	9300      	str	r3, [sp, #0]
   16bae:	e7f4      	b.n	16b9a <at_parse_process_element+0x192>
		return -1;
   16bb0:	f04f 30ff 	mov.w	r0, #4294967295
   16bb4:	e766      	b.n	16a84 <at_parse_process_element+0x7c>
   16bb6:	bf00      	nop
   16bb8:	20029e46 	.word	0x20029e46
   16bbc:	00024001 	.word	0x00024001
   16bc0:	0002a974 	.word	0x0002a974

00016bc4 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   16bc4:	b510      	push	{r4, lr}
   16bc6:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   16bc8:	f7f6 f952 	bl	ce70 <strlen>
   16bcc:	2801      	cmp	r0, #1
   16bce:	d922      	bls.n	16c16 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   16bd0:	7821      	ldrb	r1, [r4, #0]
   16bd2:	4b13      	ldr	r3, [pc, #76]	; (16c20 <is_command+0x5c>)
   16bd4:	5cca      	ldrb	r2, [r1, r3]
   16bd6:	f002 0203 	and.w	r2, r2, #3
   16bda:	2a02      	cmp	r2, #2
   16bdc:	bf08      	it	eq
   16bde:	3920      	subeq	r1, #32
   16be0:	2941      	cmp	r1, #65	; 0x41
   16be2:	461a      	mov	r2, r3
   16be4:	d117      	bne.n	16c16 <is_command+0x52>
   16be6:	7863      	ldrb	r3, [r4, #1]
   16be8:	5cd2      	ldrb	r2, [r2, r3]
   16bea:	f002 0203 	and.w	r2, r2, #3
   16bee:	2a02      	cmp	r2, #2
   16bf0:	bf08      	it	eq
   16bf2:	3b20      	subeq	r3, #32
   16bf4:	2b54      	cmp	r3, #84	; 0x54
   16bf6:	d10e      	bne.n	16c16 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16bf8:	78a2      	ldrb	r2, [r4, #2]
   16bfa:	2a25      	cmp	r2, #37	; 0x25
   16bfc:	d00d      	beq.n	16c1a <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   16bfe:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   16c02:	2b23      	cmp	r3, #35	; 0x23
   16c04:	d009      	beq.n	16c1a <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   16c06:	4610      	mov	r0, r2
   16c08:	f00f f8fd 	bl	25e06 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   16c0c:	b910      	cbnz	r0, 16c14 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16c0e:	fab2 f082 	clz	r0, r2
   16c12:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   16c14:	bd10      	pop	{r4, pc}
		return false;
   16c16:	2000      	movs	r0, #0
   16c18:	e7fc      	b.n	16c14 <is_command+0x50>
		return true;
   16c1a:	2001      	movs	r0, #1
   16c1c:	e7fa      	b.n	16c14 <is_command+0x50>
   16c1e:	bf00      	nop
   16c20:	0002a974 	.word	0x0002a974

00016c24 <at_parse_detect_type>:
{
   16c24:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   16c26:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   16c28:	2900      	cmp	r1, #0
{
   16c2a:	4605      	mov	r5, r0
   16c2c:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   16c2e:	d141      	bne.n	16cb4 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16c30:	2a2b      	cmp	r2, #43	; 0x2b
   16c32:	4e29      	ldr	r6, [pc, #164]	; (16cd8 <at_parse_detect_type+0xb4>)
   16c34:	d001      	beq.n	16c3a <at_parse_detect_type+0x16>
   16c36:	2a25      	cmp	r2, #37	; 0x25
   16c38:	d104      	bne.n	16c44 <at_parse_detect_type+0x20>
	state = new_state;
   16c3a:	2306      	movs	r3, #6
   16c3c:	7033      	strb	r3, [r6, #0]
	return 0;
   16c3e:	2000      	movs	r0, #0
	*str = tmpstr;
   16c40:	602c      	str	r4, [r5, #0]
}
   16c42:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   16c44:	4620      	mov	r0, r4
   16c46:	f7ff ffbd 	bl	16bc4 <is_command>
   16c4a:	b388      	cbz	r0, 16cb0 <at_parse_detect_type+0x8c>
	state = new_state;
   16c4c:	2307      	movs	r3, #7
   16c4e:	e7f5      	b.n	16c3c <at_parse_detect_type+0x18>
	if (chr == '"') {
   16c50:	2a22      	cmp	r2, #34	; 0x22
   16c52:	d006      	beq.n	16c62 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   16c54:	2a28      	cmp	r2, #40	; 0x28
   16c56:	d109      	bne.n	16c6c <at_parse_detect_type+0x48>
   16c58:	2201      	movs	r2, #1
   16c5a:	4b1f      	ldr	r3, [pc, #124]	; (16cd8 <at_parse_detect_type+0xb4>)
		tmpstr++;
   16c5c:	4414      	add	r4, r2
	state = new_state;
   16c5e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   16c60:	e7ed      	b.n	16c3e <at_parse_detect_type+0x1a>
	state = new_state;
   16c62:	2203      	movs	r2, #3
   16c64:	4b1c      	ldr	r3, [pc, #112]	; (16cd8 <at_parse_detect_type+0xb4>)
		tmpstr++;
   16c66:	3401      	adds	r4, #1
	state = new_state;
   16c68:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   16c6a:	e7e8      	b.n	16c3e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   16c6c:	4610      	mov	r0, r2
   16c6e:	f00f f8ca 	bl	25e06 <is_lfcr>
   16c72:	b170      	cbz	r0, 16c92 <at_parse_detect_type+0x6e>
   16c74:	4918      	ldr	r1, [pc, #96]	; (16cd8 <at_parse_detect_type+0xb4>)
   16c76:	7808      	ldrb	r0, [r1, #0]
   16c78:	2804      	cmp	r0, #4
   16c7a:	d108      	bne.n	16c8e <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   16c7c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   16c80:	f00f f8c1 	bl	25e06 <is_lfcr>
   16c84:	2800      	cmp	r0, #0
   16c86:	d1f9      	bne.n	16c7c <at_parse_detect_type+0x58>
	state = new_state;
   16c88:	2305      	movs	r3, #5
   16c8a:	700b      	strb	r3, [r1, #0]
}
   16c8c:	e7d7      	b.n	16c3e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   16c8e:	2808      	cmp	r0, #8
   16c90:	d0d5      	beq.n	16c3e <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16c92:	3a2c      	subs	r2, #44	; 0x2c
   16c94:	b2d2      	uxtb	r2, r2
   16c96:	2a11      	cmp	r2, #17
   16c98:	d807      	bhi.n	16caa <at_parse_detect_type+0x86>
   16c9a:	4b10      	ldr	r3, [pc, #64]	; (16cdc <at_parse_detect_type+0xb8>)
   16c9c:	fa23 f202 	lsr.w	r2, r3, r2
   16ca0:	07d3      	lsls	r3, r2, #31
   16ca2:	d502      	bpl.n	16caa <at_parse_detect_type+0x86>
	state = new_state;
   16ca4:	2208      	movs	r2, #8
   16ca6:	4b0c      	ldr	r3, [pc, #48]	; (16cd8 <at_parse_detect_type+0xb4>)
   16ca8:	e013      	b.n	16cd2 <at_parse_detect_type+0xae>
		return -1;
   16caa:	f04f 30ff 	mov.w	r0, #4294967295
   16cae:	e7c8      	b.n	16c42 <at_parse_detect_type+0x1e>
	state = new_state;
   16cb0:	2302      	movs	r3, #2
   16cb2:	e7c3      	b.n	16c3c <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   16cb4:	dd03      	ble.n	16cbe <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16cb6:	2a2b      	cmp	r2, #43	; 0x2b
   16cb8:	d0f7      	beq.n	16caa <at_parse_detect_type+0x86>
   16cba:	2a25      	cmp	r2, #37	; 0x25
   16cbc:	d0f5      	beq.n	16caa <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   16cbe:	4b08      	ldr	r3, [pc, #32]	; (16ce0 <at_parse_detect_type+0xbc>)
   16cc0:	5cd3      	ldrb	r3, [r2, r3]
   16cc2:	0759      	lsls	r1, r3, #29
   16cc4:	d403      	bmi.n	16cce <at_parse_detect_type+0xaa>
   16cc6:	2a2d      	cmp	r2, #45	; 0x2d
   16cc8:	d001      	beq.n	16cce <at_parse_detect_type+0xaa>
   16cca:	2a2b      	cmp	r2, #43	; 0x2b
   16ccc:	d1c0      	bne.n	16c50 <at_parse_detect_type+0x2c>
	state = new_state;
   16cce:	2204      	movs	r2, #4
   16cd0:	4b01      	ldr	r3, [pc, #4]	; (16cd8 <at_parse_detect_type+0xb4>)
   16cd2:	701a      	strb	r2, [r3, #0]
}
   16cd4:	e7b3      	b.n	16c3e <at_parse_detect_type+0x1a>
   16cd6:	bf00      	nop
   16cd8:	20029e46 	.word	0x20029e46
   16cdc:	00024001 	.word	0x00024001
   16ce0:	0002a974 	.word	0x0002a974

00016ce4 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   16ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ce8:	4688      	mov	r8, r1
   16cea:	4616      	mov	r6, r2
   16cec:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   16cee:	4604      	mov	r4, r0
   16cf0:	2800      	cmp	r0, #0
   16cf2:	d07e      	beq.n	16df2 <at_parser_max_params_from_str+0x10e>
   16cf4:	2a00      	cmp	r2, #0
   16cf6:	d07c      	beq.n	16df2 <at_parser_max_params_from_str+0x10e>
   16cf8:	6853      	ldr	r3, [r2, #4]
   16cfa:	2b00      	cmp	r3, #0
   16cfc:	d079      	beq.n	16df2 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   16cfe:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   16d00:	4610      	mov	r0, r2
   16d02:	f00f f8fb 	bl	25efc <at_params_list_clear>
	const char *str = *at_params_str;
   16d06:	9401      	str	r4, [sp, #4]
	int index = 0;
   16d08:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   16d0a:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   16d0c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 16dfc <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   16d10:	429f      	cmp	r7, r3
   16d12:	bf28      	it	cs
   16d14:	461f      	movcs	r7, r3
	state = IDLE;
   16d16:	4b38      	ldr	r3, [pc, #224]	; (16df8 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16d18:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 16e00 <at_parser_max_params_from_str+0x11c>
   16d1c:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   16d1e:	9b01      	ldr	r3, [sp, #4]
   16d20:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16d22:	2a00      	cmp	r2, #0
   16d24:	d04b      	beq.n	16dbe <at_parser_max_params_from_str+0xda>
   16d26:	42a7      	cmp	r7, r4
   16d28:	d949      	bls.n	16dbe <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   16d2a:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   16d2e:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   16d30:	0711      	lsls	r1, r2, #28
			str++;
   16d32:	bf48      	it	mi
   16d34:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   16d36:	4621      	mov	r1, r4
			str++;
   16d38:	bf48      	it	mi
   16d3a:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   16d3c:	f7ff ff72 	bl	16c24 <at_parse_detect_type>
   16d40:	1c42      	adds	r2, r0, #1
   16d42:	d03c      	beq.n	16dbe <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   16d44:	4632      	mov	r2, r6
   16d46:	4621      	mov	r1, r4
   16d48:	a801      	add	r0, sp, #4
   16d4a:	f7ff fe5d 	bl	16a08 <at_parse_process_element>
   16d4e:	1c43      	adds	r3, r0, #1
   16d50:	d035      	beq.n	16dbe <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   16d52:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16d54:	781a      	ldrb	r2, [r3, #0]
   16d56:	3a2c      	subs	r2, #44	; 0x2c
   16d58:	b2d2      	uxtb	r2, r2
   16d5a:	2a11      	cmp	r2, #17
   16d5c:	d81a      	bhi.n	16d94 <at_parser_max_params_from_str+0xb0>
   16d5e:	fa2a f202 	lsr.w	r2, sl, r2
   16d62:	07d1      	lsls	r1, r2, #31
   16d64:	d516      	bpl.n	16d94 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   16d66:	7858      	ldrb	r0, [r3, #1]
   16d68:	f00f f84d 	bl	25e06 <is_lfcr>
   16d6c:	b178      	cbz	r0, 16d8e <at_parser_max_params_from_str+0xaa>
				index++;
   16d6e:	3401      	adds	r4, #1
				if (index == max_params) {
   16d70:	42bc      	cmp	r4, r7
   16d72:	d039      	beq.n	16de8 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   16d74:	4621      	mov	r1, r4
   16d76:	a801      	add	r0, sp, #4
   16d78:	f7ff ff54 	bl	16c24 <at_parse_detect_type>
   16d7c:	1c42      	adds	r2, r0, #1
   16d7e:	d01e      	beq.n	16dbe <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   16d80:	4632      	mov	r2, r6
   16d82:	4621      	mov	r1, r4
   16d84:	a801      	add	r0, sp, #4
   16d86:	f7ff fe3f 	bl	16a08 <at_parse_process_element>
   16d8a:	1c43      	adds	r3, r0, #1
   16d8c:	d017      	beq.n	16dbe <at_parser_max_params_from_str+0xda>
			str++;
   16d8e:	9b01      	ldr	r3, [sp, #4]
   16d90:	3301      	adds	r3, #1
   16d92:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   16d94:	9a01      	ldr	r2, [sp, #4]
   16d96:	7810      	ldrb	r0, [r2, #0]
   16d98:	f00f f835 	bl	25e06 <is_lfcr>
   16d9c:	b1f8      	cbz	r0, 16dde <at_parser_max_params_from_str+0xfa>
   16d9e:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   16da0:	7811      	ldrb	r1, [r2, #0]
   16da2:	4693      	mov	fp, r2
   16da4:	4608      	mov	r0, r1
   16da6:	3201      	adds	r2, #1
   16da8:	f00f f82d 	bl	25e06 <is_lfcr>
   16dac:	2800      	cmp	r0, #0
   16dae:	d1f7      	bne.n	16da0 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16db0:	b119      	cbz	r1, 16dba <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16db2:	292b      	cmp	r1, #43	; 0x2b
   16db4:	d001      	beq.n	16dba <at_parser_max_params_from_str+0xd6>
   16db6:	2925      	cmp	r1, #37	; 0x25
   16db8:	d111      	bne.n	16dde <at_parser_max_params_from_str+0xfa>
				str += i;
   16dba:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   16dbe:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   16dc0:	b9a5      	cbnz	r5, 16dec <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16dc2:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   16dc4:	2a00      	cmp	r2, #0
   16dc6:	bf0c      	ite	eq
   16dc8:	2000      	moveq	r0, #0
   16dca:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   16dce:	f1b8 0f00 	cmp.w	r8, #0
   16dd2:	d001      	beq.n	16dd8 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   16dd4:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   16dd8:	b003      	add	sp, #12
   16dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   16dde:	3401      	adds	r4, #1
			oversized = true;
   16de0:	42bc      	cmp	r4, r7
   16de2:	bf08      	it	eq
   16de4:	2501      	moveq	r5, #1
   16de6:	e79a      	b.n	16d1e <at_parser_max_params_from_str+0x3a>
					oversized = true;
   16de8:	4605      	mov	r5, r0
   16dea:	e7e8      	b.n	16dbe <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   16dec:	f06f 0006 	mvn.w	r0, #6
   16df0:	e7ed      	b.n	16dce <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   16df2:	f06f 0015 	mvn.w	r0, #21
   16df6:	e7ef      	b.n	16dd8 <at_parser_max_params_from_str+0xf4>
   16df8:	20029e46 	.word	0x20029e46
   16dfc:	0002a974 	.word	0x0002a974
   16e00:	00024001 	.word	0x00024001

00016e04 <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   16e04:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   16e06:	2300      	movs	r3, #0
   16e08:	4804      	ldr	r0, [pc, #16]	; (16e1c <lte_lc_power_off+0x18>)
   16e0a:	461a      	mov	r2, r3
   16e0c:	4619      	mov	r1, r3
   16e0e:	f7ff fc91 	bl	16734 <at_cmd_write>
   16e12:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   16e14:	bf18      	it	ne
   16e16:	f06f 0004 	mvnne.w	r0, #4
   16e1a:	bd08      	pop	{r3, pc}
   16e1c:	0002a31e 	.word	0x0002a31e

00016e20 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   16e20:	b510      	push	{r4, lr}
   16e22:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   16e24:	4a09      	ldr	r2, [pc, #36]	; (16e4c <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   16e26:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   16e28:	7823      	ldrb	r3, [r4, #0]
   16e2a:	2100      	movs	r1, #0
   16e2c:	f7ff ff5a 	bl	16ce4 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   16e30:	f110 0f0b 	cmn.w	r0, #11
   16e34:	d000      	beq.n	16e38 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   16e36:	b940      	cbnz	r0, 16e4a <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   16e38:	4804      	ldr	r0, [pc, #16]	; (16e4c <modem_info_parse.isra.0+0x2c>)
   16e3a:	f00f f943 	bl	260c4 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   16e3e:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   16e40:	4298      	cmp	r0, r3
   16e42:	bf94      	ite	ls
   16e44:	2000      	movls	r0, #0
   16e46:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   16e4a:	bd10      	pop	{r4, pc}
   16e4c:	20021c38 	.word	0x20021c38

00016e50 <modem_info_type_get>:

enum at_param_type modem_info_type_get(enum modem_info info_type)
{
	if (info_type >= MODEM_INFO_COUNT) {
   16e50:	2815      	cmp	r0, #21
		return -EINVAL;
	}

	return modem_data[info_type]->data_type;
   16e52:	bf9d      	ittte	ls
   16e54:	4b02      	ldrls	r3, [pc, #8]	; (16e60 <modem_info_type_get+0x10>)
   16e56:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   16e5a:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   16e5c:	20ea      	movhi	r0, #234	; 0xea
}
   16e5e:	4770      	bx	lr
   16e60:	00028178 	.word	0x00028178

00016e64 <modem_info_short_get>:
}

int modem_info_short_get(enum modem_info info, u16_t *buf)
{
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   16e64:	2300      	movs	r3, #0
{
   16e66:	b530      	push	{r4, r5, lr}
   16e68:	460d      	mov	r5, r1
   16e6a:	b0a1      	sub	sp, #132	; 0x84
   16e6c:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   16e6e:	227c      	movs	r2, #124	; 0x7c
   16e70:	4619      	mov	r1, r3
   16e72:	a801      	add	r0, sp, #4
   16e74:	9300      	str	r3, [sp, #0]
   16e76:	f00f fdd3 	bl	26a20 <memset>
	int cmd_length = 0;

	if (buf == NULL) {
   16e7a:	b1e5      	cbz	r5, 16eb6 <modem_info_short_get+0x52>
		return -EINVAL;
	}

	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   16e7c:	4a11      	ldr	r2, [pc, #68]	; (16ec4 <modem_info_short_get+0x60>)
   16e7e:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   16e82:	7aa2      	ldrb	r2, [r4, #10]
   16e84:	2a03      	cmp	r2, #3
   16e86:	d016      	beq.n	16eb6 <modem_info_short_get+0x52>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   16e88:	2300      	movs	r3, #0
   16e8a:	2280      	movs	r2, #128	; 0x80
   16e8c:	4669      	mov	r1, sp
   16e8e:	6820      	ldr	r0, [r4, #0]
   16e90:	f7ff fc50 	bl	16734 <at_cmd_write>
			   recv_buf,
			   CONFIG_MODEM_INFO_BUFFER_SIZE,
			   NULL);

	if (err != 0) {
   16e94:	b990      	cbnz	r0, 16ebc <modem_info_short_get+0x58>
		return -EIO;
	}

	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   16e96:	4669      	mov	r1, sp
   16e98:	f104 0009 	add.w	r0, r4, #9
   16e9c:	f7ff ffc0 	bl	16e20 <modem_info_parse.isra.0>

	if (err) {
   16ea0:	b938      	cbnz	r0, 16eb2 <modem_info_short_get+0x4e>
		return err;
	}

	err = at_params_short_get(&m_param_list,
   16ea2:	462a      	mov	r2, r5
   16ea4:	7a21      	ldrb	r1, [r4, #8]
   16ea6:	4808      	ldr	r0, [pc, #32]	; (16ec8 <modem_info_short_get+0x64>)
   16ea8:	f00f f8c4 	bl	26034 <at_params_short_get>

	if (err) {
		return err;
	}

	return sizeof(u16_t);
   16eac:	2800      	cmp	r0, #0
   16eae:	bf08      	it	eq
   16eb0:	2002      	moveq	r0, #2
}
   16eb2:	b021      	add	sp, #132	; 0x84
   16eb4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   16eb6:	f06f 0015 	mvn.w	r0, #21
   16eba:	e7fa      	b.n	16eb2 <modem_info_short_get+0x4e>
		return -EIO;
   16ebc:	f06f 0004 	mvn.w	r0, #4
   16ec0:	e7f7      	b.n	16eb2 <modem_info_short_get+0x4e>
   16ec2:	bf00      	nop
   16ec4:	00028178 	.word	0x00028178
   16ec8:	20021c38 	.word	0x20021c38

00016ecc <modem_info_string_get>:

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   16ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   16ed0:	2500      	movs	r5, #0
{
   16ed2:	460e      	mov	r6, r1
   16ed4:	b0a5      	sub	sp, #148	; 0x94
   16ed6:	4680      	mov	r8, r0
   16ed8:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   16eda:	4629      	mov	r1, r5
   16edc:	227c      	movs	r2, #124	; 0x7c
   16ede:	a805      	add	r0, sp, #20
   16ee0:	9504      	str	r5, [sp, #16]
   16ee2:	f00f fd9d 	bl	26a20 <memset>
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   16ee6:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   16ee8:	2e00      	cmp	r6, #0
   16eea:	f000 80e4 	beq.w	170b6 <modem_info_string_get+0x1ea>
   16eee:	f1b9 0f00 	cmp.w	r9, #0
   16ef2:	f000 80e0 	beq.w	170b6 <modem_info_string_get+0x1ea>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   16ef6:	4b74      	ldr	r3, [pc, #464]	; (170c8 <modem_info_string_get+0x1fc>)
   16ef8:	2280      	movs	r2, #128	; 0x80
   16efa:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   16efe:	a904      	add	r1, sp, #16
   16f00:	462b      	mov	r3, r5
   16f02:	f8da 0000 	ldr.w	r0, [sl]
   16f06:	f7ff fc15 	bl	16734 <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   16f0a:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   16f0e:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   16f10:	d10c      	bne.n	16f2c <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   16f12:	f10d 0119 	add.w	r1, sp, #25
   16f16:	4630      	mov	r0, r6
   16f18:	f00f fef3 	bl	26d02 <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   16f1c:	4630      	mov	r0, r6
   16f1e:	f7f5 ffa7 	bl	ce70 <strlen>
   16f22:	4601      	mov	r1, r0
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   16f24:	4608      	mov	r0, r1
   16f26:	b025      	add	sp, #148	; 0x94
   16f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   16f2c:	f1b8 0f09 	cmp.w	r8, #9
   16f30:	d038      	beq.n	16fa4 <modem_info_string_get+0xd8>
	if (err != 0) {
   16f32:	2c00      	cmp	r4, #0
   16f34:	f040 80c2 	bne.w	170bc <modem_info_string_get+0x1f0>
	size_t ip_str_len = 0;
   16f38:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   16f3a:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 170ec <modem_info_string_get+0x220>
	size_t cmd_rsp_idx = 0;
   16f3e:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   16f40:	9a00      	ldr	r2, [sp, #0]
   16f42:	ab04      	add	r3, sp, #16
   16f44:	f1b8 0f09 	cmp.w	r8, #9
   16f48:	4413      	add	r3, r2
   16f4a:	d10f      	bne.n	16f6c <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   16f4c:	4618      	mov	r0, r3
   16f4e:	495f      	ldr	r1, [pc, #380]	; (170cc <modem_info_string_get+0x200>)
   16f50:	9301      	str	r3, [sp, #4]
   16f52:	f00f ff46 	bl	26de2 <strstr>
		if (ip_str_end == NULL) {
   16f56:	2800      	cmp	r0, #0
   16f58:	f000 80b3 	beq.w	170c2 <modem_info_string_get+0x1f6>
		recv_buf[++ip_str_len] = 0;
   16f5c:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   16f5e:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   16f60:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   16f62:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   16f64:	1c47      	adds	r7, r0, #1
   16f66:	443a      	add	r2, r7
   16f68:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   16f6c:	4619      	mov	r1, r3
   16f6e:	f10a 0009 	add.w	r0, sl, #9
   16f72:	f7ff ff55 	bl	16e20 <modem_info_parse.isra.0>
	if (err) {
   16f76:	4601      	mov	r1, r0
   16f78:	b1b8      	cbz	r0, 16faa <modem_info_string_get+0xde>
   16f7a:	4a55      	ldr	r2, [pc, #340]	; (170d0 <modem_info_string_get+0x204>)
   16f7c:	4b55      	ldr	r3, [pc, #340]	; (170d4 <modem_info_string_get+0x208>)
		LOG_ERR("Unable to parse data: %d", err);
   16f7e:	9000      	str	r0, [sp, #0]
   16f80:	1ad2      	subs	r2, r2, r3
   16f82:	08d2      	lsrs	r2, r2, #3
   16f84:	0192      	lsls	r2, r2, #6
   16f86:	4854      	ldr	r0, [pc, #336]	; (170d8 <modem_info_string_get+0x20c>)
   16f88:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Unable to obtain short: %d", err);
   16f8c:	f00c fc12 	bl	237b4 <log_1>
			return err;
   16f90:	9900      	ldr	r1, [sp, #0]
   16f92:	e7c7      	b.n	16f24 <modem_info_string_get+0x58>
			++ip_str_end;
   16f94:	3001      	adds	r0, #1
			++ip_cnt;
   16f96:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   16f98:	4639      	mov	r1, r7
   16f9a:	f00f ff22 	bl	26de2 <strstr>
   16f9e:	2800      	cmp	r0, #0
   16fa0:	d1f8      	bne.n	16f94 <modem_info_string_get+0xc8>
   16fa2:	e7c6      	b.n	16f32 <modem_info_string_get+0x66>
   16fa4:	4f49      	ldr	r7, [pc, #292]	; (170cc <modem_info_string_get+0x200>)
	char *ip_str_end = recv_buf;
   16fa6:	a804      	add	r0, sp, #16
   16fa8:	e7f6      	b.n	16f98 <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   16faa:	f89a 300a 	ldrb.w	r3, [sl, #10]
   16fae:	2b01      	cmp	r3, #1
   16fb0:	d11e      	bne.n	16ff0 <modem_info_string_get+0x124>
		err = at_params_short_get(&m_param_list,
   16fb2:	f89a 1008 	ldrb.w	r1, [sl, #8]
   16fb6:	4658      	mov	r0, fp
   16fb8:	f10d 020a 	add.w	r2, sp, #10
   16fbc:	f00f f83a 	bl	26034 <at_params_short_get>
		if (err) {
   16fc0:	4601      	mov	r1, r0
   16fc2:	b148      	cbz	r0, 16fd8 <modem_info_string_get+0x10c>
   16fc4:	4a42      	ldr	r2, [pc, #264]	; (170d0 <modem_info_string_get+0x204>)
   16fc6:	4b43      	ldr	r3, [pc, #268]	; (170d4 <modem_info_string_get+0x208>)
			LOG_ERR("Unable to obtain short: %d", err);
   16fc8:	9000      	str	r0, [sp, #0]
   16fca:	1ad2      	subs	r2, r2, r3
   16fcc:	08d2      	lsrs	r2, r2, #3
   16fce:	0192      	lsls	r2, r2, #6
   16fd0:	4842      	ldr	r0, [pc, #264]	; (170dc <modem_info_string_get+0x210>)
   16fd2:	f042 0201 	orr.w	r2, r2, #1
   16fd6:	e7d9      	b.n	16f8c <modem_info_string_get+0xc0>
		err = snprintf(buf, buf_size, "%d", param_value);
   16fd8:	4649      	mov	r1, r9
   16fda:	4630      	mov	r0, r6
   16fdc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   16fe0:	4a3f      	ldr	r2, [pc, #252]	; (170e0 <modem_info_string_get+0x214>)
   16fe2:	f00b f931 	bl	22248 <sniprintf>
		if ((err <= 0) || (err > buf_size)) {
   16fe6:	4548      	cmp	r0, r9
   16fe8:	d915      	bls.n	17016 <modem_info_string_get+0x14a>
			return -EMSGSIZE;
   16fea:	f06f 0179 	mvn.w	r1, #121	; 0x79
   16fee:	e799      	b.n	16f24 <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   16ff0:	2b03      	cmp	r3, #3
   16ff2:	d110      	bne.n	17016 <modem_info_string_get+0x14a>
		len = buf_size - out_buf_len;
   16ff4:	eba9 0304 	sub.w	r3, r9, r4
		err = at_params_string_get(&m_param_list,
   16ff8:	f89a 1008 	ldrb.w	r1, [sl, #8]
		len = buf_size - out_buf_len;
   16ffc:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   16ffe:	4658      	mov	r0, fp
   17000:	ab03      	add	r3, sp, #12
   17002:	1932      	adds	r2, r6, r4
   17004:	f00f f83b 	bl	2607e <at_params_string_get>
		if (err != 0) {
   17008:	4601      	mov	r1, r0
   1700a:	2800      	cmp	r0, #0
   1700c:	d18a      	bne.n	16f24 <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   1700e:	9b03      	ldr	r3, [sp, #12]
   17010:	454b      	cmp	r3, r9
   17012:	d2ea      	bcs.n	16fea <modem_info_string_get+0x11e>
		buf[len] = 0;
   17014:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   17016:	f1b8 0f0e 	cmp.w	r8, #14
   1701a:	d121      	bne.n	17060 <modem_info_string_get+0x194>
   1701c:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1701e:	4630      	mov	r0, r6
   17020:	f7f5 ff26 	bl	ce70 <strlen>
   17024:	1ca3      	adds	r3, r4, #2
   17026:	1ba4      	subs	r4, r4, r6
   17028:	42a0      	cmp	r0, r4
   1702a:	d80f      	bhi.n	1704c <modem_info_string_get+0x180>
		if ((len == ICCID_LEN) &&
   1702c:	9b03      	ldr	r3, [sp, #12]
   1702e:	2b14      	cmp	r3, #20
   17030:	d106      	bne.n	17040 <modem_info_string_get+0x174>
   17032:	7cf3      	ldrb	r3, [r6, #19]
   17034:	2b46      	cmp	r3, #70	; 0x46
   17036:	d103      	bne.n	17040 <modem_info_string_get+0x174>
			buf[len - 1] = '\0';
   17038:	2300      	movs	r3, #0
   1703a:	74f3      	strb	r3, [r6, #19]
			--len;
   1703c:	2313      	movs	r3, #19
   1703e:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   17040:	9903      	ldr	r1, [sp, #12]
   17042:	2900      	cmp	r1, #0
   17044:	bf08      	it	eq
   17046:	f06f 0185 	mvneq.w	r1, #133	; 0x85
   1704a:	e76b      	b.n	16f24 <modem_info_string_get+0x58>
		current_char = buf[i];
   1704c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   17050:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   17054:	461c      	mov	r4, r3
		buf[i] = next_char;
   17056:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   1705a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1705e:	e7de      	b.n	1701e <modem_info_string_get+0x152>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   17060:	f1b8 0f09 	cmp.w	r8, #9
   17064:	d1ec      	bne.n	17040 <modem_info_string_get+0x174>
   17066:	2d00      	cmp	r5, #0
   17068:	ddea      	ble.n	17040 <modem_info_string_get+0x174>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   1706a:	1933      	adds	r3, r6, r4
   1706c:	4618      	mov	r0, r3
   1706e:	491d      	ldr	r1, [pc, #116]	; (170e4 <modem_info_string_get+0x218>)
   17070:	9301      	str	r3, [sp, #4]
   17072:	f00f feb6 	bl	26de2 <strstr>
		if (ip_v6_str) {
   17076:	b130      	cbz	r0, 17086 <modem_info_string_get+0x1ba>
			*ip_v6_str = 0;
   17078:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   1707a:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   1707c:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   1707e:	4618      	mov	r0, r3
   17080:	f7f5 fef6 	bl	ce70 <strlen>
   17084:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   17086:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   17088:	2d01      	cmp	r5, #1
		out_buf_len += len;
   1708a:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   1708c:	d00e      	beq.n	170ac <modem_info_string_get+0x1e0>
			err = snprintf(&buf[out_buf_len],
   1708e:	eba9 0104 	sub.w	r1, r9, r4
   17092:	4a15      	ldr	r2, [pc, #84]	; (170e8 <modem_info_string_get+0x21c>)
   17094:	1930      	adds	r0, r6, r4
   17096:	9100      	str	r1, [sp, #0]
   17098:	f00b f8d6 	bl	22248 <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   1709c:	2800      	cmp	r0, #0
   1709e:	dda4      	ble.n	16fea <modem_info_string_get+0x11e>
   170a0:	9900      	ldr	r1, [sp, #0]
   170a2:	4281      	cmp	r1, r0
   170a4:	d3a1      	bcc.n	16fea <modem_info_string_get+0x11e>
			cmd_rsp_idx = ip_str_len + 1;
   170a6:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   170a8:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   170aa:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   170ac:	3d01      	subs	r5, #1
   170ae:	f47f af47 	bne.w	16f40 <modem_info_string_get+0x74>
			len = out_buf_len;
   170b2:	9403      	str	r4, [sp, #12]
   170b4:	e7c4      	b.n	17040 <modem_info_string_get+0x174>
		return -EINVAL;
   170b6:	f06f 0115 	mvn.w	r1, #21
   170ba:	e733      	b.n	16f24 <modem_info_string_get+0x58>
		return -EIO;
   170bc:	f06f 0104 	mvn.w	r1, #4
   170c0:	e730      	b.n	16f24 <modem_info_string_get+0x58>
			return -EFAULT;
   170c2:	f06f 010d 	mvn.w	r1, #13
   170c6:	e72d      	b.n	16f24 <modem_info_string_get+0x58>
   170c8:	00028178 	.word	0x00028178
   170cc:	000295b0 	.word	0x000295b0
   170d0:	00027b88 	.word	0x00027b88
   170d4:	00027b20 	.word	0x00027b20
   170d8:	0002a496 	.word	0x0002a496
   170dc:	0002a4af 	.word	0x0002a4af
   170e0:	000294c1 	.word	0x000294c1
   170e4:	00029a41 	.word	0x00029a41
   170e8:	0002a4ca 	.word	0x0002a4ca
   170ec:	20021c38 	.word	0x20021c38

000170f0 <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   170f0:	210a      	movs	r1, #10
   170f2:	4801      	ldr	r0, [pc, #4]	; (170f8 <modem_info_init+0x8>)
   170f4:	f00e beef 	b.w	25ed6 <at_params_list_init>
   170f8:	20021c38 	.word	0x20021c38

000170fc <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   170fc:	b538      	push	{r3, r4, r5, lr}
   170fe:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   17100:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   17104:	f7ff fea4 	bl	16e50 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   17108:	2803      	cmp	r0, #3
   1710a:	d118      	bne.n	1713e <modem_data_get+0x42>
		ret = modem_info_string_get(param->type,
   1710c:	2264      	movs	r2, #100	; 0x64
   1710e:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   17112:	1ca9      	adds	r1, r5, #2
   17114:	f7ff feda 	bl	16ecc <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   17118:	1e04      	subs	r4, r0, #0
   1711a:	db02      	blt.n	17122 <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   1711c:	2400      	movs	r4, #0
}
   1711e:	4620      	mov	r0, r4
   17120:	bd38      	pop	{r3, r4, r5, pc}
   17122:	4a11      	ldr	r2, [pc, #68]	; (17168 <modem_data_get+0x6c>)
   17124:	4b11      	ldr	r3, [pc, #68]	; (1716c <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   17126:	f895 106c 	ldrb.w	r1, [r5, #108]	; 0x6c
   1712a:	1a9b      	subs	r3, r3, r2
   1712c:	08db      	lsrs	r3, r3, #3
   1712e:	019b      	lsls	r3, r3, #6
   17130:	4622      	mov	r2, r4
   17132:	480f      	ldr	r0, [pc, #60]	; (17170 <modem_data_get+0x74>)
   17134:	f043 0301 	orr.w	r3, r3, #1
   17138:	f00c fb53 	bl	237e2 <log_2>
			return ret;
   1713c:	e7ef      	b.n	1711e <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   1713e:	2801      	cmp	r0, #1
   17140:	d1ec      	bne.n	1711c <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   17142:	4629      	mov	r1, r5
   17144:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   17148:	f7ff fe8c 	bl	16e64 <modem_info_short_get>
		if (ret < 0) {
   1714c:	1e04      	subs	r4, r0, #0
   1714e:	dae5      	bge.n	1711c <modem_data_get+0x20>
   17150:	4b05      	ldr	r3, [pc, #20]	; (17168 <modem_data_get+0x6c>)
   17152:	4a06      	ldr	r2, [pc, #24]	; (1716c <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d", ret);
   17154:	4621      	mov	r1, r4
   17156:	1ad2      	subs	r2, r2, r3
   17158:	08d2      	lsrs	r2, r2, #3
   1715a:	0192      	lsls	r2, r2, #6
   1715c:	4805      	ldr	r0, [pc, #20]	; (17174 <modem_data_get+0x78>)
   1715e:	f042 0201 	orr.w	r2, r2, #1
   17162:	f00c fb27 	bl	237b4 <log_1>
			return ret;
   17166:	e7da      	b.n	1711e <modem_data_get+0x22>
   17168:	00027b20 	.word	0x00027b20
   1716c:	00027b90 	.word	0x00027b90
   17170:	0002a4cd 	.word	0x0002a4cd
   17174:	0002a4eb 	.word	0x0002a4eb

00017178 <modem_info_params_init>:
	if (modem == NULL) {
   17178:	2800      	cmp	r0, #0
   1717a:	d046      	beq.n	1720a <modem_info_params_init+0x92>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   1717c:	2301      	movs	r3, #1
   1717e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   17182:	2302      	movs	r3, #2
   17184:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   17188:	2303      	movs	r3, #3
   1718a:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   1718e:	2305      	movs	r3, #5
   17190:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   17194:	2306      	movs	r3, #6
   17196:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   1719a:	2307      	movs	r3, #7
   1719c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   171a0:	2308      	movs	r3, #8
   171a2:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   171a6:	2309      	movs	r3, #9
   171a8:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   171ac:	2304      	movs	r3, #4
   171ae:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   171b2:	230f      	movs	r3, #15
   171b4:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   171b8:	2310      	movs	r3, #16
   171ba:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   171be:	2311      	movs	r3, #17
   171c0:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   171c4:	2314      	movs	r3, #20
   171c6:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   171ca:	2315      	movs	r3, #21
   171cc:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   171d0:	230a      	movs	r3, #10
   171d2:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   171d6:	230e      	movs	r3, #14
   171d8:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   171dc:	2312      	movs	r3, #18
   171de:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   171e2:	230d      	movs	r3, #13
   171e4:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   171e8:	230b      	movs	r3, #11
   171ea:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   171ee:	2313      	movs	r3, #19
   171f0:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   171f4:	4b06      	ldr	r3, [pc, #24]	; (17210 <modem_info_params_init+0x98>)
   171f6:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   171fa:	4b06      	ldr	r3, [pc, #24]	; (17214 <modem_info_params_init+0x9c>)
   171fc:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   17200:	4b05      	ldr	r3, [pc, #20]	; (17218 <modem_info_params_init+0xa0>)
   17202:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
	return 0;
   17206:	2000      	movs	r0, #0
   17208:	4770      	bx	lr
		return -EINVAL;
   1720a:	f06f 0015 	mvn.w	r0, #21
}
   1720e:	4770      	bx	lr
   17210:	0002a506 	.word	0x0002a506
   17214:	0002a515 	.word	0x0002a515
   17218:	0002a51c 	.word	0x0002a51c

0001721c <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   1721c:	e92d 4477 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, sl, lr}
	int ret;

	if (modem == NULL) {
   17220:	4604      	mov	r4, r0
   17222:	2800      	cmp	r0, #0
   17224:	f000 80ce 	beq.w	173c4 <modem_info_params_get+0x1a8>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   17228:	f7ff ff68 	bl	170fc <modem_data_get>
   1722c:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   1722e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   17232:	f7ff ff63 	bl	170fc <modem_data_get>
   17236:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   17238:	f504 7044 	add.w	r0, r4, #784	; 0x310
   1723c:	f7ff ff5e 	bl	170fc <modem_data_get>
   17240:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   17242:	f504 7060 	add.w	r0, r4, #896	; 0x380
   17246:	f7ff ff59 	bl	170fc <modem_data_get>
		ret += modem_data_get(&modem->network.current_operator);
   1724a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		ret += modem_data_get(&modem->network.ue_mode);
   1724e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   17250:	4618      	mov	r0, r3
   17252:	9301      	str	r3, [sp, #4]
   17254:	f7ff ff52 	bl	170fc <modem_data_get>
   17258:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   1725a:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   1725e:	f7ff ff4d 	bl	170fc <modem_data_get>
		ret += modem_data_get(&modem->network.area_code);
   17262:	f104 0ae0 	add.w	sl, r4, #224	; 0xe0
		ret += modem_data_get(&modem->network.cellid_hex);
   17266:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   17268:	4650      	mov	r0, sl
   1726a:	f7ff ff47 	bl	170fc <modem_data_get>
   1726e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   17270:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   17274:	f7ff ff42 	bl	170fc <modem_data_get>
   17278:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   1727a:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   1727e:	f7ff ff3d 	bl	170fc <modem_data_get>
   17282:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   17284:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   17288:	f7ff ff38 	bl	170fc <modem_data_get>
   1728c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   1728e:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   17292:	f7ff ff33 	bl	170fc <modem_data_get>
   17296:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   17298:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   1729c:	f7ff ff2e 	bl	170fc <modem_data_get>
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   172a0:	9b01      	ldr	r3, [sp, #4]
			ret += modem_data_get(&modem->network.date_time);
   172a2:	4405      	add	r5, r0
		}

		ret += mcc_mnc_parse(&modem->network.current_operator,
   172a4:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
   172a8:	f504 720c 	add.w	r2, r4, #560	; 0x230
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   172ac:	2b00      	cmp	r3, #0
   172ae:	d050      	beq.n	17352 <modem_info_params_get+0x136>
   172b0:	2900      	cmp	r1, #0
   172b2:	d04e      	beq.n	17352 <modem_info_params_get+0x136>
   172b4:	2a00      	cmp	r2, #0
   172b6:	d04c      	beq.n	17352 <modem_info_params_get+0x136>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   172b8:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
	memcpy(mcc->value_string, current_operator->value_string, 3);
   172bc:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   172c0:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   172c4:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   172c8:	220a      	movs	r2, #10
   172ca:	7083      	strb	r3, [r0, #2]
   172cc:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   172d0:	2100      	movs	r1, #0
   172d2:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   172d6:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   172da:	f204 2632 	addw	r6, r4, #562	; 0x232
   172de:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   172e2:	f00b f87d 	bl	223e0 <strtol>
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   172e6:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   172e8:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   172ec:	220a      	movs	r2, #10
   172ee:	4630      	mov	r0, r6
   172f0:	f00b f876 	bl	223e0 <strtol>
	return 0;
   172f4:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   172f6:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   172fa:	2210      	movs	r2, #16
		ret += mcc_mnc_parse(&modem->network.current_operator,
   172fc:	440d      	add	r5, r1
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   172fe:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   17302:	2100      	movs	r1, #0
   17304:	f00b f86c 	bl	223e0 <strtol>
   17308:	f7f5 f8ec 	bl	c4e4 <__aeabi_i2d>
   1730c:	f504 66c4 	add.w	r6, r4, #1568	; 0x620
   17310:	e9c6 0100 	strd	r0, r1, [r6]
	if (area_code == NULL) {
   17314:	f1ba 0f00 	cmp.w	sl, #0
   17318:	d01e      	beq.n	17358 <modem_info_params_get+0x13c>
	area_code->value_string[4] = '\0';
   1731a:	2600      	movs	r6, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   1731c:	2210      	movs	r2, #16
   1731e:	4631      	mov	r1, r6
	area_code->value_string[4] = '\0';
   17320:	f884 60e6 	strb.w	r6, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   17324:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   17328:	f00b f85a 	bl	223e0 <strtol>
   1732c:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   17330:	19a9      	adds	r1, r5, r6
   17332:	d014      	beq.n	1735e <modem_info_params_get+0x142>
   17334:	4a25      	ldr	r2, [pc, #148]	; (173cc <modem_info_params_get+0x1b0>)
   17336:	4b26      	ldr	r3, [pc, #152]	; (173d0 <modem_info_params_get+0x1b4>)
			LOG_ERR("Network data not obtained: %d", ret);
   17338:	4826      	ldr	r0, [pc, #152]	; (173d4 <modem_info_params_get+0x1b8>)
   1733a:	1ad2      	subs	r2, r2, r3
   1733c:	08d2      	lsrs	r2, r2, #3
   1733e:	0192      	lsls	r2, r2, #6
   17340:	f042 0201 	orr.w	r2, r2, #1
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   17344:	f00c fa36 	bl	237b4 <log_1>
			return -EAGAIN;
   17348:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   1734c:	b003      	add	sp, #12
   1734e:	e8bd 8470 	ldmia.w	sp!, {r4, r5, r6, sl, pc}
		return -EINVAL;
   17352:	f06f 0115 	mvn.w	r1, #21
   17356:	e7d0      	b.n	172fa <modem_info_params_get+0xde>
		return -EINVAL;
   17358:	f06f 0615 	mvn.w	r6, #21
   1735c:	e7e8      	b.n	17330 <modem_info_params_get+0x114>
		ret = modem_data_get(&modem->sim.uicc);
   1735e:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   17362:	f7ff fecb 	bl	170fc <modem_data_get>
   17366:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   17368:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   1736c:	f7ff fec6 	bl	170fc <modem_data_get>
   17370:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   17372:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   17376:	f7ff fec1 	bl	170fc <modem_data_get>
		if (ret) {
   1737a:	1829      	adds	r1, r5, r0
   1737c:	d008      	beq.n	17390 <modem_info_params_get+0x174>
   1737e:	4a13      	ldr	r2, [pc, #76]	; (173cc <modem_info_params_get+0x1b0>)
   17380:	4b13      	ldr	r3, [pc, #76]	; (173d0 <modem_info_params_get+0x1b4>)
			LOG_ERR("Sim data not obtained: %d", ret);
   17382:	4815      	ldr	r0, [pc, #84]	; (173d8 <modem_info_params_get+0x1bc>)
   17384:	1ad2      	subs	r2, r2, r3
   17386:	08d2      	lsrs	r2, r2, #3
   17388:	0192      	lsls	r2, r2, #6
   1738a:	f042 0201 	orr.w	r2, r2, #1
   1738e:	e7d9      	b.n	17344 <modem_info_params_get+0x128>
		ret = modem_data_get(&modem->device.modem_fw);
   17390:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   17394:	f7ff feb2 	bl	170fc <modem_data_get>
   17398:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   1739a:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   1739e:	f7ff fead 	bl	170fc <modem_data_get>
   173a2:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   173a4:	f604 0068 	addw	r0, r4, #2152	; 0x868
   173a8:	f7ff fea8 	bl	170fc <modem_data_get>
		if (ret) {
   173ac:	1828      	adds	r0, r5, r0
   173ae:	d0cd      	beq.n	1734c <modem_info_params_get+0x130>
   173b0:	4a06      	ldr	r2, [pc, #24]	; (173cc <modem_info_params_get+0x1b0>)
   173b2:	4b07      	ldr	r3, [pc, #28]	; (173d0 <modem_info_params_get+0x1b4>)
			LOG_ERR("Device data not obtained: %d", ret);
   173b4:	4601      	mov	r1, r0
   173b6:	1ad2      	subs	r2, r2, r3
   173b8:	08d2      	lsrs	r2, r2, #3
   173ba:	0192      	lsls	r2, r2, #6
   173bc:	4807      	ldr	r0, [pc, #28]	; (173dc <modem_info_params_get+0x1c0>)
   173be:	f042 0201 	orr.w	r2, r2, #1
   173c2:	e7bf      	b.n	17344 <modem_info_params_get+0x128>
		return -EINVAL;
   173c4:	f06f 0015 	mvn.w	r0, #21
   173c8:	e7c0      	b.n	1734c <modem_info_params_get+0x130>
   173ca:	bf00      	nop
   173cc:	00027b90 	.word	0x00027b90
   173d0:	00027b20 	.word	0x00027b20
   173d4:	0002a529 	.word	0x0002a529
   173d8:	0002a547 	.word	0x0002a547
   173dc:	0002a561 	.word	0x0002a561

000173e0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   173e0:	b508      	push	{r3, lr}
	z_impl_log_panic();
   173e2:	f7fb fd47 	bl	12e74 <z_impl_log_panic>
   173e6:	4b06      	ldr	r3, [pc, #24]	; (17400 <k_sys_fatal_error_handler+0x20>)
   173e8:	4906      	ldr	r1, [pc, #24]	; (17404 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   173ea:	4807      	ldr	r0, [pc, #28]	; (17408 <k_sys_fatal_error_handler+0x28>)
   173ec:	1ac9      	subs	r1, r1, r3
   173ee:	08c9      	lsrs	r1, r1, #3
   173f0:	0189      	lsls	r1, r1, #6
   173f2:	f041 0101 	orr.w	r1, r1, #1
   173f6:	f00c f9ce 	bl	23796 <log_0>
	sys_arch_reboot(0);
   173fa:	2000      	movs	r0, #0
   173fc:	f7fd f8b2 	bl	14564 <sys_arch_reboot>

	CODE_UNREACHABLE;
   17400:	00027b20 	.word	0x00027b20
   17404:	00027b50 	.word	0x00027b50
   17408:	0002a590 	.word	0x0002a590

0001740c <do_ftp_recv_ctrl>:
}

/**@brief Receive FTP message from socket
 */
static int do_ftp_recv_ctrl(bool post_result, int success_code)
{
   1740c:	b570      	push	{r4, r5, r6, lr}
   1740e:	460c      	mov	r4, r1
	int ret;
	struct pollfd fds[1];

	/* Receive FTP control message */
	fds[0].fd = client.sock;
	fds[0].events = POLLIN;
   17410:	2101      	movs	r1, #1
	fds[0].fd = client.sock;
   17412:	4d2d      	ldr	r5, [pc, #180]	; (174c8 <do_ftp_recv_ctrl+0xbc>)
{
   17414:	b086      	sub	sp, #24
	fds[0].fd = client.sock;
   17416:	682b      	ldr	r3, [r5, #0]
{
   17418:	4606      	mov	r6, r0
	fds[0].fd = client.sock;
   1741a:	9304      	str	r3, [sp, #16]
	fds[0].events = POLLIN;
   1741c:	f8ad 1014 	strh.w	r1, [sp, #20]
	return z_impl_zsock_poll(fds, nfds, timeout);
   17420:	f242 7210 	movw	r2, #10000	; 0x2710
   17424:	a804      	add	r0, sp, #16
   17426:	f7fc f86f 	bl	13508 <z_impl_zsock_poll>
	ret = poll(fds, 1, MSEC_PER_SEC * CONFIG_FTP_CLIENT_LISTEN_TIME);
	if (ret <= 0) {
   1742a:	2800      	cmp	r0, #0
   1742c:	dc12      	bgt.n	17454 <do_ftp_recv_ctrl+0x48>
   1742e:	4a27      	ldr	r2, [pc, #156]	; (174cc <do_ftp_recv_ctrl+0xc0>)
   17430:	4c27      	ldr	r4, [pc, #156]	; (174d0 <do_ftp_recv_ctrl+0xc4>)
   17432:	1aa4      	subs	r4, r4, r2
		LOG_ERR("poll(ctrl) failed: (%d)", -errno);
   17434:	f00c ff96 	bl	24364 <__errno>
   17438:	08e4      	lsrs	r4, r4, #3
   1743a:	6801      	ldr	r1, [r0, #0]
   1743c:	01a4      	lsls	r4, r4, #6
   1743e:	f044 0401 	orr.w	r4, r4, #1
   17442:	4824      	ldr	r0, [pc, #144]	; (174d4 <do_ftp_recv_ctrl+0xc8>)
   17444:	4622      	mov	r2, r4
   17446:	4249      	negs	r1, r1
   17448:	f00c f9b4 	bl	237b4 <log_1>
		return -ETIMEDOUT;
   1744c:	f06f 0073 	mvn.w	r0, #115	; 0x73
		client.ctrl_callback(ctrl_buf, ret);
	}

	LOG_DBG("CTRL received");
	return parse_return_code(ctrl_buf, success_code);
}
   17450:	b006      	add	sp, #24
   17452:	bd70      	pop	{r4, r5, r6, pc}
	ret = recv(client.sock, ctrl_buf, sizeof(ctrl_buf), 0);
   17454:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   17456:	2300      	movs	r3, #0
   17458:	491f      	ldr	r1, [pc, #124]	; (174d8 <do_ftp_recv_ctrl+0xcc>)
   1745a:	f44f 7210 	mov.w	r2, #576	; 0x240
   1745e:	e9cd 3300 	strd	r3, r3, [sp]
   17462:	f00c fd7c 	bl	23f5e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   17466:	1e01      	subs	r1, r0, #0
   17468:	da13      	bge.n	17492 <do_ftp_recv_ctrl+0x86>
   1746a:	4a18      	ldr	r2, [pc, #96]	; (174cc <do_ftp_recv_ctrl+0xc0>)
   1746c:	4c18      	ldr	r4, [pc, #96]	; (174d0 <do_ftp_recv_ctrl+0xc4>)
   1746e:	1aa4      	subs	r4, r4, r2
		LOG_ERR("recv(ctrl) failed: (%d)", -errno);
   17470:	f00c ff78 	bl	24364 <__errno>
   17474:	08e4      	lsrs	r4, r4, #3
   17476:	6801      	ldr	r1, [r0, #0]
   17478:	01a4      	lsls	r4, r4, #6
   1747a:	f044 0401 	orr.w	r4, r4, #1
   1747e:	4622      	mov	r2, r4
   17480:	4816      	ldr	r0, [pc, #88]	; (174dc <do_ftp_recv_ctrl+0xd0>)
   17482:	4249      	negs	r1, r1
   17484:	f00c f996 	bl	237b4 <log_1>
		return -errno;
   17488:	f00c ff6c 	bl	24364 <__errno>
   1748c:	6800      	ldr	r0, [r0, #0]
   1748e:	4240      	negs	r0, r0
   17490:	e7de      	b.n	17450 <do_ftp_recv_ctrl+0x44>
	if (ret == 0) {
   17492:	d015      	beq.n	174c0 <do_ftp_recv_ctrl+0xb4>
	if (post_result) {
   17494:	b11e      	cbz	r6, 1749e <do_ftp_recv_ctrl+0x92>
		client.ctrl_callback(ctrl_buf, ret);
   17496:	696b      	ldr	r3, [r5, #20]
   17498:	480f      	ldr	r0, [pc, #60]	; (174d8 <do_ftp_recv_ctrl+0xcc>)
   1749a:	b289      	uxth	r1, r1
   1749c:	4798      	blx	r3
	sprintf(code_str, "%d ", success_code);
   1749e:	2206      	movs	r2, #6
   174a0:	2100      	movs	r1, #0
   174a2:	4b0f      	ldr	r3, [pc, #60]	; (174e0 <do_ftp_recv_ctrl+0xd4>)
   174a4:	9400      	str	r4, [sp, #0]
   174a6:	a802      	add	r0, sp, #8
   174a8:	f00f fc04 	bl	26cb4 <__sprintf_chk>
	if (strstr(message, code_str)) {
   174ac:	480a      	ldr	r0, [pc, #40]	; (174d8 <do_ftp_recv_ctrl+0xcc>)
   174ae:	a902      	add	r1, sp, #8
   174b0:	f00f fc97 	bl	26de2 <strstr>
	int ret = FTP_CODE_500;
   174b4:	2800      	cmp	r0, #0
   174b6:	bf14      	ite	ne
   174b8:	4620      	movne	r0, r4
   174ba:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
	return parse_return_code(ctrl_buf, success_code);
   174be:	e7c7      	b.n	17450 <do_ftp_recv_ctrl+0x44>
		return -ECONNRESET;
   174c0:	f06f 0067 	mvn.w	r0, #103	; 0x67
   174c4:	e7c4      	b.n	17450 <do_ftp_recv_ctrl+0x44>
   174c6:	bf00      	nop
   174c8:	20021c40 	.word	0x20021c40
   174cc:	00027b20 	.word	0x00027b20
   174d0:	00027b60 	.word	0x00027b60
   174d4:	0002a5ad 	.word	0x0002a5ad
   174d8:	20029e47 	.word	0x20029e47
   174dc:	0002a5c5 	.word	0x0002a5c5
   174e0:	0002a5dd 	.word	0x0002a5dd

000174e4 <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   174e4:	4601      	mov	r1, r0
   174e6:	f100 0308 	add.w	r3, r0, #8
   174ea:	e8d3 2fef 	ldaex	r2, [r3]
   174ee:	f042 0001 	orr.w	r0, r2, #1
   174f2:	e8c3 0fec 	stlex	ip, r0, [r3]
   174f6:	f1bc 0f00 	cmp.w	ip, #0
   174fa:	d1f6      	bne.n	174ea <k_work_submit_to_queue.constprop.0+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   174fc:	07d3      	lsls	r3, r2, #31
   174fe:	d402      	bmi.n	17506 <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
   17500:	4801      	ldr	r0, [pc, #4]	; (17508 <k_work_submit_to_queue.constprop.0+0x24>)
   17502:	f00e bf60 	b.w	263c6 <k_queue_append>
	}
}
   17506:	4770      	bx	lr
   17508:	20021cb4 	.word	0x20021cb4

0001750c <keepalive_timeout>:

K_WORK_DEFINE(keepalive_work, keepalive_handler);

static void keepalive_timeout(struct k_timer *dummy)
{
	k_work_submit_to_queue(&ftp_work_q, &keepalive_work);
   1750c:	4801      	ldr	r0, [pc, #4]	; (17514 <keepalive_timeout+0x8>)
   1750e:	f7ff bfe9 	b.w	174e4 <k_work_submit_to_queue.constprop.0>
   17512:	bf00      	nop
   17514:	200203c4 	.word	0x200203c4

00017518 <do_ftp_send_ctrl>:
{
   17518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0;
   1751c:	2400      	movs	r4, #0
{
   1751e:	4606      	mov	r6, r0
   17520:	460d      	mov	r5, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   17522:	4627      	mov	r7, r4
		ret = send(client.sock, message + offset, length - offset, 0);
   17524:	f8df 805c 	ldr.w	r8, [pc, #92]	; 17584 <do_ftp_send_ctrl+0x6c>
	while (offset < length) {
   17528:	42a5      	cmp	r5, r4
   1752a:	d801      	bhi.n	17530 <do_ftp_send_ctrl+0x18>
   1752c:	2000      	movs	r0, #0
	return ret;
   1752e:	e01d      	b.n	1756c <do_ftp_send_ctrl+0x54>
		ret = send(client.sock, message + offset, length - offset, 0);
   17530:	f8d8 0000 	ldr.w	r0, [r8]
   17534:	2300      	movs	r3, #0
   17536:	e9cd 7700 	strd	r7, r7, [sp]
   1753a:	1b2a      	subs	r2, r5, r4
   1753c:	1931      	adds	r1, r6, r4
   1753e:	f00c fce3 	bl	23f08 <z_impl_zsock_sendto>
		if (ret < 0) {
   17542:	1e03      	subs	r3, r0, #0
   17544:	da15      	bge.n	17572 <do_ftp_send_ctrl+0x5a>
   17546:	4a0c      	ldr	r2, [pc, #48]	; (17578 <do_ftp_send_ctrl+0x60>)
   17548:	4c0c      	ldr	r4, [pc, #48]	; (1757c <do_ftp_send_ctrl+0x64>)
   1754a:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send(ctrl) failed: %d", -errno);
   1754c:	f00c ff0a 	bl	24364 <__errno>
   17550:	08e4      	lsrs	r4, r4, #3
   17552:	6801      	ldr	r1, [r0, #0]
   17554:	01a4      	lsls	r4, r4, #6
   17556:	f044 0401 	orr.w	r4, r4, #1
   1755a:	4622      	mov	r2, r4
   1755c:	4808      	ldr	r0, [pc, #32]	; (17580 <do_ftp_send_ctrl+0x68>)
   1755e:	4249      	negs	r1, r1
   17560:	f00c f928 	bl	237b4 <log_1>
			ret = -errno;
   17564:	f00c fefe 	bl	24364 <__errno>
   17568:	6800      	ldr	r0, [r0, #0]
   1756a:	4240      	negs	r0, r0
}
   1756c:	b002      	add	sp, #8
   1756e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   17572:	441c      	add	r4, r3
		ret = 0;
   17574:	e7d8      	b.n	17528 <do_ftp_send_ctrl+0x10>
   17576:	bf00      	nop
   17578:	00027b20 	.word	0x00027b20
   1757c:	00027b60 	.word	0x00027b60
   17580:	0002a5e1 	.word	0x0002a5e1
   17584:	20021c40 	.word	0x20021c40

00017588 <keepalive_handler>:
{
   17588:	b508      	push	{r3, lr}
	ret = do_ftp_send_ctrl(CMD_NOOP, sizeof(CMD_NOOP) - 1);
   1758a:	2106      	movs	r1, #6
   1758c:	4804      	ldr	r0, [pc, #16]	; (175a0 <keepalive_handler+0x18>)
   1758e:	f7ff ffc3 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17592:	b920      	cbnz	r0, 1759e <keepalive_handler+0x16>
}
   17594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void)do_ftp_recv_ctrl(false, FTP_CODE_200);
   17598:	21c8      	movs	r1, #200	; 0xc8
   1759a:	f7ff bf37 	b.w	1740c <do_ftp_recv_ctrl>
}
   1759e:	bd08      	pop	{r3, pc}
   175a0:	0002a5f7 	.word	0x0002a5f7

000175a4 <establish_data_channel>:
{
   175a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	tmp1 = strstr(pasv_msg, "(");
   175a6:	4952      	ldr	r1, [pc, #328]	; (176f0 <establish_data_channel+0x14c>)
{
   175a8:	b089      	sub	sp, #36	; 0x24
	tmp1 = strstr(pasv_msg, "(");
   175aa:	f00f fc1a 	bl	26de2 <strstr>
	tmp2 = strstr(tmp1, ",");
   175ae:	4951      	ldr	r1, [pc, #324]	; (176f4 <establish_data_channel+0x150>)
   175b0:	3001      	adds	r0, #1
   175b2:	f00f fc16 	bl	26de2 <strstr>
	tmp1 = strstr(tmp2, ",");
   175b6:	494f      	ldr	r1, [pc, #316]	; (176f4 <establish_data_channel+0x150>)
   175b8:	3001      	adds	r0, #1
   175ba:	f00f fc12 	bl	26de2 <strstr>
	tmp2 = strstr(tmp1, ",");
   175be:	494d      	ldr	r1, [pc, #308]	; (176f4 <establish_data_channel+0x150>)
   175c0:	3001      	adds	r0, #1
   175c2:	f00f fc0e 	bl	26de2 <strstr>
	tmp1 = strstr(tmp2, ",");
   175c6:	494b      	ldr	r1, [pc, #300]	; (176f4 <establish_data_channel+0x150>)
   175c8:	3001      	adds	r0, #1
   175ca:	f00f fc0a 	bl	26de2 <strstr>
	tmp1++;
   175ce:	1c45      	adds	r5, r0, #1
	tmp2 = strstr(tmp1, ",");
   175d0:	4628      	mov	r0, r5
   175d2:	4948      	ldr	r1, [pc, #288]	; (176f4 <establish_data_channel+0x150>)
   175d4:	f00f fc05 	bl	26de2 <strstr>
	memset(tmp, 0x00, 16);
   175d8:	2210      	movs	r2, #16
	tmp2 = strstr(tmp1, ",");
   175da:	4604      	mov	r4, r0
	memset(tmp, 0x00, 16);
   175dc:	2100      	movs	r1, #0
   175de:	eb0d 0002 	add.w	r0, sp, r2
   175e2:	f00f fa1d 	bl	26a20 <memset>
	strncpy(tmp, (const char *)tmp1, (size_t)(tmp2 - tmp1));
   175e6:	2310      	movs	r3, #16
   175e8:	1b62      	subs	r2, r4, r5
   175ea:	eb0d 0003 	add.w	r0, sp, r3
   175ee:	4629      	mov	r1, r5
   175f0:	f00f fbd0 	bl	26d94 <__strncpy_chk>
	data_port = atoi(tmp) << 8;
   175f4:	a804      	add	r0, sp, #16
   175f6:	f00f f9e6 	bl	269c6 <atoi>
	tmp2++;
   175fa:	3401      	adds	r4, #1
	data_port = atoi(tmp) << 8;
   175fc:	4606      	mov	r6, r0
	tmp1 = strstr(tmp2, ")");
   175fe:	493e      	ldr	r1, [pc, #248]	; (176f8 <establish_data_channel+0x154>)
   17600:	4620      	mov	r0, r4
   17602:	f00f fbee 	bl	26de2 <strstr>
	memset(tmp, 0x00, 16);
   17606:	2210      	movs	r2, #16
	tmp1 = strstr(tmp2, ")");
   17608:	4605      	mov	r5, r0
	memset(tmp, 0x00, 16);
   1760a:	2100      	movs	r1, #0
   1760c:	eb0d 0002 	add.w	r0, sp, r2
   17610:	f00f fa06 	bl	26a20 <memset>
	strncpy(tmp, (const char *)tmp2, (size_t)(tmp1 - tmp2));
   17614:	2310      	movs	r3, #16
   17616:	4621      	mov	r1, r4
   17618:	eb0d 0003 	add.w	r0, sp, r3
   1761c:	1b2a      	subs	r2, r5, r4
   1761e:	f00f fbb9 	bl	26d94 <__strncpy_chk>
	data_port += atoi(tmp);
   17622:	a804      	add	r0, sp, #16
   17624:	f00f f9cf 	bl	269c6 <atoi>
	if (client.sec_tag <= 0) {
   17628:	4f34      	ldr	r7, [pc, #208]	; (176fc <establish_data_channel+0x158>)
	data_port += atoi(tmp);
   1762a:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	if (client.sec_tag <= 0) {
   1762e:	693b      	ldr	r3, [r7, #16]
	data_port += atoi(tmp);
   17630:	b286      	uxth	r6, r0
	if (client.sec_tag <= 0) {
   17632:	2b00      	cmp	r3, #0
	return z_impl_zsock_socket(family, type, proto);
   17634:	f04f 0101 	mov.w	r1, #1
   17638:	bfd4      	ite	le
   1763a:	2206      	movle	r2, #6
   1763c:	f44f 7281 	movgt.w	r2, #258	; 0x102
   17640:	4608      	mov	r0, r1
   17642:	f7fb ff3b 	bl	134bc <z_impl_zsock_socket>
	if (data_sock < 0) {
   17646:	2800      	cmp	r0, #0
   17648:	4604      	mov	r4, r0
   1764a:	da10      	bge.n	1766e <establish_data_channel+0xca>
   1764c:	4a2c      	ldr	r2, [pc, #176]	; (17700 <establish_data_channel+0x15c>)
   1764e:	4d2d      	ldr	r5, [pc, #180]	; (17704 <establish_data_channel+0x160>)
   17650:	1aad      	subs	r5, r5, r2
		LOG_ERR("socket(data) failed: %d", -errno);
   17652:	f00c fe87 	bl	24364 <__errno>
   17656:	08ed      	lsrs	r5, r5, #3
   17658:	6801      	ldr	r1, [r0, #0]
   1765a:	01ad      	lsls	r5, r5, #6
   1765c:	f045 0501 	orr.w	r5, r5, #1
   17660:	462a      	mov	r2, r5
   17662:	4829      	ldr	r0, [pc, #164]	; (17708 <establish_data_channel+0x164>)
   17664:	4249      	negs	r1, r1
   17666:	f00c f8a5 	bl	237b4 <log_1>
		ret = -errno;
   1766a:	f00c fe7b 	bl	24364 <__errno>
	if (client.sec_tag > 0) {
   1766e:	693b      	ldr	r3, [r7, #16]
   17670:	2b00      	cmp	r3, #0
   17672:	dd23      	ble.n	176bc <establish_data_channel+0x118>
		sec_tag_t sec_tag_list[1] = { client.sec_tag };
   17674:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   17676:	2304      	movs	r3, #4
   17678:	2201      	movs	r2, #1
   1767a:	9300      	str	r3, [sp, #0]
   1767c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   17680:	4620      	mov	r0, r4
   17682:	ab03      	add	r3, sp, #12
   17684:	f00c fca2 	bl	23fcc <z_impl_zsock_setsockopt>
		if (ret) {
   17688:	b1c0      	cbz	r0, 176bc <establish_data_channel+0x118>
   1768a:	4a1d      	ldr	r2, [pc, #116]	; (17700 <establish_data_channel+0x15c>)
   1768c:	4d1d      	ldr	r5, [pc, #116]	; (17704 <establish_data_channel+0x160>)
   1768e:	1aad      	subs	r5, r5, r2
   17690:	08ed      	lsrs	r5, r5, #3
			LOG_ERR("set tag list failed: %d", -errno);
   17692:	f00c fe67 	bl	24364 <__errno>
   17696:	01ad      	lsls	r5, r5, #6
   17698:	f045 0501 	orr.w	r5, r5, #1
   1769c:	462a      	mov	r2, r5
   1769e:	6801      	ldr	r1, [r0, #0]
   176a0:	481a      	ldr	r0, [pc, #104]	; (1770c <establish_data_channel+0x168>)
   176a2:	4249      	negs	r1, r1
		LOG_ERR("connect(data) failed: %d", -errno);
   176a4:	f00c f886 	bl	237b4 <log_1>
		close(data_sock);
   176a8:	4620      	mov	r0, r4
   176aa:	f00e fd20 	bl	260ee <close>
		return -errno;
   176ae:	f00c fe59 	bl	24364 <__errno>
   176b2:	6804      	ldr	r4, [r0, #0]
   176b4:	4264      	negs	r4, r4
}
   176b6:	4620      	mov	r0, r4
   176b8:	b009      	add	sp, #36	; 0x24
   176ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client.remote.sin_port = htons(data_port);
   176bc:	0230      	lsls	r0, r6, #8
   176be:	ea40 2616 	orr.w	r6, r0, r6, lsr #8
   176c2:	817e      	strh	r6, [r7, #10]
	return z_impl_zsock_connect(sock, addr, addrlen);
   176c4:	2208      	movs	r2, #8
   176c6:	4620      	mov	r0, r4
   176c8:	4911      	ldr	r1, [pc, #68]	; (17710 <establish_data_channel+0x16c>)
   176ca:	f00c fbe9 	bl	23ea0 <z_impl_zsock_connect>
	if (ret < 0) {
   176ce:	2800      	cmp	r0, #0
   176d0:	daf1      	bge.n	176b6 <establish_data_channel+0x112>
   176d2:	4a0b      	ldr	r2, [pc, #44]	; (17700 <establish_data_channel+0x15c>)
   176d4:	4d0b      	ldr	r5, [pc, #44]	; (17704 <establish_data_channel+0x160>)
   176d6:	1aad      	subs	r5, r5, r2
		LOG_ERR("connect(data) failed: %d", -errno);
   176d8:	f00c fe44 	bl	24364 <__errno>
   176dc:	08ed      	lsrs	r5, r5, #3
   176de:	6801      	ldr	r1, [r0, #0]
   176e0:	01ad      	lsls	r5, r5, #6
   176e2:	f045 0501 	orr.w	r5, r5, #1
   176e6:	462a      	mov	r2, r5
   176e8:	480a      	ldr	r0, [pc, #40]	; (17714 <establish_data_channel+0x170>)
   176ea:	4249      	negs	r1, r1
   176ec:	e7da      	b.n	176a4 <establish_data_channel+0x100>
   176ee:	bf00      	nop
   176f0:	00029f07 	.word	0x00029f07
   176f4:	0002a5fe 	.word	0x0002a5fe
   176f8:	0002a2af 	.word	0x0002a2af
   176fc:	20021c40 	.word	0x20021c40
   17700:	00027b20 	.word	0x00027b20
   17704:	00027b60 	.word	0x00027b60
   17708:	0002a600 	.word	0x0002a600
   1770c:	00028fc3 	.word	0x00028fc3
   17710:	20021c48 	.word	0x20021c48
   17714:	0002a618 	.word	0x0002a618

00017718 <do_ftp_recv_data>:
{
   17718:	b530      	push	{r4, r5, lr}
   1771a:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	ret = establish_data_channel(pasv_msg);
   1771e:	f7ff ff41 	bl	175a4 <establish_data_channel>
	if (ret < 0) {
   17722:	1e05      	subs	r5, r0, #0
   17724:	db2d      	blt.n	17782 <do_ftp_recv_data+0x6a>
	fds[0].events = POLLIN;
   17726:	2301      	movs	r3, #1
		client.data_callback(data_buf, ret);
   17728:	4c27      	ldr	r4, [pc, #156]	; (177c8 <do_ftp_recv_data+0xb0>)
	fds[0].fd = data_sock;
   1772a:	9502      	str	r5, [sp, #8]
	fds[0].events = POLLIN;
   1772c:	f8ad 300c 	strh.w	r3, [sp, #12]
	return z_impl_zsock_poll(fds, nfds, timeout);
   17730:	f242 7210 	movw	r2, #10000	; 0x2710
   17734:	2101      	movs	r1, #1
   17736:	a802      	add	r0, sp, #8
   17738:	f7fb fee6 	bl	13508 <z_impl_zsock_poll>
		if (ret <= 0) {
   1773c:	2800      	cmp	r0, #0
   1773e:	dc0f      	bgt.n	17760 <do_ftp_recv_data+0x48>
   17740:	4a22      	ldr	r2, [pc, #136]	; (177cc <do_ftp_recv_data+0xb4>)
   17742:	4c23      	ldr	r4, [pc, #140]	; (177d0 <do_ftp_recv_data+0xb8>)
   17744:	1aa4      	subs	r4, r4, r2
   17746:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("poll(data) failed: (%d)", -errno);
   17748:	f00c fe0c 	bl	24364 <__errno>
   1774c:	01a4      	lsls	r4, r4, #6
   1774e:	f044 0401 	orr.w	r4, r4, #1
   17752:	4622      	mov	r2, r4
   17754:	6801      	ldr	r1, [r0, #0]
   17756:	481f      	ldr	r0, [pc, #124]	; (177d4 <do_ftp_recv_data+0xbc>)
   17758:	4249      	negs	r1, r1
			LOG_ERR("recv(data) failed: (%d)", -errno);
   1775a:	f00c f82b 	bl	237b4 <log_1>
   1775e:	e00d      	b.n	1777c <do_ftp_recv_data+0x64>
		if ((fds[0].revents & POLLIN) != POLLIN) {
   17760:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   17764:	07db      	lsls	r3, r3, #31
   17766:	d40f      	bmi.n	17788 <do_ftp_recv_data+0x70>
   17768:	4919      	ldr	r1, [pc, #100]	; (177d0 <do_ftp_recv_data+0xb8>)
   1776a:	4b18      	ldr	r3, [pc, #96]	; (177cc <do_ftp_recv_data+0xb4>)
			LOG_INF("No more data");
   1776c:	481a      	ldr	r0, [pc, #104]	; (177d8 <do_ftp_recv_data+0xc0>)
   1776e:	1ac9      	subs	r1, r1, r3
   17770:	08c9      	lsrs	r1, r1, #3
   17772:	0189      	lsls	r1, r1, #6
   17774:	f041 0103 	orr.w	r1, r1, #3
   17778:	f00c f80d 	bl	23796 <log_0>
	close(data_sock);
   1777c:	4628      	mov	r0, r5
   1777e:	f00e fcb6 	bl	260ee <close>
}
   17782:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   17786:	bd30      	pop	{r4, r5, pc}
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   17788:	2300      	movs	r3, #0
   1778a:	a904      	add	r1, sp, #16
   1778c:	f44f 7210 	mov.w	r2, #576	; 0x240
   17790:	4628      	mov	r0, r5
   17792:	e9cd 3300 	strd	r3, r3, [sp]
   17796:	f00c fbe2 	bl	23f5e <z_impl_zsock_recvfrom>
		if (ret < 0) {
   1779a:	1e01      	subs	r1, r0, #0
   1779c:	da0d      	bge.n	177ba <do_ftp_recv_data+0xa2>
   1779e:	4a0b      	ldr	r2, [pc, #44]	; (177cc <do_ftp_recv_data+0xb4>)
   177a0:	4c0b      	ldr	r4, [pc, #44]	; (177d0 <do_ftp_recv_data+0xb8>)
   177a2:	1aa4      	subs	r4, r4, r2
			LOG_ERR("recv(data) failed: (%d)", -errno);
   177a4:	f00c fdde 	bl	24364 <__errno>
   177a8:	08e4      	lsrs	r4, r4, #3
   177aa:	6801      	ldr	r1, [r0, #0]
   177ac:	01a4      	lsls	r4, r4, #6
   177ae:	f044 0401 	orr.w	r4, r4, #1
   177b2:	4622      	mov	r2, r4
   177b4:	4809      	ldr	r0, [pc, #36]	; (177dc <do_ftp_recv_data+0xc4>)
   177b6:	4249      	negs	r1, r1
   177b8:	e7cf      	b.n	1775a <do_ftp_recv_data+0x42>
		if (ret == 0) {
   177ba:	d0df      	beq.n	1777c <do_ftp_recv_data+0x64>
		client.data_callback(data_buf, ret);
   177bc:	69a3      	ldr	r3, [r4, #24]
   177be:	b289      	uxth	r1, r1
   177c0:	a804      	add	r0, sp, #16
   177c2:	4798      	blx	r3
		ret = poll(fds, 1,
   177c4:	e7b4      	b.n	17730 <do_ftp_recv_data+0x18>
   177c6:	bf00      	nop
   177c8:	20021c40 	.word	0x20021c40
   177cc:	00027b20 	.word	0x00027b20
   177d0:	00027b60 	.word	0x00027b60
   177d4:	0002a631 	.word	0x0002a631
   177d8:	0002a649 	.word	0x0002a649
   177dc:	0002a656 	.word	0x0002a656

000177e0 <data_task>:
{
   177e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (task_param->task == TASK_RECEIVE) {
   177e4:	7b04      	ldrb	r4, [r0, #12]
   177e6:	2c01      	cmp	r4, #1
   177e8:	d108      	bne.n	177fc <data_task+0x1c>
		do_ftp_recv_data(task_param->ctrl_msg);
   177ea:	300d      	adds	r0, #13
   177ec:	f7ff ff94 	bl	17718 <do_ftp_recv_data>
	z_impl_k_sem_give(sem);
   177f0:	481b      	ldr	r0, [pc, #108]	; (17860 <data_task+0x80>)
}
   177f2:	b002      	add	sp, #8
   177f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   177f8:	f009 bd16 	b.w	21228 <z_impl_k_sem_give>
	} else if (task_param->task == TASK_SEND) {
   177fc:	bb64      	cbnz	r4, 17858 <data_task+0x78>
		do_ftp_send_data(task_param->ctrl_msg,
   177fe:	6d07      	ldr	r7, [r0, #80]	; 0x50
   17800:	f8b0 6054 	ldrh.w	r6, [r0, #84]	; 0x54
	ret = establish_data_channel(pasv_msg);
   17804:	300d      	adds	r0, #13
   17806:	f7ff fecd 	bl	175a4 <establish_data_channel>
	if (ret < 0) {
   1780a:	1e05      	subs	r5, r0, #0
   1780c:	db20      	blt.n	17850 <data_task+0x70>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1780e:	46a0      	mov	r8, r4
	while (offset < length) {
   17810:	42b4      	cmp	r4, r6
   17812:	d21a      	bcs.n	1784a <data_task+0x6a>
   17814:	2300      	movs	r3, #0
   17816:	4628      	mov	r0, r5
   17818:	e9cd 8800 	strd	r8, r8, [sp]
   1781c:	1b32      	subs	r2, r6, r4
   1781e:	1939      	adds	r1, r7, r4
   17820:	f00c fb72 	bl	23f08 <z_impl_zsock_sendto>
		if (ret < 0) {
   17824:	2800      	cmp	r0, #0
   17826:	da15      	bge.n	17854 <data_task+0x74>
   17828:	4a0e      	ldr	r2, [pc, #56]	; (17864 <data_task+0x84>)
   1782a:	4c0f      	ldr	r4, [pc, #60]	; (17868 <data_task+0x88>)
   1782c:	1aa4      	subs	r4, r4, r2
			LOG_ERR("send(data) failed: %d", -errno);
   1782e:	f00c fd99 	bl	24364 <__errno>
   17832:	08e4      	lsrs	r4, r4, #3
   17834:	6801      	ldr	r1, [r0, #0]
   17836:	01a4      	lsls	r4, r4, #6
   17838:	f044 0401 	orr.w	r4, r4, #1
   1783c:	4622      	mov	r2, r4
   1783e:	480b      	ldr	r0, [pc, #44]	; (1786c <data_task+0x8c>)
   17840:	4249      	negs	r1, r1
   17842:	f00b ffb7 	bl	237b4 <log_1>
			ret = -errno;
   17846:	f00c fd8d 	bl	24364 <__errno>
	close(data_sock);
   1784a:	4628      	mov	r0, r5
   1784c:	f00e fc4f 	bl	260ee <close>
   17850:	4807      	ldr	r0, [pc, #28]	; (17870 <data_task+0x90>)
   17852:	e7ce      	b.n	177f2 <data_task+0x12>
		offset += ret;
   17854:	4404      	add	r4, r0
		ret = 0;
   17856:	e7db      	b.n	17810 <data_task+0x30>
}
   17858:	b002      	add	sp, #8
   1785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1785e:	bf00      	nop
   17860:	20020768 	.word	0x20020768
   17864:	00027b20 	.word	0x00027b20
   17868:	00027b60 	.word	0x00027b60
   1786c:	0002a66e 	.word	0x0002a66e
   17870:	20020780 	.word	0x20020780

00017874 <ftp_open>:
}

K_TIMER_DEFINE(keepalive_timer, keepalive_timeout, NULL);

int ftp_open(const char *hostname, u16_t port, int sec_tag)
{
   17874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17878:	b098      	sub	sp, #96	; 0x60
   1787a:	4680      	mov	r8, r0
   1787c:	460e      	mov	r6, r1
   1787e:	4617      	mov	r7, r2
	int ret;
	struct addrinfo *result;
	struct addrinfo hints = {
   17880:	2100      	movs	r1, #0
   17882:	2250      	movs	r2, #80	; 0x50
   17884:	a804      	add	r0, sp, #16
   17886:	f00f f8cb 	bl	26a20 <memset>
   1788a:	2101      	movs	r1, #1
		.ai_family = AF_INET
	};

	if (client.connected) {
   1788c:	4d5b      	ldr	r5, [pc, #364]	; (179fc <ftp_open+0x188>)
	struct addrinfo hints = {
   1788e:	9106      	str	r1, [sp, #24]
	if (client.connected) {
   17890:	792b      	ldrb	r3, [r5, #4]
   17892:	b17b      	cbz	r3, 178b4 <ftp_open+0x40>
   17894:	4b5a      	ldr	r3, [pc, #360]	; (17a00 <ftp_open+0x18c>)
   17896:	495b      	ldr	r1, [pc, #364]	; (17a04 <ftp_open+0x190>)
		LOG_ERR("FTP already connected");
   17898:	485b      	ldr	r0, [pc, #364]	; (17a08 <ftp_open+0x194>)
   1789a:	1ac9      	subs	r1, r1, r3
   1789c:	08c9      	lsrs	r1, r1, #3
   1789e:	0189      	lsls	r1, r1, #6
   178a0:	f041 0101 	orr.w	r1, r1, #1
   178a4:	f00b ff77 	bl	23796 <log_0>
		return -EINVAL;
   178a8:	f06f 0415 	mvn.w	r4, #21
		return ret;
	}

	LOG_DBG("FTP opened");
	return ret;
}
   178ac:	4620      	mov	r0, r4
   178ae:	b018      	add	sp, #96	; 0x60
   178b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sec_tag <= 0) {
   178b4:	2f00      	cmp	r7, #0
	return z_impl_zsock_socket(family, type, proto);
   178b6:	bfd4      	ite	le
   178b8:	2206      	movle	r2, #6
   178ba:	f44f 7281 	movgt.w	r2, #258	; 0x102
   178be:	4608      	mov	r0, r1
   178c0:	f7fb fdfc 	bl	134bc <z_impl_zsock_socket>
		client.sock = socket(AF_INET, SOCK_STREAM,
   178c4:	6028      	str	r0, [r5, #0]
	if (client.sock < 0) {
   178c6:	682b      	ldr	r3, [r5, #0]
   178c8:	2b00      	cmp	r3, #0
   178ca:	da10      	bge.n	178ee <ftp_open+0x7a>
   178cc:	4a4c      	ldr	r2, [pc, #304]	; (17a00 <ftp_open+0x18c>)
   178ce:	4c4d      	ldr	r4, [pc, #308]	; (17a04 <ftp_open+0x190>)
   178d0:	1aa4      	subs	r4, r4, r2
		LOG_ERR("socket(ctrl) failed: %d", -errno);
   178d2:	f00c fd47 	bl	24364 <__errno>
   178d6:	08e4      	lsrs	r4, r4, #3
   178d8:	6801      	ldr	r1, [r0, #0]
   178da:	01a4      	lsls	r4, r4, #6
   178dc:	f044 0401 	orr.w	r4, r4, #1
   178e0:	4622      	mov	r2, r4
   178e2:	484a      	ldr	r0, [pc, #296]	; (17a0c <ftp_open+0x198>)
   178e4:	4249      	negs	r1, r1
   178e6:	f00b ff65 	bl	237b4 <log_1>
		ret = -errno;
   178ea:	f00c fd3b 	bl	24364 <__errno>
	if (sec_tag > 0) {
   178ee:	2f00      	cmp	r7, #0
   178f0:	dd22      	ble.n	17938 <ftp_open+0xc4>
		ret = setsockopt(client.sock, SOL_TLS, TLS_SEC_TAG_LIST,
   178f2:	6828      	ldr	r0, [r5, #0]
		sec_tag_t sec_tag_list[1] = { sec_tag };
   178f4:	9703      	str	r7, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   178f6:	2304      	movs	r3, #4
   178f8:	2201      	movs	r2, #1
   178fa:	9300      	str	r3, [sp, #0]
   178fc:	f44f 718d 	mov.w	r1, #282	; 0x11a
   17900:	ab03      	add	r3, sp, #12
   17902:	f00c fb63 	bl	23fcc <z_impl_zsock_setsockopt>
		if (ret) {
   17906:	b1b0      	cbz	r0, 17936 <ftp_open+0xc2>
   17908:	4a3d      	ldr	r2, [pc, #244]	; (17a00 <ftp_open+0x18c>)
   1790a:	4c3e      	ldr	r4, [pc, #248]	; (17a04 <ftp_open+0x190>)
   1790c:	1aa4      	subs	r4, r4, r2
			LOG_ERR("set tag list failed: %d", -errno);
   1790e:	f00c fd29 	bl	24364 <__errno>
   17912:	08e4      	lsrs	r4, r4, #3
   17914:	6801      	ldr	r1, [r0, #0]
   17916:	01a4      	lsls	r4, r4, #6
   17918:	f044 0401 	orr.w	r4, r4, #1
   1791c:	483c      	ldr	r0, [pc, #240]	; (17a10 <ftp_open+0x19c>)
   1791e:	4622      	mov	r2, r4
   17920:	4249      	negs	r1, r1
   17922:	f00b ff47 	bl	237b4 <log_1>
			close(client.sock);
   17926:	6828      	ldr	r0, [r5, #0]
   17928:	f00e fbe1 	bl	260ee <close>
		return -errno;
   1792c:	f00c fd1a 	bl	24364 <__errno>
   17930:	6804      	ldr	r4, [r0, #0]
   17932:	4264      	negs	r4, r4
   17934:	e7ba      	b.n	178ac <ftp_open+0x38>
		client.sec_tag = sec_tag;
   17936:	612f      	str	r7, [r5, #16]
	return zsock_getaddrinfo(host, service, hints, res);
   17938:	2100      	movs	r1, #0
   1793a:	4640      	mov	r0, r8
   1793c:	ab03      	add	r3, sp, #12
   1793e:	aa04      	add	r2, sp, #16
   17940:	f00c fa74 	bl	23e2c <zsock_getaddrinfo>
	if (ret || result == NULL) {
   17944:	4604      	mov	r4, r0
   17946:	b908      	cbnz	r0, 1794c <ftp_open+0xd8>
   17948:	9b03      	ldr	r3, [sp, #12]
   1794a:	b973      	cbnz	r3, 1796a <ftp_open+0xf6>
   1794c:	4a2d      	ldr	r2, [pc, #180]	; (17a04 <ftp_open+0x190>)
   1794e:	4b2c      	ldr	r3, [pc, #176]	; (17a00 <ftp_open+0x18c>)
		LOG_ERR("ERROR: getaddrinfo(ctrl) failed %d", ret);
   17950:	4621      	mov	r1, r4
   17952:	1ad2      	subs	r2, r2, r3
   17954:	08d2      	lsrs	r2, r2, #3
   17956:	0192      	lsls	r2, r2, #6
   17958:	482e      	ldr	r0, [pc, #184]	; (17a14 <ftp_open+0x1a0>)
   1795a:	f042 0201 	orr.w	r2, r2, #1
   1795e:	f00b ff29 	bl	237b4 <log_1>
		close(client.sock);
   17962:	6828      	ldr	r0, [r5, #0]
   17964:	f00e fbc3 	bl	260ee <close>
		return ret;
   17968:	e7a0      	b.n	178ac <ftp_open+0x38>
	client.remote.sin_family = AF_INET;
   1796a:	2701      	movs	r7, #1
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   1796c:	699b      	ldr	r3, [r3, #24]
	client.remote.sin_port = htons(port);
   1796e:	ba76      	rev16	r6, r6
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
   17970:	685b      	ldr	r3, [r3, #4]
	ret = connect(client.sock, (struct sockaddr *)&client.remote,
   17972:	6828      	ldr	r0, [r5, #0]
	client.remote.sin_family = AF_INET;
   17974:	812f      	strh	r7, [r5, #8]
	client.remote.sin_port = htons(port);
   17976:	816e      	strh	r6, [r5, #10]
	client.remote.sin_addr.s_addr =
   17978:	60eb      	str	r3, [r5, #12]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1797a:	2208      	movs	r2, #8
   1797c:	4926      	ldr	r1, [pc, #152]	; (17a18 <ftp_open+0x1a4>)
   1797e:	f00c fa8f 	bl	23ea0 <z_impl_zsock_connect>
	if (ret < 0) {
   17982:	2800      	cmp	r0, #0
   17984:	da14      	bge.n	179b0 <ftp_open+0x13c>
   17986:	4a1e      	ldr	r2, [pc, #120]	; (17a00 <ftp_open+0x18c>)
   17988:	4c1e      	ldr	r4, [pc, #120]	; (17a04 <ftp_open+0x190>)
   1798a:	1aa4      	subs	r4, r4, r2
		LOG_ERR("connect(ctrl) failed: %d", -errno);
   1798c:	f00c fcea 	bl	24364 <__errno>
   17990:	08e4      	lsrs	r4, r4, #3
   17992:	6801      	ldr	r1, [r0, #0]
   17994:	01a4      	lsls	r4, r4, #6
   17996:	433c      	orrs	r4, r7
   17998:	4622      	mov	r2, r4
   1799a:	4249      	negs	r1, r1
   1799c:	481f      	ldr	r0, [pc, #124]	; (17a1c <ftp_open+0x1a8>)
   1799e:	f00b ff09 	bl	237b4 <log_1>
		close(client.sock);
   179a2:	6828      	ldr	r0, [r5, #0]
   179a4:	f00e fba3 	bl	260ee <close>
	zsock_freeaddrinfo(ai);
   179a8:	9803      	ldr	r0, [sp, #12]
   179aa:	f00c fa41 	bl	23e30 <zsock_freeaddrinfo>
   179ae:	e7bd      	b.n	1792c <ftp_open+0xb8>
   179b0:	9803      	ldr	r0, [sp, #12]
   179b2:	f00c fa3d 	bl	23e30 <zsock_freeaddrinfo>
	ret = do_ftp_recv_ctrl(true, FTP_CODE_220);
   179b6:	21dc      	movs	r1, #220	; 0xdc
   179b8:	4638      	mov	r0, r7
   179ba:	f7ff fd27 	bl	1740c <do_ftp_recv_ctrl>
	if (ret != FTP_CODE_220) {
   179be:	28dc      	cmp	r0, #220	; 0xdc
	ret = do_ftp_recv_ctrl(true, FTP_CODE_220);
   179c0:	4604      	mov	r4, r0
	if (ret != FTP_CODE_220) {
   179c2:	d1ce      	bne.n	17962 <ftp_open+0xee>
	sprintf(ctrl_buf, CMD_OPTS, "UTF8 ON");
   179c4:	4b16      	ldr	r3, [pc, #88]	; (17a20 <ftp_open+0x1ac>)
   179c6:	f44f 7210 	mov.w	r2, #576	; 0x240
   179ca:	2100      	movs	r1, #0
   179cc:	9300      	str	r3, [sp, #0]
   179ce:	4815      	ldr	r0, [pc, #84]	; (17a24 <ftp_open+0x1b0>)
   179d0:	4b15      	ldr	r3, [pc, #84]	; (17a28 <ftp_open+0x1b4>)
   179d2:	f00f f96f 	bl	26cb4 <__sprintf_chk>
	ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   179d6:	4813      	ldr	r0, [pc, #76]	; (17a24 <ftp_open+0x1b0>)
   179d8:	f7f5 fa4a 	bl	ce70 <strlen>
   179dc:	4601      	mov	r1, r0
   179de:	4811      	ldr	r0, [pc, #68]	; (17a24 <ftp_open+0x1b0>)
   179e0:	f7ff fd9a 	bl	17518 <do_ftp_send_ctrl>
	if (ret) {
   179e4:	4604      	mov	r4, r0
   179e6:	2800      	cmp	r0, #0
   179e8:	d1bb      	bne.n	17962 <ftp_open+0xee>
	ret = do_ftp_recv_ctrl(true, FTP_CODE_200);
   179ea:	21c8      	movs	r1, #200	; 0xc8
   179ec:	4638      	mov	r0, r7
   179ee:	f7ff fd0d 	bl	1740c <do_ftp_recv_ctrl>
	if (ret != FTP_CODE_200) {
   179f2:	28c8      	cmp	r0, #200	; 0xc8
	ret = do_ftp_recv_ctrl(true, FTP_CODE_200);
   179f4:	4604      	mov	r4, r0
	if (ret != FTP_CODE_200) {
   179f6:	f43f af59 	beq.w	178ac <ftp_open+0x38>
   179fa:	e7b2      	b.n	17962 <ftp_open+0xee>
   179fc:	20021c40 	.word	0x20021c40
   17a00:	00027b20 	.word	0x00027b20
   17a04:	00027b60 	.word	0x00027b60
   17a08:	0002a684 	.word	0x0002a684
   17a0c:	0002a69a 	.word	0x0002a69a
   17a10:	00028fc3 	.word	0x00028fc3
   17a14:	0002a6b2 	.word	0x0002a6b2
   17a18:	20021c48 	.word	0x20021c48
   17a1c:	0002a6d5 	.word	0x0002a6d5
   17a20:	0002a6f8 	.word	0x0002a6f8
   17a24:	20029e47 	.word	0x20029e47
   17a28:	0002a6ee 	.word	0x0002a6ee

00017a2c <ftp_login>:

int ftp_login(const char *username, const char *password)
{
   17a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int ret;
	int keepalive_time = CONFIG_FTP_CLIENT_KEEPALIVE_TIME;

	/* send username */
	sprintf(ctrl_buf, CMD_USER, username);
   17a2e:	4b22      	ldr	r3, [pc, #136]	; (17ab8 <ftp_login+0x8c>)
   17a30:	f44f 7210 	mov.w	r2, #576	; 0x240
   17a34:	9000      	str	r0, [sp, #0]
{
   17a36:	460d      	mov	r5, r1
	sprintf(ctrl_buf, CMD_USER, username);
   17a38:	4820      	ldr	r0, [pc, #128]	; (17abc <ftp_login+0x90>)
   17a3a:	2100      	movs	r1, #0
   17a3c:	f00f f93a 	bl	26cb4 <__sprintf_chk>
	ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   17a40:	481e      	ldr	r0, [pc, #120]	; (17abc <ftp_login+0x90>)
   17a42:	f7f5 fa15 	bl	ce70 <strlen>
   17a46:	4601      	mov	r1, r0
   17a48:	481c      	ldr	r0, [pc, #112]	; (17abc <ftp_login+0x90>)
   17a4a:	f7ff fd65 	bl	17518 <do_ftp_send_ctrl>
	if (ret) {
   17a4e:	4604      	mov	r4, r0
   17a50:	bb78      	cbnz	r0, 17ab2 <ftp_login+0x86>
		return ret;
	}
	ret = do_ftp_recv_ctrl(true, FTP_CODE_331);
   17a52:	f240 114b 	movw	r1, #331	; 0x14b
   17a56:	2001      	movs	r0, #1
   17a58:	f7ff fcd8 	bl	1740c <do_ftp_recv_ctrl>
	if (ret == FTP_CODE_331) {
   17a5c:	f240 134b 	movw	r3, #331	; 0x14b
   17a60:	4298      	cmp	r0, r3
	ret = do_ftp_recv_ctrl(true, FTP_CODE_331);
   17a62:	4604      	mov	r4, r0
	if (ret == FTP_CODE_331) {
   17a64:	d115      	bne.n	17a92 <ftp_login+0x66>
		/* send password if requested */
		sprintf(ctrl_buf, CMD_PASS, password);
   17a66:	f44f 7210 	mov.w	r2, #576	; 0x240
   17a6a:	2100      	movs	r1, #0
   17a6c:	4b14      	ldr	r3, [pc, #80]	; (17ac0 <ftp_login+0x94>)
   17a6e:	4813      	ldr	r0, [pc, #76]	; (17abc <ftp_login+0x90>)
   17a70:	9500      	str	r5, [sp, #0]
   17a72:	f00f f91f 	bl	26cb4 <__sprintf_chk>
		ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   17a76:	4811      	ldr	r0, [pc, #68]	; (17abc <ftp_login+0x90>)
   17a78:	f7f5 f9fa 	bl	ce70 <strlen>
   17a7c:	4601      	mov	r1, r0
   17a7e:	480f      	ldr	r0, [pc, #60]	; (17abc <ftp_login+0x90>)
   17a80:	f7ff fd4a 	bl	17518 <do_ftp_send_ctrl>
		if (ret) {
   17a84:	4604      	mov	r4, r0
   17a86:	b9a0      	cbnz	r0, 17ab2 <ftp_login+0x86>
			return ret;
		}
		ret = do_ftp_recv_ctrl(true, FTP_CODE_230);
   17a88:	21e6      	movs	r1, #230	; 0xe6
   17a8a:	2001      	movs	r0, #1
   17a8c:	f7ff fcbe 	bl	1740c <do_ftp_recv_ctrl>
   17a90:	4604      	mov	r4, r0
	}
	if (ret != FTP_CODE_230) {
   17a92:	2ce6      	cmp	r4, #230	; 0xe6
   17a94:	d10d      	bne.n	17ab2 <ftp_login+0x86>
		return ret;
	}

	client.connected = true;
   17a96:	2201      	movs	r2, #1
   17a98:	4b0a      	ldr	r3, [pc, #40]	; (17ac4 <ftp_login+0x98>)
   17a9a:	711a      	strb	r2, [r3, #4]
	z_impl_k_timer_start(timer, duration, period);
   17a9c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   17aa0:	2300      	movs	r3, #0
   17aa2:	4809      	ldr	r0, [pc, #36]	; (17ac8 <ftp_login+0x9c>)
   17aa4:	e9cd 2300 	strd	r2, r3, [sp]
   17aa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   17aac:	2300      	movs	r3, #0
   17aae:	f009 fe61 	bl	21774 <z_impl_k_timer_start>
		k_timer_start(&keepalive_timer, K_SECONDS(1),
			K_SECONDS(keepalive_time));
	}

	return ret;
}
   17ab2:	4620      	mov	r0, r4
   17ab4:	b003      	add	sp, #12
   17ab6:	bd30      	pop	{r4, r5, pc}
   17ab8:	0002a700 	.word	0x0002a700
   17abc:	20029e47 	.word	0x20029e47
   17ac0:	0002a70a 	.word	0x0002a70a
   17ac4:	20021c40 	.word	0x20021c40
   17ac8:	200206a8 	.word	0x200206a8

00017acc <ftp_close>:

int ftp_close(void)
{
   17acc:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = do_ftp_send_ctrl(CMD_QUIT, sizeof(CMD_QUIT) - 1);
   17ace:	2106      	movs	r1, #6
   17ad0:	480b      	ldr	r0, [pc, #44]	; (17b00 <ftp_close+0x34>)
   17ad2:	f7ff fd21 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17ad6:	4604      	mov	r4, r0
   17ad8:	b938      	cbnz	r0, 17aea <ftp_close+0x1e>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_221);
   17ada:	21dd      	movs	r1, #221	; 0xdd
   17adc:	2001      	movs	r0, #1
   17ade:	f7ff fc95 	bl	1740c <do_ftp_recv_ctrl>
   17ae2:	4604      	mov	r4, r0
	z_impl_k_timer_stop(timer);
   17ae4:	4807      	ldr	r0, [pc, #28]	; (17b04 <ftp_close+0x38>)
   17ae6:	f00e fe43 	bl	26770 <z_impl_k_timer_stop>
		k_timer_stop(&keepalive_timer);
	}

	close(client.sock);
   17aea:	4d07      	ldr	r5, [pc, #28]	; (17b08 <ftp_close+0x3c>)
   17aec:	6828      	ldr	r0, [r5, #0]
   17aee:	f00e fafe 	bl	260ee <close>
	client.connected = false;
   17af2:	2300      	movs	r3, #0
   17af4:	712b      	strb	r3, [r5, #4]
	client.sec_tag = INVALID_SEC_TAG;
   17af6:	f04f 33ff 	mov.w	r3, #4294967295
	return ret;
}
   17afa:	4620      	mov	r0, r4
	client.sec_tag = INVALID_SEC_TAG;
   17afc:	612b      	str	r3, [r5, #16]
}
   17afe:	bd38      	pop	{r3, r4, r5, pc}
   17b00:	0002a714 	.word	0x0002a714
   17b04:	200206a8 	.word	0x200206a8
   17b08:	20021c40 	.word	0x20021c40

00017b0c <ftp_status>:

int ftp_status(void)
{
   17b0c:	b508      	push	{r3, lr}
	int ret;

	/* get server system type */
	ret = do_ftp_send_ctrl(CMD_SYST, sizeof(CMD_SYST) - 1);
   17b0e:	2106      	movs	r1, #6
   17b10:	480e      	ldr	r0, [pc, #56]	; (17b4c <ftp_status+0x40>)
   17b12:	f7ff fd01 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17b16:	b918      	cbnz	r0, 17b20 <ftp_status+0x14>
		do_ftp_recv_ctrl(true, FTP_CODE_215);
   17b18:	21d7      	movs	r1, #215	; 0xd7
   17b1a:	2001      	movs	r0, #1
   17b1c:	f7ff fc76 	bl	1740c <do_ftp_recv_ctrl>
	}

	/* get server and connection status */
	ret = do_ftp_send_ctrl(CMD_STAT, sizeof(CMD_STAT) - 1);
   17b20:	2106      	movs	r1, #6
   17b22:	480b      	ldr	r0, [pc, #44]	; (17b50 <ftp_status+0x44>)
   17b24:	f7ff fcf8 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17b28:	b930      	cbnz	r0, 17b38 <ftp_status+0x2c>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_211);
   17b2a:	21d3      	movs	r1, #211	; 0xd3
   17b2c:	2001      	movs	r0, #1
   17b2e:	f7ff fc6d 	bl	1740c <do_ftp_recv_ctrl>
		if (ret != FTP_CODE_211) {
   17b32:	28d3      	cmp	r0, #211	; 0xd3
   17b34:	d101      	bne.n	17b3a <ftp_status+0x2e>
{
   17b36:	20d3      	movs	r0, #211	; 0xd3
			} while (1);
		}
	}

	return ret;
}
   17b38:	bd08      	pop	{r3, pc}
				ret = do_ftp_recv_ctrl(true, FTP_CODE_211);
   17b3a:	21d3      	movs	r1, #211	; 0xd3
   17b3c:	2001      	movs	r0, #1
   17b3e:	f7ff fc65 	bl	1740c <do_ftp_recv_ctrl>
				if (ret == -ETIMEDOUT || ret == FTP_CODE_211) {
   17b42:	f110 0f74 	cmn.w	r0, #116	; 0x74
   17b46:	d1f4      	bne.n	17b32 <ftp_status+0x26>
   17b48:	e7f6      	b.n	17b38 <ftp_status+0x2c>
   17b4a:	bf00      	nop
   17b4c:	0002a71b 	.word	0x0002a71b
   17b50:	0002a722 	.word	0x0002a722

00017b54 <ftp_type>:

int ftp_type(enum ftp_trasfer_type type)
{
   17b54:	b508      	push	{r3, lr}
	int ret;

	if (type == FTP_TYPE_ASCII) {
   17b56:	b950      	cbnz	r0, 17b6e <ftp_type+0x1a>
		ret = do_ftp_send_ctrl(CMD_TYPE_A, sizeof(CMD_TYPE_A) - 1);
   17b58:	2108      	movs	r1, #8
   17b5a:	4809      	ldr	r0, [pc, #36]	; (17b80 <ftp_type+0x2c>)
	} else if (type == FTP_TYPE_BINARY) {
		ret = do_ftp_send_ctrl(CMD_TYPE_I, sizeof(CMD_TYPE_I) - 1);
   17b5c:	f7ff fcdc 	bl	17518 <do_ftp_send_ctrl>
	} else {
		return -EINVAL;
	}
	if (ret == 0) {
   17b60:	b960      	cbnz	r0, 17b7c <ftp_type+0x28>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_200);
	}

	return ret;
}
   17b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ret = do_ftp_recv_ctrl(true, FTP_CODE_200);
   17b66:	21c8      	movs	r1, #200	; 0xc8
   17b68:	2001      	movs	r0, #1
   17b6a:	f7ff bc4f 	b.w	1740c <do_ftp_recv_ctrl>
	} else if (type == FTP_TYPE_BINARY) {
   17b6e:	2801      	cmp	r0, #1
   17b70:	d102      	bne.n	17b78 <ftp_type+0x24>
		ret = do_ftp_send_ctrl(CMD_TYPE_I, sizeof(CMD_TYPE_I) - 1);
   17b72:	2108      	movs	r1, #8
   17b74:	4803      	ldr	r0, [pc, #12]	; (17b84 <ftp_type+0x30>)
   17b76:	e7f1      	b.n	17b5c <ftp_type+0x8>
		return -EINVAL;
   17b78:	f06f 0015 	mvn.w	r0, #21
}
   17b7c:	bd08      	pop	{r3, pc}
   17b7e:	bf00      	nop
   17b80:	0002a729 	.word	0x0002a729
   17b84:	0002a732 	.word	0x0002a732

00017b88 <ftp_pwd>:

int ftp_pwd(void)
{
   17b88:	b508      	push	{r3, lr}
	int ret;

	ret = do_ftp_send_ctrl(CMD_PWD, sizeof(CMD_PWD) - 1);
   17b8a:	2105      	movs	r1, #5
   17b8c:	4805      	ldr	r0, [pc, #20]	; (17ba4 <ftp_pwd+0x1c>)
   17b8e:	f7ff fcc3 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17b92:	b930      	cbnz	r0, 17ba2 <ftp_pwd+0x1a>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_257);
	}

	return ret;
}
   17b94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ret = do_ftp_recv_ctrl(true, FTP_CODE_257);
   17b98:	f240 1101 	movw	r1, #257	; 0x101
   17b9c:	2001      	movs	r0, #1
   17b9e:	f7ff bc35 	b.w	1740c <do_ftp_recv_ctrl>
}
   17ba2:	bd08      	pop	{r3, pc}
   17ba4:	0002a73b 	.word	0x0002a73b

00017ba8 <ftp_list>:

int ftp_list(const char *options, const char *target)
{
   17ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17baa:	4606      	mov	r6, r0
   17bac:	460d      	mov	r5, r1
	int ret;
	char list_cmd[128];

	/* Always set Passive mode to act as TCP client */
	ret = do_ftp_send_ctrl(CMD_PASV, sizeof(CMD_PASV) - 1);
   17bae:	482e      	ldr	r0, [pc, #184]	; (17c68 <ftp_list+0xc0>)
   17bb0:	2106      	movs	r1, #6
{
   17bb2:	b0a3      	sub	sp, #140	; 0x8c
	ret = do_ftp_send_ctrl(CMD_PASV, sizeof(CMD_PASV) - 1);
   17bb4:	f7ff fcb0 	bl	17518 <do_ftp_send_ctrl>
	if (ret) {
   17bb8:	4607      	mov	r7, r0
   17bba:	2800      	cmp	r0, #0
   17bbc:	d150      	bne.n	17c60 <ftp_list+0xb8>
		return -EIO;
	}
	ret = do_ftp_recv_ctrl(true, FTP_CODE_227);
   17bbe:	21e3      	movs	r1, #227	; 0xe3
   17bc0:	2001      	movs	r0, #1
   17bc2:	f7ff fc23 	bl	1740c <do_ftp_recv_ctrl>
	if (ret != FTP_CODE_227) {
   17bc6:	28e3      	cmp	r0, #227	; 0xe3
	ret = do_ftp_recv_ctrl(true, FTP_CODE_227);
   17bc8:	4604      	mov	r4, r0
	if (ret != FTP_CODE_227) {
   17bca:	d130      	bne.n	17c2e <ftp_list+0x86>
		return ret;
	}
	strcpy(data_task_param.ctrl_msg, ctrl_buf);
   17bcc:	4c27      	ldr	r4, [pc, #156]	; (17c6c <ftp_list+0xc4>)
   17bce:	224b      	movs	r2, #75	; 0x4b
   17bd0:	4927      	ldr	r1, [pc, #156]	; (17c70 <ftp_list+0xc8>)
   17bd2:	f104 000d 	add.w	r0, r4, #13
   17bd6:	f00f f89c 	bl	26d12 <__strcpy_chk>
	data_task_param.task = TASK_RECEIVE;
   17bda:	2301      	movs	r3, #1

	/* Send LIST/NLST command in control channel */
	if (strlen(options) != 0) {
   17bdc:	4630      	mov	r0, r6
	data_task_param.task = TASK_RECEIVE;
   17bde:	7323      	strb	r3, [r4, #12]
	if (strlen(options) != 0) {
   17be0:	f7f5 f946 	bl	ce70 <strlen>
   17be4:	4604      	mov	r4, r0
		if (strlen(target) != 0) {
   17be6:	4628      	mov	r0, r5
	if (strlen(options) != 0) {
   17be8:	b35c      	cbz	r4, 17c42 <ftp_list+0x9a>
		if (strlen(target) != 0) {
   17bea:	f7f5 f941 	bl	ce70 <strlen>
   17bee:	4601      	mov	r1, r0
   17bf0:	b300      	cbz	r0, 17c34 <ftp_list+0x8c>
			sprintf(list_cmd, CMD_LIST_OPT_FILE, options, target);
   17bf2:	2280      	movs	r2, #128	; 0x80
   17bf4:	4639      	mov	r1, r7
   17bf6:	e9cd 6500 	strd	r6, r5, [sp]
   17bfa:	4b1e      	ldr	r3, [pc, #120]	; (17c74 <ftp_list+0xcc>)
   17bfc:	a802      	add	r0, sp, #8
   17bfe:	f00f f859 	bl	26cb4 <__sprintf_chk>
			sprintf(list_cmd, CMD_LIST_FILE, target);
		} else {
			memcpy(list_cmd, CMD_NLST, sizeof(CMD_NLST) - 1);
		}
	}
	ret = do_ftp_send_ctrl(list_cmd, strlen(list_cmd));
   17c02:	a802      	add	r0, sp, #8
   17c04:	f7f5 f934 	bl	ce70 <strlen>
   17c08:	4601      	mov	r1, r0
   17c0a:	a802      	add	r0, sp, #8
   17c0c:	f7ff fc84 	bl	17518 <do_ftp_send_ctrl>
   17c10:	4604      	mov	r4, r0

	/* Set up data connection */
	k_work_submit_to_queue(&ftp_work_q, &data_task_param.work);
   17c12:	4816      	ldr	r0, [pc, #88]	; (17c6c <ftp_list+0xc4>)
   17c14:	f7ff fc66 	bl	174e4 <k_work_submit_to_queue.constprop.0>

	if (ret == 0) {
   17c18:	b94c      	cbnz	r4, 17c2e <ftp_list+0x86>
		do {
			ret = do_ftp_recv_ctrl(true, FTP_CODE_226);
   17c1a:	21e2      	movs	r1, #226	; 0xe2
   17c1c:	2001      	movs	r0, #1
   17c1e:	f7ff fbf5 	bl	1740c <do_ftp_recv_ctrl>
			if (ret == -ETIMEDOUT || ret == FTP_CODE_226) {
   17c22:	f110 0f74 	cmn.w	r0, #116	; 0x74
			ret = do_ftp_recv_ctrl(true, FTP_CODE_226);
   17c26:	4604      	mov	r4, r0
			if (ret == -ETIMEDOUT || ret == FTP_CODE_226) {
   17c28:	d001      	beq.n	17c2e <ftp_list+0x86>
   17c2a:	28e2      	cmp	r0, #226	; 0xe2
   17c2c:	d1f5      	bne.n	17c1a <ftp_list+0x72>
			}
		} while (1);
	}

	return ret;
}
   17c2e:	4620      	mov	r0, r4
   17c30:	b023      	add	sp, #140	; 0x8c
   17c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(list_cmd, CMD_LIST_OPT, options);
   17c34:	2280      	movs	r2, #128	; 0x80
   17c36:	4b10      	ldr	r3, [pc, #64]	; (17c78 <ftp_list+0xd0>)
   17c38:	9600      	str	r6, [sp, #0]
			sprintf(list_cmd, CMD_LIST_FILE, target);
   17c3a:	a802      	add	r0, sp, #8
   17c3c:	f00f f83a 	bl	26cb4 <__sprintf_chk>
   17c40:	e7df      	b.n	17c02 <ftp_list+0x5a>
		if (strlen(target) != 0) {
   17c42:	f7f5 f915 	bl	ce70 <strlen>
   17c46:	b120      	cbz	r0, 17c52 <ftp_list+0xaa>
			sprintf(list_cmd, CMD_LIST_FILE, target);
   17c48:	2280      	movs	r2, #128	; 0x80
   17c4a:	4621      	mov	r1, r4
   17c4c:	4b0a      	ldr	r3, [pc, #40]	; (17c78 <ftp_list+0xd0>)
   17c4e:	9500      	str	r5, [sp, #0]
   17c50:	e7f3      	b.n	17c3a <ftp_list+0x92>
			memcpy(list_cmd, CMD_NLST, sizeof(CMD_NLST) - 1);
   17c52:	4b0a      	ldr	r3, [pc, #40]	; (17c7c <ftp_list+0xd4>)
   17c54:	6818      	ldr	r0, [r3, #0]
   17c56:	889b      	ldrh	r3, [r3, #4]
   17c58:	9002      	str	r0, [sp, #8]
   17c5a:	f8ad 300c 	strh.w	r3, [sp, #12]
   17c5e:	e7d0      	b.n	17c02 <ftp_list+0x5a>
		return -EIO;
   17c60:	f06f 0404 	mvn.w	r4, #4
   17c64:	e7e3      	b.n	17c2e <ftp_list+0x86>
   17c66:	bf00      	nop
   17c68:	0002a741 	.word	0x0002a741
   17c6c:	20021c5c 	.word	0x20021c5c
   17c70:	20029e47 	.word	0x20029e47
   17c74:	0002a748 	.word	0x0002a748
   17c78:	0002a755 	.word	0x0002a755
   17c7c:	0002a75f 	.word	0x0002a75f

00017c80 <ftp_cwd>:

int ftp_cwd(const char *folder)
{
   17c80:	b513      	push	{r0, r1, r4, lr}
	int ret;

	if (strcmp(folder, "..") == 0) {
   17c82:	4910      	ldr	r1, [pc, #64]	; (17cc4 <ftp_cwd+0x44>)
{
   17c84:	4604      	mov	r4, r0
	if (strcmp(folder, "..") == 0) {
   17c86:	f7f5 f8e9 	bl	ce5c <strcmp>
   17c8a:	b958      	cbnz	r0, 17ca4 <ftp_cwd+0x24>
		ret = do_ftp_send_ctrl(CMD_CDUP, sizeof(CMD_CDUP) - 1);
   17c8c:	2106      	movs	r1, #6
   17c8e:	480e      	ldr	r0, [pc, #56]	; (17cc8 <ftp_cwd+0x48>)
	} else {
		sprintf(ctrl_buf, CMD_CWD, folder);
		ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   17c90:	f7ff fc42 	bl	17518 <do_ftp_send_ctrl>
	}
	if (ret == 0) {
   17c94:	b9a0      	cbnz	r0, 17cc0 <ftp_cwd+0x40>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_250);
   17c96:	21fa      	movs	r1, #250	; 0xfa
   17c98:	2001      	movs	r0, #1
	}

	return ret;
}
   17c9a:	b002      	add	sp, #8
   17c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = do_ftp_recv_ctrl(true, FTP_CODE_250);
   17ca0:	f7ff bbb4 	b.w	1740c <do_ftp_recv_ctrl>
		sprintf(ctrl_buf, CMD_CWD, folder);
   17ca4:	2100      	movs	r1, #0
   17ca6:	f44f 7210 	mov.w	r2, #576	; 0x240
   17caa:	4b08      	ldr	r3, [pc, #32]	; (17ccc <ftp_cwd+0x4c>)
   17cac:	4808      	ldr	r0, [pc, #32]	; (17cd0 <ftp_cwd+0x50>)
   17cae:	9400      	str	r4, [sp, #0]
   17cb0:	f00f f800 	bl	26cb4 <__sprintf_chk>
		ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   17cb4:	4806      	ldr	r0, [pc, #24]	; (17cd0 <ftp_cwd+0x50>)
   17cb6:	f7f5 f8db 	bl	ce70 <strlen>
   17cba:	4601      	mov	r1, r0
   17cbc:	4804      	ldr	r0, [pc, #16]	; (17cd0 <ftp_cwd+0x50>)
   17cbe:	e7e7      	b.n	17c90 <ftp_cwd+0x10>
}
   17cc0:	b002      	add	sp, #8
   17cc2:	bd10      	pop	{r4, pc}
   17cc4:	0002a766 	.word	0x0002a766
   17cc8:	0002a769 	.word	0x0002a769
   17ccc:	0002a770 	.word	0x0002a770
   17cd0:	20029e47 	.word	0x20029e47

00017cd4 <ftp_mkd>:

int ftp_mkd(const char *folder)
{
   17cd4:	b507      	push	{r0, r1, r2, lr}
	int ret;

	sprintf(ctrl_buf, CMD_MKD, folder);
   17cd6:	4b0d      	ldr	r3, [pc, #52]	; (17d0c <ftp_mkd+0x38>)
   17cd8:	2100      	movs	r1, #0
   17cda:	f44f 7210 	mov.w	r2, #576	; 0x240
   17cde:	9000      	str	r0, [sp, #0]
   17ce0:	480b      	ldr	r0, [pc, #44]	; (17d10 <ftp_mkd+0x3c>)
   17ce2:	f00e ffe7 	bl	26cb4 <__sprintf_chk>
	ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   17ce6:	480a      	ldr	r0, [pc, #40]	; (17d10 <ftp_mkd+0x3c>)
   17ce8:	f7f5 f8c2 	bl	ce70 <strlen>
   17cec:	4601      	mov	r1, r0
   17cee:	4808      	ldr	r0, [pc, #32]	; (17d10 <ftp_mkd+0x3c>)
   17cf0:	f7ff fc12 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17cf4:	b938      	cbnz	r0, 17d06 <ftp_mkd+0x32>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_257);
   17cf6:	f240 1101 	movw	r1, #257	; 0x101
   17cfa:	2001      	movs	r0, #1
	}

	return ret;
}
   17cfc:	b003      	add	sp, #12
   17cfe:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = do_ftp_recv_ctrl(true, FTP_CODE_257);
   17d02:	f7ff bb83 	b.w	1740c <do_ftp_recv_ctrl>
}
   17d06:	b003      	add	sp, #12
   17d08:	f85d fb04 	ldr.w	pc, [sp], #4
   17d0c:	0002a779 	.word	0x0002a779
   17d10:	20029e47 	.word	0x20029e47

00017d14 <ftp_rmd>:

int ftp_rmd(const char *folder)
{
   17d14:	b507      	push	{r0, r1, r2, lr}
	int ret;

	sprintf(ctrl_buf, CMD_RMD, folder);
   17d16:	4b0d      	ldr	r3, [pc, #52]	; (17d4c <ftp_rmd+0x38>)
   17d18:	2100      	movs	r1, #0
   17d1a:	f44f 7210 	mov.w	r2, #576	; 0x240
   17d1e:	9000      	str	r0, [sp, #0]
   17d20:	480b      	ldr	r0, [pc, #44]	; (17d50 <ftp_rmd+0x3c>)
   17d22:	f00e ffc7 	bl	26cb4 <__sprintf_chk>
	ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   17d26:	480a      	ldr	r0, [pc, #40]	; (17d50 <ftp_rmd+0x3c>)
   17d28:	f7f5 f8a2 	bl	ce70 <strlen>
   17d2c:	4601      	mov	r1, r0
   17d2e:	4808      	ldr	r0, [pc, #32]	; (17d50 <ftp_rmd+0x3c>)
   17d30:	f7ff fbf2 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17d34:	b930      	cbnz	r0, 17d44 <ftp_rmd+0x30>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_250);
   17d36:	21fa      	movs	r1, #250	; 0xfa
   17d38:	2001      	movs	r0, #1
	}

	return ret;
}
   17d3a:	b003      	add	sp, #12
   17d3c:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = do_ftp_recv_ctrl(true, FTP_CODE_250);
   17d40:	f7ff bb64 	b.w	1740c <do_ftp_recv_ctrl>
}
   17d44:	b003      	add	sp, #12
   17d46:	f85d fb04 	ldr.w	pc, [sp], #4
   17d4a:	bf00      	nop
   17d4c:	0002a782 	.word	0x0002a782
   17d50:	20029e47 	.word	0x20029e47

00017d54 <ftp_rename>:

int ftp_rename(const char *old_name, const char *new_name)
{
   17d54:	b513      	push	{r0, r1, r4, lr}
	int ret;

	sprintf(ctrl_buf, CMD_RNFR, old_name);
   17d56:	f44f 7210 	mov.w	r2, #576	; 0x240
   17d5a:	4b18      	ldr	r3, [pc, #96]	; (17dbc <ftp_rename+0x68>)
   17d5c:	9000      	str	r0, [sp, #0]
{
   17d5e:	460c      	mov	r4, r1
	sprintf(ctrl_buf, CMD_RNFR, old_name);
   17d60:	4817      	ldr	r0, [pc, #92]	; (17dc0 <ftp_rename+0x6c>)
   17d62:	2100      	movs	r1, #0
   17d64:	f00e ffa6 	bl	26cb4 <__sprintf_chk>
	ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   17d68:	4815      	ldr	r0, [pc, #84]	; (17dc0 <ftp_rename+0x6c>)
   17d6a:	f7f5 f881 	bl	ce70 <strlen>
   17d6e:	4601      	mov	r1, r0
   17d70:	4813      	ldr	r0, [pc, #76]	; (17dc0 <ftp_rename+0x6c>)
   17d72:	f7ff fbd1 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17d76:	b920      	cbnz	r0, 17d82 <ftp_rename+0x2e>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_350);
   17d78:	f44f 71af 	mov.w	r1, #350	; 0x15e
   17d7c:	2001      	movs	r0, #1
   17d7e:	f7ff fb45 	bl	1740c <do_ftp_recv_ctrl>
	}
	if (ret != FTP_CODE_350) {
   17d82:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   17d86:	d116      	bne.n	17db6 <ftp_rename+0x62>
		return ret;
	}

	sprintf(ctrl_buf, CMD_RNTO, new_name);
   17d88:	2100      	movs	r1, #0
   17d8a:	f44f 7210 	mov.w	r2, #576	; 0x240
   17d8e:	4b0d      	ldr	r3, [pc, #52]	; (17dc4 <ftp_rename+0x70>)
   17d90:	480b      	ldr	r0, [pc, #44]	; (17dc0 <ftp_rename+0x6c>)
   17d92:	9400      	str	r4, [sp, #0]
   17d94:	f00e ff8e 	bl	26cb4 <__sprintf_chk>
	ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   17d98:	4809      	ldr	r0, [pc, #36]	; (17dc0 <ftp_rename+0x6c>)
   17d9a:	f7f5 f869 	bl	ce70 <strlen>
   17d9e:	4601      	mov	r1, r0
   17da0:	4807      	ldr	r0, [pc, #28]	; (17dc0 <ftp_rename+0x6c>)
   17da2:	f7ff fbb9 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17da6:	b930      	cbnz	r0, 17db6 <ftp_rename+0x62>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_250);
   17da8:	21fa      	movs	r1, #250	; 0xfa
   17daa:	2001      	movs	r0, #1
	}

	return ret;
}
   17dac:	b002      	add	sp, #8
   17dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = do_ftp_recv_ctrl(true, FTP_CODE_250);
   17db2:	f7ff bb2b 	b.w	1740c <do_ftp_recv_ctrl>
}
   17db6:	b002      	add	sp, #8
   17db8:	bd10      	pop	{r4, pc}
   17dba:	bf00      	nop
   17dbc:	0002a78b 	.word	0x0002a78b
   17dc0:	20029e47 	.word	0x20029e47
   17dc4:	0002a795 	.word	0x0002a795

00017dc8 <ftp_delete>:

int ftp_delete(const char *file)
{
   17dc8:	b507      	push	{r0, r1, r2, lr}
	int ret;

	sprintf(ctrl_buf, CMD_DELE, file);
   17dca:	4b0d      	ldr	r3, [pc, #52]	; (17e00 <ftp_delete+0x38>)
   17dcc:	2100      	movs	r1, #0
   17dce:	f44f 7210 	mov.w	r2, #576	; 0x240
   17dd2:	9000      	str	r0, [sp, #0]
   17dd4:	480b      	ldr	r0, [pc, #44]	; (17e04 <ftp_delete+0x3c>)
   17dd6:	f00e ff6d 	bl	26cb4 <__sprintf_chk>
	ret = do_ftp_send_ctrl(ctrl_buf, strlen(ctrl_buf));
   17dda:	480a      	ldr	r0, [pc, #40]	; (17e04 <ftp_delete+0x3c>)
   17ddc:	f7f5 f848 	bl	ce70 <strlen>
   17de0:	4601      	mov	r1, r0
   17de2:	4808      	ldr	r0, [pc, #32]	; (17e04 <ftp_delete+0x3c>)
   17de4:	f7ff fb98 	bl	17518 <do_ftp_send_ctrl>
	if (ret == 0) {
   17de8:	b930      	cbnz	r0, 17df8 <ftp_delete+0x30>
		ret = do_ftp_recv_ctrl(true, FTP_CODE_250);
   17dea:	21fa      	movs	r1, #250	; 0xfa
   17dec:	2001      	movs	r0, #1
	}

	return ret;
}
   17dee:	b003      	add	sp, #12
   17df0:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = do_ftp_recv_ctrl(true, FTP_CODE_250);
   17df4:	f7ff bb0a 	b.w	1740c <do_ftp_recv_ctrl>
}
   17df8:	b003      	add	sp, #12
   17dfa:	f85d fb04 	ldr.w	pc, [sp], #4
   17dfe:	bf00      	nop
   17e00:	0002a79f 	.word	0x0002a79f
   17e04:	20029e47 	.word	0x20029e47

00017e08 <ftp_get>:

int ftp_get(const char *file)
{
   17e08:	b570      	push	{r4, r5, r6, lr}
	int ret;
	char get_cmd[128];

	/* Always set Passive mode to act as TCP client */
	ret = do_ftp_send_ctrl(CMD_PASV, sizeof(CMD_PASV) - 1);
   17e0a:	2106      	movs	r1, #6
{
   17e0c:	4606      	mov	r6, r0
   17e0e:	b0a2      	sub	sp, #136	; 0x88
	ret = do_ftp_send_ctrl(CMD_PASV, sizeof(CMD_PASV) - 1);
   17e10:	4825      	ldr	r0, [pc, #148]	; (17ea8 <ftp_get+0xa0>)
   17e12:	f7ff fb81 	bl	17518 <do_ftp_send_ctrl>
	if (ret) {
   17e16:	4605      	mov	r5, r0
   17e18:	2800      	cmp	r0, #0
   17e1a:	d13f      	bne.n	17e9c <ftp_get+0x94>
		return -EIO;
	}
	ret = do_ftp_recv_ctrl(true, FTP_CODE_227);
   17e1c:	21e3      	movs	r1, #227	; 0xe3
   17e1e:	2001      	movs	r0, #1
   17e20:	f7ff faf4 	bl	1740c <do_ftp_recv_ctrl>
	if (ret != FTP_CODE_227) {
   17e24:	28e3      	cmp	r0, #227	; 0xe3
	ret = do_ftp_recv_ctrl(true, FTP_CODE_227);
   17e26:	4604      	mov	r4, r0
	if (ret != FTP_CODE_227) {
   17e28:	d13a      	bne.n	17ea0 <ftp_get+0x98>
		return ret;
	}
	strcpy(data_task_param.ctrl_msg, ctrl_buf);
   17e2a:	4c20      	ldr	r4, [pc, #128]	; (17eac <ftp_get+0xa4>)
   17e2c:	224b      	movs	r2, #75	; 0x4b
   17e2e:	4920      	ldr	r1, [pc, #128]	; (17eb0 <ftp_get+0xa8>)
   17e30:	f104 000d 	add.w	r0, r4, #13
   17e34:	f00e ff6d 	bl	26d12 <__strcpy_chk>
	data_task_param.task = TASK_RECEIVE;
   17e38:	2301      	movs	r3, #1

	/* Send RETR command in control channel */
	sprintf(get_cmd, CMD_RETR, file);
   17e3a:	4629      	mov	r1, r5
	data_task_param.task = TASK_RECEIVE;
   17e3c:	7323      	strb	r3, [r4, #12]
	sprintf(get_cmd, CMD_RETR, file);
   17e3e:	2280      	movs	r2, #128	; 0x80
   17e40:	4b1c      	ldr	r3, [pc, #112]	; (17eb4 <ftp_get+0xac>)
   17e42:	9600      	str	r6, [sp, #0]
   17e44:	a802      	add	r0, sp, #8
   17e46:	f00e ff35 	bl	26cb4 <__sprintf_chk>
	ret = do_ftp_send_ctrl(get_cmd, strlen(get_cmd));
   17e4a:	a802      	add	r0, sp, #8
   17e4c:	f7f5 f810 	bl	ce70 <strlen>
   17e50:	4601      	mov	r1, r0
   17e52:	a802      	add	r0, sp, #8
   17e54:	f7ff fb60 	bl	17518 <do_ftp_send_ctrl>
	if (ret) {
   17e58:	bb00      	cbnz	r0, 17e9c <ftp_get+0x94>
		return -EIO;
	}

	/* Set up data connection */
	k_work_submit_to_queue(&ftp_work_q, &data_task_param.work);
   17e5a:	4620      	mov	r0, r4
   17e5c:	f7ff fb42 	bl	174e4 <k_work_submit_to_queue.constprop.0>
	k_sem_take(&rx_done, K_FOREVER);
	client.ctrl_callback("\r\n", 2);
   17e60:	4d15      	ldr	r5, [pc, #84]	; (17eb8 <ftp_get+0xb0>)
	return z_impl_k_sem_take(sem, timeout);
   17e62:	f04f 33ff 	mov.w	r3, #4294967295
   17e66:	f04f 32ff 	mov.w	r2, #4294967295
   17e6a:	4814      	ldr	r0, [pc, #80]	; (17ebc <ftp_get+0xb4>)
   17e6c:	f009 fa02 	bl	21274 <z_impl_k_sem_take>
   17e70:	2102      	movs	r1, #2
   17e72:	696b      	ldr	r3, [r5, #20]
   17e74:	4812      	ldr	r0, [pc, #72]	; (17ec0 <ftp_get+0xb8>)
   17e76:	4798      	blx	r3

	/* Receive control */
	do {
		ret = do_ftp_recv_ctrl(false, FTP_CODE_226);
   17e78:	21e2      	movs	r1, #226	; 0xe2
   17e7a:	2000      	movs	r0, #0
   17e7c:	f7ff fac6 	bl	1740c <do_ftp_recv_ctrl>
		if (ret == -ETIMEDOUT || ret == FTP_CODE_226) {
   17e80:	f110 0f74 	cmn.w	r0, #116	; 0x74
		ret = do_ftp_recv_ctrl(false, FTP_CODE_226);
   17e84:	4604      	mov	r4, r0
		if (ret == -ETIMEDOUT || ret == FTP_CODE_226) {
   17e86:	d00b      	beq.n	17ea0 <ftp_get+0x98>
   17e88:	28e2      	cmp	r0, #226	; 0xe2
   17e8a:	d1f5      	bne.n	17e78 <ftp_get+0x70>
			break;
		}
	} while (1);

	if (ret == FTP_CODE_226) {
		client.ctrl_callback(ctrl_buf, strlen(ctrl_buf));
   17e8c:	4808      	ldr	r0, [pc, #32]	; (17eb0 <ftp_get+0xa8>)
   17e8e:	696d      	ldr	r5, [r5, #20]
   17e90:	f7f4 ffee 	bl	ce70 <strlen>
   17e94:	b281      	uxth	r1, r0
   17e96:	4806      	ldr	r0, [pc, #24]	; (17eb0 <ftp_get+0xa8>)
   17e98:	47a8      	blx	r5
   17e9a:	e001      	b.n	17ea0 <ftp_get+0x98>
		return -EIO;
   17e9c:	f06f 0404 	mvn.w	r4, #4
	}

	return ret;
}
   17ea0:	4620      	mov	r0, r4
   17ea2:	b022      	add	sp, #136	; 0x88
   17ea4:	bd70      	pop	{r4, r5, r6, pc}
   17ea6:	bf00      	nop
   17ea8:	0002a741 	.word	0x0002a741
   17eac:	20021c5c 	.word	0x20021c5c
   17eb0:	20029e47 	.word	0x20029e47
   17eb4:	0002a7a9 	.word	0x0002a7a9
   17eb8:	20021c40 	.word	0x20021c40
   17ebc:	20020768 	.word	0x20020768
   17ec0:	000295b0 	.word	0x000295b0

00017ec4 <ftp_put>:

int ftp_put(const char *file, const u8_t *data, u16_t length)
{
   17ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ec8:	4680      	mov	r8, r0
   17eca:	4615      	mov	r5, r2
	int ret;
	char put_cmd[128];

	if (data && length) {
   17ecc:	460e      	mov	r6, r1
{
   17ece:	b0a2      	sub	sp, #136	; 0x88
	if (data && length) {
   17ed0:	b1c9      	cbz	r1, 17f06 <ftp_put+0x42>
   17ed2:	b1c2      	cbz	r2, 17f06 <ftp_put+0x42>
		/* Always set Passive mode to act as TCP client */
		ret = do_ftp_send_ctrl(CMD_PASV, sizeof(CMD_PASV) - 1);
   17ed4:	2106      	movs	r1, #6
   17ed6:	4823      	ldr	r0, [pc, #140]	; (17f64 <ftp_put+0xa0>)
   17ed8:	f7ff fb1e 	bl	17518 <do_ftp_send_ctrl>
		if (ret) {
   17edc:	4607      	mov	r7, r0
   17ede:	2800      	cmp	r0, #0
   17ee0:	d13c      	bne.n	17f5c <ftp_put+0x98>
			return -EIO;
		}
		ret = do_ftp_recv_ctrl(true, FTP_CODE_227);
   17ee2:	21e3      	movs	r1, #227	; 0xe3
   17ee4:	2001      	movs	r0, #1
   17ee6:	f7ff fa91 	bl	1740c <do_ftp_recv_ctrl>
		if (ret != FTP_CODE_227) {
   17eea:	28e3      	cmp	r0, #227	; 0xe3
		ret = do_ftp_recv_ctrl(true, FTP_CODE_227);
   17eec:	4604      	mov	r4, r0
		if (ret != FTP_CODE_227) {
   17eee:	d131      	bne.n	17f54 <ftp_put+0x90>
			return ret;
		}
		strcpy(data_task_param.ctrl_msg, ctrl_buf);
   17ef0:	4c1d      	ldr	r4, [pc, #116]	; (17f68 <ftp_put+0xa4>)
   17ef2:	224b      	movs	r2, #75	; 0x4b
   17ef4:	491d      	ldr	r1, [pc, #116]	; (17f6c <ftp_put+0xa8>)
   17ef6:	f104 000d 	add.w	r0, r4, #13
   17efa:	f00e ff0a 	bl	26d12 <__strcpy_chk>
		data_task_param.task = TASK_SEND;
   17efe:	7327      	strb	r7, [r4, #12]
		data_task_param.data = (u8_t *)data;
   17f00:	6526      	str	r6, [r4, #80]	; 0x50
		data_task_param.length = length;
   17f02:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
	}

	/* Send STOR command in control channel */
	sprintf(put_cmd, CMD_STOR, file);
   17f06:	2280      	movs	r2, #128	; 0x80
   17f08:	2100      	movs	r1, #0
   17f0a:	4b19      	ldr	r3, [pc, #100]	; (17f70 <ftp_put+0xac>)
   17f0c:	f8cd 8000 	str.w	r8, [sp]
   17f10:	a802      	add	r0, sp, #8
   17f12:	f00e fecf 	bl	26cb4 <__sprintf_chk>
	ret = do_ftp_send_ctrl(put_cmd, strlen(put_cmd));
   17f16:	a802      	add	r0, sp, #8
   17f18:	f7f4 ffaa 	bl	ce70 <strlen>
   17f1c:	4601      	mov	r1, r0
   17f1e:	a802      	add	r0, sp, #8
   17f20:	f7ff fafa 	bl	17518 <do_ftp_send_ctrl>
   17f24:	4604      	mov	r4, r0

	/* Now send data */
	if (data && length) {
   17f26:	b156      	cbz	r6, 17f3e <ftp_put+0x7a>
   17f28:	b14d      	cbz	r5, 17f3e <ftp_put+0x7a>
		k_work_submit_to_queue(&ftp_work_q, &data_task_param.work);
   17f2a:	480f      	ldr	r0, [pc, #60]	; (17f68 <ftp_put+0xa4>)
   17f2c:	f7ff fada 	bl	174e4 <k_work_submit_to_queue.constprop.0>
   17f30:	f04f 32ff 	mov.w	r2, #4294967295
   17f34:	f04f 33ff 	mov.w	r3, #4294967295
   17f38:	480e      	ldr	r0, [pc, #56]	; (17f74 <ftp_put+0xb0>)
   17f3a:	f009 f99b 	bl	21274 <z_impl_k_sem_take>
		k_sem_take(&tx_done, K_FOREVER);
	}

	if (ret == 0) {
   17f3e:	b94c      	cbnz	r4, 17f54 <ftp_put+0x90>
		do {
			ret = do_ftp_recv_ctrl(true, FTP_CODE_226);
   17f40:	21e2      	movs	r1, #226	; 0xe2
   17f42:	2001      	movs	r0, #1
   17f44:	f7ff fa62 	bl	1740c <do_ftp_recv_ctrl>
			if (ret == -ETIMEDOUT || ret == FTP_CODE_226) {
   17f48:	f110 0f74 	cmn.w	r0, #116	; 0x74
			ret = do_ftp_recv_ctrl(true, FTP_CODE_226);
   17f4c:	4604      	mov	r4, r0
			if (ret == -ETIMEDOUT || ret == FTP_CODE_226) {
   17f4e:	d001      	beq.n	17f54 <ftp_put+0x90>
   17f50:	28e2      	cmp	r0, #226	; 0xe2
   17f52:	d1f5      	bne.n	17f40 <ftp_put+0x7c>
			}
		} while (1);
	}

	return ret;
}
   17f54:	4620      	mov	r0, r4
   17f56:	b022      	add	sp, #136	; 0x88
   17f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -EIO;
   17f5c:	f06f 0404 	mvn.w	r4, #4
   17f60:	e7f8      	b.n	17f54 <ftp_put+0x90>
   17f62:	bf00      	nop
   17f64:	0002a741 	.word	0x0002a741
   17f68:	20021c5c 	.word	0x20021c5c
   17f6c:	20029e47 	.word	0x20029e47
   17f70:	0002a7b3 	.word	0x0002a7b3
   17f74:	20020780 	.word	0x20020780

00017f78 <ftp_init>:

int ftp_init(ftp_client_callback_t ctrl_callback,
	ftp_client_callback_t data_callback)
{
   17f78:	b510      	push	{r4, lr}
	if (ctrl_callback == NULL || data_callback == NULL) {
   17f7a:	b1b8      	cbz	r0, 17fac <ftp_init+0x34>
   17f7c:	b1b1      	cbz	r1, 17fac <ftp_init+0x34>
		return -EINVAL;
	}
	client.sock = INVALID_SOCKET;
	client.connected = false;
   17f7e:	2400      	movs	r4, #0
	client.sock = INVALID_SOCKET;
   17f80:	f04f 32ff 	mov.w	r2, #4294967295
   17f84:	4b0b      	ldr	r3, [pc, #44]	; (17fb4 <ftp_init+0x3c>)
	client.sec_tag = INVALID_SEC_TAG;
	client.ctrl_callback = ctrl_callback;
   17f86:	e9c3 2004 	strd	r2, r0, [r3, #16]
	client.sock = INVALID_SOCKET;
   17f8a:	601a      	str	r2, [r3, #0]
	client.data_callback = data_callback;
   17f8c:	6199      	str	r1, [r3, #24]

	k_work_q_start(&ftp_work_q, ftp_stack_area,
   17f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17f92:	4809      	ldr	r0, [pc, #36]	; (17fb8 <ftp_init+0x40>)
	client.connected = false;
   17f94:	711c      	strb	r4, [r3, #4]
	k_work_q_start(&ftp_work_q, ftp_stack_area,
   17f96:	4909      	ldr	r1, [pc, #36]	; (17fbc <ftp_init+0x44>)
   17f98:	230e      	movs	r3, #14
   17f9a:	f009 fa7b 	bl	21494 <k_work_q_start>
		K_THREAD_STACK_SIZEOF(ftp_stack_area), FTP_PRIORITY);
	k_work_init(&data_task_param.work, data_task);

	return 0;
   17f9e:	4620      	mov	r0, r4
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   17fa0:	4b07      	ldr	r3, [pc, #28]	; (17fc0 <ftp_init+0x48>)
   17fa2:	4a08      	ldr	r2, [pc, #32]	; (17fc4 <ftp_init+0x4c>)
   17fa4:	601c      	str	r4, [r3, #0]
   17fa6:	e9c3 2401 	strd	r2, r4, [r3, #4]
}
   17faa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   17fac:	f06f 0015 	mvn.w	r0, #21
   17fb0:	e7fb      	b.n	17faa <ftp_init+0x32>
   17fb2:	bf00      	nop
   17fb4:	20021c40 	.word	0x20021c40
   17fb8:	20021cb4 	.word	0x20021cb4
   17fbc:	2002c350 	.word	0x2002c350
   17fc0:	20021c5c 	.word	0x20021c5c
   17fc4:	000177e1 	.word	0x000177e1

00017fc8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   17fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   17fcc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   17fce:	4c21      	ldr	r4, [pc, #132]	; (18054 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   17fd0:	4e21      	ldr	r6, [pc, #132]	; (18058 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   17fd2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   17fd6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 18060 <check_ext_api_requests+0x98>
{
   17fda:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   17fdc:	45a8      	cmp	r8, r5
   17fde:	d803      	bhi.n	17fe8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   17fe0:	2000      	movs	r0, #0
   17fe2:	b005      	add	sp, #20
   17fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   17fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17fea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   17fee:	681f      	ldr	r7, [r3, #0]
   17ff0:	ab01      	add	r3, sp, #4
   17ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   17ff6:	220c      	movs	r2, #12
   17ff8:	4619      	mov	r1, r3
   17ffa:	4638      	mov	r0, r7
   17ffc:	f00e fcf5 	bl	269ea <memcmp>
   18000:	b990      	cbnz	r0, 18028 <check_ext_api_requests+0x60>
   18002:	b18f      	cbz	r7, 18028 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18004:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   18006:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18008:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1800a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1800c:	4291      	cmp	r1, r2
   1800e:	d10b      	bne.n	18028 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   18010:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   18012:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   18014:	4291      	cmp	r1, r2
   18016:	d807      	bhi.n	18028 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   18018:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1801a:	4291      	cmp	r1, r2
   1801c:	d904      	bls.n	18028 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   1801e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18020:	695b      	ldr	r3, [r3, #20]
   18022:	ea32 0303 	bics.w	r3, r2, r3
   18026:	d00a      	beq.n	1803e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   18028:	6a27      	ldr	r7, [r4, #32]
   1802a:	b167      	cbz	r7, 18046 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1802c:	480b      	ldr	r0, [pc, #44]	; (1805c <check_ext_api_requests+0x94>)
   1802e:	f00b f8dc 	bl	231ea <printk>
			k_panic();
   18032:	4040      	eors	r0, r0
   18034:	f380 8811 	msr	BASEPRI, r0
   18038:	f04f 0004 	mov.w	r0, #4
   1803c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1803e:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18040:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   18042:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18044:	e7ca      	b.n	17fdc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   18046:	4648      	mov	r0, r9
   18048:	f00b f8cf 	bl	231ea <printk>
			*ext_api_req->ext_api = NULL;
   1804c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1804e:	601f      	str	r7, [r3, #0]
   18050:	e7f5      	b.n	1803e <check_ext_api_requests+0x76>
   18052:	bf00      	nop
   18054:	0000c23c 	.word	0x0000c23c
   18058:	00027c2c 	.word	0x00027c2c
   1805c:	0002a7c8 	.word	0x0002a7c8
   18060:	0002a7f1 	.word	0x0002a7f1

00018064 <packet_free_cb>:
   18064:	b510      	push	{r4, lr}
   18066:	4604      	mov	r4, r0
   18068:	6800      	ldr	r0, [r0, #0]
   1806a:	f004 fcd9 	bl	1ca20 <rpc_logobj_client_data_free>
   1806e:	68a0      	ldr	r0, [r4, #8]
   18070:	b118      	cbz	r0, 1807a <packet_free_cb+0x16>
   18072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18076:	f007 baa7 	b.w	1f5c8 <nrf_free>
   1807a:	bd10      	pop	{r4, pc}

0001807c <logobj_event_handler>:
   1807c:	b530      	push	{r4, r5, lr}
   1807e:	4b3b      	ldr	r3, [pc, #236]	; (1816c <logobj_event_handler+0xf0>)
   18080:	b085      	sub	sp, #20
   18082:	681d      	ldr	r5, [r3, #0]
   18084:	2d00      	cmp	r5, #0
   18086:	d04c      	beq.n	18122 <logobj_event_handler+0xa6>
   18088:	f248 0302 	movw	r3, #32770	; 0x8002
   1808c:	4299      	cmp	r1, r3
   1808e:	d053      	beq.n	18138 <logobj_event_handler+0xbc>
   18090:	d91c      	bls.n	180cc <logobj_event_handler+0x50>
   18092:	f248 0303 	movw	r3, #32771	; 0x8003
   18096:	4299      	cmp	r1, r3
   18098:	d05a      	beq.n	18150 <logobj_event_handler+0xd4>
   1809a:	f249 0301 	movw	r3, #36865	; 0x9001
   1809e:	4299      	cmp	r1, r3
   180a0:	d147      	bne.n	18132 <logobj_event_handler+0xb6>
   180a2:	2400      	movs	r4, #0
   180a4:	6843      	ldr	r3, [r0, #4]
   180a6:	6802      	ldr	r2, [r0, #0]
   180a8:	e9cd 4402 	strd	r4, r4, [sp, #8]
   180ac:	e9cd 2300 	strd	r2, r3, [sp]
   180b0:	69e8      	ldr	r0, [r5, #28]
   180b2:	4669      	mov	r1, sp
   180b4:	6803      	ldr	r3, [r0, #0]
   180b6:	685b      	ldr	r3, [r3, #4]
   180b8:	4798      	blx	r3
   180ba:	3001      	adds	r0, #1
   180bc:	d04e      	beq.n	1815c <logobj_event_handler+0xe0>
   180be:	4620      	mov	r0, r4
   180c0:	682b      	ldr	r3, [r5, #0]
   180c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   180c6:	602b      	str	r3, [r5, #0]
   180c8:	b005      	add	sp, #20
   180ca:	bd30      	pop	{r4, r5, pc}
   180cc:	f248 0301 	movw	r3, #32769	; 0x8001
   180d0:	4299      	cmp	r1, r3
   180d2:	d12e      	bne.n	18132 <logobj_event_handler+0xb6>
   180d4:	68c3      	ldr	r3, [r0, #12]
   180d6:	2b00      	cmp	r3, #0
   180d8:	d135      	bne.n	18146 <logobj_event_handler+0xca>
   180da:	6828      	ldr	r0, [r5, #0]
   180dc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   180e0:	d03e      	beq.n	18160 <logobj_event_handler+0xe4>
   180e2:	682b      	ldr	r3, [r5, #0]
   180e4:	b29b      	uxth	r3, r3
   180e6:	2b01      	cmp	r3, #1
   180e8:	d105      	bne.n	180f6 <logobj_event_handler+0x7a>
   180ea:	682b      	ldr	r3, [r5, #0]
   180ec:	0c1b      	lsrs	r3, r3, #16
   180ee:	041b      	lsls	r3, r3, #16
   180f0:	f043 0302 	orr.w	r3, r3, #2
   180f4:	602b      	str	r3, [r5, #0]
   180f6:	4b1e      	ldr	r3, [pc, #120]	; (18170 <logobj_event_handler+0xf4>)
   180f8:	781a      	ldrb	r2, [r3, #0]
   180fa:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   180fe:	2a00      	cmp	r2, #0
   18100:	d031      	beq.n	18166 <logobj_event_handler+0xea>
   18102:	4a1c      	ldr	r2, [pc, #112]	; (18174 <logobj_event_handler+0xf8>)
   18104:	7811      	ldrb	r1, [r2, #0]
   18106:	b909      	cbnz	r1, 1810c <logobj_event_handler+0x90>
   18108:	2101      	movs	r1, #1
   1810a:	7011      	strb	r1, [r2, #0]
   1810c:	2000      	movs	r0, #0
   1810e:	7018      	strb	r0, [r3, #0]
   18110:	682b      	ldr	r3, [r5, #0]
   18112:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   18116:	602b      	str	r3, [r5, #0]
   18118:	682b      	ldr	r3, [r5, #0]
   1811a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1811e:	602b      	str	r3, [r5, #0]
   18120:	e7d2      	b.n	180c8 <logobj_event_handler+0x4c>
   18122:	6800      	ldr	r0, [r0, #0]
   18124:	2800      	cmp	r0, #0
   18126:	d0cf      	beq.n	180c8 <logobj_event_handler+0x4c>
   18128:	f004 fc7a 	bl	1ca20 <rpc_logobj_client_data_free>
   1812c:	4628      	mov	r0, r5
   1812e:	b005      	add	sp, #20
   18130:	bd30      	pop	{r4, r5, pc}
   18132:	2000      	movs	r0, #0
   18134:	b005      	add	sp, #20
   18136:	bd30      	pop	{r4, r5, pc}
   18138:	682b      	ldr	r3, [r5, #0]
   1813a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   1813e:	d00b      	beq.n	18158 <logobj_event_handler+0xdc>
   18140:	68c0      	ldr	r0, [r0, #12]
   18142:	2800      	cmp	r0, #0
   18144:	d0e4      	beq.n	18110 <logobj_event_handler+0x94>
   18146:	230e      	movs	r3, #14
   18148:	2000      	movs	r0, #0
   1814a:	606b      	str	r3, [r5, #4]
   1814c:	b005      	add	sp, #20
   1814e:	bd30      	pop	{r4, r5, pc}
   18150:	68c3      	ldr	r3, [r0, #12]
   18152:	2b01      	cmp	r3, #1
   18154:	d1a5      	bne.n	180a2 <logobj_event_handler+0x26>
   18156:	e7f6      	b.n	18146 <logobj_event_handler+0xca>
   18158:	4618      	mov	r0, r3
   1815a:	e7b5      	b.n	180c8 <logobj_event_handler+0x4c>
   1815c:	2002      	movs	r0, #2
   1815e:	e7b3      	b.n	180c8 <logobj_event_handler+0x4c>
   18160:	230e      	movs	r3, #14
   18162:	606b      	str	r3, [r5, #4]
   18164:	e7b0      	b.n	180c8 <logobj_event_handler+0x4c>
   18166:	4a03      	ldr	r2, [pc, #12]	; (18174 <logobj_event_handler+0xf8>)
   18168:	7011      	strb	r1, [r2, #0]
   1816a:	e7cf      	b.n	1810c <logobj_event_handler+0x90>
   1816c:	20021d88 	.word	0x20021d88
   18170:	2002a087 	.word	0x2002a087
   18174:	2002a088 	.word	0x2002a088

00018178 <logobj_interface_init>:
   18178:	2300      	movs	r3, #0
   1817a:	b510      	push	{r4, lr}
   1817c:	4808      	ldr	r0, [pc, #32]	; (181a0 <logobj_interface_init+0x28>)
   1817e:	4c09      	ldr	r4, [pc, #36]	; (181a4 <logobj_interface_init+0x2c>)
   18180:	4909      	ldr	r1, [pc, #36]	; (181a8 <logobj_interface_init+0x30>)
   18182:	4a0a      	ldr	r2, [pc, #40]	; (181ac <logobj_interface_init+0x34>)
   18184:	7023      	strb	r3, [r4, #0]
   18186:	6003      	str	r3, [r0, #0]
   18188:	700b      	strb	r3, [r1, #0]
   1818a:	6013      	str	r3, [r2, #0]
   1818c:	f004 fc0c 	bl	1c9a8 <rpc_logobj_client_init>
   18190:	b918      	cbnz	r0, 1819a <logobj_interface_init+0x22>
   18192:	2201      	movs	r2, #1
   18194:	4b06      	ldr	r3, [pc, #24]	; (181b0 <logobj_interface_init+0x38>)
   18196:	701a      	strb	r2, [r3, #0]
   18198:	bd10      	pop	{r4, pc}
   1819a:	f04f 30ff 	mov.w	r0, #4294967295
   1819e:	bd10      	pop	{r4, pc}
   181a0:	20021d88 	.word	0x20021d88
   181a4:	2002a088 	.word	0x2002a088
   181a8:	2002a087 	.word	0x2002a087
   181ac:	20021d84 	.word	0x20021d84
   181b0:	2002a089 	.word	0x2002a089

000181b4 <logobj_interface_open>:
   181b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   181b8:	2400      	movs	r4, #0
   181ba:	4b5b      	ldr	r3, [pc, #364]	; (18328 <logobj_interface_open+0x174>)
   181bc:	b084      	sub	sp, #16
   181be:	781b      	ldrb	r3, [r3, #0]
   181c0:	9401      	str	r4, [sp, #4]
   181c2:	2b00      	cmp	r3, #0
   181c4:	f000 809f 	beq.w	18306 <logobj_interface_open+0x152>
   181c8:	2866      	cmp	r0, #102	; 0x66
   181ca:	4680      	mov	r8, r0
   181cc:	f040 808f 	bne.w	182ee <logobj_interface_open+0x13a>
   181d0:	2902      	cmp	r1, #2
   181d2:	4689      	mov	r9, r1
   181d4:	f040 808b 	bne.w	182ee <logobj_interface_open+0x13a>
   181d8:	f240 2305 	movw	r3, #517	; 0x205
   181dc:	429a      	cmp	r2, r3
   181de:	4692      	mov	sl, r2
   181e0:	f040 8085 	bne.w	182ee <logobj_interface_open+0x13a>
   181e4:	4f51      	ldr	r7, [pc, #324]	; (1832c <logobj_interface_open+0x178>)
   181e6:	683d      	ldr	r5, [r7, #0]
   181e8:	2d00      	cmp	r5, #0
   181ea:	f040 8086 	bne.w	182fa <logobj_interface_open+0x146>
   181ee:	4a50      	ldr	r2, [pc, #320]	; (18330 <logobj_interface_open+0x17c>)
   181f0:	a801      	add	r0, sp, #4
   181f2:	f007 fd11 	bl	1fc18 <interface_socket_allocate>
   181f6:	9b01      	ldr	r3, [sp, #4]
   181f8:	4606      	mov	r6, r0
   181fa:	2b00      	cmp	r3, #0
   181fc:	f000 808d 	beq.w	1831a <logobj_interface_open+0x166>
   18200:	4629      	mov	r1, r5
   18202:	2204      	movs	r2, #4
   18204:	484b      	ldr	r0, [pc, #300]	; (18334 <logobj_interface_open+0x180>)
   18206:	603b      	str	r3, [r7, #0]
   18208:	f00e fc0a 	bl	26a20 <memset>
   1820c:	9c01      	ldr	r4, [sp, #4]
   1820e:	4629      	mov	r1, r5
   18210:	e9c4 8903 	strd	r8, r9, [r4, #12]
   18214:	f8c4 a014 	str.w	sl, [r4, #20]
   18218:	a802      	add	r0, sp, #8
   1821a:	f004 fbcb 	bl	1c9b4 <rpc_logobj_client_request_alloc>
   1821e:	2800      	cmp	r0, #0
   18220:	d142      	bne.n	182a8 <logobj_interface_open+0xf4>
   18222:	2201      	movs	r2, #1
   18224:	2104      	movs	r1, #4
   18226:	9b02      	ldr	r3, [sp, #8]
   18228:	4d43      	ldr	r5, [pc, #268]	; (18338 <logobj_interface_open+0x184>)
   1822a:	7358      	strb	r0, [r3, #13]
   1822c:	7398      	strb	r0, [r3, #14]
   1822e:	73d8      	strb	r0, [r3, #15]
   18230:	7258      	strb	r0, [r3, #9]
   18232:	7298      	strb	r0, [r3, #10]
   18234:	72d8      	strb	r0, [r3, #11]
   18236:	7219      	strb	r1, [r3, #8]
   18238:	702a      	strb	r2, [r5, #0]
   1823a:	731a      	strb	r2, [r3, #12]
   1823c:	6822      	ldr	r2, [r4, #0]
   1823e:	4618      	mov	r0, r3
   18240:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   18244:	6022      	str	r2, [r4, #0]
   18246:	f247 0101 	movw	r1, #28673	; 0x7001
   1824a:	f004 fbcb 	bl	1c9e4 <rpc_logobj_client_request_send>
   1824e:	bb68      	cbnz	r0, 182ac <logobj_interface_open+0xf8>
   18250:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18252:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18256:	2900      	cmp	r1, #0
   18258:	bf08      	it	eq
   1825a:	f04f 31ff 	moveq.w	r1, #4294967295
   1825e:	ab04      	add	r3, sp, #16
   18260:	f843 1d04 	str.w	r1, [r3, #-4]!
   18264:	4630      	mov	r0, r6
   18266:	4611      	mov	r1, r2
   18268:	f007 fd88 	bl	1fd7c <interface_socket_wait>
   1826c:	4604      	mov	r4, r0
   1826e:	b310      	cbz	r0, 182b6 <logobj_interface_open+0x102>
   18270:	9a01      	ldr	r2, [sp, #4]
   18272:	2e00      	cmp	r6, #0
   18274:	6813      	ldr	r3, [r2, #0]
   18276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1827a:	6013      	str	r3, [r2, #0]
   1827c:	9a01      	ldr	r2, [sp, #4]
   1827e:	6813      	ldr	r3, [r2, #0]
   18280:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   18284:	6013      	str	r3, [r2, #0]
   18286:	9a01      	ldr	r2, [sp, #4]
   18288:	6813      	ldr	r3, [r2, #0]
   1828a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1828e:	6013      	str	r3, [r2, #0]
   18290:	da3f      	bge.n	18312 <logobj_interface_open+0x15e>
   18292:	2300      	movs	r3, #0
   18294:	4620      	mov	r0, r4
   18296:	603b      	str	r3, [r7, #0]
   18298:	f04f 36ff 	mov.w	r6, #4294967295
   1829c:	f7fd fcbc 	bl	15c18 <bsd_os_errno_set>
   182a0:	4630      	mov	r0, r6
   182a2:	b004      	add	sp, #16
   182a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   182a8:	240c      	movs	r4, #12
   182aa:	e7e1      	b.n	18270 <logobj_interface_open+0xbc>
   182ac:	9802      	ldr	r0, [sp, #8]
   182ae:	f004 fbaf 	bl	1ca10 <rpc_logobj_client_message_free>
   182b2:	2405      	movs	r4, #5
   182b4:	e7dc      	b.n	18270 <logobj_interface_open+0xbc>
   182b6:	4630      	mov	r0, r6
   182b8:	f007 fde0 	bl	1fe7c <interface_socket_from_handle_get>
   182bc:	b120      	cbz	r0, 182c8 <logobj_interface_open+0x114>
   182be:	6844      	ldr	r4, [r0, #4]
   182c0:	b114      	cbz	r4, 182c8 <logobj_interface_open+0x114>
   182c2:	2300      	movs	r3, #0
   182c4:	6043      	str	r3, [r0, #4]
   182c6:	e7d3      	b.n	18270 <logobj_interface_open+0xbc>
   182c8:	4630      	mov	r0, r6
   182ca:	9a01      	ldr	r2, [sp, #4]
   182cc:	6813      	ldr	r3, [r2, #0]
   182ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   182d2:	6013      	str	r3, [r2, #0]
   182d4:	9a01      	ldr	r2, [sp, #4]
   182d6:	6813      	ldr	r3, [r2, #0]
   182d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   182dc:	6013      	str	r3, [r2, #0]
   182de:	9a01      	ldr	r2, [sp, #4]
   182e0:	6813      	ldr	r3, [r2, #0]
   182e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   182e6:	6013      	str	r3, [r2, #0]
   182e8:	b004      	add	sp, #16
   182ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   182ee:	2016      	movs	r0, #22
   182f0:	f7fd fc92 	bl	15c18 <bsd_os_errno_set>
   182f4:	f04f 36ff 	mov.w	r6, #4294967295
   182f8:	e7d2      	b.n	182a0 <logobj_interface_open+0xec>
   182fa:	2001      	movs	r0, #1
   182fc:	f7fd fc8c 	bl	15c18 <bsd_os_errno_set>
   18300:	f04f 36ff 	mov.w	r6, #4294967295
   18304:	e7cc      	b.n	182a0 <logobj_interface_open+0xec>
   18306:	2005      	movs	r0, #5
   18308:	f7fd fc86 	bl	15c18 <bsd_os_errno_set>
   1830c:	f04f 36ff 	mov.w	r6, #4294967295
   18310:	e7c6      	b.n	182a0 <logobj_interface_open+0xec>
   18312:	4630      	mov	r0, r6
   18314:	f007 fce4 	bl	1fce0 <interface_socket_free>
   18318:	e7bb      	b.n	18292 <logobj_interface_open+0xde>
   1831a:	2018      	movs	r0, #24
   1831c:	f7fd fc7c 	bl	15c18 <bsd_os_errno_set>
   18320:	f04f 36ff 	mov.w	r6, #4294967295
   18324:	e7bc      	b.n	182a0 <logobj_interface_open+0xec>
   18326:	bf00      	nop
   18328:	2002a089 	.word	0x2002a089
   1832c:	20021d88 	.word	0x20021d88
   18330:	00018065 	.word	0x00018065
   18334:	20021d84 	.word	0x20021d84
   18338:	2002a087 	.word	0x2002a087

0001833c <logobj_interface_read>:
   1833c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18340:	b087      	sub	sp, #28
   18342:	2900      	cmp	r1, #0
   18344:	d06b      	beq.n	1841e <logobj_interface_read+0xe2>
   18346:	2a00      	cmp	r2, #0
   18348:	4617      	mov	r7, r2
   1834a:	dd68      	ble.n	1841e <logobj_interface_read+0xe2>
   1834c:	461d      	mov	r5, r3
   1834e:	4680      	mov	r8, r0
   18350:	460e      	mov	r6, r1
   18352:	f007 fd93 	bl	1fe7c <interface_socket_from_handle_get>
   18356:	4604      	mov	r4, r0
   18358:	2800      	cmp	r0, #0
   1835a:	d066      	beq.n	1842a <logobj_interface_read+0xee>
   1835c:	bb4d      	cbnz	r5, 183b2 <logobj_interface_read+0x76>
   1835e:	69e0      	ldr	r0, [r4, #28]
   18360:	07aa      	lsls	r2, r5, #30
   18362:	6803      	ldr	r3, [r0, #0]
   18364:	68db      	ldr	r3, [r3, #12]
   18366:	d52d      	bpl.n	183c4 <logobj_interface_read+0x88>
   18368:	4798      	blx	r3
   1836a:	3001      	adds	r0, #1
   1836c:	d047      	beq.n	183fe <logobj_interface_read+0xc2>
   1836e:	6823      	ldr	r3, [r4, #0]
   18370:	69e0      	ldr	r0, [r4, #28]
   18372:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   18376:	d044      	beq.n	18402 <logobj_interface_read+0xc6>
   18378:	2100      	movs	r1, #0
   1837a:	6823      	ldr	r3, [r4, #0]
   1837c:	462a      	mov	r2, r5
   1837e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   18382:	6023      	str	r3, [r4, #0]
   18384:	e9cd 1104 	strd	r1, r1, [sp, #16]
   18388:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1838c:	6803      	ldr	r3, [r0, #0]
   1838e:	a902      	add	r1, sp, #8
   18390:	689b      	ldr	r3, [r3, #8]
   18392:	4798      	blx	r3
   18394:	4605      	mov	r5, r0
   18396:	69e0      	ldr	r0, [r4, #28]
   18398:	6803      	ldr	r3, [r0, #0]
   1839a:	68db      	ldr	r3, [r3, #12]
   1839c:	4798      	blx	r3
   1839e:	3001      	adds	r0, #1
   183a0:	d003      	beq.n	183aa <logobj_interface_read+0x6e>
   183a2:	6823      	ldr	r3, [r4, #0]
   183a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   183a8:	6023      	str	r3, [r4, #0]
   183aa:	4628      	mov	r0, r5
   183ac:	b007      	add	sp, #28
   183ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   183b2:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   183b6:	d1d2      	bne.n	1835e <logobj_interface_read+0x22>
   183b8:	202d      	movs	r0, #45	; 0x2d
   183ba:	f7fd fc2d 	bl	15c18 <bsd_os_errno_set>
   183be:	f04f 35ff 	mov.w	r5, #4294967295
   183c2:	e7f2      	b.n	183aa <logobj_interface_read+0x6e>
   183c4:	6822      	ldr	r2, [r4, #0]
   183c6:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   183ca:	d1cd      	bne.n	18368 <logobj_interface_read+0x2c>
   183cc:	4798      	blx	r3
   183ce:	1c43      	adds	r3, r0, #1
   183d0:	d1cd      	bne.n	1836e <logobj_interface_read+0x32>
   183d2:	6a22      	ldr	r2, [r4, #32]
   183d4:	ab06      	add	r3, sp, #24
   183d6:	2a00      	cmp	r2, #0
   183d8:	bf18      	it	ne
   183da:	4610      	movne	r0, r2
   183dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   183e0:	f843 0d14 	str.w	r0, [r3, #-20]!
   183e4:	4611      	mov	r1, r2
   183e6:	4640      	mov	r0, r8
   183e8:	f007 fcc8 	bl	1fd7c <interface_socket_wait>
   183ec:	b158      	cbz	r0, 18406 <logobj_interface_read+0xca>
   183ee:	f04f 35ff 	mov.w	r5, #4294967295
   183f2:	f7fd fc11 	bl	15c18 <bsd_os_errno_set>
   183f6:	4628      	mov	r0, r5
   183f8:	b007      	add	sp, #28
   183fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   183fe:	2023      	movs	r0, #35	; 0x23
   18400:	e7f5      	b.n	183ee <logobj_interface_read+0xb2>
   18402:	461d      	mov	r5, r3
   18404:	e7c8      	b.n	18398 <logobj_interface_read+0x5c>
   18406:	4640      	mov	r0, r8
   18408:	f007 fd38 	bl	1fe7c <interface_socket_from_handle_get>
   1840c:	4603      	mov	r3, r0
   1840e:	2800      	cmp	r0, #0
   18410:	d0ad      	beq.n	1836e <logobj_interface_read+0x32>
   18412:	6840      	ldr	r0, [r0, #4]
   18414:	2800      	cmp	r0, #0
   18416:	d0aa      	beq.n	1836e <logobj_interface_read+0x32>
   18418:	f8c3 9004 	str.w	r9, [r3, #4]
   1841c:	e7e7      	b.n	183ee <logobj_interface_read+0xb2>
   1841e:	2016      	movs	r0, #22
   18420:	f7fd fbfa 	bl	15c18 <bsd_os_errno_set>
   18424:	f04f 35ff 	mov.w	r5, #4294967295
   18428:	e7bf      	b.n	183aa <logobj_interface_read+0x6e>
   1842a:	2009      	movs	r0, #9
   1842c:	f7fd fbf4 	bl	15c18 <bsd_os_errno_set>
   18430:	f04f 35ff 	mov.w	r5, #4294967295
   18434:	e7b9      	b.n	183aa <logobj_interface_read+0x6e>
   18436:	bf00      	nop

00018438 <logobj_interface_write>:
   18438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1843c:	b082      	sub	sp, #8
   1843e:	2900      	cmp	r1, #0
   18440:	d06b      	beq.n	1851a <logobj_interface_write+0xe2>
   18442:	2a04      	cmp	r2, #4
   18444:	d169      	bne.n	1851a <logobj_interface_write+0xe2>
   18446:	461f      	mov	r7, r3
   18448:	4606      	mov	r6, r0
   1844a:	460d      	mov	r5, r1
   1844c:	f007 fd16 	bl	1fe7c <interface_socket_from_handle_get>
   18450:	4604      	mov	r4, r0
   18452:	2800      	cmp	r0, #0
   18454:	d074      	beq.n	18540 <logobj_interface_write+0x108>
   18456:	b1e7      	cbz	r7, 18492 <logobj_interface_write+0x5a>
   18458:	07b8      	lsls	r0, r7, #30
   1845a:	d56b      	bpl.n	18534 <logobj_interface_write+0xfc>
   1845c:	6823      	ldr	r3, [r4, #0]
   1845e:	039b      	lsls	r3, r3, #14
   18460:	d564      	bpl.n	1852c <logobj_interface_write+0xf4>
   18462:	2700      	movs	r7, #0
   18464:	6823      	ldr	r3, [r4, #0]
   18466:	2100      	movs	r1, #0
   18468:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1846c:	6023      	str	r3, [r4, #0]
   1846e:	4668      	mov	r0, sp
   18470:	f8d5 8000 	ldr.w	r8, [r5]
   18474:	f004 fa9e 	bl	1c9b4 <rpc_logobj_client_request_alloc>
   18478:	b198      	cbz	r0, 184a2 <logobj_interface_write+0x6a>
   1847a:	200c      	movs	r0, #12
   1847c:	6823      	ldr	r3, [r4, #0]
   1847e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18482:	6023      	str	r3, [r4, #0]
   18484:	f7fd fbc8 	bl	15c18 <bsd_os_errno_set>
   18488:	f04f 30ff 	mov.w	r0, #4294967295
   1848c:	b002      	add	sp, #8
   1848e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18492:	6803      	ldr	r3, [r0, #0]
   18494:	00d9      	lsls	r1, r3, #3
   18496:	d4e1      	bmi.n	1845c <logobj_interface_write+0x24>
   18498:	6803      	ldr	r3, [r0, #0]
   1849a:	039a      	lsls	r2, r3, #14
   1849c:	d548      	bpl.n	18530 <logobj_interface_write+0xf8>
   1849e:	2701      	movs	r7, #1
   184a0:	e7e0      	b.n	18464 <logobj_interface_write+0x2c>
   184a2:	2504      	movs	r5, #4
   184a4:	9b00      	ldr	r3, [sp, #0]
   184a6:	f247 0103 	movw	r1, #28675	; 0x7003
   184aa:	f8c3 800c 	str.w	r8, [r3, #12]
   184ae:	7258      	strb	r0, [r3, #9]
   184b0:	7298      	strb	r0, [r3, #10]
   184b2:	72d8      	strb	r0, [r3, #11]
   184b4:	721d      	strb	r5, [r3, #8]
   184b6:	4618      	mov	r0, r3
   184b8:	f004 fa94 	bl	1c9e4 <rpc_logobj_client_request_send>
   184bc:	4680      	mov	r8, r0
   184be:	bb18      	cbnz	r0, 18508 <logobj_interface_write+0xd0>
   184c0:	b1d7      	cbz	r7, 184f8 <logobj_interface_write+0xc0>
   184c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   184c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   184c8:	2900      	cmp	r1, #0
   184ca:	bf08      	it	eq
   184cc:	f04f 31ff 	moveq.w	r1, #4294967295
   184d0:	ab02      	add	r3, sp, #8
   184d2:	f843 1d04 	str.w	r1, [r3, #-4]!
   184d6:	4630      	mov	r0, r6
   184d8:	4611      	mov	r1, r2
   184da:	f007 fc4f 	bl	1fd7c <interface_socket_wait>
   184de:	b120      	cbz	r0, 184ea <logobj_interface_write+0xb2>
   184e0:	6823      	ldr	r3, [r4, #0]
   184e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   184e6:	6023      	str	r3, [r4, #0]
   184e8:	e7cc      	b.n	18484 <logobj_interface_write+0x4c>
   184ea:	4630      	mov	r0, r6
   184ec:	f007 fcc6 	bl	1fe7c <interface_socket_from_handle_get>
   184f0:	4603      	mov	r3, r0
   184f2:	b108      	cbz	r0, 184f8 <logobj_interface_write+0xc0>
   184f4:	6840      	ldr	r0, [r0, #4]
   184f6:	b9b0      	cbnz	r0, 18526 <logobj_interface_write+0xee>
   184f8:	4628      	mov	r0, r5
   184fa:	6823      	ldr	r3, [r4, #0]
   184fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18500:	6023      	str	r3, [r4, #0]
   18502:	b002      	add	sp, #8
   18504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18508:	9800      	ldr	r0, [sp, #0]
   1850a:	f004 fa81 	bl	1ca10 <rpc_logobj_client_message_free>
   1850e:	6823      	ldr	r3, [r4, #0]
   18510:	2005      	movs	r0, #5
   18512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18516:	6023      	str	r3, [r4, #0]
   18518:	e7b4      	b.n	18484 <logobj_interface_write+0x4c>
   1851a:	2016      	movs	r0, #22
   1851c:	f7fd fb7c 	bl	15c18 <bsd_os_errno_set>
   18520:	f04f 30ff 	mov.w	r0, #4294967295
   18524:	e7b2      	b.n	1848c <logobj_interface_write+0x54>
   18526:	f8c3 8004 	str.w	r8, [r3, #4]
   1852a:	e7d9      	b.n	184e0 <logobj_interface_write+0xa8>
   1852c:	2073      	movs	r0, #115	; 0x73
   1852e:	e7a9      	b.n	18484 <logobj_interface_write+0x4c>
   18530:	2009      	movs	r0, #9
   18532:	e7a7      	b.n	18484 <logobj_interface_write+0x4c>
   18534:	202d      	movs	r0, #45	; 0x2d
   18536:	f7fd fb6f 	bl	15c18 <bsd_os_errno_set>
   1853a:	f04f 30ff 	mov.w	r0, #4294967295
   1853e:	e7a5      	b.n	1848c <logobj_interface_write+0x54>
   18540:	2009      	movs	r0, #9
   18542:	f7fd fb69 	bl	15c18 <bsd_os_errno_set>
   18546:	f04f 30ff 	mov.w	r0, #4294967295
   1854a:	e79f      	b.n	1848c <logobj_interface_write+0x54>

0001854c <logobj_interface_setopt>:
   1854c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1854e:	2901      	cmp	r1, #1
   18550:	b085      	sub	sp, #20
   18552:	d06d      	beq.n	18630 <logobj_interface_setopt+0xe4>
   18554:	461e      	mov	r6, r3
   18556:	f240 2305 	movw	r3, #517	; 0x205
   1855a:	4299      	cmp	r1, r3
   1855c:	f040 80a0 	bne.w	186a0 <logobj_interface_setopt+0x154>
   18560:	4607      	mov	r7, r0
   18562:	4615      	mov	r5, r2
   18564:	f007 fc8a 	bl	1fe7c <interface_socket_from_handle_get>
   18568:	4604      	mov	r4, r0
   1856a:	2800      	cmp	r0, #0
   1856c:	f000 80c3 	beq.w	186f6 <logobj_interface_setopt+0x1aa>
   18570:	2d01      	cmp	r5, #1
   18572:	d019      	beq.n	185a8 <logobj_interface_setopt+0x5c>
   18574:	2d02      	cmp	r5, #2
   18576:	d010      	beq.n	1859a <logobj_interface_setopt+0x4e>
   18578:	252a      	movs	r5, #42	; 0x2a
   1857a:	6803      	ldr	r3, [r0, #0]
   1857c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   18580:	6023      	str	r3, [r4, #0]
   18582:	6823      	ldr	r3, [r4, #0]
   18584:	4628      	mov	r0, r5
   18586:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1858a:	6023      	str	r3, [r4, #0]
   1858c:	f7fd fb44 	bl	15c18 <bsd_os_errno_set>
   18590:	f04f 35ff 	mov.w	r5, #4294967295
   18594:	4628      	mov	r0, r5
   18596:	b005      	add	sp, #20
   18598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1859a:	b116      	cbz	r6, 185a2 <logobj_interface_setopt+0x56>
   1859c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1859e:	2b01      	cmp	r3, #1
   185a0:	d04e      	beq.n	18640 <logobj_interface_setopt+0xf4>
   185a2:	6823      	ldr	r3, [r4, #0]
   185a4:	2516      	movs	r5, #22
   185a6:	e7e9      	b.n	1857c <logobj_interface_setopt+0x30>
   185a8:	2e00      	cmp	r6, #0
   185aa:	d0fa      	beq.n	185a2 <logobj_interface_setopt+0x56>
   185ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   185ae:	2b04      	cmp	r3, #4
   185b0:	d1f7      	bne.n	185a2 <logobj_interface_setopt+0x56>
   185b2:	2100      	movs	r1, #0
   185b4:	a803      	add	r0, sp, #12
   185b6:	f004 f9fd 	bl	1c9b4 <rpc_logobj_client_request_alloc>
   185ba:	4605      	mov	r5, r0
   185bc:	2800      	cmp	r0, #0
   185be:	d175      	bne.n	186ac <logobj_interface_setopt+0x160>
   185c0:	9803      	ldr	r0, [sp, #12]
   185c2:	2208      	movs	r2, #8
   185c4:	4629      	mov	r1, r5
   185c6:	300c      	adds	r0, #12
   185c8:	f00e fa2a 	bl	26a20 <memset>
   185cc:	9803      	ldr	r0, [sp, #12]
   185ce:	4631      	mov	r1, r6
   185d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   185d2:	300c      	adds	r0, #12
   185d4:	f00e fa17 	bl	26a06 <memcpy>
   185d8:	2308      	movs	r3, #8
   185da:	9803      	ldr	r0, [sp, #12]
   185dc:	f247 0102 	movw	r1, #28674	; 0x7002
   185e0:	7203      	strb	r3, [r0, #8]
   185e2:	7245      	strb	r5, [r0, #9]
   185e4:	7285      	strb	r5, [r0, #10]
   185e6:	72c5      	strb	r5, [r0, #11]
   185e8:	6823      	ldr	r3, [r4, #0]
   185ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   185ee:	6023      	str	r3, [r4, #0]
   185f0:	f004 f9f8 	bl	1c9e4 <rpc_logobj_client_request_send>
   185f4:	2800      	cmp	r0, #0
   185f6:	d178      	bne.n	186ea <logobj_interface_setopt+0x19e>
   185f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   185fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   185fe:	2900      	cmp	r1, #0
   18600:	bf08      	it	eq
   18602:	f04f 31ff 	moveq.w	r1, #4294967295
   18606:	ab04      	add	r3, sp, #16
   18608:	f843 1d08 	str.w	r1, [r3, #-8]!
   1860c:	4638      	mov	r0, r7
   1860e:	4611      	mov	r1, r2
   18610:	f007 fbb4 	bl	1fd7c <interface_socket_wait>
   18614:	4605      	mov	r5, r0
   18616:	2800      	cmp	r0, #0
   18618:	d140      	bne.n	1869c <logobj_interface_setopt+0x150>
   1861a:	4638      	mov	r0, r7
   1861c:	f007 fc2e 	bl	1fe7c <interface_socket_from_handle_get>
   18620:	2800      	cmp	r0, #0
   18622:	d04e      	beq.n	186c2 <logobj_interface_setopt+0x176>
   18624:	6843      	ldr	r3, [r0, #4]
   18626:	2b00      	cmp	r3, #0
   18628:	d04b      	beq.n	186c2 <logobj_interface_setopt+0x176>
   1862a:	6045      	str	r5, [r0, #4]
   1862c:	461d      	mov	r5, r3
   1862e:	e035      	b.n	1869c <logobj_interface_setopt+0x150>
   18630:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   18632:	9400      	str	r4, [sp, #0]
   18634:	f007 fc4a 	bl	1fecc <interface_socket_setopt>
   18638:	4605      	mov	r5, r0
   1863a:	4628      	mov	r0, r5
   1863c:	b005      	add	sp, #20
   1863e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18640:	2100      	movs	r1, #0
   18642:	a802      	add	r0, sp, #8
   18644:	7835      	ldrb	r5, [r6, #0]
   18646:	f004 f9b5 	bl	1c9b4 <rpc_logobj_client_request_alloc>
   1864a:	bb78      	cbnz	r0, 186ac <logobj_interface_setopt+0x160>
   1864c:	2d01      	cmp	r5, #1
   1864e:	bf08      	it	eq
   18650:	4b2c      	ldreq	r3, [pc, #176]	; (18704 <logobj_interface_setopt+0x1b8>)
   18652:	f04f 0204 	mov.w	r2, #4
   18656:	bf08      	it	eq
   18658:	701d      	strbeq	r5, [r3, #0]
   1865a:	2300      	movs	r3, #0
   1865c:	9802      	ldr	r0, [sp, #8]
   1865e:	f247 0101 	movw	r1, #28673	; 0x7001
   18662:	7243      	strb	r3, [r0, #9]
   18664:	60c5      	str	r5, [r0, #12]
   18666:	7283      	strb	r3, [r0, #10]
   18668:	72c3      	strb	r3, [r0, #11]
   1866a:	7202      	strb	r2, [r0, #8]
   1866c:	6823      	ldr	r3, [r4, #0]
   1866e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   18672:	6023      	str	r3, [r4, #0]
   18674:	f004 f9b6 	bl	1c9e4 <rpc_logobj_client_request_send>
   18678:	4606      	mov	r6, r0
   1867a:	bb80      	cbnz	r0, 186de <logobj_interface_setopt+0x192>
   1867c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1867e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18682:	2900      	cmp	r1, #0
   18684:	bf08      	it	eq
   18686:	f04f 31ff 	moveq.w	r1, #4294967295
   1868a:	ab04      	add	r3, sp, #16
   1868c:	f843 1d04 	str.w	r1, [r3, #-4]!
   18690:	4638      	mov	r0, r7
   18692:	4611      	mov	r1, r2
   18694:	f007 fb72 	bl	1fd7c <interface_socket_wait>
   18698:	4605      	mov	r5, r0
   1869a:	b150      	cbz	r0, 186b2 <logobj_interface_setopt+0x166>
   1869c:	6823      	ldr	r3, [r4, #0]
   1869e:	e76d      	b.n	1857c <logobj_interface_setopt+0x30>
   186a0:	202a      	movs	r0, #42	; 0x2a
   186a2:	f7fd fab9 	bl	15c18 <bsd_os_errno_set>
   186a6:	f04f 35ff 	mov.w	r5, #4294967295
   186aa:	e773      	b.n	18594 <logobj_interface_setopt+0x48>
   186ac:	6823      	ldr	r3, [r4, #0]
   186ae:	250c      	movs	r5, #12
   186b0:	e764      	b.n	1857c <logobj_interface_setopt+0x30>
   186b2:	4638      	mov	r0, r7
   186b4:	f007 fbe2 	bl	1fe7c <interface_socket_from_handle_get>
   186b8:	b140      	cbz	r0, 186cc <logobj_interface_setopt+0x180>
   186ba:	6845      	ldr	r5, [r0, #4]
   186bc:	b135      	cbz	r5, 186cc <logobj_interface_setopt+0x180>
   186be:	6046      	str	r6, [r0, #4]
   186c0:	e7ec      	b.n	1869c <logobj_interface_setopt+0x150>
   186c2:	4631      	mov	r1, r6
   186c4:	2204      	movs	r2, #4
   186c6:	4810      	ldr	r0, [pc, #64]	; (18708 <logobj_interface_setopt+0x1bc>)
   186c8:	f00e f99d 	bl	26a06 <memcpy>
   186cc:	6823      	ldr	r3, [r4, #0]
   186ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   186d2:	6023      	str	r3, [r4, #0]
   186d4:	6823      	ldr	r3, [r4, #0]
   186d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   186da:	6023      	str	r3, [r4, #0]
   186dc:	e75a      	b.n	18594 <logobj_interface_setopt+0x48>
   186de:	9802      	ldr	r0, [sp, #8]
   186e0:	f004 f996 	bl	1ca10 <rpc_logobj_client_message_free>
   186e4:	2505      	movs	r5, #5
   186e6:	6823      	ldr	r3, [r4, #0]
   186e8:	e748      	b.n	1857c <logobj_interface_setopt+0x30>
   186ea:	9803      	ldr	r0, [sp, #12]
   186ec:	f004 f990 	bl	1ca10 <rpc_logobj_client_message_free>
   186f0:	2505      	movs	r5, #5
   186f2:	6823      	ldr	r3, [r4, #0]
   186f4:	e742      	b.n	1857c <logobj_interface_setopt+0x30>
   186f6:	2009      	movs	r0, #9
   186f8:	f7fd fa8e 	bl	15c18 <bsd_os_errno_set>
   186fc:	f04f 35ff 	mov.w	r5, #4294967295
   18700:	e748      	b.n	18594 <logobj_interface_setopt+0x48>
   18702:	bf00      	nop
   18704:	2002a087 	.word	0x2002a087
   18708:	20021d84 	.word	0x20021d84

0001870c <logobj_interface_getopt>:
   1870c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1870e:	2901      	cmp	r1, #1
   18710:	b083      	sub	sp, #12
   18712:	9e08      	ldr	r6, [sp, #32]
   18714:	d030      	beq.n	18778 <logobj_interface_getopt+0x6c>
   18716:	461f      	mov	r7, r3
   18718:	f240 2305 	movw	r3, #517	; 0x205
   1871c:	4299      	cmp	r1, r3
   1871e:	d134      	bne.n	1878a <logobj_interface_getopt+0x7e>
   18720:	4615      	mov	r5, r2
   18722:	f007 fbab 	bl	1fe7c <interface_socket_from_handle_get>
   18726:	2800      	cmp	r0, #0
   18728:	d037      	beq.n	1879a <logobj_interface_getopt+0x8e>
   1872a:	2d01      	cmp	r5, #1
   1872c:	d015      	beq.n	1875a <logobj_interface_getopt+0x4e>
   1872e:	2d02      	cmp	r5, #2
   18730:	d10b      	bne.n	1874a <logobj_interface_getopt+0x3e>
   18732:	b387      	cbz	r7, 18796 <logobj_interface_getopt+0x8a>
   18734:	6833      	ldr	r3, [r6, #0]
   18736:	b373      	cbz	r3, 18796 <logobj_interface_getopt+0x8a>
   18738:	2300      	movs	r3, #0
   1873a:	2201      	movs	r2, #1
   1873c:	4618      	mov	r0, r3
   1873e:	491a      	ldr	r1, [pc, #104]	; (187a8 <logobj_interface_getopt+0x9c>)
   18740:	7809      	ldrb	r1, [r1, #0]
   18742:	7039      	strb	r1, [r7, #0]
   18744:	6032      	str	r2, [r6, #0]
   18746:	b003      	add	sp, #12
   18748:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1874a:	2009      	movs	r0, #9
   1874c:	f7fd fa64 	bl	15c18 <bsd_os_errno_set>
   18750:	f04f 33ff 	mov.w	r3, #4294967295
   18754:	4618      	mov	r0, r3
   18756:	b003      	add	sp, #12
   18758:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1875a:	b1e7      	cbz	r7, 18796 <logobj_interface_getopt+0x8a>
   1875c:	6833      	ldr	r3, [r6, #0]
   1875e:	2b03      	cmp	r3, #3
   18760:	d919      	bls.n	18796 <logobj_interface_getopt+0x8a>
   18762:	4638      	mov	r0, r7
   18764:	2204      	movs	r2, #4
   18766:	4911      	ldr	r1, [pc, #68]	; (187ac <logobj_interface_getopt+0xa0>)
   18768:	f00e f94d 	bl	26a06 <memcpy>
   1876c:	2300      	movs	r3, #0
   1876e:	2204      	movs	r2, #4
   18770:	4618      	mov	r0, r3
   18772:	6032      	str	r2, [r6, #0]
   18774:	b003      	add	sp, #12
   18776:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18778:	9600      	str	r6, [sp, #0]
   1877a:	f007 fbed 	bl	1ff58 <interface_socket_getopt>
   1877e:	4603      	mov	r3, r0
   18780:	2800      	cmp	r0, #0
   18782:	d1e3      	bne.n	1874c <logobj_interface_getopt+0x40>
   18784:	4618      	mov	r0, r3
   18786:	b003      	add	sp, #12
   18788:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1878a:	202a      	movs	r0, #42	; 0x2a
   1878c:	f7fd fa44 	bl	15c18 <bsd_os_errno_set>
   18790:	f04f 33ff 	mov.w	r3, #4294967295
   18794:	e7de      	b.n	18754 <logobj_interface_getopt+0x48>
   18796:	2016      	movs	r0, #22
   18798:	e7d8      	b.n	1874c <logobj_interface_getopt+0x40>
   1879a:	2009      	movs	r0, #9
   1879c:	f7fd fa3c 	bl	15c18 <bsd_os_errno_set>
   187a0:	f04f 33ff 	mov.w	r3, #4294967295
   187a4:	e7d6      	b.n	18754 <logobj_interface_getopt+0x48>
   187a6:	bf00      	nop
   187a8:	2002a088 	.word	0x2002a088
   187ac:	20021d84 	.word	0x20021d84

000187b0 <logobj_interface_close>:
   187b0:	b510      	push	{r4, lr}
   187b2:	4604      	mov	r4, r0
   187b4:	f007 fb62 	bl	1fe7c <interface_socket_from_handle_get>
   187b8:	b138      	cbz	r0, 187ca <logobj_interface_close+0x1a>
   187ba:	4620      	mov	r0, r4
   187bc:	f007 fa90 	bl	1fce0 <interface_socket_free>
   187c0:	2300      	movs	r3, #0
   187c2:	4a05      	ldr	r2, [pc, #20]	; (187d8 <logobj_interface_close+0x28>)
   187c4:	4618      	mov	r0, r3
   187c6:	6013      	str	r3, [r2, #0]
   187c8:	bd10      	pop	{r4, pc}
   187ca:	2009      	movs	r0, #9
   187cc:	f7fd fa24 	bl	15c18 <bsd_os_errno_set>
   187d0:	f04f 30ff 	mov.w	r0, #4294967295
   187d4:	bd10      	pop	{r4, pc}
   187d6:	bf00      	nop
   187d8:	20021d88 	.word	0x20021d88

000187dc <rpc_transport_send>:
   187dc:	f000 beda 	b.w	19594 <rpc_transport_ipc_send>

000187e0 <rpc_transport_rpc_alloc>:
   187e0:	f000 bf5a 	b.w	19698 <rpc_transport_ipc_tx_rpc_data_alloc>

000187e4 <rpc_transport_data_alloc>:
   187e4:	f000 bfc0 	b.w	19768 <rpc_transport_ipc_tx_data_alloc>

000187e8 <rpc_transport_rpc_free>:
   187e8:	f000 bdae 	b.w	19348 <rpc_transport_ipc_msg_free>

000187ec <rpc_transport_data_free>:
   187ec:	f000 ba64 	b.w	18cb8 <rpc_transport_ipc_data_free>

000187f0 <ipc_trace_init>:
   187f0:	4b01      	ldr	r3, [pc, #4]	; (187f8 <ipc_trace_init+0x8>)
   187f2:	6018      	str	r0, [r3, #0]
   187f4:	4770      	bx	lr
   187f6:	bf00      	nop
   187f8:	20021d98 	.word	0x20021d98

000187fc <bsd_os_trace_irq_handler>:
   187fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   187fe:	4b6e      	ldr	r3, [pc, #440]	; (189b8 <bsd_os_trace_irq_handler+0x1bc>)
   18800:	b083      	sub	sp, #12
   18802:	781b      	ldrb	r3, [r3, #0]
   18804:	2b00      	cmp	r3, #0
   18806:	f000 80d3 	beq.w	189b0 <bsd_os_trace_irq_handler+0x1b4>
   1880a:	4b6c      	ldr	r3, [pc, #432]	; (189bc <bsd_os_trace_irq_handler+0x1c0>)
   1880c:	681c      	ldr	r4, [r3, #0]
   1880e:	b124      	cbz	r4, 1881a <bsd_os_trace_irq_handler+0x1e>
   18810:	68a3      	ldr	r3, [r4, #8]
   18812:	6862      	ldr	r2, [r4, #4]
   18814:	4293      	cmp	r3, r2
   18816:	f040 808c 	bne.w	18932 <bsd_os_trace_irq_handler+0x136>
   1881a:	4b69      	ldr	r3, [pc, #420]	; (189c0 <bsd_os_trace_irq_handler+0x1c4>)
   1881c:	681c      	ldr	r4, [r3, #0]
   1881e:	b11c      	cbz	r4, 18828 <bsd_os_trace_irq_handler+0x2c>
   18820:	68a3      	ldr	r3, [r4, #8]
   18822:	6862      	ldr	r2, [r4, #4]
   18824:	4293      	cmp	r3, r2
   18826:	d146      	bne.n	188b6 <bsd_os_trace_irq_handler+0xba>
   18828:	4b66      	ldr	r3, [pc, #408]	; (189c4 <bsd_os_trace_irq_handler+0x1c8>)
   1882a:	681c      	ldr	r4, [r3, #0]
   1882c:	b11c      	cbz	r4, 18836 <bsd_os_trace_irq_handler+0x3a>
   1882e:	68a3      	ldr	r3, [r4, #8]
   18830:	6862      	ldr	r2, [r4, #4]
   18832:	4293      	cmp	r3, r2
   18834:	d101      	bne.n	1883a <bsd_os_trace_irq_handler+0x3e>
   18836:	b003      	add	sp, #12
   18838:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1883a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1883e:	f8ad 2000 	strh.w	r2, [sp]
   18842:	7822      	ldrb	r2, [r4, #0]
   18844:	466e      	mov	r6, sp
   18846:	f88d 2004 	strb.w	r2, [sp, #4]
   1884a:	6862      	ldr	r2, [r4, #4]
   1884c:	2105      	movs	r1, #5
   1884e:	4293      	cmp	r3, r2
   18850:	bf2a      	itet	cs
   18852:	6927      	ldrcs	r7, [r4, #16]
   18854:	1ad7      	subcc	r7, r2, r3
   18856:	1aff      	subcs	r7, r7, r3
   18858:	4293      	cmp	r3, r2
   1885a:	bf94      	ite	ls
   1885c:	2500      	movls	r5, #0
   1885e:	68e5      	ldrhi	r5, [r4, #12]
   18860:	b2bf      	uxth	r7, r7
   18862:	bf88      	it	hi
   18864:	1b52      	subhi	r2, r2, r5
   18866:	4630      	mov	r0, r6
   18868:	bf88      	it	hi
   1886a:	b295      	uxthhi	r5, r2
   1886c:	f8ad 7002 	strh.w	r7, [sp, #2]
   18870:	f00c ffb0 	bl	257d4 <bsd_os_trace_put>
   18874:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18878:	68a0      	ldr	r0, [r4, #8]
   1887a:	f00c ffab 	bl	257d4 <bsd_os_trace_put>
   1887e:	68a3      	ldr	r3, [r4, #8]
   18880:	6922      	ldr	r2, [r4, #16]
   18882:	441f      	add	r7, r3
   18884:	4297      	cmp	r7, r2
   18886:	bf08      	it	eq
   18888:	68e3      	ldreq	r3, [r4, #12]
   1888a:	60a7      	str	r7, [r4, #8]
   1888c:	bf08      	it	eq
   1888e:	60a3      	streq	r3, [r4, #8]
   18890:	2d00      	cmp	r5, #0
   18892:	d0d0      	beq.n	18836 <bsd_os_trace_irq_handler+0x3a>
   18894:	2105      	movs	r1, #5
   18896:	4630      	mov	r0, r6
   18898:	f8ad 5002 	strh.w	r5, [sp, #2]
   1889c:	f00c ff9a 	bl	257d4 <bsd_os_trace_put>
   188a0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   188a4:	68e0      	ldr	r0, [r4, #12]
   188a6:	f00c ff95 	bl	257d4 <bsd_os_trace_put>
   188aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   188ae:	68e3      	ldr	r3, [r4, #12]
   188b0:	4413      	add	r3, r2
   188b2:	60a3      	str	r3, [r4, #8]
   188b4:	e7bf      	b.n	18836 <bsd_os_trace_irq_handler+0x3a>
   188b6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   188ba:	f8ad 2000 	strh.w	r2, [sp]
   188be:	7822      	ldrb	r2, [r4, #0]
   188c0:	466e      	mov	r6, sp
   188c2:	f88d 2004 	strb.w	r2, [sp, #4]
   188c6:	6862      	ldr	r2, [r4, #4]
   188c8:	2105      	movs	r1, #5
   188ca:	4293      	cmp	r3, r2
   188cc:	bf2a      	itet	cs
   188ce:	6927      	ldrcs	r7, [r4, #16]
   188d0:	1ad7      	subcc	r7, r2, r3
   188d2:	1aff      	subcs	r7, r7, r3
   188d4:	4293      	cmp	r3, r2
   188d6:	bf94      	ite	ls
   188d8:	2500      	movls	r5, #0
   188da:	68e5      	ldrhi	r5, [r4, #12]
   188dc:	b2bf      	uxth	r7, r7
   188de:	bf88      	it	hi
   188e0:	1b52      	subhi	r2, r2, r5
   188e2:	4630      	mov	r0, r6
   188e4:	bf88      	it	hi
   188e6:	b295      	uxthhi	r5, r2
   188e8:	f8ad 7002 	strh.w	r7, [sp, #2]
   188ec:	f00c ff72 	bl	257d4 <bsd_os_trace_put>
   188f0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   188f4:	68a0      	ldr	r0, [r4, #8]
   188f6:	f00c ff6d 	bl	257d4 <bsd_os_trace_put>
   188fa:	68a3      	ldr	r3, [r4, #8]
   188fc:	6922      	ldr	r2, [r4, #16]
   188fe:	441f      	add	r7, r3
   18900:	4297      	cmp	r7, r2
   18902:	bf08      	it	eq
   18904:	68e3      	ldreq	r3, [r4, #12]
   18906:	60a7      	str	r7, [r4, #8]
   18908:	bf08      	it	eq
   1890a:	60a3      	streq	r3, [r4, #8]
   1890c:	2d00      	cmp	r5, #0
   1890e:	d08b      	beq.n	18828 <bsd_os_trace_irq_handler+0x2c>
   18910:	2105      	movs	r1, #5
   18912:	4630      	mov	r0, r6
   18914:	f8ad 5002 	strh.w	r5, [sp, #2]
   18918:	f00c ff5c 	bl	257d4 <bsd_os_trace_put>
   1891c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18920:	68e0      	ldr	r0, [r4, #12]
   18922:	f00c ff57 	bl	257d4 <bsd_os_trace_put>
   18926:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1892a:	68e3      	ldr	r3, [r4, #12]
   1892c:	4413      	add	r3, r2
   1892e:	60a3      	str	r3, [r4, #8]
   18930:	e77a      	b.n	18828 <bsd_os_trace_irq_handler+0x2c>
   18932:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   18936:	f8ad 2000 	strh.w	r2, [sp]
   1893a:	7822      	ldrb	r2, [r4, #0]
   1893c:	466e      	mov	r6, sp
   1893e:	f88d 2004 	strb.w	r2, [sp, #4]
   18942:	6862      	ldr	r2, [r4, #4]
   18944:	2105      	movs	r1, #5
   18946:	4293      	cmp	r3, r2
   18948:	bf2a      	itet	cs
   1894a:	6927      	ldrcs	r7, [r4, #16]
   1894c:	1ad7      	subcc	r7, r2, r3
   1894e:	1aff      	subcs	r7, r7, r3
   18950:	4293      	cmp	r3, r2
   18952:	bf94      	ite	ls
   18954:	2500      	movls	r5, #0
   18956:	68e5      	ldrhi	r5, [r4, #12]
   18958:	b2bf      	uxth	r7, r7
   1895a:	bf88      	it	hi
   1895c:	1b52      	subhi	r2, r2, r5
   1895e:	4630      	mov	r0, r6
   18960:	bf88      	it	hi
   18962:	b295      	uxthhi	r5, r2
   18964:	f8ad 7002 	strh.w	r7, [sp, #2]
   18968:	f00c ff34 	bl	257d4 <bsd_os_trace_put>
   1896c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18970:	68a0      	ldr	r0, [r4, #8]
   18972:	f00c ff2f 	bl	257d4 <bsd_os_trace_put>
   18976:	68a3      	ldr	r3, [r4, #8]
   18978:	6922      	ldr	r2, [r4, #16]
   1897a:	441f      	add	r7, r3
   1897c:	4297      	cmp	r7, r2
   1897e:	bf08      	it	eq
   18980:	68e3      	ldreq	r3, [r4, #12]
   18982:	60a7      	str	r7, [r4, #8]
   18984:	bf08      	it	eq
   18986:	60a3      	streq	r3, [r4, #8]
   18988:	2d00      	cmp	r5, #0
   1898a:	f43f af46 	beq.w	1881a <bsd_os_trace_irq_handler+0x1e>
   1898e:	2105      	movs	r1, #5
   18990:	4630      	mov	r0, r6
   18992:	f8ad 5002 	strh.w	r5, [sp, #2]
   18996:	f00c ff1d 	bl	257d4 <bsd_os_trace_put>
   1899a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1899e:	68e0      	ldr	r0, [r4, #12]
   189a0:	f00c ff18 	bl	257d4 <bsd_os_trace_put>
   189a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   189a8:	68e3      	ldr	r3, [r4, #12]
   189aa:	4413      	add	r3, r2
   189ac:	60a3      	str	r3, [r4, #8]
   189ae:	e734      	b.n	1881a <bsd_os_trace_irq_handler+0x1e>
   189b0:	f7fd faba 	bl	15f28 <bsd_os_trace_irq_clear>
   189b4:	e729      	b.n	1880a <bsd_os_trace_irq_handler+0xe>
   189b6:	bf00      	nop
   189b8:	2002a08a 	.word	0x2002a08a
   189bc:	20021d94 	.word	0x20021d94
   189c0:	20021d8c 	.word	0x20021d8c
   189c4:	20021d90 	.word	0x20021d90

000189c8 <ipc_trace_handle>:
   189c8:	2200      	movs	r2, #0
   189ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189ce:	4bb2      	ldr	r3, [pc, #712]	; (18c98 <ipc_trace_handle+0x2d0>)
   189d0:	b083      	sub	sp, #12
   189d2:	681b      	ldr	r3, [r3, #0]
   189d4:	6919      	ldr	r1, [r3, #16]
   189d6:	695c      	ldr	r4, [r3, #20]
   189d8:	7c18      	ldrb	r0, [r3, #16]
   189da:	741a      	strb	r2, [r3, #16]
   189dc:	7c58      	ldrb	r0, [r3, #17]
   189de:	745a      	strb	r2, [r3, #17]
   189e0:	7c98      	ldrb	r0, [r3, #18]
   189e2:	749a      	strb	r2, [r3, #18]
   189e4:	7cd8      	ldrb	r0, [r3, #19]
   189e6:	74da      	strb	r2, [r3, #19]
   189e8:	7d18      	ldrb	r0, [r3, #20]
   189ea:	751a      	strb	r2, [r3, #20]
   189ec:	7d58      	ldrb	r0, [r3, #21]
   189ee:	755a      	strb	r2, [r3, #21]
   189f0:	7d98      	ldrb	r0, [r3, #22]
   189f2:	759a      	strb	r2, [r3, #22]
   189f4:	7dd8      	ldrb	r0, [r3, #23]
   189f6:	75da      	strb	r2, [r3, #23]
   189f8:	b1a9      	cbz	r1, 18a26 <ipc_trace_handle+0x5e>
   189fa:	3901      	subs	r1, #1
   189fc:	2903      	cmp	r1, #3
   189fe:	d812      	bhi.n	18a26 <ipc_trace_handle+0x5e>
   18a00:	e8df f001 	tbb	[pc, r1]
   18a04:	1402a97c 	.word	0x1402a97c
   18a08:	2501      	movs	r5, #1
   18a0a:	2003      	movs	r0, #3
   18a0c:	2200      	movs	r2, #0
   18a0e:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   18a12:	4ca2      	ldr	r4, [pc, #648]	; (18c9c <ipc_trace_handle+0x2d4>)
   18a14:	7025      	strb	r5, [r4, #0]
   18a16:	7a1c      	ldrb	r4, [r3, #8]
   18a18:	7218      	strb	r0, [r3, #8]
   18a1a:	7a58      	ldrb	r0, [r3, #9]
   18a1c:	725a      	strb	r2, [r3, #9]
   18a1e:	7a98      	ldrb	r0, [r3, #10]
   18a20:	729a      	strb	r2, [r3, #10]
   18a22:	7ada      	ldrb	r2, [r3, #11]
   18a24:	72d9      	strb	r1, [r3, #11]
   18a26:	b003      	add	sp, #12
   18a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a2c:	2104      	movs	r1, #4
   18a2e:	2200      	movs	r2, #0
   18a30:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   18a34:	7a1c      	ldrb	r4, [r3, #8]
   18a36:	7219      	strb	r1, [r3, #8]
   18a38:	7a59      	ldrb	r1, [r3, #9]
   18a3a:	725a      	strb	r2, [r3, #9]
   18a3c:	4997      	ldr	r1, [pc, #604]	; (18c9c <ipc_trace_handle+0x2d4>)
   18a3e:	7a9c      	ldrb	r4, [r3, #10]
   18a40:	729a      	strb	r2, [r3, #10]
   18a42:	7adc      	ldrb	r4, [r3, #11]
   18a44:	72d8      	strb	r0, [r3, #11]
   18a46:	700a      	strb	r2, [r1, #0]
   18a48:	780b      	ldrb	r3, [r1, #0]
   18a4a:	2b00      	cmp	r3, #0
   18a4c:	f000 809f 	beq.w	18b8e <ipc_trace_handle+0x1c6>
   18a50:	4b93      	ldr	r3, [pc, #588]	; (18ca0 <ipc_trace_handle+0x2d8>)
   18a52:	681c      	ldr	r4, [r3, #0]
   18a54:	b124      	cbz	r4, 18a60 <ipc_trace_handle+0x98>
   18a56:	68a3      	ldr	r3, [r4, #8]
   18a58:	6862      	ldr	r2, [r4, #4]
   18a5a:	4293      	cmp	r3, r2
   18a5c:	f040 80d9 	bne.w	18c12 <ipc_trace_handle+0x24a>
   18a60:	4b90      	ldr	r3, [pc, #576]	; (18ca4 <ipc_trace_handle+0x2dc>)
   18a62:	681c      	ldr	r4, [r3, #0]
   18a64:	b124      	cbz	r4, 18a70 <ipc_trace_handle+0xa8>
   18a66:	68a3      	ldr	r3, [r4, #8]
   18a68:	6862      	ldr	r2, [r4, #4]
   18a6a:	4293      	cmp	r3, r2
   18a6c:	f040 8092 	bne.w	18b94 <ipc_trace_handle+0x1cc>
   18a70:	4b8d      	ldr	r3, [pc, #564]	; (18ca8 <ipc_trace_handle+0x2e0>)
   18a72:	681c      	ldr	r4, [r3, #0]
   18a74:	2c00      	cmp	r4, #0
   18a76:	d0d6      	beq.n	18a26 <ipc_trace_handle+0x5e>
   18a78:	68a3      	ldr	r3, [r4, #8]
   18a7a:	6862      	ldr	r2, [r4, #4]
   18a7c:	4293      	cmp	r3, r2
   18a7e:	d0d2      	beq.n	18a26 <ipc_trace_handle+0x5e>
   18a80:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   18a84:	f8ad 2000 	strh.w	r2, [sp]
   18a88:	7822      	ldrb	r2, [r4, #0]
   18a8a:	466e      	mov	r6, sp
   18a8c:	f88d 2004 	strb.w	r2, [sp, #4]
   18a90:	6862      	ldr	r2, [r4, #4]
   18a92:	2105      	movs	r1, #5
   18a94:	4293      	cmp	r3, r2
   18a96:	bf2a      	itet	cs
   18a98:	6927      	ldrcs	r7, [r4, #16]
   18a9a:	1ad7      	subcc	r7, r2, r3
   18a9c:	1aff      	subcs	r7, r7, r3
   18a9e:	4293      	cmp	r3, r2
   18aa0:	bf94      	ite	ls
   18aa2:	2500      	movls	r5, #0
   18aa4:	68e5      	ldrhi	r5, [r4, #12]
   18aa6:	b2bf      	uxth	r7, r7
   18aa8:	bf88      	it	hi
   18aaa:	1b52      	subhi	r2, r2, r5
   18aac:	4630      	mov	r0, r6
   18aae:	bf88      	it	hi
   18ab0:	b295      	uxthhi	r5, r2
   18ab2:	f8ad 7002 	strh.w	r7, [sp, #2]
   18ab6:	f00c fe8d 	bl	257d4 <bsd_os_trace_put>
   18aba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18abe:	68a0      	ldr	r0, [r4, #8]
   18ac0:	f00c fe88 	bl	257d4 <bsd_os_trace_put>
   18ac4:	68a3      	ldr	r3, [r4, #8]
   18ac6:	6922      	ldr	r2, [r4, #16]
   18ac8:	441f      	add	r7, r3
   18aca:	4297      	cmp	r7, r2
   18acc:	bf08      	it	eq
   18ace:	68e3      	ldreq	r3, [r4, #12]
   18ad0:	60a7      	str	r7, [r4, #8]
   18ad2:	bf08      	it	eq
   18ad4:	60a3      	streq	r3, [r4, #8]
   18ad6:	2d00      	cmp	r5, #0
   18ad8:	d0a5      	beq.n	18a26 <ipc_trace_handle+0x5e>
   18ada:	2105      	movs	r1, #5
   18adc:	4630      	mov	r0, r6
   18ade:	f8ad 5002 	strh.w	r5, [sp, #2]
   18ae2:	f00c fe77 	bl	257d4 <bsd_os_trace_put>
   18ae6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18aea:	68e0      	ldr	r0, [r4, #12]
   18aec:	f00c fe72 	bl	257d4 <bsd_os_trace_put>
   18af0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18af4:	68e3      	ldr	r3, [r4, #12]
   18af6:	4413      	add	r3, r2
   18af8:	60a3      	str	r3, [r4, #8]
   18afa:	e794      	b.n	18a26 <ipc_trace_handle+0x5e>
   18afc:	4a67      	ldr	r2, [pc, #412]	; (18c9c <ipc_trace_handle+0x2d4>)
   18afe:	7811      	ldrb	r1, [r2, #0]
   18b00:	b109      	cbz	r1, 18b06 <ipc_trace_handle+0x13e>
   18b02:	2100      	movs	r1, #0
   18b04:	7011      	strb	r1, [r2, #0]
   18b06:	68a5      	ldr	r5, [r4, #8]
   18b08:	2d00      	cmp	r5, #0
   18b0a:	d03b      	beq.n	18b84 <ipc_trace_handle+0x1bc>
   18b0c:	f04f 0c00 	mov.w	ip, #0
   18b10:	f8df a190 	ldr.w	sl, [pc, #400]	; 18ca4 <ipc_trace_handle+0x2dc>
   18b14:	f8df b188 	ldr.w	fp, [pc, #392]	; 18ca0 <ipc_trace_handle+0x2d8>
   18b18:	4963      	ldr	r1, [pc, #396]	; (18ca8 <ipc_trace_handle+0x2e0>)
   18b1a:	46e1      	mov	r9, ip
   18b1c:	4666      	mov	r6, ip
   18b1e:	4662      	mov	r2, ip
   18b20:	f8d1 e000 	ldr.w	lr, [r1]
   18b24:	f8da 8000 	ldr.w	r8, [sl]
   18b28:	f8db 7000 	ldr.w	r7, [fp]
   18b2c:	e008      	b.n	18b40 <ipc_trace_handle+0x178>
   18b2e:	2963      	cmp	r1, #99	; 0x63
   18b30:	d016      	beq.n	18b60 <ipc_trace_handle+0x198>
   18b32:	2961      	cmp	r1, #97	; 0x61
   18b34:	bf04      	itt	eq
   18b36:	4607      	moveq	r7, r0
   18b38:	2601      	moveq	r6, #1
   18b3a:	3201      	adds	r2, #1
   18b3c:	42aa      	cmp	r2, r5
   18b3e:	d013      	beq.n	18b68 <ipc_trace_handle+0x1a0>
   18b40:	1c91      	adds	r1, r2, #2
   18b42:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   18b46:	6848      	ldr	r0, [r1, #4]
   18b48:	7801      	ldrb	r1, [r0, #0]
   18b4a:	2962      	cmp	r1, #98	; 0x62
   18b4c:	d1ef      	bne.n	18b2e <ipc_trace_handle+0x166>
   18b4e:	4680      	mov	r8, r0
   18b50:	f04f 0901 	mov.w	r9, #1
   18b54:	e7f1      	b.n	18b3a <ipc_trace_handle+0x172>
   18b56:	f7fd f9df 	bl	15f18 <bsd_os_trace_irq_set>
   18b5a:	b003      	add	sp, #12
   18b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b60:	4686      	mov	lr, r0
   18b62:	f04f 0c01 	mov.w	ip, #1
   18b66:	e7e8      	b.n	18b3a <ipc_trace_handle+0x172>
   18b68:	2e00      	cmp	r6, #0
   18b6a:	f040 8091 	bne.w	18c90 <ipc_trace_handle+0x2c8>
   18b6e:	f1b9 0f00 	cmp.w	r9, #0
   18b72:	d001      	beq.n	18b78 <ipc_trace_handle+0x1b0>
   18b74:	f8ca 8000 	str.w	r8, [sl]
   18b78:	f1bc 0f00 	cmp.w	ip, #0
   18b7c:	d002      	beq.n	18b84 <ipc_trace_handle+0x1bc>
   18b7e:	4a4a      	ldr	r2, [pc, #296]	; (18ca8 <ipc_trace_handle+0x2e0>)
   18b80:	f8c2 e000 	str.w	lr, [r2]
   18b84:	2001      	movs	r0, #1
   18b86:	2200      	movs	r2, #0
   18b88:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   18b8c:	e743      	b.n	18a16 <ipc_trace_handle+0x4e>
   18b8e:	f7fd f9cb 	bl	15f28 <bsd_os_trace_irq_clear>
   18b92:	e75d      	b.n	18a50 <ipc_trace_handle+0x88>
   18b94:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   18b98:	f8ad 2000 	strh.w	r2, [sp]
   18b9c:	7822      	ldrb	r2, [r4, #0]
   18b9e:	466e      	mov	r6, sp
   18ba0:	f88d 2004 	strb.w	r2, [sp, #4]
   18ba4:	6862      	ldr	r2, [r4, #4]
   18ba6:	2105      	movs	r1, #5
   18ba8:	4293      	cmp	r3, r2
   18baa:	bf2a      	itet	cs
   18bac:	6927      	ldrcs	r7, [r4, #16]
   18bae:	1ad7      	subcc	r7, r2, r3
   18bb0:	1aff      	subcs	r7, r7, r3
   18bb2:	4293      	cmp	r3, r2
   18bb4:	bf94      	ite	ls
   18bb6:	2500      	movls	r5, #0
   18bb8:	68e5      	ldrhi	r5, [r4, #12]
   18bba:	b2bf      	uxth	r7, r7
   18bbc:	bf88      	it	hi
   18bbe:	1b52      	subhi	r2, r2, r5
   18bc0:	4630      	mov	r0, r6
   18bc2:	bf88      	it	hi
   18bc4:	b295      	uxthhi	r5, r2
   18bc6:	f8ad 7002 	strh.w	r7, [sp, #2]
   18bca:	f00c fe03 	bl	257d4 <bsd_os_trace_put>
   18bce:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18bd2:	68a0      	ldr	r0, [r4, #8]
   18bd4:	f00c fdfe 	bl	257d4 <bsd_os_trace_put>
   18bd8:	68a3      	ldr	r3, [r4, #8]
   18bda:	6922      	ldr	r2, [r4, #16]
   18bdc:	441f      	add	r7, r3
   18bde:	4297      	cmp	r7, r2
   18be0:	bf08      	it	eq
   18be2:	68e3      	ldreq	r3, [r4, #12]
   18be4:	60a7      	str	r7, [r4, #8]
   18be6:	bf08      	it	eq
   18be8:	60a3      	streq	r3, [r4, #8]
   18bea:	2d00      	cmp	r5, #0
   18bec:	f43f af40 	beq.w	18a70 <ipc_trace_handle+0xa8>
   18bf0:	2105      	movs	r1, #5
   18bf2:	4630      	mov	r0, r6
   18bf4:	f8ad 5002 	strh.w	r5, [sp, #2]
   18bf8:	f00c fdec 	bl	257d4 <bsd_os_trace_put>
   18bfc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18c00:	68e0      	ldr	r0, [r4, #12]
   18c02:	f00c fde7 	bl	257d4 <bsd_os_trace_put>
   18c06:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18c0a:	68e3      	ldr	r3, [r4, #12]
   18c0c:	4413      	add	r3, r2
   18c0e:	60a3      	str	r3, [r4, #8]
   18c10:	e72e      	b.n	18a70 <ipc_trace_handle+0xa8>
   18c12:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   18c16:	f8ad 2000 	strh.w	r2, [sp]
   18c1a:	7822      	ldrb	r2, [r4, #0]
   18c1c:	466e      	mov	r6, sp
   18c1e:	f88d 2004 	strb.w	r2, [sp, #4]
   18c22:	6862      	ldr	r2, [r4, #4]
   18c24:	2105      	movs	r1, #5
   18c26:	4293      	cmp	r3, r2
   18c28:	bf2a      	itet	cs
   18c2a:	6927      	ldrcs	r7, [r4, #16]
   18c2c:	1ad7      	subcc	r7, r2, r3
   18c2e:	1aff      	subcs	r7, r7, r3
   18c30:	4293      	cmp	r3, r2
   18c32:	bf94      	ite	ls
   18c34:	2500      	movls	r5, #0
   18c36:	68e5      	ldrhi	r5, [r4, #12]
   18c38:	b2bf      	uxth	r7, r7
   18c3a:	bf88      	it	hi
   18c3c:	1b52      	subhi	r2, r2, r5
   18c3e:	4630      	mov	r0, r6
   18c40:	bf88      	it	hi
   18c42:	b295      	uxthhi	r5, r2
   18c44:	f8ad 7002 	strh.w	r7, [sp, #2]
   18c48:	f00c fdc4 	bl	257d4 <bsd_os_trace_put>
   18c4c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18c50:	68a0      	ldr	r0, [r4, #8]
   18c52:	f00c fdbf 	bl	257d4 <bsd_os_trace_put>
   18c56:	68a3      	ldr	r3, [r4, #8]
   18c58:	6922      	ldr	r2, [r4, #16]
   18c5a:	441f      	add	r7, r3
   18c5c:	4297      	cmp	r7, r2
   18c5e:	bf08      	it	eq
   18c60:	68e3      	ldreq	r3, [r4, #12]
   18c62:	60a7      	str	r7, [r4, #8]
   18c64:	bf08      	it	eq
   18c66:	60a3      	streq	r3, [r4, #8]
   18c68:	2d00      	cmp	r5, #0
   18c6a:	f43f aef9 	beq.w	18a60 <ipc_trace_handle+0x98>
   18c6e:	2105      	movs	r1, #5
   18c70:	4630      	mov	r0, r6
   18c72:	f8ad 5002 	strh.w	r5, [sp, #2]
   18c76:	f00c fdad 	bl	257d4 <bsd_os_trace_put>
   18c7a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18c7e:	68e0      	ldr	r0, [r4, #12]
   18c80:	f00c fda8 	bl	257d4 <bsd_os_trace_put>
   18c84:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18c88:	68e3      	ldr	r3, [r4, #12]
   18c8a:	4413      	add	r3, r2
   18c8c:	60a3      	str	r3, [r4, #8]
   18c8e:	e6e7      	b.n	18a60 <ipc_trace_handle+0x98>
   18c90:	f8cb 7000 	str.w	r7, [fp]
   18c94:	e76b      	b.n	18b6e <ipc_trace_handle+0x1a6>
   18c96:	bf00      	nop
   18c98:	20021d98 	.word	0x20021d98
   18c9c:	2002a08a 	.word	0x2002a08a
   18ca0:	20021d94 	.word	0x20021d94
   18ca4:	20021d8c 	.word	0x20021d8c
   18ca8:	20021d90 	.word	0x20021d90

00018cac <rpc_trace_coredump_in_progress>:
   18cac:	4b01      	ldr	r3, [pc, #4]	; (18cb4 <rpc_trace_coredump_in_progress+0x8>)
   18cae:	7818      	ldrb	r0, [r3, #0]
   18cb0:	4770      	bx	lr
   18cb2:	bf00      	nop
   18cb4:	2002a08a 	.word	0x2002a08a

00018cb8 <rpc_transport_ipc_data_free>:
   18cb8:	b510      	push	{r4, lr}
   18cba:	4b0e      	ldr	r3, [pc, #56]	; (18cf4 <rpc_transport_ipc_data_free+0x3c>)
   18cbc:	4604      	mov	r4, r0
   18cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   18cc2:	4413      	add	r3, r2
   18cc4:	4298      	cmp	r0, r3
   18cc6:	d20d      	bcs.n	18ce4 <rpc_transport_ipc_data_free+0x2c>
   18cc8:	4282      	cmp	r2, r0
   18cca:	d80b      	bhi.n	18ce4 <rpc_transport_ipc_data_free+0x2c>
   18ccc:	f000 fd1c 	bl	19708 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   18cd0:	b158      	cbz	r0, 18cea <rpc_transport_ipc_data_free+0x32>
   18cd2:	4a09      	ldr	r2, [pc, #36]	; (18cf8 <rpc_transport_ipc_data_free+0x40>)
   18cd4:	6084      	str	r4, [r0, #8]
   18cd6:	6002      	str	r2, [r0, #0]
   18cd8:	f7ff fd80 	bl	187dc <rpc_transport_send>
   18cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18ce0:	f7fd b90a 	b.w	15ef8 <bsd_os_application_irq_set>
   18ce4:	4620      	mov	r0, r4
   18ce6:	f006 fc85 	bl	1f5f4 <nrf_shared_free>
   18cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18cee:	f7fd b903 	b.w	15ef8 <bsd_os_application_irq_set>
   18cf2:	bf00      	nop
   18cf4:	20021d9c 	.word	0x20021d9c
   18cf8:	00020001 	.word	0x00020001

00018cfc <rpc_transport_ipc_init>:
   18cfc:	b188      	cbz	r0, 18d22 <rpc_transport_ipc_init+0x26>
   18cfe:	b510      	push	{r4, lr}
   18d00:	b082      	sub	sp, #8
   18d02:	aa01      	add	r2, sp, #4
   18d04:	4669      	mov	r1, sp
   18d06:	4604      	mov	r4, r0
   18d08:	f000 fb5a 	bl	193c0 <rpc_transport_ipc_tx_init>
   18d0c:	4602      	mov	r2, r0
   18d0e:	b148      	cbz	r0, 18d24 <rpc_transport_ipc_init+0x28>
   18d10:	4b12      	ldr	r3, [pc, #72]	; (18d5c <rpc_transport_ipc_init+0x60>)
   18d12:	3428      	adds	r4, #40	; 0x28
   18d14:	e894 0003 	ldmia.w	r4, {r0, r1}
   18d18:	e883 0003 	stmia.w	r3, {r0, r1}
   18d1c:	4610      	mov	r0, r2
   18d1e:	b002      	add	sp, #8
   18d20:	bd10      	pop	{r4, pc}
   18d22:	e7fe      	b.n	18d22 <rpc_transport_ipc_init+0x26>
   18d24:	e9dd 1200 	ldrd	r1, r2, [sp]
   18d28:	4620      	mov	r0, r4
   18d2a:	f000 f9fb 	bl	19124 <rpc_transport_ipc_rx_init>
   18d2e:	4602      	mov	r2, r0
   18d30:	4b0a      	ldr	r3, [pc, #40]	; (18d5c <rpc_transport_ipc_init+0x60>)
   18d32:	f104 0128 	add.w	r1, r4, #40	; 0x28
   18d36:	c903      	ldmia	r1, {r0, r1}
   18d38:	e883 0003 	stmia.w	r3, {r0, r1}
   18d3c:	2a00      	cmp	r2, #0
   18d3e:	d1ed      	bne.n	18d1c <rpc_transport_ipc_init+0x20>
   18d40:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18d44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18d46:	4906      	ldr	r1, [pc, #24]	; (18d60 <rpc_transport_ipc_init+0x64>)
   18d48:	015b      	lsls	r3, r3, #5
   18d4a:	b2db      	uxtb	r3, r3
   18d4c:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   18d50:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   18d54:	6048      	str	r0, [r1, #4]
   18d56:	4610      	mov	r0, r2
   18d58:	b002      	add	sp, #8
   18d5a:	bd10      	pop	{r4, pc}
   18d5c:	20021d9c 	.word	0x20021d9c
   18d60:	e000e100 	.word	0xe000e100

00018d64 <bsd_os_application_irq_handler>:
   18d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d68:	f7fd f8ce 	bl	15f08 <bsd_os_application_irq_clear>
   18d6c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 18e44 <bsd_os_application_irq_handler+0xe0>
   18d70:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 18e48 <bsd_os_application_irq_handler+0xe4>
   18d74:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 18e4c <bsd_os_application_irq_handler+0xe8>
   18d78:	f108 0908 	add.w	r9, r8, #8
   18d7c:	f858 7b04 	ldr.w	r7, [r8], #4
   18d80:	6839      	ldr	r1, [r7, #0]
   18d82:	b361      	cbz	r1, 18dde <bsd_os_application_irq_handler+0x7a>
   18d84:	2400      	movs	r4, #0
   18d86:	e002      	b.n	18d8e <bsd_os_application_irq_handler+0x2a>
   18d88:	3401      	adds	r4, #1
   18d8a:	428c      	cmp	r4, r1
   18d8c:	d227      	bcs.n	18dde <bsd_os_application_irq_handler+0x7a>
   18d8e:	00e6      	lsls	r6, r4, #3
   18d90:	19bd      	adds	r5, r7, r6
   18d92:	68aa      	ldr	r2, [r5, #8]
   18d94:	2a00      	cmp	r2, #0
   18d96:	d0f7      	beq.n	18d88 <bsd_os_application_irq_handler+0x24>
   18d98:	686a      	ldr	r2, [r5, #4]
   18d9a:	b2d2      	uxtb	r2, r2
   18d9c:	2a01      	cmp	r2, #1
   18d9e:	d1f3      	bne.n	18d88 <bsd_os_application_irq_handler+0x24>
   18da0:	6868      	ldr	r0, [r5, #4]
   18da2:	f8bb 2000 	ldrh.w	r2, [fp]
   18da6:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   18daa:	d1ed      	bne.n	18d88 <bsd_os_application_irq_handler+0x24>
   18dac:	68a8      	ldr	r0, [r5, #8]
   18dae:	6841      	ldr	r1, [r0, #4]
   18db0:	b2c9      	uxtb	r1, r1
   18db2:	2902      	cmp	r1, #2
   18db4:	d02c      	beq.n	18e10 <bsd_os_application_irq_handler+0xac>
   18db6:	2901      	cmp	r1, #1
   18db8:	d015      	beq.n	18de6 <bsd_os_application_irq_handler+0x82>
   18dba:	3604      	adds	r6, #4
   18dbc:	59b9      	ldr	r1, [r7, r6]
   18dbe:	3201      	adds	r2, #1
   18dc0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   18dc4:	f041 0103 	orr.w	r1, r1, #3
   18dc8:	51b9      	str	r1, [r7, r6]
   18dca:	f8ab 2000 	strh.w	r2, [fp]
   18dce:	f7fd f893 	bl	15ef8 <bsd_os_application_irq_set>
   18dd2:	f858 7c04 	ldr.w	r7, [r8, #-4]
   18dd6:	3401      	adds	r4, #1
   18dd8:	6839      	ldr	r1, [r7, #0]
   18dda:	428c      	cmp	r4, r1
   18ddc:	d3d7      	bcc.n	18d8e <bsd_os_application_irq_handler+0x2a>
   18dde:	45c1      	cmp	r9, r8
   18de0:	d1cc      	bne.n	18d7c <bsd_os_application_irq_handler+0x18>
   18de2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18de6:	6801      	ldr	r1, [r0, #0]
   18de8:	0c09      	lsrs	r1, r1, #16
   18dea:	f002 fdbb 	bl	1b964 <rpc_handle_ctrl_message>
   18dee:	2801      	cmp	r0, #1
   18df0:	d014      	beq.n	18e1c <bsd_os_application_irq_handler+0xb8>
   18df2:	d310      	bcc.n	18e16 <bsd_os_application_irq_handler+0xb2>
   18df4:	2802      	cmp	r0, #2
   18df6:	d007      	beq.n	18e08 <bsd_os_application_irq_handler+0xa4>
   18df8:	2203      	movs	r2, #3
   18dfa:	4b11      	ldr	r3, [pc, #68]	; (18e40 <bsd_os_application_irq_handler+0xdc>)
   18dfc:	4610      	mov	r0, r2
   18dfe:	f8ca 2000 	str.w	r2, [sl]
   18e02:	601a      	str	r2, [r3, #0]
   18e04:	f005 f962 	bl	1e0cc <rpc_transport_ipc_fault_handler>
   18e08:	f858 7c04 	ldr.w	r7, [r8, #-4]
   18e0c:	6839      	ldr	r1, [r7, #0]
   18e0e:	e7bb      	b.n	18d88 <bsd_os_application_irq_handler+0x24>
   18e10:	f002 fdc0 	bl	1b994 <rpc_handle_data_message>
   18e14:	e7eb      	b.n	18dee <bsd_os_application_irq_handler+0x8a>
   18e16:	f8bb 2000 	ldrh.w	r2, [fp]
   18e1a:	e7ce      	b.n	18dba <bsd_os_application_irq_handler+0x56>
   18e1c:	686a      	ldr	r2, [r5, #4]
   18e1e:	f8bb 1000 	ldrh.w	r1, [fp]
   18e22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   18e26:	f042 0202 	orr.w	r2, r2, #2
   18e2a:	606a      	str	r2, [r5, #4]
   18e2c:	1c4a      	adds	r2, r1, #1
   18e2e:	f8ab 2000 	strh.w	r2, [fp]
   18e32:	f7fd f861 	bl	15ef8 <bsd_os_application_irq_set>
   18e36:	f858 7c04 	ldr.w	r7, [r8, #-4]
   18e3a:	6839      	ldr	r1, [r7, #0]
   18e3c:	e7a4      	b.n	18d88 <bsd_os_application_irq_handler+0x24>
   18e3e:	bf00      	nop
   18e40:	20021da4 	.word	0x20021da4
   18e44:	20021dac 	.word	0x20021dac
   18e48:	20026e9c 	.word	0x20026e9c
   18e4c:	20021db4 	.word	0x20021db4

00018e50 <IPC_IRQHandler>:
   18e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e52:	f44f 6680 	mov.w	r6, #1024	; 0x400
   18e56:	4d9f      	ldr	r5, [pc, #636]	; (190d4 <IPC_IRQHandler+0x284>)
   18e58:	4c9f      	ldr	r4, [pc, #636]	; (190d8 <IPC_IRQHandler+0x288>)
   18e5a:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   18e5e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   18e62:	b095      	sub	sp, #84	; 0x54
   18e64:	0618      	lsls	r0, r3, #24
   18e66:	d50b      	bpl.n	18e80 <IPC_IRQHandler+0x30>
   18e68:	f7ff fdae 	bl	189c8 <ipc_trace_handle>
   18e6c:	f7ff ff1e 	bl	18cac <rpc_trace_coredump_in_progress>
   18e70:	2800      	cmp	r0, #0
   18e72:	d158      	bne.n	18f26 <IPC_IRQHandler+0xd6>
   18e74:	4b99      	ldr	r3, [pc, #612]	; (190dc <IPC_IRQHandler+0x28c>)
   18e76:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   18e7a:	681b      	ldr	r3, [r3, #0]
   18e7c:	9301      	str	r3, [sp, #4]
   18e7e:	9b01      	ldr	r3, [sp, #4]
   18e80:	4c95      	ldr	r4, [pc, #596]	; (190d8 <IPC_IRQHandler+0x288>)
   18e82:	f8d4 530c 	ldr.w	r5, [r4, #780]	; 0x30c
   18e86:	f015 0501 	ands.w	r5, r5, #1
   18e8a:	d11e      	bne.n	18eca <IPC_IRQHandler+0x7a>
   18e8c:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   18e90:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   18e94:	d14c      	bne.n	18f30 <IPC_IRQHandler+0xe0>
   18e96:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
   18e9a:	0751      	lsls	r1, r2, #29
   18e9c:	d50e      	bpl.n	18ebc <IPC_IRQHandler+0x6c>
   18e9e:	4a90      	ldr	r2, [pc, #576]	; (190e0 <IPC_IRQHandler+0x290>)
   18ea0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   18ea4:	6812      	ldr	r2, [r2, #0]
   18ea6:	4b8f      	ldr	r3, [pc, #572]	; (190e4 <IPC_IRQHandler+0x294>)
   18ea8:	9206      	str	r2, [sp, #24]
   18eaa:	9a06      	ldr	r2, [sp, #24]
   18eac:	681a      	ldr	r2, [r3, #0]
   18eae:	2a02      	cmp	r2, #2
   18eb0:	f000 80f2 	beq.w	19098 <IPC_IRQHandler+0x248>
   18eb4:	681a      	ldr	r2, [r3, #0]
   18eb6:	2a01      	cmp	r2, #1
   18eb8:	f000 80d3 	beq.w	19062 <IPC_IRQHandler+0x212>
   18ebc:	4b86      	ldr	r3, [pc, #536]	; (190d8 <IPC_IRQHandler+0x288>)
   18ebe:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   18ec2:	06d2      	lsls	r2, r2, #27
   18ec4:	d423      	bmi.n	18f0e <IPC_IRQHandler+0xbe>
   18ec6:	b015      	add	sp, #84	; 0x54
   18ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18eca:	2100      	movs	r1, #0
   18ecc:	f248 0202 	movw	r2, #32770	; 0x8002
   18ed0:	4b85      	ldr	r3, [pc, #532]	; (190e8 <IPC_IRQHandler+0x298>)
   18ed2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18ed6:	681b      	ldr	r3, [r3, #0]
   18ed8:	9302      	str	r3, [sp, #8]
   18eda:	9b02      	ldr	r3, [sp, #8]
   18edc:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
   18ee0:	4293      	cmp	r3, r2
   18ee2:	f000 80e2 	beq.w	190aa <IPC_IRQHandler+0x25a>
   18ee6:	f200 80a0 	bhi.w	1902a <IPC_IRQHandler+0x1da>
   18eea:	2b00      	cmp	r3, #0
   18eec:	f000 80d7 	beq.w	1909e <IPC_IRQHandler+0x24e>
   18ef0:	2b02      	cmp	r3, #2
   18ef2:	f240 80ab 	bls.w	1904c <IPC_IRQHandler+0x1fc>
   18ef6:	f248 0201 	movw	r2, #32769	; 0x8001
   18efa:	4293      	cmp	r3, r2
   18efc:	f040 80cf 	bne.w	1909e <IPC_IRQHandler+0x24e>
   18f00:	2003      	movs	r0, #3
   18f02:	2207      	movs	r2, #7
   18f04:	4977      	ldr	r1, [pc, #476]	; (190e4 <IPC_IRQHandler+0x294>)
   18f06:	4b79      	ldr	r3, [pc, #484]	; (190ec <IPC_IRQHandler+0x29c>)
   18f08:	6008      	str	r0, [r1, #0]
   18f0a:	601a      	str	r2, [r3, #0]
   18f0c:	e7db      	b.n	18ec6 <IPC_IRQHandler+0x76>
   18f0e:	2100      	movs	r1, #0
   18f10:	4a77      	ldr	r2, [pc, #476]	; (190f0 <IPC_IRQHandler+0x2a0>)
   18f12:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   18f16:	6813      	ldr	r3, [r2, #0]
   18f18:	9307      	str	r3, [sp, #28]
   18f1a:	9b07      	ldr	r3, [sp, #28]
   18f1c:	b015      	add	sp, #84	; 0x54
   18f1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18f22:	f7fc bfe9 	b.w	15ef8 <bsd_os_application_irq_set>
   18f26:	23e0      	movs	r3, #224	; 0xe0
   18f28:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   18f2c:	606e      	str	r6, [r5, #4]
   18f2e:	e7ca      	b.n	18ec6 <IPC_IRQHandler+0x76>
   18f30:	4b70      	ldr	r3, [pc, #448]	; (190f4 <IPC_IRQHandler+0x2a4>)
   18f32:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
   18f36:	681b      	ldr	r3, [r3, #0]
   18f38:	9305      	str	r3, [sp, #20]
   18f3a:	9b05      	ldr	r3, [sp, #20]
   18f3c:	f000 fc1e 	bl	1977c <rpc_transport_ipc_tx_suspend>
   18f40:	2010      	movs	r0, #16
   18f42:	2201      	movs	r2, #1
   18f44:	210a      	movs	r1, #10
   18f46:	4b6c      	ldr	r3, [pc, #432]	; (190f8 <IPC_IRQHandler+0x2a8>)
   18f48:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   18f4c:	681b      	ldr	r3, [r3, #0]
   18f4e:	9303      	str	r3, [sp, #12]
   18f50:	4b6a      	ldr	r3, [pc, #424]	; (190fc <IPC_IRQHandler+0x2ac>)
   18f52:	9e03      	ldr	r6, [sp, #12]
   18f54:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   18f58:	6818      	ldr	r0, [r3, #0]
   18f5a:	4b69      	ldr	r3, [pc, #420]	; (19100 <IPC_IRQHandler+0x2b0>)
   18f5c:	9004      	str	r0, [sp, #16]
   18f5e:	9804      	ldr	r0, [sp, #16]
   18f60:	9508      	str	r5, [sp, #32]
   18f62:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   18f66:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   18f6a:	9008      	str	r0, [sp, #32]
   18f6c:	9808      	ldr	r0, [sp, #32]
   18f6e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   18f72:	9109      	str	r1, [sp, #36]	; 0x24
   18f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18f76:	b12b      	cbz	r3, 18f84 <IPC_IRQHandler+0x134>
   18f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18f7a:	3b01      	subs	r3, #1
   18f7c:	9309      	str	r3, [sp, #36]	; 0x24
   18f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18f80:	2b00      	cmp	r3, #0
   18f82:	d1f9      	bne.n	18f78 <IPC_IRQHandler+0x128>
   18f84:	2200      	movs	r2, #0
   18f86:	f04f 0c01 	mov.w	ip, #1
   18f8a:	2704      	movs	r7, #4
   18f8c:	2610      	movs	r6, #16
   18f8e:	495c      	ldr	r1, [pc, #368]	; (19100 <IPC_IRQHandler+0x2b0>)
   18f90:	4b51      	ldr	r3, [pc, #324]	; (190d8 <IPC_IRQHandler+0x288>)
   18f92:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   18f96:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   18f9a:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   18f9e:	2540      	movs	r5, #64	; 0x40
   18fa0:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   18fa4:	6809      	ldr	r1, [r1, #0]
   18fa6:	2480      	movs	r4, #128	; 0x80
   18fa8:	910a      	str	r1, [sp, #40]	; 0x28
   18faa:	4956      	ldr	r1, [pc, #344]	; (19104 <IPC_IRQHandler+0x2b4>)
   18fac:	980a      	ldr	r0, [sp, #40]	; 0x28
   18fae:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   18fb2:	6809      	ldr	r1, [r1, #0]
   18fb4:	910b      	str	r1, [sp, #44]	; 0x2c
   18fb6:	4950      	ldr	r1, [pc, #320]	; (190f8 <IPC_IRQHandler+0x2a8>)
   18fb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18fba:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   18fbe:	6809      	ldr	r1, [r1, #0]
   18fc0:	2005      	movs	r0, #5
   18fc2:	910c      	str	r1, [sp, #48]	; 0x30
   18fc4:	4950      	ldr	r1, [pc, #320]	; (19108 <IPC_IRQHandler+0x2b8>)
   18fc6:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   18fca:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   18fce:	6809      	ldr	r1, [r1, #0]
   18fd0:	910d      	str	r1, [sp, #52]	; 0x34
   18fd2:	494e      	ldr	r1, [pc, #312]	; (1910c <IPC_IRQHandler+0x2bc>)
   18fd4:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
   18fd8:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   18fdc:	6809      	ldr	r1, [r1, #0]
   18fde:	910e      	str	r1, [sp, #56]	; 0x38
   18fe0:	4946      	ldr	r1, [pc, #280]	; (190fc <IPC_IRQHandler+0x2ac>)
   18fe2:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   18fe6:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   18fea:	f8d1 c000 	ldr.w	ip, [r1]
   18fee:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   18ff2:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   18ff6:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   18ffa:	680f      	ldr	r7, [r1, #0]
   18ffc:	9710      	str	r7, [sp, #64]	; 0x40
   18ffe:	9f10      	ldr	r7, [sp, #64]	; 0x40
   19000:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   19004:	680e      	ldr	r6, [r1, #0]
   19006:	9611      	str	r6, [sp, #68]	; 0x44
   19008:	9e11      	ldr	r6, [sp, #68]	; 0x44
   1900a:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   1900e:	680d      	ldr	r5, [r1, #0]
   19010:	9512      	str	r5, [sp, #72]	; 0x48
   19012:	9d12      	ldr	r5, [sp, #72]	; 0x48
   19014:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   19018:	680c      	ldr	r4, [r1, #0]
   1901a:	4b32      	ldr	r3, [pc, #200]	; (190e4 <IPC_IRQHandler+0x294>)
   1901c:	9413      	str	r4, [sp, #76]	; 0x4c
   1901e:	493c      	ldr	r1, [pc, #240]	; (19110 <IPC_IRQHandler+0x2c0>)
   19020:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   19022:	800a      	strh	r2, [r1, #0]
   19024:	6018      	str	r0, [r3, #0]
   19026:	b015      	add	sp, #84	; 0x54
   19028:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1902a:	4a3a      	ldr	r2, [pc, #232]	; (19114 <IPC_IRQHandler+0x2c4>)
   1902c:	4293      	cmp	r3, r2
   1902e:	d82a      	bhi.n	19086 <IPC_IRQHandler+0x236>
   19030:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   19034:	d82a      	bhi.n	1908c <IPC_IRQHandler+0x23c>
   19036:	f248 0203 	movw	r2, #32771	; 0x8003
   1903a:	4293      	cmp	r3, r2
   1903c:	d12f      	bne.n	1909e <IPC_IRQHandler+0x24e>
   1903e:	2003      	movs	r0, #3
   19040:	2204      	movs	r2, #4
   19042:	4928      	ldr	r1, [pc, #160]	; (190e4 <IPC_IRQHandler+0x294>)
   19044:	4b29      	ldr	r3, [pc, #164]	; (190ec <IPC_IRQHandler+0x29c>)
   19046:	6008      	str	r0, [r1, #0]
   19048:	601a      	str	r2, [r3, #0]
   1904a:	e73c      	b.n	18ec6 <IPC_IRQHandler+0x76>
   1904c:	2303      	movs	r3, #3
   1904e:	4618      	mov	r0, r3
   19050:	4924      	ldr	r1, [pc, #144]	; (190e4 <IPC_IRQHandler+0x294>)
   19052:	4a26      	ldr	r2, [pc, #152]	; (190ec <IPC_IRQHandler+0x29c>)
   19054:	600b      	str	r3, [r1, #0]
   19056:	6013      	str	r3, [r2, #0]
   19058:	b015      	add	sp, #84	; 0x54
   1905a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1905e:	f005 b835 	b.w	1e0cc <rpc_transport_ipc_fault_handler>
   19062:	4a2d      	ldr	r2, [pc, #180]	; (19118 <IPC_IRQHandler+0x2c8>)
   19064:	482d      	ldr	r0, [pc, #180]	; (1911c <IPC_IRQHandler+0x2cc>)
   19066:	6811      	ldr	r1, [r2, #0]
   19068:	688a      	ldr	r2, [r1, #8]
   1906a:	6002      	str	r2, [r0, #0]
   1906c:	6849      	ldr	r1, [r1, #4]
   1906e:	6041      	str	r1, [r0, #4]
   19070:	b312      	cbz	r2, 190b8 <IPC_IRQHandler+0x268>
   19072:	b309      	cbz	r1, 190b8 <IPC_IRQHandler+0x268>
   19074:	6812      	ldr	r2, [r2, #0]
   19076:	2a10      	cmp	r2, #16
   19078:	d824      	bhi.n	190c4 <IPC_IRQHandler+0x274>
   1907a:	680a      	ldr	r2, [r1, #0]
   1907c:	2a10      	cmp	r2, #16
   1907e:	d821      	bhi.n	190c4 <IPC_IRQHandler+0x274>
   19080:	2202      	movs	r2, #2
   19082:	601a      	str	r2, [r3, #0]
   19084:	e71a      	b.n	18ebc <IPC_IRQHandler+0x6c>
   19086:	4a26      	ldr	r2, [pc, #152]	; (19120 <IPC_IRQHandler+0x2d0>)
   19088:	4293      	cmp	r3, r2
   1908a:	d108      	bne.n	1909e <IPC_IRQHandler+0x24e>
   1908c:	2003      	movs	r0, #3
   1908e:	4915      	ldr	r1, [pc, #84]	; (190e4 <IPC_IRQHandler+0x294>)
   19090:	4a16      	ldr	r2, [pc, #88]	; (190ec <IPC_IRQHandler+0x29c>)
   19092:	6008      	str	r0, [r1, #0]
   19094:	6013      	str	r3, [r2, #0]
   19096:	e716      	b.n	18ec6 <IPC_IRQHandler+0x76>
   19098:	f7fc ff2e 	bl	15ef8 <bsd_os_application_irq_set>
   1909c:	e70e      	b.n	18ebc <IPC_IRQHandler+0x6c>
   1909e:	2303      	movs	r3, #3
   190a0:	4910      	ldr	r1, [pc, #64]	; (190e4 <IPC_IRQHandler+0x294>)
   190a2:	4a12      	ldr	r2, [pc, #72]	; (190ec <IPC_IRQHandler+0x29c>)
   190a4:	600b      	str	r3, [r1, #0]
   190a6:	6013      	str	r3, [r2, #0]
   190a8:	e70d      	b.n	18ec6 <IPC_IRQHandler+0x76>
   190aa:	2003      	movs	r0, #3
   190ac:	2206      	movs	r2, #6
   190ae:	490d      	ldr	r1, [pc, #52]	; (190e4 <IPC_IRQHandler+0x294>)
   190b0:	4b0e      	ldr	r3, [pc, #56]	; (190ec <IPC_IRQHandler+0x29c>)
   190b2:	6008      	str	r0, [r1, #0]
   190b4:	601a      	str	r2, [r3, #0]
   190b6:	e706      	b.n	18ec6 <IPC_IRQHandler+0x76>
   190b8:	2003      	movs	r0, #3
   190ba:	2110      	movs	r1, #16
   190bc:	4a0b      	ldr	r2, [pc, #44]	; (190ec <IPC_IRQHandler+0x29c>)
   190be:	6018      	str	r0, [r3, #0]
   190c0:	6011      	str	r1, [r2, #0]
   190c2:	e6fb      	b.n	18ebc <IPC_IRQHandler+0x6c>
   190c4:	2003      	movs	r0, #3
   190c6:	f24c 0106 	movw	r1, #49158	; 0xc006
   190ca:	4a08      	ldr	r2, [pc, #32]	; (190ec <IPC_IRQHandler+0x29c>)
   190cc:	6018      	str	r0, [r3, #0]
   190ce:	6011      	str	r1, [r2, #0]
   190d0:	e6f4      	b.n	18ebc <IPC_IRQHandler+0x6c>
   190d2:	bf00      	nop
   190d4:	e000e100 	.word	0xe000e100
   190d8:	4002a000 	.word	0x4002a000
   190dc:	4002a11c 	.word	0x4002a11c
   190e0:	4002a108 	.word	0x4002a108
   190e4:	20021db4 	.word	0x20021db4
   190e8:	4002a100 	.word	0x4002a100
   190ec:	20021da4 	.word	0x20021da4
   190f0:	4002a110 	.word	0x4002a110
   190f4:	4002a118 	.word	0x4002a118
   190f8:	4002a5a0 	.word	0x4002a5a0
   190fc:	4002a308 	.word	0x4002a308
   19100:	40005000 	.word	0x40005000
   19104:	4002a598 	.word	0x4002a598
   19108:	4002a5a8 	.word	0x4002a5a8
   1910c:	4002a5ac 	.word	0x4002a5ac
   19110:	20026e9c 	.word	0x20026e9c
   19114:	04400004 	.word	0x04400004
   19118:	20021db8 	.word	0x20021db8
   1911c:	20021dac 	.word	0x20021dac
   19120:	05500001 	.word	0x05500001

00019124 <rpc_transport_ipc_rx_init>:
   19124:	2800      	cmp	r0, #0
   19126:	f000 80f7 	beq.w	19318 <rpc_transport_ipc_rx_init+0x1f4>
   1912a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1912e:	6805      	ldr	r5, [r0, #0]
   19130:	b095      	sub	sp, #84	; 0x54
   19132:	2d00      	cmp	r5, #0
   19134:	f000 80e6 	beq.w	19304 <rpc_transport_ipc_rx_init+0x1e0>
   19138:	6883      	ldr	r3, [r0, #8]
   1913a:	2b00      	cmp	r3, #0
   1913c:	f000 80e2 	beq.w	19304 <rpc_transport_ipc_rx_init+0x1e0>
   19140:	6906      	ldr	r6, [r0, #16]
   19142:	2e00      	cmp	r6, #0
   19144:	f000 80de 	beq.w	19304 <rpc_transport_ipc_rx_init+0x1e0>
   19148:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1914a:	2c00      	cmp	r4, #0
   1914c:	f000 80da 	beq.w	19304 <rpc_transport_ipc_rx_init+0x1e0>
   19150:	6844      	ldr	r4, [r0, #4]
   19152:	2c1b      	cmp	r4, #27
   19154:	f240 80db 	bls.w	1930e <rpc_transport_ipc_rx_init+0x1ea>
   19158:	68c4      	ldr	r4, [r0, #12]
   1915a:	2c0b      	cmp	r4, #11
   1915c:	f240 80d7 	bls.w	1930e <rpc_transport_ipc_rx_init+0x1ea>
   19160:	f8d0 c014 	ldr.w	ip, [r0, #20]
   19164:	f1bc 0f17 	cmp.w	ip, #23
   19168:	f240 80d1 	bls.w	1930e <rpc_transport_ipc_rx_init+0x1ea>
   1916c:	2700      	movs	r7, #0
   1916e:	4604      	mov	r4, r0
   19170:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 19338 <rpc_transport_ipc_rx_init+0x214>
   19174:	6b80      	ldr	r0, [r0, #56]	; 0x38
   19176:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 1933c <rpc_transport_ipc_rx_init+0x218>
   1917a:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 19340 <rpc_transport_ipc_rx_init+0x21c>
   1917e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 19344 <rpc_transport_ipc_rx_init+0x220>
   19182:	e9cd 1200 	strd	r1, r2, [sp]
   19186:	f8ca 0000 	str.w	r0, [sl]
   1918a:	4662      	mov	r2, ip
   1918c:	4639      	mov	r1, r7
   1918e:	4630      	mov	r0, r6
   19190:	f8cb 3000 	str.w	r3, [fp]
   19194:	f8c8 7000 	str.w	r7, [r8]
   19198:	f8c9 7000 	str.w	r7, [r9]
   1919c:	f00d fc40 	bl	26a20 <memset>
   191a0:	69e3      	ldr	r3, [r4, #28]
   191a2:	4630      	mov	r0, r6
   191a4:	6033      	str	r3, [r6, #0]
   191a6:	69a3      	ldr	r3, [r4, #24]
   191a8:	6073      	str	r3, [r6, #4]
   191aa:	f7ff fb21 	bl	187f0 <ipc_trace_init>
   191ae:	2201      	movs	r2, #1
   191b0:	f04f 0c04 	mov.w	ip, #4
   191b4:	4b5a      	ldr	r3, [pc, #360]	; (19320 <rpc_transport_ipc_rx_init+0x1fc>)
   191b6:	495b      	ldr	r1, [pc, #364]	; (19324 <rpc_transport_ipc_rx_init+0x200>)
   191b8:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   191bc:	6809      	ldr	r1, [r1, #0]
   191be:	2080      	movs	r0, #128	; 0x80
   191c0:	9104      	str	r1, [sp, #16]
   191c2:	4959      	ldr	r1, [pc, #356]	; (19328 <rpc_transport_ipc_rx_init+0x204>)
   191c4:	f8dd e010 	ldr.w	lr, [sp, #16]
   191c8:	f8c3 7614 	str.w	r7, [r3, #1556]	; 0x614
   191cc:	6809      	ldr	r1, [r1, #0]
   191ce:	702f      	strb	r7, [r5, #0]
   191d0:	9103      	str	r1, [sp, #12]
   191d2:	706f      	strb	r7, [r5, #1]
   191d4:	70ef      	strb	r7, [r5, #3]
   191d6:	70aa      	strb	r2, [r5, #2]
   191d8:	9903      	ldr	r1, [sp, #12]
   191da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   191dc:	f8db e000 	ldr.w	lr, [fp]
   191e0:	6069      	str	r1, [r5, #4]
   191e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   191e4:	9c01      	ldr	r4, [sp, #4]
   191e6:	60a9      	str	r1, [r5, #8]
   191e8:	60ec      	str	r4, [r5, #12]
   191ea:	9c00      	ldr	r4, [sp, #0]
   191ec:	494f      	ldr	r1, [pc, #316]	; (1932c <rpc_transport_ipc_rx_init+0x208>)
   191ee:	61ae      	str	r6, [r5, #24]
   191f0:	f8c5 e014 	str.w	lr, [r5, #20]
   191f4:	612c      	str	r4, [r5, #16]
   191f6:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   191fa:	680c      	ldr	r4, [r1, #0]
   191fc:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   19200:	9405      	str	r4, [sp, #20]
   19202:	9c05      	ldr	r4, [sp, #20]
   19204:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   19208:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   1920c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   19210:	9406      	str	r4, [sp, #24]
   19212:	9c06      	ldr	r4, [sp, #24]
   19214:	2410      	movs	r4, #16
   19216:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1921a:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1921e:	4d44      	ldr	r5, [pc, #272]	; (19330 <rpc_transport_ipc_rx_init+0x20c>)
   19220:	9407      	str	r4, [sp, #28]
   19222:	9c07      	ldr	r4, [sp, #28]
   19224:	2440      	movs	r4, #64	; 0x40
   19226:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1922a:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1922e:	9408      	str	r4, [sp, #32]
   19230:	9c08      	ldr	r4, [sp, #32]
   19232:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   19236:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   1923a:	9009      	str	r0, [sp, #36]	; 0x24
   1923c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1923e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
   19242:	6808      	ldr	r0, [r1, #0]
   19244:	900a      	str	r0, [sp, #40]	; 0x28
   19246:	980a      	ldr	r0, [sp, #40]	; 0x28
   19248:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
   1924c:	6888      	ldr	r0, [r1, #8]
   1924e:	900b      	str	r0, [sp, #44]	; 0x2c
   19250:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19252:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
   19256:	6908      	ldr	r0, [r1, #16]
   19258:	900c      	str	r0, [sp, #48]	; 0x30
   1925a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1925c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
   19260:	6988      	ldr	r0, [r1, #24]
   19262:	900d      	str	r0, [sp, #52]	; 0x34
   19264:	980d      	ldr	r0, [sp, #52]	; 0x34
   19266:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
   1926a:	69c8      	ldr	r0, [r1, #28]
   1926c:	f501 7101 	add.w	r1, r1, #516	; 0x204
   19270:	900e      	str	r0, [sp, #56]	; 0x38
   19272:	980e      	ldr	r0, [sp, #56]	; 0x38
   19274:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   19278:	4310      	orrs	r0, r2
   1927a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   1927e:	680c      	ldr	r4, [r1, #0]
   19280:	482c      	ldr	r0, [pc, #176]	; (19334 <rpc_transport_ipc_rx_init+0x210>)
   19282:	940f      	str	r4, [sp, #60]	; 0x3c
   19284:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   19286:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1928a:	ea44 040c 	orr.w	r4, r4, ip
   1928e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   19292:	680c      	ldr	r4, [r1, #0]
   19294:	9410      	str	r4, [sp, #64]	; 0x40
   19296:	9c10      	ldr	r4, [sp, #64]	; 0x40
   19298:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1929c:	f044 0410 	orr.w	r4, r4, #16
   192a0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   192a4:	680c      	ldr	r4, [r1, #0]
   192a6:	9411      	str	r4, [sp, #68]	; 0x44
   192a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
   192aa:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   192ae:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   192b2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   192b6:	680c      	ldr	r4, [r1, #0]
   192b8:	9412      	str	r4, [sp, #72]	; 0x48
   192ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
   192bc:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   192c0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   192c4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   192c8:	f8da 3000 	ldr.w	r3, [sl]
   192cc:	6809      	ldr	r1, [r1, #0]
   192ce:	015b      	lsls	r3, r3, #5
   192d0:	9113      	str	r1, [sp, #76]	; 0x4c
   192d2:	b2db      	uxtb	r3, r3
   192d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   192d6:	f8c8 2000 	str.w	r2, [r8]
   192da:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   192de:	f8c0 6184 	str.w	r6, [r0, #388]	; 0x184
   192e2:	6046      	str	r6, [r0, #4]
   192e4:	9702      	str	r7, [sp, #8]
   192e6:	f8c5 7610 	str.w	r7, [r5, #1552]	; 0x610
   192ea:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   192ee:	9302      	str	r3, [sp, #8]
   192f0:	9b02      	ldr	r3, [sp, #8]
   192f2:	f8d8 3000 	ldr.w	r3, [r8]
   192f6:	2b01      	cmp	r3, #1
   192f8:	d0fb      	beq.n	192f2 <rpc_transport_ipc_rx_init+0x1ce>
   192fa:	f8d9 0000 	ldr.w	r0, [r9]
   192fe:	b015      	add	sp, #84	; 0x54
   19300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19304:	f24c 000e 	movw	r0, #49166	; 0xc00e
   19308:	b015      	add	sp, #84	; 0x54
   1930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1930e:	f24c 0009 	movw	r0, #49161	; 0xc009
   19312:	b015      	add	sp, #84	; 0x54
   19314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19318:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1931c:	4770      	bx	lr
   1931e:	bf00      	nop
   19320:	4002a000 	.word	0x4002a000
   19324:	4002a610 	.word	0x4002a610
   19328:	4002a614 	.word	0x4002a614
   1932c:	4002a590 	.word	0x4002a590
   19330:	40005000 	.word	0x40005000
   19334:	e000e100 	.word	0xe000e100
   19338:	20021da8 	.word	0x20021da8
   1933c:	20021db4 	.word	0x20021db4
   19340:	20021db8 	.word	0x20021db8
   19344:	20021da4 	.word	0x20021da4

00019348 <rpc_transport_ipc_msg_free>:
   19348:	b470      	push	{r4, r5, r6}
   1934a:	4e17      	ldr	r6, [pc, #92]	; (193a8 <rpc_transport_ipc_msg_free+0x60>)
   1934c:	6831      	ldr	r1, [r6, #0]
   1934e:	680d      	ldr	r5, [r1, #0]
   19350:	b1ad      	cbz	r5, 1937e <rpc_transport_ipc_msg_free+0x36>
   19352:	688b      	ldr	r3, [r1, #8]
   19354:	4283      	cmp	r3, r0
   19356:	d024      	beq.n	193a2 <rpc_transport_ipc_msg_free+0x5a>
   19358:	2300      	movs	r3, #0
   1935a:	3301      	adds	r3, #1
   1935c:	00da      	lsls	r2, r3, #3
   1935e:	429d      	cmp	r5, r3
   19360:	eb01 0402 	add.w	r4, r1, r2
   19364:	d00b      	beq.n	1937e <rpc_transport_ipc_msg_free+0x36>
   19366:	68a4      	ldr	r4, [r4, #8]
   19368:	42a0      	cmp	r0, r4
   1936a:	d1f6      	bne.n	1935a <rpc_transport_ipc_msg_free+0x12>
   1936c:	3204      	adds	r2, #4
   1936e:	588b      	ldr	r3, [r1, r2]
   19370:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19374:	f043 0303 	orr.w	r3, r3, #3
   19378:	508b      	str	r3, [r1, r2]
   1937a:	bc70      	pop	{r4, r5, r6}
   1937c:	4770      	bx	lr
   1937e:	6871      	ldr	r1, [r6, #4]
   19380:	680d      	ldr	r5, [r1, #0]
   19382:	2d00      	cmp	r5, #0
   19384:	d0f9      	beq.n	1937a <rpc_transport_ipc_msg_free+0x32>
   19386:	688b      	ldr	r3, [r1, #8]
   19388:	4283      	cmp	r3, r0
   1938a:	d00a      	beq.n	193a2 <rpc_transport_ipc_msg_free+0x5a>
   1938c:	2300      	movs	r3, #0
   1938e:	3301      	adds	r3, #1
   19390:	00da      	lsls	r2, r3, #3
   19392:	429d      	cmp	r5, r3
   19394:	eb01 0402 	add.w	r4, r1, r2
   19398:	d0ef      	beq.n	1937a <rpc_transport_ipc_msg_free+0x32>
   1939a:	68a4      	ldr	r4, [r4, #8]
   1939c:	42a0      	cmp	r0, r4
   1939e:	d1f6      	bne.n	1938e <rpc_transport_ipc_msg_free+0x46>
   193a0:	e7e4      	b.n	1936c <rpc_transport_ipc_msg_free+0x24>
   193a2:	2204      	movs	r2, #4
   193a4:	e7e3      	b.n	1936e <rpc_transport_ipc_msg_free+0x26>
   193a6:	bf00      	nop
   193a8:	20021dac 	.word	0x20021dac

000193ac <rpc_transport_ipc_shutdown_done>:
   193ac:	4b03      	ldr	r3, [pc, #12]	; (193bc <rpc_transport_ipc_shutdown_done+0x10>)
   193ae:	6818      	ldr	r0, [r3, #0]
   193b0:	f1a0 0005 	sub.w	r0, r0, #5
   193b4:	fab0 f080 	clz	r0, r0
   193b8:	0940      	lsrs	r0, r0, #5
   193ba:	4770      	bx	lr
   193bc:	20021db4 	.word	0x20021db4

000193c0 <rpc_transport_ipc_tx_init>:
   193c0:	2800      	cmp	r0, #0
   193c2:	f000 80b8 	beq.w	19536 <rpc_transport_ipc_tx_init+0x176>
   193c6:	2900      	cmp	r1, #0
   193c8:	f000 80b5 	beq.w	19536 <rpc_transport_ipc_tx_init+0x176>
   193cc:	2a00      	cmp	r2, #0
   193ce:	f000 80b2 	beq.w	19536 <rpc_transport_ipc_tx_init+0x176>
   193d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193d6:	6a04      	ldr	r4, [r0, #32]
   193d8:	b085      	sub	sp, #20
   193da:	2c00      	cmp	r4, #0
   193dc:	f000 80a6 	beq.w	1952c <rpc_transport_ipc_tx_init+0x16c>
   193e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   193e2:	2800      	cmp	r0, #0
   193e4:	f000 80a2 	beq.w	1952c <rpc_transport_ipc_tx_init+0x16c>
   193e8:	f642 4587 	movw	r5, #11399	; 0x2c87
   193ec:	f04f 0a00 	mov.w	sl, #0
   193f0:	4e55      	ldr	r6, [pc, #340]	; (19548 <rpc_transport_ipc_tx_init+0x188>)
   193f2:	42a8      	cmp	r0, r5
   193f4:	f886 a000 	strb.w	sl, [r6]
   193f8:	f240 80a0 	bls.w	1953c <rpc_transport_ipc_tx_init+0x17c>
   193fc:	2708      	movs	r7, #8
   193fe:	f8df 9180 	ldr.w	r9, [pc, #384]	; 19580 <rpc_transport_ipc_tx_init+0x1c0>
   19402:	4620      	mov	r0, r4
   19404:	4616      	mov	r6, r2
   19406:	460d      	mov	r5, r1
   19408:	2244      	movs	r2, #68	; 0x44
   1940a:	4651      	mov	r1, sl
   1940c:	f8c9 4000 	str.w	r4, [r9]
   19410:	f00d fb06 	bl	26a20 <memset>
   19414:	f8d9 2000 	ldr.w	r2, [r9]
   19418:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1941c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 19584 <rpc_transport_ipc_tx_init+0x1c4>
   19420:	f882 a001 	strb.w	sl, [r2, #1]
   19424:	f882 a002 	strb.w	sl, [r2, #2]
   19428:	f882 a003 	strb.w	sl, [r2, #3]
   1942c:	7017      	strb	r7, [r2, #0]
   1942e:	4618      	mov	r0, r3
   19430:	2244      	movs	r2, #68	; 0x44
   19432:	4651      	mov	r1, sl
   19434:	f8c8 3000 	str.w	r3, [r8]
   19438:	f00d faf2 	bl	26a20 <memset>
   1943c:	f8d8 2000 	ldr.w	r2, [r8]
   19440:	f104 0388 	add.w	r3, r4, #136	; 0x88
   19444:	f8df b140 	ldr.w	fp, [pc, #320]	; 19588 <rpc_transport_ipc_tx_init+0x1c8>
   19448:	7017      	strb	r7, [r2, #0]
   1944a:	f882 a001 	strb.w	sl, [r2, #1]
   1944e:	f882 a002 	strb.w	sl, [r2, #2]
   19452:	f882 a003 	strb.w	sl, [r2, #3]
   19456:	4618      	mov	r0, r3
   19458:	f44f 7200 	mov.w	r2, #512	; 0x200
   1945c:	4651      	mov	r1, sl
   1945e:	f8cb 3000 	str.w	r3, [fp]
   19462:	f00d fadd 	bl	26a20 <memset>
   19466:	4b39      	ldr	r3, [pc, #228]	; (1954c <rpc_transport_ipc_tx_init+0x18c>)
   19468:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   1946c:	f8c3 c000 	str.w	ip, [r3]
   19470:	4651      	mov	r1, sl
   19472:	4660      	mov	r0, ip
   19474:	f44f 7200 	mov.w	r2, #512	; 0x200
   19478:	f00d fad2 	bl	26a20 <memset>
   1947c:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   19480:	2106      	movs	r1, #6
   19482:	f04f 0e01 	mov.w	lr, #1
   19486:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   1948a:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   1948e:	4b30      	ldr	r3, [pc, #192]	; (19550 <rpc_transport_ipc_tx_init+0x190>)
   19490:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   19494:	605c      	str	r4, [r3, #4]
   19496:	4c2f      	ldr	r4, [pc, #188]	; (19554 <rpc_transport_ipc_tx_init+0x194>)
   19498:	f8c3 c008 	str.w	ip, [r3, #8]
   1949c:	8199      	strh	r1, [r3, #12]
   1949e:	f8a3 e000 	strh.w	lr, [r3]
   194a2:	4619      	mov	r1, r3
   194a4:	611c      	str	r4, [r3, #16]
   194a6:	4b2c      	ldr	r3, [pc, #176]	; (19558 <rpc_transport_ipc_tx_init+0x198>)
   194a8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 1958c <rpc_transport_ipc_tx_init+0x1cc>
   194ac:	6120      	str	r0, [r4, #16]
   194ae:	482b      	ldr	r0, [pc, #172]	; (1955c <rpc_transport_ipc_tx_init+0x19c>)
   194b0:	6063      	str	r3, [r4, #4]
   194b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   194b6:	60a0      	str	r0, [r4, #8]
   194b8:	f8c4 c000 	str.w	ip, [r4]
   194bc:	4828      	ldr	r0, [pc, #160]	; (19560 <rpc_transport_ipc_tx_init+0x1a0>)
   194be:	60e3      	str	r3, [r4, #12]
   194c0:	6162      	str	r2, [r4, #20]
   194c2:	f005 ff5d 	bl	1f380 <nrf_mem_register>
   194c6:	2800      	cmp	r0, #0
   194c8:	d132      	bne.n	19530 <rpc_transport_ipc_tx_init+0x170>
   194ca:	f04f 0c02 	mov.w	ip, #2
   194ce:	2420      	movs	r4, #32
   194d0:	f8d9 1000 	ldr.w	r1, [r9]
   194d4:	f8db 2000 	ldr.w	r2, [fp]
   194d8:	6029      	str	r1, [r5, #0]
   194da:	4b1c      	ldr	r3, [pc, #112]	; (1954c <rpc_transport_ipc_tx_init+0x18c>)
   194dc:	f8d8 1000 	ldr.w	r1, [r8]
   194e0:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 19590 <rpc_transport_ipc_tx_init+0x1d0>
   194e4:	4d1f      	ldr	r5, [pc, #124]	; (19564 <rpc_transport_ipc_tx_init+0x1a4>)
   194e6:	6031      	str	r1, [r6, #0]
   194e8:	f8ce 2000 	str.w	r2, [lr]
   194ec:	681b      	ldr	r3, [r3, #0]
   194ee:	491e      	ldr	r1, [pc, #120]	; (19568 <rpc_transport_ipc_tx_init+0x1a8>)
   194f0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   194f4:	602a      	str	r2, [r5, #0]
   194f6:	4e1d      	ldr	r6, [pc, #116]	; (1956c <rpc_transport_ipc_tx_init+0x1ac>)
   194f8:	4a1d      	ldr	r2, [pc, #116]	; (19570 <rpc_transport_ipc_tx_init+0x1b0>)
   194fa:	4d1e      	ldr	r5, [pc, #120]	; (19574 <rpc_transport_ipc_tx_init+0x1b4>)
   194fc:	600b      	str	r3, [r1, #0]
   194fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
   19502:	491d      	ldr	r1, [pc, #116]	; (19578 <rpc_transport_ipc_tx_init+0x1b8>)
   19504:	6033      	str	r3, [r6, #0]
   19506:	8028      	strh	r0, [r5, #0]
   19508:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1950c:	6809      	ldr	r1, [r1, #0]
   1950e:	4b1b      	ldr	r3, [pc, #108]	; (1957c <rpc_transport_ipc_tx_init+0x1bc>)
   19510:	9103      	str	r1, [sp, #12]
   19512:	9903      	ldr	r1, [sp, #12]
   19514:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   19518:	6819      	ldr	r1, [r3, #0]
   1951a:	443b      	add	r3, r7
   1951c:	9102      	str	r1, [sp, #8]
   1951e:	9902      	ldr	r1, [sp, #8]
   19520:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   19524:	681b      	ldr	r3, [r3, #0]
   19526:	9301      	str	r3, [sp, #4]
   19528:	9b01      	ldr	r3, [sp, #4]
   1952a:	e001      	b.n	19530 <rpc_transport_ipc_tx_init+0x170>
   1952c:	f24c 0007 	movw	r0, #49159	; 0xc007
   19530:	b005      	add	sp, #20
   19532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19536:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1953a:	4770      	bx	lr
   1953c:	f24c 0004 	movw	r0, #49156	; 0xc004
   19540:	b005      	add	sp, #20
   19542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19546:	bf00      	nop
   19548:	2002a08b 	.word	0x2002a08b
   1954c:	20021de4 	.word	0x20021de4
   19550:	20021dd0 	.word	0x20021dd0
   19554:	20021df4 	.word	0x20021df4
   19558:	00040080 	.word	0x00040080
   1955c:	00040100 	.word	0x00040100
   19560:	20021dbc 	.word	0x20021dbc
   19564:	20021dc8 	.word	0x20021dc8
   19568:	20021dc4 	.word	0x20021dc4
   1956c:	20021dc0 	.word	0x20021dc0
   19570:	4002a000 	.word	0x4002a000
   19574:	20026e9e 	.word	0x20026e9e
   19578:	4002a514 	.word	0x4002a514
   1957c:	4002a51c 	.word	0x4002a51c
   19580:	20021df0 	.word	0x20021df0
   19584:	20021de8 	.word	0x20021de8
   19588:	20021dec 	.word	0x20021dec
   1958c:	00080040 	.word	0x00080040
   19590:	20021dcc 	.word	0x20021dcc

00019594 <rpc_transport_ipc_send>:
   19594:	2800      	cmp	r0, #0
   19596:	d061      	beq.n	1965c <rpc_transport_ipc_send+0xc8>
   19598:	b4f0      	push	{r4, r5, r6, r7}
   1959a:	4b34      	ldr	r3, [pc, #208]	; (1966c <rpc_transport_ipc_send+0xd8>)
   1959c:	b082      	sub	sp, #8
   1959e:	681a      	ldr	r2, [r3, #0]
   195a0:	4b33      	ldr	r3, [pc, #204]	; (19670 <rpc_transport_ipc_send+0xdc>)
   195a2:	4282      	cmp	r2, r0
   195a4:	d81e      	bhi.n	195e4 <rpc_transport_ipc_send+0x50>
   195a6:	681b      	ldr	r3, [r3, #0]
   195a8:	4932      	ldr	r1, [pc, #200]	; (19674 <rpc_transport_ipc_send+0xe0>)
   195aa:	4283      	cmp	r3, r0
   195ac:	6809      	ldr	r1, [r1, #0]
   195ae:	d803      	bhi.n	195b8 <rpc_transport_ipc_send+0x24>
   195b0:	4c31      	ldr	r4, [pc, #196]	; (19678 <rpc_transport_ipc_send+0xe4>)
   195b2:	6824      	ldr	r4, [r4, #0]
   195b4:	4284      	cmp	r4, r0
   195b6:	d849      	bhi.n	1964c <rpc_transport_ipc_send+0xb8>
   195b8:	4281      	cmp	r1, r0
   195ba:	d90e      	bls.n	195da <rpc_transport_ipc_send+0x46>
   195bc:	4b2f      	ldr	r3, [pc, #188]	; (1967c <rpc_transport_ipc_send+0xe8>)
   195be:	781b      	ldrb	r3, [r3, #0]
   195c0:	2b00      	cmp	r3, #0
   195c2:	d14e      	bne.n	19662 <rpc_transport_ipc_send+0xce>
   195c4:	1a83      	subs	r3, r0, r2
   195c6:	492e      	ldr	r1, [pc, #184]	; (19680 <rpc_transport_ipc_send+0xec>)
   195c8:	099f      	lsrs	r7, r3, #6
   195ca:	069b      	lsls	r3, r3, #26
   195cc:	680a      	ldr	r2, [r1, #0]
   195ce:	4d2d      	ldr	r5, [pc, #180]	; (19684 <rpc_transport_ipc_send+0xf0>)
   195d0:	f04f 0403 	mov.w	r4, #3
   195d4:	f04f 0602 	mov.w	r6, #2
   195d8:	d014      	beq.n	19604 <rpc_transport_ipc_send+0x70>
   195da:	f24c 0010 	movw	r0, #49168	; 0xc010
   195de:	b002      	add	sp, #8
   195e0:	bcf0      	pop	{r4, r5, r6, r7}
   195e2:	4770      	bx	lr
   195e4:	681b      	ldr	r3, [r3, #0]
   195e6:	4298      	cmp	r0, r3
   195e8:	d3f7      	bcc.n	195da <rpc_transport_ipc_send+0x46>
   195ea:	4a23      	ldr	r2, [pc, #140]	; (19678 <rpc_transport_ipc_send+0xe4>)
   195ec:	6812      	ldr	r2, [r2, #0]
   195ee:	4290      	cmp	r0, r2
   195f0:	d2f3      	bcs.n	195da <rpc_transport_ipc_send+0x46>
   195f2:	2401      	movs	r4, #1
   195f4:	1ac3      	subs	r3, r0, r3
   195f6:	4a24      	ldr	r2, [pc, #144]	; (19688 <rpc_transport_ipc_send+0xf4>)
   195f8:	099f      	lsrs	r7, r3, #6
   195fa:	069b      	lsls	r3, r3, #26
   195fc:	4626      	mov	r6, r4
   195fe:	6812      	ldr	r2, [r2, #0]
   19600:	4d22      	ldr	r5, [pc, #136]	; (1968c <rpc_transport_ipc_send+0xf8>)
   19602:	d1ea      	bne.n	195da <rpc_transport_ipc_send+0x46>
   19604:	6841      	ldr	r1, [r0, #4]
   19606:	b2c9      	uxtb	r1, r1
   19608:	428e      	cmp	r6, r1
   1960a:	d122      	bne.n	19652 <rpc_transport_ipc_send+0xbe>
   1960c:	2020      	movs	r0, #32
   1960e:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   19612:	491f      	ldr	r1, [pc, #124]	; (19690 <rpc_transport_ipc_send+0xfc>)
   19614:	685a      	ldr	r2, [r3, #4]
   19616:	880e      	ldrh	r6, [r1, #0]
   19618:	b292      	uxth	r2, r2
   1961a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   1961e:	605a      	str	r2, [r3, #4]
   19620:	685a      	ldr	r2, [r3, #4]
   19622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   19626:	f042 0201 	orr.w	r2, r2, #1
   1962a:	605a      	str	r2, [r3, #4]
   1962c:	bf00      	nop
   1962e:	3801      	subs	r0, #1
   19630:	d1fc      	bne.n	1962c <rpc_transport_ipc_send+0x98>
   19632:	2201      	movs	r2, #1
   19634:	4b17      	ldr	r3, [pc, #92]	; (19694 <rpc_transport_ipc_send+0x100>)
   19636:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1963a:	682a      	ldr	r2, [r5, #0]
   1963c:	880b      	ldrh	r3, [r1, #0]
   1963e:	9201      	str	r2, [sp, #4]
   19640:	9a01      	ldr	r2, [sp, #4]
   19642:	3301      	adds	r3, #1
   19644:	800b      	strh	r3, [r1, #0]
   19646:	b002      	add	sp, #8
   19648:	bcf0      	pop	{r4, r5, r6, r7}
   1964a:	4770      	bx	lr
   1964c:	4281      	cmp	r1, r0
   1964e:	d9d0      	bls.n	195f2 <rpc_transport_ipc_send+0x5e>
   19650:	e7b4      	b.n	195bc <rpc_transport_ipc_send+0x28>
   19652:	f24c 0007 	movw	r0, #49159	; 0xc007
   19656:	b002      	add	sp, #8
   19658:	bcf0      	pop	{r4, r5, r6, r7}
   1965a:	4770      	bx	lr
   1965c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   19660:	4770      	bx	lr
   19662:	f24c 000f 	movw	r0, #49167	; 0xc00f
   19666:	b002      	add	sp, #8
   19668:	bcf0      	pop	{r4, r5, r6, r7}
   1966a:	4770      	bx	lr
   1966c:	20021dcc 	.word	0x20021dcc
   19670:	20021dc4 	.word	0x20021dc4
   19674:	20021dc8 	.word	0x20021dc8
   19678:	20021dc0 	.word	0x20021dc0
   1967c:	2002a08b 	.word	0x2002a08b
   19680:	20021df0 	.word	0x20021df0
   19684:	4002a00c 	.word	0x4002a00c
   19688:	20021de8 	.word	0x20021de8
   1968c:	4002a004 	.word	0x4002a004
   19690:	20026e9e 	.word	0x20026e9e
   19694:	4002a000 	.word	0x4002a000

00019698 <rpc_transport_ipc_tx_rpc_data_alloc>:
   19698:	4b18      	ldr	r3, [pc, #96]	; (196fc <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1969a:	781b      	ldrb	r3, [r3, #0]
   1969c:	bb63      	cbnz	r3, 196f8 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1969e:	b4f0      	push	{r4, r5, r6, r7}
   196a0:	4a17      	ldr	r2, [pc, #92]	; (19700 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   196a2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   196a6:	6814      	ldr	r4, [r2, #0]
   196a8:	4b16      	ldr	r3, [pc, #88]	; (19704 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   196aa:	6825      	ldr	r5, [r4, #0]
   196ac:	681e      	ldr	r6, [r3, #0]
   196ae:	b1a5      	cbz	r5, 196da <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   196b0:	4607      	mov	r7, r0
   196b2:	00c1      	lsls	r1, r0, #3
   196b4:	1863      	adds	r3, r4, r1
   196b6:	685a      	ldr	r2, [r3, #4]
   196b8:	b2d2      	uxtb	r2, r2
   196ba:	2a03      	cmp	r2, #3
   196bc:	d104      	bne.n	196c8 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   196be:	609f      	str	r7, [r3, #8]
   196c0:	685a      	ldr	r2, [r3, #4]
   196c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   196c6:	605a      	str	r2, [r3, #4]
   196c8:	685a      	ldr	r2, [r3, #4]
   196ca:	f012 0fff 	tst.w	r2, #255	; 0xff
   196ce:	d101      	bne.n	196d4 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   196d0:	689b      	ldr	r3, [r3, #8]
   196d2:	b12b      	cbz	r3, 196e0 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   196d4:	3001      	adds	r0, #1
   196d6:	42a8      	cmp	r0, r5
   196d8:	d1eb      	bne.n	196b2 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   196da:	2000      	movs	r0, #0
   196dc:	bcf0      	pop	{r4, r5, r6, r7}
   196de:	4770      	bx	lr
   196e0:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   196e4:	4421      	add	r1, r4
   196e6:	6088      	str	r0, [r1, #8]
   196e8:	6843      	ldr	r3, [r0, #4]
   196ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   196ee:	f043 0302 	orr.w	r3, r3, #2
   196f2:	6043      	str	r3, [r0, #4]
   196f4:	bcf0      	pop	{r4, r5, r6, r7}
   196f6:	4770      	bx	lr
   196f8:	2000      	movs	r0, #0
   196fa:	4770      	bx	lr
   196fc:	2002a08b 	.word	0x2002a08b
   19700:	20021df0 	.word	0x20021df0
   19704:	20021dec 	.word	0x20021dec

00019708 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   19708:	b4f0      	push	{r4, r5, r6, r7}
   1970a:	4a15      	ldr	r2, [pc, #84]	; (19760 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   1970c:	4b15      	ldr	r3, [pc, #84]	; (19764 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   1970e:	6814      	ldr	r4, [r2, #0]
   19710:	681e      	ldr	r6, [r3, #0]
   19712:	6825      	ldr	r5, [r4, #0]
   19714:	b1ad      	cbz	r5, 19742 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   19716:	2000      	movs	r0, #0
   19718:	4607      	mov	r7, r0
   1971a:	00c1      	lsls	r1, r0, #3
   1971c:	1863      	adds	r3, r4, r1
   1971e:	685a      	ldr	r2, [r3, #4]
   19720:	b2d2      	uxtb	r2, r2
   19722:	2a03      	cmp	r2, #3
   19724:	d104      	bne.n	19730 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   19726:	609f      	str	r7, [r3, #8]
   19728:	685a      	ldr	r2, [r3, #4]
   1972a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1972e:	605a      	str	r2, [r3, #4]
   19730:	685a      	ldr	r2, [r3, #4]
   19732:	f012 0fff 	tst.w	r2, #255	; 0xff
   19736:	d101      	bne.n	1973c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   19738:	689b      	ldr	r3, [r3, #8]
   1973a:	b12b      	cbz	r3, 19748 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   1973c:	3001      	adds	r0, #1
   1973e:	4285      	cmp	r5, r0
   19740:	d1eb      	bne.n	1971a <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   19742:	2000      	movs	r0, #0
   19744:	bcf0      	pop	{r4, r5, r6, r7}
   19746:	4770      	bx	lr
   19748:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1974c:	4421      	add	r1, r4
   1974e:	6088      	str	r0, [r1, #8]
   19750:	6843      	ldr	r3, [r0, #4]
   19752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19756:	f043 0301 	orr.w	r3, r3, #1
   1975a:	6043      	str	r3, [r0, #4]
   1975c:	bcf0      	pop	{r4, r5, r6, r7}
   1975e:	4770      	bx	lr
   19760:	20021de8 	.word	0x20021de8
   19764:	20021de4 	.word	0x20021de4

00019768 <rpc_transport_ipc_tx_data_alloc>:
   19768:	4b03      	ldr	r3, [pc, #12]	; (19778 <rpc_transport_ipc_tx_data_alloc+0x10>)
   1976a:	781b      	ldrb	r3, [r3, #0]
   1976c:	b90b      	cbnz	r3, 19772 <rpc_transport_ipc_tx_data_alloc+0xa>
   1976e:	f005 bf37 	b.w	1f5e0 <nrf_shared_malloc>
   19772:	2000      	movs	r0, #0
   19774:	4770      	bx	lr
   19776:	bf00      	nop
   19778:	2002a08b 	.word	0x2002a08b

0001977c <rpc_transport_ipc_tx_suspend>:
   1977c:	2201      	movs	r2, #1
   1977e:	4b01      	ldr	r3, [pc, #4]	; (19784 <rpc_transport_ipc_tx_suspend+0x8>)
   19780:	701a      	strb	r2, [r3, #0]
   19782:	4770      	bx	lr
   19784:	2002a08b 	.word	0x2002a08b

00019788 <rpc_transport_ipc_request_shutdown>:
   19788:	b4f0      	push	{r4, r5, r6, r7}
   1978a:	4a16      	ldr	r2, [pc, #88]	; (197e4 <rpc_transport_ipc_request_shutdown+0x5c>)
   1978c:	4b16      	ldr	r3, [pc, #88]	; (197e8 <rpc_transport_ipc_request_shutdown+0x60>)
   1978e:	6814      	ldr	r4, [r2, #0]
   19790:	681e      	ldr	r6, [r3, #0]
   19792:	6825      	ldr	r5, [r4, #0]
   19794:	b1ad      	cbz	r5, 197c2 <rpc_transport_ipc_request_shutdown+0x3a>
   19796:	2200      	movs	r2, #0
   19798:	4617      	mov	r7, r2
   1979a:	00d0      	lsls	r0, r2, #3
   1979c:	1823      	adds	r3, r4, r0
   1979e:	6859      	ldr	r1, [r3, #4]
   197a0:	b2c9      	uxtb	r1, r1
   197a2:	2903      	cmp	r1, #3
   197a4:	d104      	bne.n	197b0 <rpc_transport_ipc_request_shutdown+0x28>
   197a6:	609f      	str	r7, [r3, #8]
   197a8:	6859      	ldr	r1, [r3, #4]
   197aa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   197ae:	6059      	str	r1, [r3, #4]
   197b0:	6859      	ldr	r1, [r3, #4]
   197b2:	f011 0fff 	tst.w	r1, #255	; 0xff
   197b6:	d101      	bne.n	197bc <rpc_transport_ipc_request_shutdown+0x34>
   197b8:	689b      	ldr	r3, [r3, #8]
   197ba:	b123      	cbz	r3, 197c6 <rpc_transport_ipc_request_shutdown+0x3e>
   197bc:	3201      	adds	r2, #1
   197be:	42aa      	cmp	r2, r5
   197c0:	d1eb      	bne.n	1979a <rpc_transport_ipc_request_shutdown+0x12>
   197c2:	bcf0      	pop	{r4, r5, r6, r7}
   197c4:	4770      	bx	lr
   197c6:	0192      	lsls	r2, r2, #6
   197c8:	4404      	add	r4, r0
   197ca:	18b0      	adds	r0, r6, r2
   197cc:	60a0      	str	r0, [r4, #8]
   197ce:	6843      	ldr	r3, [r0, #4]
   197d0:	4906      	ldr	r1, [pc, #24]	; (197ec <rpc_transport_ipc_request_shutdown+0x64>)
   197d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   197d6:	f043 0301 	orr.w	r3, r3, #1
   197da:	6043      	str	r3, [r0, #4]
   197dc:	50b1      	str	r1, [r6, r2]
   197de:	bcf0      	pop	{r4, r5, r6, r7}
   197e0:	f7ff bed8 	b.w	19594 <rpc_transport_ipc_send>
   197e4:	20021de8 	.word	0x20021de8
   197e8:	20021de4 	.word	0x20021de4
   197ec:	00030001 	.word	0x00030001

000197f0 <secure_client_socket>:
   197f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   197f4:	f04f 3cff 	mov.w	ip, #4294967295
   197f8:	460c      	mov	r4, r1
   197fa:	680b      	ldr	r3, [r1, #0]
   197fc:	4f46      	ldr	r7, [pc, #280]	; (19918 <secure_client_socket+0x128>)
   197fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19802:	600b      	str	r3, [r1, #0]
   19804:	680b      	ldr	r3, [r1, #0]
   19806:	00c6      	lsls	r6, r0, #3
   19808:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1980c:	600b      	str	r3, [r1, #0]
   1980e:	eb07 0a06 	add.w	sl, r7, r6
   19812:	b084      	sub	sp, #16
   19814:	f8da 3004 	ldr.w	r3, [sl, #4]
   19818:	6989      	ldr	r1, [r1, #24]
   1981a:	f247 0281 	movw	r2, #28801	; 0x7081
   1981e:	4605      	mov	r5, r0
   19820:	f8d4 8000 	ldr.w	r8, [r4]
   19824:	e9cd cc02 	strd	ip, ip, [sp, #8]
   19828:	f000 fcfc 	bl	1a224 <ip_interface_request_create>
   1982c:	2800      	cmp	r0, #0
   1982e:	d06d      	beq.n	1990c <secure_client_socket+0x11c>
   19830:	f8da 2004 	ldr.w	r2, [sl, #4]
   19834:	4681      	mov	r9, r0
   19836:	2a00      	cmp	r2, #0
   19838:	d15d      	bne.n	198f6 <secure_client_socket+0x106>
   1983a:	4b38      	ldr	r3, [pc, #224]	; (1991c <secure_client_socket+0x12c>)
   1983c:	1971      	adds	r1, r6, r5
   1983e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   19842:	2224      	movs	r2, #36	; 0x24
   19844:	f109 0014 	add.w	r0, r9, #20
   19848:	f00d f8dd 	bl	26a06 <memcpy>
   1984c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   19850:	4649      	mov	r1, r9
   19852:	3324      	adds	r3, #36	; 0x24
   19854:	f8c9 3008 	str.w	r3, [r9, #8]
   19858:	6822      	ldr	r2, [r4, #0]
   1985a:	4643      	mov	r3, r8
   1985c:	0c12      	lsrs	r2, r2, #16
   1985e:	0412      	lsls	r2, r2, #16
   19860:	f042 020a 	orr.w	r2, r2, #10
   19864:	6022      	str	r2, [r4, #0]
   19866:	4620      	mov	r0, r4
   19868:	f247 0281 	movw	r2, #28801	; 0x7081
   1986c:	f000 fcfa 	bl	1a264 <ip_interface_request_send>
   19870:	4603      	mov	r3, r0
   19872:	b968      	cbnz	r0, 19890 <secure_client_socket+0xa0>
   19874:	6823      	ldr	r3, [r4, #0]
   19876:	00db      	lsls	r3, r3, #3
   19878:	d40e      	bmi.n	19898 <secure_client_socket+0xa8>
   1987a:	ab03      	add	r3, sp, #12
   1987c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19880:	210b      	movs	r1, #11
   19882:	4628      	mov	r0, r5
   19884:	f000 fd02 	bl	1a28c <ip_interface_wait>
   19888:	4603      	mov	r3, r0
   1988a:	b150      	cbz	r0, 198a2 <secure_client_socket+0xb2>
   1988c:	f8c4 8000 	str.w	r8, [r4]
   19890:	4618      	mov	r0, r3
   19892:	b004      	add	sp, #16
   19894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19898:	2373      	movs	r3, #115	; 0x73
   1989a:	4618      	mov	r0, r3
   1989c:	b004      	add	sp, #16
   1989e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   198a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   198a6:	ab02      	add	r3, sp, #8
   198a8:	4611      	mov	r1, r2
   198aa:	4628      	mov	r0, r5
   198ac:	f000 fcee 	bl	1a28c <ip_interface_wait>
   198b0:	4603      	mov	r3, r0
   198b2:	bb30      	cbnz	r0, 19902 <secure_client_socket+0x112>
   198b4:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   198b8:	b138      	cbz	r0, 198ca <secure_client_socket+0xda>
   198ba:	9301      	str	r3, [sp, #4]
   198bc:	f005 fe84 	bl	1f5c8 <nrf_free>
   198c0:	9b01      	ldr	r3, [sp, #4]
   198c2:	443e      	add	r6, r7
   198c4:	6073      	str	r3, [r6, #4]
   198c6:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   198ca:	4618      	mov	r0, r3
   198cc:	6822      	ldr	r2, [r4, #0]
   198ce:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   198d2:	6022      	str	r2, [r4, #0]
   198d4:	6822      	ldr	r2, [r4, #0]
   198d6:	0c12      	lsrs	r2, r2, #16
   198d8:	0412      	lsls	r2, r2, #16
   198da:	f042 020c 	orr.w	r2, r2, #12
   198de:	6022      	str	r2, [r4, #0]
   198e0:	6822      	ldr	r2, [r4, #0]
   198e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   198e6:	6022      	str	r2, [r4, #0]
   198e8:	6822      	ldr	r2, [r4, #0]
   198ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   198ee:	6022      	str	r2, [r4, #0]
   198f0:	b004      	add	sp, #16
   198f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   198f6:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   198fa:	6800      	ldr	r0, [r0, #0]
   198fc:	f00d f883 	bl	26a06 <memcpy>
   19900:	e79b      	b.n	1983a <secure_client_socket+0x4a>
   19902:	2b73      	cmp	r3, #115	; 0x73
   19904:	d0c4      	beq.n	19890 <secure_client_socket+0xa0>
   19906:	f8c4 8000 	str.w	r8, [r4]
   1990a:	e7c1      	b.n	19890 <secure_client_socket+0xa0>
   1990c:	230c      	movs	r3, #12
   1990e:	4618      	mov	r0, r3
   19910:	b004      	add	sp, #16
   19912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19916:	bf00      	nop
   19918:	20021f50 	.word	0x20021f50
   1991c:	20021e0c 	.word	0x20021e0c

00019920 <tls_interface_init>:
   19920:	2000      	movs	r0, #0
   19922:	4770      	bx	lr

00019924 <tls_interface_open>:
   19924:	b538      	push	{r3, r4, r5, lr}
   19926:	1e4b      	subs	r3, r1, #1
   19928:	2b01      	cmp	r3, #1
   1992a:	d808      	bhi.n	1993e <tls_interface_open+0x1a>
   1992c:	4614      	mov	r4, r2
   1992e:	b162      	cbz	r2, 1994a <tls_interface_open+0x26>
   19930:	2901      	cmp	r1, #1
   19932:	d02d      	beq.n	19990 <tls_interface_open+0x6c>
   19934:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   19938:	bf08      	it	eq
   1993a:	2202      	moveq	r2, #2
   1993c:	d00d      	beq.n	1995a <tls_interface_open+0x36>
   1993e:	2029      	movs	r0, #41	; 0x29
   19940:	f7fc f96a 	bl	15c18 <bsd_os_errno_set>
   19944:	f04f 35ff 	mov.w	r5, #4294967295
   19948:	e020      	b.n	1998c <tls_interface_open+0x68>
   1994a:	2901      	cmp	r1, #1
   1994c:	bf0b      	itete	eq
   1994e:	2201      	moveq	r2, #1
   19950:	2202      	movne	r2, #2
   19952:	f44f 7482 	moveq.w	r4, #260	; 0x104
   19956:	f44f 7487 	movne.w	r4, #270	; 0x10e
   1995a:	f000 fcc9 	bl	1a2f0 <ip_interface_open>
   1995e:	1e05      	subs	r5, r0, #0
   19960:	db1b      	blt.n	1999a <tls_interface_open+0x76>
   19962:	4b0f      	ldr	r3, [pc, #60]	; (199a0 <tls_interface_open+0x7c>)
   19964:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   19968:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1996c:	2224      	movs	r2, #36	; 0x24
   1996e:	490d      	ldr	r1, [pc, #52]	; (199a4 <tls_interface_open+0x80>)
   19970:	f00d f849 	bl	26a06 <memcpy>
   19974:	4628      	mov	r0, r5
   19976:	f006 fa81 	bl	1fe7c <interface_socket_from_handle_get>
   1997a:	6803      	ldr	r3, [r0, #0]
   1997c:	6144      	str	r4, [r0, #20]
   1997e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   19982:	6003      	str	r3, [r0, #0]
   19984:	6803      	ldr	r3, [r0, #0]
   19986:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1998a:	6003      	str	r3, [r0, #0]
   1998c:	4628      	mov	r0, r5
   1998e:	bd38      	pop	{r3, r4, r5, pc}
   19990:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   19994:	d1d3      	bne.n	1993e <tls_interface_open+0x1a>
   19996:	460a      	mov	r2, r1
   19998:	e7df      	b.n	1995a <tls_interface_open+0x36>
   1999a:	f04f 35ff 	mov.w	r5, #4294967295
   1999e:	e7f5      	b.n	1998c <tls_interface_open+0x68>
   199a0:	20021e0c 	.word	0x20021e0c
   199a4:	0002820c 	.word	0x0002820c

000199a8 <tls_interface_close>:
   199a8:	b538      	push	{r3, r4, r5, lr}
   199aa:	4604      	mov	r4, r0
   199ac:	f006 fa66 	bl	1fe7c <interface_socket_from_handle_get>
   199b0:	b180      	cbz	r0, 199d4 <tls_interface_close+0x2c>
   199b2:	4d0b      	ldr	r5, [pc, #44]	; (199e0 <tls_interface_close+0x38>)
   199b4:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   199b8:	b138      	cbz	r0, 199ca <tls_interface_close+0x22>
   199ba:	f005 fe05 	bl	1f5c8 <nrf_free>
   199be:	2300      	movs	r3, #0
   199c0:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   199c4:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   199c8:	6053      	str	r3, [r2, #4]
   199ca:	4620      	mov	r0, r4
   199cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   199d0:	f000 bd54 	b.w	1a47c <ip_interface_close>
   199d4:	2009      	movs	r0, #9
   199d6:	f7fc f91f 	bl	15c18 <bsd_os_errno_set>
   199da:	f04f 30ff 	mov.w	r0, #4294967295
   199de:	bd38      	pop	{r3, r4, r5, pc}
   199e0:	20021f50 	.word	0x20021f50

000199e4 <tls_interface_sendto>:
   199e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   199e8:	460d      	mov	r5, r1
   199ea:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   199ee:	4616      	mov	r6, r2
   199f0:	461f      	mov	r7, r3
   199f2:	4604      	mov	r4, r0
   199f4:	f006 fa42 	bl	1fe7c <interface_socket_from_handle_get>
   199f8:	2800      	cmp	r0, #0
   199fa:	d03b      	beq.n	19a74 <tls_interface_sendto+0x90>
   199fc:	6803      	ldr	r3, [r0, #0]
   199fe:	b29b      	uxth	r3, r3
   19a00:	2b0c      	cmp	r3, #12
   19a02:	d039      	beq.n	19a78 <tls_interface_sendto+0x94>
   19a04:	6803      	ldr	r3, [r0, #0]
   19a06:	b29b      	uxth	r3, r3
   19a08:	2b0b      	cmp	r3, #11
   19a0a:	d111      	bne.n	19a30 <tls_interface_sendto+0x4c>
   19a0c:	4b20      	ldr	r3, [pc, #128]	; (19a90 <tls_interface_sendto+0xac>)
   19a0e:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   19a12:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   19a16:	2b02      	cmp	r3, #2
   19a18:	d038      	beq.n	19a8c <tls_interface_sendto+0xa8>
   19a1a:	6903      	ldr	r3, [r0, #16]
   19a1c:	2b01      	cmp	r3, #1
   19a1e:	bf14      	ite	ne
   19a20:	2039      	movne	r0, #57	; 0x39
   19a22:	202a      	moveq	r0, #42	; 0x2a
   19a24:	f7fc f8f8 	bl	15c18 <bsd_os_errno_set>
   19a28:	f04f 30ff 	mov.w	r0, #4294967295
   19a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19a30:	6903      	ldr	r3, [r0, #16]
   19a32:	2b01      	cmp	r3, #1
   19a34:	d00b      	beq.n	19a4e <tls_interface_sendto+0x6a>
   19a36:	2b02      	cmp	r3, #2
   19a38:	d001      	beq.n	19a3e <tls_interface_sendto+0x5a>
   19a3a:	2039      	movs	r0, #57	; 0x39
   19a3c:	e7f2      	b.n	19a24 <tls_interface_sendto+0x40>
   19a3e:	6803      	ldr	r3, [r0, #0]
   19a40:	b29b      	uxth	r3, r3
   19a42:	2b02      	cmp	r3, #2
   19a44:	d007      	beq.n	19a56 <tls_interface_sendto+0x72>
   19a46:	6803      	ldr	r3, [r0, #0]
   19a48:	b29b      	uxth	r3, r3
   19a4a:	2b04      	cmp	r3, #4
   19a4c:	d003      	beq.n	19a56 <tls_interface_sendto+0x72>
   19a4e:	6803      	ldr	r3, [r0, #0]
   19a50:	b29b      	uxth	r3, r3
   19a52:	2b05      	cmp	r3, #5
   19a54:	d1f1      	bne.n	19a3a <tls_interface_sendto+0x56>
   19a56:	4b0e      	ldr	r3, [pc, #56]	; (19a90 <tls_interface_sendto+0xac>)
   19a58:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   19a5c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   19a60:	2b02      	cmp	r3, #2
   19a62:	d1ea      	bne.n	19a3a <tls_interface_sendto+0x56>
   19a64:	4601      	mov	r1, r0
   19a66:	4620      	mov	r0, r4
   19a68:	f7ff fec2 	bl	197f0 <secure_client_socket>
   19a6c:	2800      	cmp	r0, #0
   19a6e:	d003      	beq.n	19a78 <tls_interface_sendto+0x94>
   19a70:	dcd8      	bgt.n	19a24 <tls_interface_sendto+0x40>
   19a72:	e7d9      	b.n	19a28 <tls_interface_sendto+0x44>
   19a74:	2009      	movs	r0, #9
   19a76:	e7d5      	b.n	19a24 <tls_interface_sendto+0x40>
   19a78:	e9cd 8908 	strd	r8, r9, [sp, #32]
   19a7c:	463b      	mov	r3, r7
   19a7e:	4632      	mov	r2, r6
   19a80:	4629      	mov	r1, r5
   19a82:	4620      	mov	r0, r4
   19a84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a88:	f000 bd6a 	b.w	1a560 <ip_interface_sendto>
   19a8c:	2023      	movs	r0, #35	; 0x23
   19a8e:	e7c9      	b.n	19a24 <tls_interface_sendto+0x40>
   19a90:	20021e0c 	.word	0x20021e0c

00019a94 <tls_interface_recvfrom>:
   19a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a98:	460d      	mov	r5, r1
   19a9a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   19a9e:	4616      	mov	r6, r2
   19aa0:	461f      	mov	r7, r3
   19aa2:	4604      	mov	r4, r0
   19aa4:	f006 f9ea 	bl	1fe7c <interface_socket_from_handle_get>
   19aa8:	2800      	cmp	r0, #0
   19aaa:	d038      	beq.n	19b1e <tls_interface_recvfrom+0x8a>
   19aac:	6803      	ldr	r3, [r0, #0]
   19aae:	b29b      	uxth	r3, r3
   19ab0:	2b0c      	cmp	r3, #12
   19ab2:	d00f      	beq.n	19ad4 <tls_interface_recvfrom+0x40>
   19ab4:	6803      	ldr	r3, [r0, #0]
   19ab6:	b29b      	uxth	r3, r3
   19ab8:	2b0d      	cmp	r3, #13
   19aba:	d00b      	beq.n	19ad4 <tls_interface_recvfrom+0x40>
   19abc:	6903      	ldr	r3, [r0, #16]
   19abe:	2b01      	cmp	r3, #1
   19ac0:	d01a      	beq.n	19af8 <tls_interface_recvfrom+0x64>
   19ac2:	2b02      	cmp	r3, #2
   19ac4:	d010      	beq.n	19ae8 <tls_interface_recvfrom+0x54>
   19ac6:	2023      	movs	r0, #35	; 0x23
   19ac8:	f7fc f8a6 	bl	15c18 <bsd_os_errno_set>
   19acc:	f04f 30ff 	mov.w	r0, #4294967295
   19ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19ad4:	e9cd 8908 	strd	r8, r9, [sp, #32]
   19ad8:	463b      	mov	r3, r7
   19ada:	4632      	mov	r2, r6
   19adc:	4629      	mov	r1, r5
   19ade:	4620      	mov	r0, r4
   19ae0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19ae4:	f000 bea2 	b.w	1a82c <ip_interface_recvfrom>
   19ae8:	6803      	ldr	r3, [r0, #0]
   19aea:	b29b      	uxth	r3, r3
   19aec:	2b02      	cmp	r3, #2
   19aee:	d007      	beq.n	19b00 <tls_interface_recvfrom+0x6c>
   19af0:	6803      	ldr	r3, [r0, #0]
   19af2:	b29b      	uxth	r3, r3
   19af4:	2b04      	cmp	r3, #4
   19af6:	d003      	beq.n	19b00 <tls_interface_recvfrom+0x6c>
   19af8:	6803      	ldr	r3, [r0, #0]
   19afa:	b29b      	uxth	r3, r3
   19afc:	2b05      	cmp	r3, #5
   19afe:	d1e2      	bne.n	19ac6 <tls_interface_recvfrom+0x32>
   19b00:	4b08      	ldr	r3, [pc, #32]	; (19b24 <tls_interface_recvfrom+0x90>)
   19b02:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   19b06:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   19b0a:	2b02      	cmp	r3, #2
   19b0c:	d1db      	bne.n	19ac6 <tls_interface_recvfrom+0x32>
   19b0e:	4601      	mov	r1, r0
   19b10:	4620      	mov	r0, r4
   19b12:	f7ff fe6d 	bl	197f0 <secure_client_socket>
   19b16:	2800      	cmp	r0, #0
   19b18:	d0dc      	beq.n	19ad4 <tls_interface_recvfrom+0x40>
   19b1a:	dcd5      	bgt.n	19ac8 <tls_interface_recvfrom+0x34>
   19b1c:	e7d6      	b.n	19acc <tls_interface_recvfrom+0x38>
   19b1e:	2009      	movs	r0, #9
   19b20:	e7d2      	b.n	19ac8 <tls_interface_recvfrom+0x34>
   19b22:	bf00      	nop
   19b24:	20021e0c 	.word	0x20021e0c

00019b28 <tls_interface_bind>:
   19b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19b2c:	b082      	sub	sp, #8
   19b2e:	460e      	mov	r6, r1
   19b30:	4617      	mov	r7, r2
   19b32:	4605      	mov	r5, r0
   19b34:	f006 f9a2 	bl	1fe7c <interface_socket_from_handle_get>
   19b38:	2800      	cmp	r0, #0
   19b3a:	d069      	beq.n	19c10 <tls_interface_bind+0xe8>
   19b3c:	6803      	ldr	r3, [r0, #0]
   19b3e:	4604      	mov	r4, r0
   19b40:	b29b      	uxth	r3, r3
   19b42:	2b02      	cmp	r3, #2
   19b44:	d158      	bne.n	19bf8 <tls_interface_bind+0xd0>
   19b46:	463a      	mov	r2, r7
   19b48:	4631      	mov	r1, r6
   19b4a:	4628      	mov	r0, r5
   19b4c:	f001 f858 	bl	1ac00 <ip_interface_bind>
   19b50:	2800      	cmp	r0, #0
   19b52:	d148      	bne.n	19be6 <tls_interface_bind+0xbe>
   19b54:	00ee      	lsls	r6, r5, #3
   19b56:	4f2f      	ldr	r7, [pc, #188]	; (19c14 <tls_interface_bind+0xec>)
   19b58:	1973      	adds	r3, r6, r5
   19b5a:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   19b5e:	2b01      	cmp	r3, #1
   19b60:	d002      	beq.n	19b68 <tls_interface_bind+0x40>
   19b62:	b002      	add	sp, #8
   19b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19b68:	f04f 3cff 	mov.w	ip, #4294967295
   19b6c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 19c18 <tls_interface_bind+0xf0>
   19b70:	f247 0281 	movw	r2, #28801	; 0x7081
   19b74:	eb0a 0906 	add.w	r9, sl, r6
   19b78:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19b7c:	69a1      	ldr	r1, [r4, #24]
   19b7e:	4628      	mov	r0, r5
   19b80:	f8cd c004 	str.w	ip, [sp, #4]
   19b84:	f000 fb4e 	bl	1a224 <ip_interface_request_create>
   19b88:	4680      	mov	r8, r0
   19b8a:	2800      	cmp	r0, #0
   19b8c:	d03e      	beq.n	19c0c <tls_interface_bind+0xe4>
   19b8e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   19b92:	bbaa      	cbnz	r2, 19c00 <tls_interface_bind+0xd8>
   19b94:	1971      	adds	r1, r6, r5
   19b96:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   19b9a:	2224      	movs	r2, #36	; 0x24
   19b9c:	f108 0014 	add.w	r0, r8, #20
   19ba0:	f00c ff31 	bl	26a06 <memcpy>
   19ba4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   19ba8:	4641      	mov	r1, r8
   19baa:	3324      	adds	r3, #36	; 0x24
   19bac:	f8c8 3008 	str.w	r3, [r8, #8]
   19bb0:	6822      	ldr	r2, [r4, #0]
   19bb2:	2304      	movs	r3, #4
   19bb4:	0c12      	lsrs	r2, r2, #16
   19bb6:	0412      	lsls	r2, r2, #16
   19bb8:	f042 020a 	orr.w	r2, r2, #10
   19bbc:	6022      	str	r2, [r4, #0]
   19bbe:	4620      	mov	r0, r4
   19bc0:	f247 0281 	movw	r2, #28801	; 0x7081
   19bc4:	f000 fb4e 	bl	1a264 <ip_interface_request_send>
   19bc8:	b968      	cbnz	r0, 19be6 <tls_interface_bind+0xbe>
   19bca:	6823      	ldr	r3, [r4, #0]
   19bcc:	00db      	lsls	r3, r3, #3
   19bce:	d415      	bmi.n	19bfc <tls_interface_bind+0xd4>
   19bd0:	4628      	mov	r0, r5
   19bd2:	ab01      	add	r3, sp, #4
   19bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19bd8:	210b      	movs	r1, #11
   19bda:	f000 fb57 	bl	1a28c <ip_interface_wait>
   19bde:	2800      	cmp	r0, #0
   19be0:	d0bf      	beq.n	19b62 <tls_interface_bind+0x3a>
   19be2:	2304      	movs	r3, #4
   19be4:	6023      	str	r3, [r4, #0]
   19be6:	2800      	cmp	r0, #0
   19be8:	ddbb      	ble.n	19b62 <tls_interface_bind+0x3a>
   19bea:	f7fc f815 	bl	15c18 <bsd_os_errno_set>
   19bee:	f04f 30ff 	mov.w	r0, #4294967295
   19bf2:	b002      	add	sp, #8
   19bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19bf8:	202d      	movs	r0, #45	; 0x2d
   19bfa:	e7f6      	b.n	19bea <tls_interface_bind+0xc2>
   19bfc:	2073      	movs	r0, #115	; 0x73
   19bfe:	e7f4      	b.n	19bea <tls_interface_bind+0xc2>
   19c00:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   19c04:	6800      	ldr	r0, [r0, #0]
   19c06:	f00c fefe 	bl	26a06 <memcpy>
   19c0a:	e7c3      	b.n	19b94 <tls_interface_bind+0x6c>
   19c0c:	200c      	movs	r0, #12
   19c0e:	e7ec      	b.n	19bea <tls_interface_bind+0xc2>
   19c10:	2009      	movs	r0, #9
   19c12:	e7ea      	b.n	19bea <tls_interface_bind+0xc2>
   19c14:	20021e0c 	.word	0x20021e0c
   19c18:	20021f50 	.word	0x20021f50

00019c1c <tls_interface_connect>:
   19c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c1e:	460e      	mov	r6, r1
   19c20:	4617      	mov	r7, r2
   19c22:	4604      	mov	r4, r0
   19c24:	f006 f92a 	bl	1fe7c <interface_socket_from_handle_get>
   19c28:	b1e8      	cbz	r0, 19c66 <tls_interface_connect+0x4a>
   19c2a:	4b13      	ldr	r3, [pc, #76]	; (19c78 <tls_interface_connect+0x5c>)
   19c2c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   19c30:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   19c34:	2b02      	cmp	r3, #2
   19c36:	d11c      	bne.n	19c72 <tls_interface_connect+0x56>
   19c38:	6803      	ldr	r3, [r0, #0]
   19c3a:	4605      	mov	r5, r0
   19c3c:	b29b      	uxth	r3, r3
   19c3e:	2b02      	cmp	r3, #2
   19c40:	d003      	beq.n	19c4a <tls_interface_connect+0x2e>
   19c42:	6803      	ldr	r3, [r0, #0]
   19c44:	b29b      	uxth	r3, r3
   19c46:	2b04      	cmp	r3, #4
   19c48:	d113      	bne.n	19c72 <tls_interface_connect+0x56>
   19c4a:	463a      	mov	r2, r7
   19c4c:	4631      	mov	r1, r6
   19c4e:	4620      	mov	r0, r4
   19c50:	f000 ff14 	bl	1aa7c <ip_interface_connect>
   19c54:	b110      	cbz	r0, 19c5c <tls_interface_connect+0x40>
   19c56:	2800      	cmp	r0, #0
   19c58:	dc06      	bgt.n	19c68 <tls_interface_connect+0x4c>
   19c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19c5c:	4629      	mov	r1, r5
   19c5e:	4620      	mov	r0, r4
   19c60:	f7ff fdc6 	bl	197f0 <secure_client_socket>
   19c64:	e7f7      	b.n	19c56 <tls_interface_connect+0x3a>
   19c66:	2009      	movs	r0, #9
   19c68:	f7fb ffd6 	bl	15c18 <bsd_os_errno_set>
   19c6c:	f04f 30ff 	mov.w	r0, #4294967295
   19c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19c72:	202d      	movs	r0, #45	; 0x2d
   19c74:	e7f8      	b.n	19c68 <tls_interface_connect+0x4c>
   19c76:	bf00      	nop
   19c78:	20021e0c 	.word	0x20021e0c

00019c7c <tls_interface_listen>:
   19c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c80:	b085      	sub	sp, #20
   19c82:	9101      	str	r1, [sp, #4]
   19c84:	4605      	mov	r5, r0
   19c86:	f006 f8f9 	bl	1fe7c <interface_socket_from_handle_get>
   19c8a:	2800      	cmp	r0, #0
   19c8c:	d07c      	beq.n	19d88 <tls_interface_listen+0x10c>
   19c8e:	6903      	ldr	r3, [r0, #16]
   19c90:	4604      	mov	r4, r0
   19c92:	2b01      	cmp	r3, #1
   19c94:	d176      	bne.n	19d84 <tls_interface_listen+0x108>
   19c96:	6803      	ldr	r3, [r0, #0]
   19c98:	b29b      	uxth	r3, r3
   19c9a:	2b04      	cmp	r3, #4
   19c9c:	d062      	beq.n	19d64 <tls_interface_listen+0xe8>
   19c9e:	6823      	ldr	r3, [r4, #0]
   19ca0:	b29b      	uxth	r3, r3
   19ca2:	2b0b      	cmp	r3, #11
   19ca4:	d16e      	bne.n	19d84 <tls_interface_listen+0x108>
   19ca6:	00ee      	lsls	r6, r5, #3
   19ca8:	4f38      	ldr	r7, [pc, #224]	; (19d8c <tls_interface_listen+0x110>)
   19caa:	1973      	adds	r3, r6, r5
   19cac:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   19cb0:	2b01      	cmp	r3, #1
   19cb2:	d167      	bne.n	19d84 <tls_interface_listen+0x108>
   19cb4:	2201      	movs	r2, #1
   19cb6:	f04f 3cff 	mov.w	ip, #4294967295
   19cba:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 19d90 <tls_interface_listen+0x114>
   19cbe:	1973      	adds	r3, r6, r5
   19cc0:	00ee      	lsls	r6, r5, #3
   19cc2:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   19cc6:	eb09 0806 	add.w	r8, r9, r6
   19cca:	69a1      	ldr	r1, [r4, #24]
   19ccc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19cd0:	f247 0281 	movw	r2, #28801	; 0x7081
   19cd4:	4628      	mov	r0, r5
   19cd6:	f8d4 a000 	ldr.w	sl, [r4]
   19cda:	f8cd c00c 	str.w	ip, [sp, #12]
   19cde:	f000 faa1 	bl	1a224 <ip_interface_request_create>
   19ce2:	4683      	mov	fp, r0
   19ce4:	2800      	cmp	r0, #0
   19ce6:	d04b      	beq.n	19d80 <tls_interface_listen+0x104>
   19ce8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   19cec:	2a00      	cmp	r2, #0
   19cee:	d141      	bne.n	19d74 <tls_interface_listen+0xf8>
   19cf0:	1971      	adds	r1, r6, r5
   19cf2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   19cf6:	2224      	movs	r2, #36	; 0x24
   19cf8:	f10b 0014 	add.w	r0, fp, #20
   19cfc:	f00c fe83 	bl	26a06 <memcpy>
   19d00:	f8db 2008 	ldr.w	r2, [fp, #8]
   19d04:	4659      	mov	r1, fp
   19d06:	3224      	adds	r2, #36	; 0x24
   19d08:	f8cb 2008 	str.w	r2, [fp, #8]
   19d0c:	6822      	ldr	r2, [r4, #0]
   19d0e:	4653      	mov	r3, sl
   19d10:	0c12      	lsrs	r2, r2, #16
   19d12:	0412      	lsls	r2, r2, #16
   19d14:	f042 020a 	orr.w	r2, r2, #10
   19d18:	6022      	str	r2, [r4, #0]
   19d1a:	4620      	mov	r0, r4
   19d1c:	f247 0281 	movw	r2, #28801	; 0x7081
   19d20:	f000 faa0 	bl	1a264 <ip_interface_request_send>
   19d24:	b960      	cbnz	r0, 19d40 <tls_interface_listen+0xc4>
   19d26:	6823      	ldr	r3, [r4, #0]
   19d28:	00db      	lsls	r3, r3, #3
   19d2a:	d40e      	bmi.n	19d4a <tls_interface_listen+0xce>
   19d2c:	ab03      	add	r3, sp, #12
   19d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19d32:	210b      	movs	r1, #11
   19d34:	4628      	mov	r0, r5
   19d36:	f000 faa9 	bl	1a28c <ip_interface_wait>
   19d3a:	b170      	cbz	r0, 19d5a <tls_interface_listen+0xde>
   19d3c:	f8c4 a000 	str.w	sl, [r4]
   19d40:	2800      	cmp	r0, #0
   19d42:	dc03      	bgt.n	19d4c <tls_interface_listen+0xd0>
   19d44:	b005      	add	sp, #20
   19d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d4a:	2073      	movs	r0, #115	; 0x73
   19d4c:	f7fb ff64 	bl	15c18 <bsd_os_errno_set>
   19d50:	f04f 30ff 	mov.w	r0, #4294967295
   19d54:	b005      	add	sp, #20
   19d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d5a:	9901      	ldr	r1, [sp, #4]
   19d5c:	4628      	mov	r0, r5
   19d5e:	f000 fff1 	bl	1ad44 <ip_interface_listen>
   19d62:	e7ed      	b.n	19d40 <tls_interface_listen+0xc4>
   19d64:	00ee      	lsls	r6, r5, #3
   19d66:	4f09      	ldr	r7, [pc, #36]	; (19d8c <tls_interface_listen+0x110>)
   19d68:	1973      	adds	r3, r6, r5
   19d6a:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   19d6e:	2b02      	cmp	r3, #2
   19d70:	d195      	bne.n	19c9e <tls_interface_listen+0x22>
   19d72:	e79f      	b.n	19cb4 <tls_interface_listen+0x38>
   19d74:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   19d78:	6800      	ldr	r0, [r0, #0]
   19d7a:	f00c fe44 	bl	26a06 <memcpy>
   19d7e:	e7b7      	b.n	19cf0 <tls_interface_listen+0x74>
   19d80:	200c      	movs	r0, #12
   19d82:	e7e3      	b.n	19d4c <tls_interface_listen+0xd0>
   19d84:	202d      	movs	r0, #45	; 0x2d
   19d86:	e7e1      	b.n	19d4c <tls_interface_listen+0xd0>
   19d88:	2009      	movs	r0, #9
   19d8a:	e7df      	b.n	19d4c <tls_interface_listen+0xd0>
   19d8c:	20021e0c 	.word	0x20021e0c
   19d90:	20021f50 	.word	0x20021f50

00019d94 <tls_interface_accept>:
   19d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d98:	b082      	sub	sp, #8
   19d9a:	460e      	mov	r6, r1
   19d9c:	4617      	mov	r7, r2
   19d9e:	4698      	mov	r8, r3
   19da0:	4605      	mov	r5, r0
   19da2:	f04f 34ff 	mov.w	r4, #4294967295
   19da6:	f006 f869 	bl	1fe7c <interface_socket_from_handle_get>
   19daa:	9401      	str	r4, [sp, #4]
   19dac:	2800      	cmp	r0, #0
   19dae:	d03c      	beq.n	19e2a <tls_interface_accept+0x96>
   19db0:	6800      	ldr	r0, [r0, #0]
   19db2:	b280      	uxth	r0, r0
   19db4:	2806      	cmp	r0, #6
   19db6:	d138      	bne.n	19e2a <tls_interface_accept+0x96>
   19db8:	4643      	mov	r3, r8
   19dba:	463a      	mov	r2, r7
   19dbc:	4631      	mov	r1, r6
   19dbe:	4628      	mov	r0, r5
   19dc0:	f001 f838 	bl	1ae34 <ip_interface_accept>
   19dc4:	4604      	mov	r4, r0
   19dc6:	b128      	cbz	r0, 19dd4 <tls_interface_accept+0x40>
   19dc8:	2c00      	cmp	r4, #0
   19dca:	dc2f      	bgt.n	19e2c <tls_interface_accept+0x98>
   19dcc:	4620      	mov	r0, r4
   19dce:	b002      	add	sp, #8
   19dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19dd4:	4628      	mov	r0, r5
   19dd6:	f006 f851 	bl	1fe7c <interface_socket_from_handle_get>
   19dda:	6803      	ldr	r3, [r0, #0]
   19ddc:	4f18      	ldr	r7, [pc, #96]	; (19e40 <tls_interface_accept+0xac>)
   19dde:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19de2:	6003      	str	r3, [r0, #0]
   19de4:	6803      	ldr	r3, [r0, #0]
   19de6:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   19dea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   19dee:	4606      	mov	r6, r0
   19df0:	6003      	str	r3, [r0, #0]
   19df2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   19df6:	2224      	movs	r2, #36	; 0x24
   19df8:	4638      	mov	r0, r7
   19dfa:	f00c fe04 	bl	26a06 <memcpy>
   19dfe:	2302      	movs	r3, #2
   19e00:	703b      	strb	r3, [r7, #0]
   19e02:	6833      	ldr	r3, [r6, #0]
   19e04:	4620      	mov	r0, r4
   19e06:	0c1b      	lsrs	r3, r3, #16
   19e08:	041b      	lsls	r3, r3, #16
   19e0a:	f043 030b 	orr.w	r3, r3, #11
   19e0e:	6033      	str	r3, [r6, #0]
   19e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19e14:	ab01      	add	r3, sp, #4
   19e16:	210c      	movs	r1, #12
   19e18:	f000 fa38 	bl	1a28c <ip_interface_wait>
   19e1c:	4604      	mov	r4, r0
   19e1e:	2800      	cmp	r0, #0
   19e20:	d0d4      	beq.n	19dcc <tls_interface_accept+0x38>
   19e22:	2000      	movs	r0, #0
   19e24:	f000 fb2a 	bl	1a47c <ip_interface_close>
   19e28:	e7ce      	b.n	19dc8 <tls_interface_accept+0x34>
   19e2a:	2409      	movs	r4, #9
   19e2c:	4620      	mov	r0, r4
   19e2e:	f04f 34ff 	mov.w	r4, #4294967295
   19e32:	f7fb fef1 	bl	15c18 <bsd_os_errno_set>
   19e36:	4620      	mov	r0, r4
   19e38:	b002      	add	sp, #8
   19e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e3e:	bf00      	nop
   19e40:	20021e0c 	.word	0x20021e0c

00019e44 <tls_interface_setopt>:
   19e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e48:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   19e4c:	9e06      	ldr	r6, [sp, #24]
   19e4e:	d11e      	bne.n	19e8e <tls_interface_setopt+0x4a>
   19e50:	461f      	mov	r7, r3
   19e52:	4605      	mov	r5, r0
   19e54:	2b00      	cmp	r3, #0
   19e56:	f000 808c 	beq.w	19f72 <tls_interface_setopt+0x12e>
   19e5a:	4690      	mov	r8, r2
   19e5c:	f006 f80e 	bl	1fe7c <interface_socket_from_handle_get>
   19e60:	2800      	cmp	r0, #0
   19e62:	d07b      	beq.n	19f5c <tls_interface_setopt+0x118>
   19e64:	6804      	ldr	r4, [r0, #0]
   19e66:	b2a4      	uxth	r4, r4
   19e68:	2c02      	cmp	r4, #2
   19e6a:	d007      	beq.n	19e7c <tls_interface_setopt+0x38>
   19e6c:	6803      	ldr	r3, [r0, #0]
   19e6e:	b29b      	uxth	r3, r3
   19e70:	2b04      	cmp	r3, #4
   19e72:	d003      	beq.n	19e7c <tls_interface_setopt+0x38>
   19e74:	6803      	ldr	r3, [r0, #0]
   19e76:	b29b      	uxth	r3, r3
   19e78:	2b05      	cmp	r3, #5
   19e7a:	d16f      	bne.n	19f5c <tls_interface_setopt+0x118>
   19e7c:	f108 32ff 	add.w	r2, r8, #4294967295
   19e80:	2a04      	cmp	r2, #4
   19e82:	d87c      	bhi.n	19f7e <tls_interface_setopt+0x13a>
   19e84:	e8df f002 	tbb	[pc, r2]
   19e88:	41324e24 	.word	0x41324e24
   19e8c:	07          	.byte	0x07
   19e8d:	00          	.byte	0x00
   19e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19e92:	f001 b911 	b.w	1b0b8 <ip_interface_setopt>
   19e96:	4c3b      	ldr	r4, [pc, #236]	; (19f84 <tls_interface_setopt+0x140>)
   19e98:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   19e9c:	b138      	cbz	r0, 19eae <tls_interface_setopt+0x6a>
   19e9e:	f005 fb93 	bl	1f5c8 <nrf_free>
   19ea2:	2200      	movs	r2, #0
   19ea4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   19ea8:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   19eac:	605a      	str	r2, [r3, #4]
   19eae:	4630      	mov	r0, r6
   19eb0:	b34e      	cbz	r6, 19f06 <tls_interface_setopt+0xc2>
   19eb2:	f005 fb7f 	bl	1f5b4 <nrf_malloc>
   19eb6:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   19eba:	2800      	cmp	r0, #0
   19ebc:	d057      	beq.n	19f6e <tls_interface_setopt+0x12a>
   19ebe:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   19ec2:	4632      	mov	r2, r6
   19ec4:	4639      	mov	r1, r7
   19ec6:	6066      	str	r6, [r4, #4]
   19ec8:	f00c fd9d 	bl	26a06 <memcpy>
   19ecc:	2000      	movs	r0, #0
   19ece:	e01a      	b.n	19f06 <tls_interface_setopt+0xc2>
   19ed0:	2e04      	cmp	r6, #4
   19ed2:	d14a      	bne.n	19f6a <tls_interface_setopt+0x126>
   19ed4:	6838      	ldr	r0, [r7, #0]
   19ed6:	2800      	cmp	r0, #0
   19ed8:	d039      	beq.n	19f4e <tls_interface_setopt+0x10a>
   19eda:	2801      	cmp	r0, #1
   19edc:	d145      	bne.n	19f6a <tls_interface_setopt+0x126>
   19ede:	4a2a      	ldr	r2, [pc, #168]	; (19f88 <tls_interface_setopt+0x144>)
   19ee0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19ee4:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   19ee8:	2000      	movs	r0, #0
   19eea:	e00c      	b.n	19f06 <tls_interface_setopt+0xc2>
   19eec:	2e01      	cmp	r6, #1
   19eee:	d13c      	bne.n	19f6a <tls_interface_setopt+0x126>
   19ef0:	783a      	ldrb	r2, [r7, #0]
   19ef2:	2000      	movs	r0, #0
   19ef4:	3200      	adds	r2, #0
   19ef6:	bf18      	it	ne
   19ef8:	2201      	movne	r2, #1
   19efa:	4b23      	ldr	r3, [pc, #140]	; (19f88 <tls_interface_setopt+0x144>)
   19efc:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19f00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   19f04:	7062      	strb	r2, [r4, #1]
   19f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19f0a:	2e04      	cmp	r6, #4
   19f0c:	d12d      	bne.n	19f6a <tls_interface_setopt+0x126>
   19f0e:	683a      	ldr	r2, [r7, #0]
   19f10:	2a02      	cmp	r2, #2
   19f12:	d82a      	bhi.n	19f6a <tls_interface_setopt+0x126>
   19f14:	4b1c      	ldr	r3, [pc, #112]	; (19f88 <tls_interface_setopt+0x144>)
   19f16:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19f1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   19f1e:	70a2      	strb	r2, [r4, #2]
   19f20:	2000      	movs	r0, #0
   19f22:	e7f0      	b.n	19f06 <tls_interface_setopt+0xc2>
   19f24:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   19f28:	d01f      	beq.n	19f6a <tls_interface_setopt+0x126>
   19f2a:	f016 0403 	ands.w	r4, r6, #3
   19f2e:	d11c      	bne.n	19f6a <tls_interface_setopt+0x126>
   19f30:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   19f34:	00ad      	lsls	r5, r5, #2
   19f36:	4b14      	ldr	r3, [pc, #80]	; (19f88 <tls_interface_setopt+0x144>)
   19f38:	1d28      	adds	r0, r5, #4
   19f3a:	4418      	add	r0, r3
   19f3c:	442b      	add	r3, r5
   19f3e:	4632      	mov	r2, r6
   19f40:	4639      	mov	r1, r7
   19f42:	f883 c003 	strb.w	ip, [r3, #3]
   19f46:	f00c fd5e 	bl	26a06 <memcpy>
   19f4a:	4620      	mov	r0, r4
   19f4c:	e7db      	b.n	19f06 <tls_interface_setopt+0xc2>
   19f4e:	2102      	movs	r1, #2
   19f50:	4a0d      	ldr	r2, [pc, #52]	; (19f88 <tls_interface_setopt+0x144>)
   19f52:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19f56:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   19f5a:	e7d4      	b.n	19f06 <tls_interface_setopt+0xc2>
   19f5c:	2009      	movs	r0, #9
   19f5e:	f7fb fe5b 	bl	15c18 <bsd_os_errno_set>
   19f62:	f04f 30ff 	mov.w	r0, #4294967295
   19f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19f6a:	2016      	movs	r0, #22
   19f6c:	e7f7      	b.n	19f5e <tls_interface_setopt+0x11a>
   19f6e:	200c      	movs	r0, #12
   19f70:	e7f5      	b.n	19f5e <tls_interface_setopt+0x11a>
   19f72:	200e      	movs	r0, #14
   19f74:	f7fb fe50 	bl	15c18 <bsd_os_errno_set>
   19f78:	f04f 30ff 	mov.w	r0, #4294967295
   19f7c:	e7c3      	b.n	19f06 <tls_interface_setopt+0xc2>
   19f7e:	202a      	movs	r0, #42	; 0x2a
   19f80:	e7ed      	b.n	19f5e <tls_interface_setopt+0x11a>
   19f82:	bf00      	nop
   19f84:	20021f50 	.word	0x20021f50
   19f88:	20021e0c 	.word	0x20021e0c

00019f8c <tls_interface_getopt>:
   19f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f90:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   19f94:	9f06      	ldr	r7, [sp, #24]
   19f96:	d112      	bne.n	19fbe <tls_interface_getopt+0x32>
   19f98:	461d      	mov	r5, r3
   19f9a:	b16b      	cbz	r3, 19fb8 <tls_interface_getopt+0x2c>
   19f9c:	b167      	cbz	r7, 19fb8 <tls_interface_getopt+0x2c>
   19f9e:	4606      	mov	r6, r0
   19fa0:	4614      	mov	r4, r2
   19fa2:	f005 ff6b 	bl	1fe7c <interface_socket_from_handle_get>
   19fa6:	2800      	cmp	r0, #0
   19fa8:	d04f      	beq.n	1a04a <tls_interface_getopt+0xbe>
   19faa:	3c01      	subs	r4, #1
   19fac:	2c03      	cmp	r4, #3
   19fae:	d852      	bhi.n	1a056 <tls_interface_getopt+0xca>
   19fb0:	e8df f004 	tbb	[pc, r4]
   19fb4:	09152139 	.word	0x09152139
   19fb8:	200e      	movs	r0, #14
   19fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19fc2:	f001 b935 	b.w	1b230 <ip_interface_getopt>
   19fc6:	683b      	ldr	r3, [r7, #0]
   19fc8:	2b04      	cmp	r3, #4
   19fca:	d13c      	bne.n	1a046 <tls_interface_getopt+0xba>
   19fcc:	4b23      	ldr	r3, [pc, #140]	; (1a05c <tls_interface_getopt+0xd0>)
   19fce:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19fd2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   19fd6:	78b3      	ldrb	r3, [r6, #2]
   19fd8:	2000      	movs	r0, #0
   19fda:	602b      	str	r3, [r5, #0]
   19fdc:	e7ed      	b.n	19fba <tls_interface_getopt+0x2e>
   19fde:	683b      	ldr	r3, [r7, #0]
   19fe0:	2b01      	cmp	r3, #1
   19fe2:	d130      	bne.n	1a046 <tls_interface_getopt+0xba>
   19fe4:	4b1d      	ldr	r3, [pc, #116]	; (1a05c <tls_interface_getopt+0xd0>)
   19fe6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19fea:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   19fee:	7873      	ldrb	r3, [r6, #1]
   19ff0:	2000      	movs	r0, #0
   19ff2:	702b      	strb	r3, [r5, #0]
   19ff4:	e7e1      	b.n	19fba <tls_interface_getopt+0x2e>
   19ff6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19ffa:	4918      	ldr	r1, [pc, #96]	; (1a05c <tls_interface_getopt+0xd0>)
   19ffc:	683b      	ldr	r3, [r7, #0]
   19ffe:	00b6      	lsls	r6, r6, #2
   1a000:	198a      	adds	r2, r1, r6
   1a002:	f013 0403 	ands.w	r4, r3, #3
   1a006:	78d0      	ldrb	r0, [r2, #3]
   1a008:	d121      	bne.n	1a04e <tls_interface_getopt+0xc2>
   1a00a:	089b      	lsrs	r3, r3, #2
   1a00c:	4283      	cmp	r3, r0
   1a00e:	bf28      	it	cs
   1a010:	4603      	movcs	r3, r0
   1a012:	009a      	lsls	r2, r3, #2
   1a014:	b1db      	cbz	r3, 1a04e <tls_interface_getopt+0xc2>
   1a016:	3604      	adds	r6, #4
   1a018:	4431      	add	r1, r6
   1a01a:	603a      	str	r2, [r7, #0]
   1a01c:	4628      	mov	r0, r5
   1a01e:	f00c fcf2 	bl	26a06 <memcpy>
   1a022:	4620      	mov	r0, r4
   1a024:	e7c9      	b.n	19fba <tls_interface_getopt+0x2e>
   1a026:	683b      	ldr	r3, [r7, #0]
   1a028:	2b04      	cmp	r3, #4
   1a02a:	d10c      	bne.n	1a046 <tls_interface_getopt+0xba>
   1a02c:	4b0b      	ldr	r3, [pc, #44]	; (1a05c <tls_interface_getopt+0xd0>)
   1a02e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1a032:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   1a036:	2000      	movs	r0, #0
   1a038:	f1a3 0301 	sub.w	r3, r3, #1
   1a03c:	fab3 f383 	clz	r3, r3
   1a040:	095b      	lsrs	r3, r3, #5
   1a042:	602b      	str	r3, [r5, #0]
   1a044:	e7b9      	b.n	19fba <tls_interface_getopt+0x2e>
   1a046:	2016      	movs	r0, #22
   1a048:	e7b7      	b.n	19fba <tls_interface_getopt+0x2e>
   1a04a:	2009      	movs	r0, #9
   1a04c:	e7b5      	b.n	19fba <tls_interface_getopt+0x2e>
   1a04e:	2800      	cmp	r0, #0
   1a050:	d1f9      	bne.n	1a046 <tls_interface_getopt+0xba>
   1a052:	6038      	str	r0, [r7, #0]
   1a054:	e7b1      	b.n	19fba <tls_interface_getopt+0x2e>
   1a056:	202a      	movs	r0, #42	; 0x2a
   1a058:	e7af      	b.n	19fba <tls_interface_getopt+0x2e>
   1a05a:	bf00      	nop
   1a05c:	20021e0c 	.word	0x20021e0c

0001a060 <tls_rpc_ip_event_handler>:
   1a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a062:	f248 0581 	movw	r5, #32897	; 0x8081
   1a066:	42ab      	cmp	r3, r5
   1a068:	460c      	mov	r4, r1
   1a06a:	d062      	beq.n	1a132 <tls_rpc_ip_event_handler+0xd2>
   1a06c:	f249 0182 	movw	r1, #36994	; 0x9082
   1a070:	428b      	cmp	r3, r1
   1a072:	4606      	mov	r6, r0
   1a074:	d02e      	beq.n	1a0d4 <tls_rpc_ip_event_handler+0x74>
   1a076:	f248 0102 	movw	r1, #32770	; 0x8002
   1a07a:	428b      	cmp	r3, r1
   1a07c:	d001      	beq.n	1a082 <tls_rpc_ip_event_handler+0x22>
   1a07e:	2001      	movs	r0, #1
   1a080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a082:	2c00      	cmp	r4, #0
   1a084:	d0fb      	beq.n	1a07e <tls_rpc_ip_event_handler+0x1e>
   1a086:	6963      	ldr	r3, [r4, #20]
   1a088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1a08c:	d002      	beq.n	1a094 <tls_rpc_ip_event_handler+0x34>
   1a08e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1a092:	d1f4      	bne.n	1a07e <tls_rpc_ip_event_handler+0x1e>
   1a094:	6823      	ldr	r3, [r4, #0]
   1a096:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1a09a:	6023      	str	r3, [r4, #0]
   1a09c:	6955      	ldr	r5, [r2, #20]
   1a09e:	2d00      	cmp	r5, #0
   1a0a0:	d156      	bne.n	1a150 <tls_rpc_ip_event_handler+0xf0>
   1a0a2:	6823      	ldr	r3, [r4, #0]
   1a0a4:	0c1b      	lsrs	r3, r3, #16
   1a0a6:	041b      	lsls	r3, r3, #16
   1a0a8:	f043 0305 	orr.w	r3, r3, #5
   1a0ac:	6023      	str	r3, [r4, #0]
   1a0ae:	6823      	ldr	r3, [r4, #0]
   1a0b0:	00da      	lsls	r2, r3, #3
   1a0b2:	d50d      	bpl.n	1a0d0 <tls_rpc_ip_event_handler+0x70>
   1a0b4:	4b2b      	ldr	r3, [pc, #172]	; (1a164 <tls_rpc_ip_event_handler+0x104>)
   1a0b6:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   1a0ba:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1a0be:	2b02      	cmp	r3, #2
   1a0c0:	d106      	bne.n	1a0d0 <tls_rpc_ip_event_handler+0x70>
   1a0c2:	4630      	mov	r0, r6
   1a0c4:	4621      	mov	r1, r4
   1a0c6:	f7ff fb93 	bl	197f0 <secure_client_socket>
   1a0ca:	b108      	cbz	r0, 1a0d0 <tls_rpc_ip_event_handler+0x70>
   1a0cc:	2873      	cmp	r0, #115	; 0x73
   1a0ce:	d142      	bne.n	1a156 <tls_rpc_ip_event_handler+0xf6>
   1a0d0:	2000      	movs	r0, #0
   1a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0d4:	2c00      	cmp	r4, #0
   1a0d6:	d0fb      	beq.n	1a0d0 <tls_rpc_ip_event_handler+0x70>
   1a0d8:	6823      	ldr	r3, [r4, #0]
   1a0da:	b29b      	uxth	r3, r3
   1a0dc:	2b0b      	cmp	r3, #11
   1a0de:	d1f7      	bne.n	1a0d0 <tls_rpc_ip_event_handler+0x70>
   1a0e0:	6915      	ldr	r5, [r2, #16]
   1a0e2:	2d00      	cmp	r5, #0
   1a0e4:	d134      	bne.n	1a150 <tls_rpc_ip_event_handler+0xf0>
   1a0e6:	6823      	ldr	r3, [r4, #0]
   1a0e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1a0ec:	6023      	str	r3, [r4, #0]
   1a0ee:	6823      	ldr	r3, [r4, #0]
   1a0f0:	00db      	lsls	r3, r3, #3
   1a0f2:	d5ed      	bpl.n	1a0d0 <tls_rpc_ip_event_handler+0x70>
   1a0f4:	4f1c      	ldr	r7, [pc, #112]	; (1a168 <tls_rpc_ip_event_handler+0x108>)
   1a0f6:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   1a0fa:	b130      	cbz	r0, 1a10a <tls_rpc_ip_event_handler+0xaa>
   1a0fc:	f005 fa64 	bl	1f5c8 <nrf_free>
   1a100:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1a104:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   1a108:	605d      	str	r5, [r3, #4]
   1a10a:	6823      	ldr	r3, [r4, #0]
   1a10c:	2000      	movs	r0, #0
   1a10e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1a112:	6023      	str	r3, [r4, #0]
   1a114:	6823      	ldr	r3, [r4, #0]
   1a116:	0c1b      	lsrs	r3, r3, #16
   1a118:	041b      	lsls	r3, r3, #16
   1a11a:	f043 030c 	orr.w	r3, r3, #12
   1a11e:	6023      	str	r3, [r4, #0]
   1a120:	6823      	ldr	r3, [r4, #0]
   1a122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a126:	6023      	str	r3, [r4, #0]
   1a128:	6823      	ldr	r3, [r4, #0]
   1a12a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1a12e:	6023      	str	r3, [r4, #0]
   1a130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a132:	2900      	cmp	r1, #0
   1a134:	d0cc      	beq.n	1a0d0 <tls_rpc_ip_event_handler+0x70>
   1a136:	680b      	ldr	r3, [r1, #0]
   1a138:	b29b      	uxth	r3, r3
   1a13a:	2b0a      	cmp	r3, #10
   1a13c:	d1c8      	bne.n	1a0d0 <tls_rpc_ip_event_handler+0x70>
   1a13e:	6950      	ldr	r0, [r2, #20]
   1a140:	b938      	cbnz	r0, 1a152 <tls_rpc_ip_event_handler+0xf2>
   1a142:	680b      	ldr	r3, [r1, #0]
   1a144:	0c1b      	lsrs	r3, r3, #16
   1a146:	041b      	lsls	r3, r3, #16
   1a148:	f043 030b 	orr.w	r3, r3, #11
   1a14c:	600b      	str	r3, [r1, #0]
   1a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a150:	4628      	mov	r0, r5
   1a152:	f000 f85d 	bl	1a210 <rpc_error_to_nrf_bsd_error>
   1a156:	6060      	str	r0, [r4, #4]
   1a158:	6823      	ldr	r3, [r4, #0]
   1a15a:	2000      	movs	r0, #0
   1a15c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1a160:	6023      	str	r3, [r4, #0]
   1a162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a164:	20021e0c 	.word	0x20021e0c
   1a168:	20021f50 	.word	0x20021f50

0001a16c <ip_client_event_handler>:
   1a16c:	f850 1b08 	ldr.w	r1, [r0], #8
   1a170:	0c09      	lsrs	r1, r1, #16
   1a172:	f001 b971 	b.w	1b458 <rpc_ip_event_handler>
   1a176:	bf00      	nop

0001a178 <rpc_ip_client_init>:
   1a178:	4801      	ldr	r0, [pc, #4]	; (1a180 <rpc_ip_client_init+0x8>)
   1a17a:	f001 bc5f 	b.w	1ba3c <rpc_client_register>
   1a17e:	bf00      	nop
   1a180:	00028230 	.word	0x00028230

0001a184 <rpc_ip_client_request_alloc>:
   1a184:	2300      	movs	r3, #0
   1a186:	b510      	push	{r4, lr}
   1a188:	b082      	sub	sp, #8
   1a18a:	9301      	str	r3, [sp, #4]
   1a18c:	b158      	cbz	r0, 1a1a6 <rpc_ip_client_request_alloc+0x22>
   1a18e:	4604      	mov	r4, r0
   1a190:	aa01      	add	r2, sp, #4
   1a192:	2004      	movs	r0, #4
   1a194:	f001 fccc 	bl	1bb30 <rpc_message_alloc>
   1a198:	b918      	cbnz	r0, 1a1a2 <rpc_ip_client_request_alloc+0x1e>
   1a19a:	9b01      	ldr	r3, [sp, #4]
   1a19c:	b10b      	cbz	r3, 1a1a2 <rpc_ip_client_request_alloc+0x1e>
   1a19e:	3308      	adds	r3, #8
   1a1a0:	6023      	str	r3, [r4, #0]
   1a1a2:	b002      	add	sp, #8
   1a1a4:	bd10      	pop	{r4, pc}
   1a1a6:	2007      	movs	r0, #7
   1a1a8:	b002      	add	sp, #8
   1a1aa:	bd10      	pop	{r4, pc}

0001a1ac <rpc_ip_client_request_send>:
   1a1ac:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a1b0:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1a1b4:	d10b      	bne.n	1a1ce <rpc_ip_client_request_send+0x22>
   1a1b6:	b160      	cbz	r0, 1a1d2 <rpc_ip_client_request_send+0x26>
   1a1b8:	4603      	mov	r3, r0
   1a1ba:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a1be:	2004      	movs	r0, #4
   1a1c0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a1c4:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a1c8:	4619      	mov	r1, r3
   1a1ca:	f001 bca1 	b.w	1bb10 <rpc_message_send>
   1a1ce:	200f      	movs	r0, #15
   1a1d0:	4770      	bx	lr
   1a1d2:	2007      	movs	r0, #7
   1a1d4:	4770      	bx	lr
   1a1d6:	bf00      	nop

0001a1d8 <rpc_ip_client_message_free>:
   1a1d8:	b120      	cbz	r0, 1a1e4 <rpc_ip_client_message_free+0xc>
   1a1da:	f1a0 0108 	sub.w	r1, r0, #8
   1a1de:	2004      	movs	r0, #4
   1a1e0:	f001 bcd2 	b.w	1bb88 <rpc_message_free>
   1a1e4:	2007      	movs	r0, #7
   1a1e6:	4770      	bx	lr

0001a1e8 <rpc_ip_client_data_free>:
   1a1e8:	b118      	cbz	r0, 1a1f2 <rpc_ip_client_data_free+0xa>
   1a1ea:	4601      	mov	r1, r0
   1a1ec:	2004      	movs	r0, #4
   1a1ee:	f001 bcd7 	b.w	1bba0 <rpc_message_data_free>
   1a1f2:	2007      	movs	r0, #7
   1a1f4:	4770      	bx	lr
   1a1f6:	bf00      	nop

0001a1f8 <ip_recvd_packet_free_cb>:
   1a1f8:	b510      	push	{r4, lr}
   1a1fa:	4604      	mov	r4, r0
   1a1fc:	6800      	ldr	r0, [r0, #0]
   1a1fe:	f7ff fff3 	bl	1a1e8 <rpc_ip_client_data_free>
   1a202:	68a0      	ldr	r0, [r4, #8]
   1a204:	b118      	cbz	r0, 1a20e <ip_recvd_packet_free_cb+0x16>
   1a206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a20a:	f005 b9dd 	b.w	1f5c8 <nrf_free>
   1a20e:	bd10      	pop	{r4, pc}

0001a210 <rpc_error_to_nrf_bsd_error>:
   1a210:	2810      	cmp	r0, #16
   1a212:	bf9a      	itte	ls
   1a214:	4b02      	ldrls	r3, [pc, #8]	; (1a220 <rpc_error_to_nrf_bsd_error+0x10>)
   1a216:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1a21a:	202d      	movhi	r0, #45	; 0x2d
   1a21c:	4770      	bx	lr
   1a21e:	bf00      	nop
   1a220:	00028240 	.word	0x00028240

0001a224 <ip_interface_request_create>:
   1a224:	b570      	push	{r4, r5, r6, lr}
   1a226:	2500      	movs	r5, #0
   1a228:	b082      	sub	sp, #8
   1a22a:	ac02      	add	r4, sp, #8
   1a22c:	f844 5d04 	str.w	r5, [r4, #-4]!
   1a230:	4606      	mov	r6, r0
   1a232:	460d      	mov	r5, r1
   1a234:	4620      	mov	r0, r4
   1a236:	4619      	mov	r1, r3
   1a238:	4614      	mov	r4, r2
   1a23a:	f7ff ffa3 	bl	1a184 <rpc_ip_client_request_alloc>
   1a23e:	b960      	cbnz	r0, 1a25a <ip_interface_request_create+0x36>
   1a240:	9b01      	ldr	r3, [sp, #4]
   1a242:	2208      	movs	r2, #8
   1a244:	7258      	strb	r0, [r3, #9]
   1a246:	7298      	strb	r0, [r3, #10]
   1a248:	72d8      	strb	r0, [r3, #11]
   1a24a:	4618      	mov	r0, r3
   1a24c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1a250:	60dc      	str	r4, [r3, #12]
   1a252:	611d      	str	r5, [r3, #16]
   1a254:	721a      	strb	r2, [r3, #8]
   1a256:	b002      	add	sp, #8
   1a258:	bd70      	pop	{r4, r5, r6, pc}
   1a25a:	9b01      	ldr	r3, [sp, #4]
   1a25c:	4618      	mov	r0, r3
   1a25e:	b002      	add	sp, #8
   1a260:	bd70      	pop	{r4, r5, r6, pc}
   1a262:	bf00      	nop

0001a264 <ip_interface_request_send>:
   1a264:	b570      	push	{r4, r5, r6, lr}
   1a266:	460c      	mov	r4, r1
   1a268:	4605      	mov	r5, r0
   1a26a:	4611      	mov	r1, r2
   1a26c:	4620      	mov	r0, r4
   1a26e:	461e      	mov	r6, r3
   1a270:	f7ff ff9c 	bl	1a1ac <rpc_ip_client_request_send>
   1a274:	b900      	cbnz	r0, 1a278 <ip_interface_request_send+0x14>
   1a276:	bd70      	pop	{r4, r5, r6, pc}
   1a278:	6820      	ldr	r0, [r4, #0]
   1a27a:	b108      	cbz	r0, 1a280 <ip_interface_request_send+0x1c>
   1a27c:	f7ff ffb4 	bl	1a1e8 <rpc_ip_client_data_free>
   1a280:	4620      	mov	r0, r4
   1a282:	f7ff ffa9 	bl	1a1d8 <rpc_ip_client_message_free>
   1a286:	602e      	str	r6, [r5, #0]
   1a288:	2023      	movs	r0, #35	; 0x23
   1a28a:	bd70      	pop	{r4, r5, r6, pc}

0001a28c <ip_interface_wait>:
   1a28c:	b538      	push	{r3, r4, r5, lr}
   1a28e:	4605      	mov	r5, r0
   1a290:	f005 fd74 	bl	1fd7c <interface_socket_wait>
   1a294:	4604      	mov	r4, r0
   1a296:	b108      	cbz	r0, 1a29c <ip_interface_wait+0x10>
   1a298:	4620      	mov	r0, r4
   1a29a:	bd38      	pop	{r3, r4, r5, pc}
   1a29c:	4628      	mov	r0, r5
   1a29e:	f005 fded 	bl	1fe7c <interface_socket_from_handle_get>
   1a2a2:	2800      	cmp	r0, #0
   1a2a4:	d0f8      	beq.n	1a298 <ip_interface_wait+0xc>
   1a2a6:	6844      	ldr	r4, [r0, #4]
   1a2a8:	2c00      	cmp	r4, #0
   1a2aa:	d0f5      	beq.n	1a298 <ip_interface_wait+0xc>
   1a2ac:	2300      	movs	r3, #0
   1a2ae:	6043      	str	r3, [r0, #4]
   1a2b0:	4620      	mov	r0, r4
   1a2b2:	bd38      	pop	{r3, r4, r5, pc}

0001a2b4 <ip_interface_init>:
   1a2b4:	b538      	push	{r3, r4, r5, lr}
   1a2b6:	2300      	movs	r3, #0
   1a2b8:	4d09      	ldr	r5, [pc, #36]	; (1a2e0 <ip_interface_init+0x2c>)
   1a2ba:	4c0a      	ldr	r4, [pc, #40]	; (1a2e4 <ip_interface_init+0x30>)
   1a2bc:	4619      	mov	r1, r3
   1a2be:	2224      	movs	r2, #36	; 0x24
   1a2c0:	4809      	ldr	r0, [pc, #36]	; (1a2e8 <ip_interface_init+0x34>)
   1a2c2:	602b      	str	r3, [r5, #0]
   1a2c4:	6023      	str	r3, [r4, #0]
   1a2c6:	f00c fbab 	bl	26a20 <memset>
   1a2ca:	f7ff ff55 	bl	1a178 <rpc_ip_client_init>
   1a2ce:	b918      	cbnz	r0, 1a2d8 <ip_interface_init+0x24>
   1a2d0:	2201      	movs	r2, #1
   1a2d2:	4b06      	ldr	r3, [pc, #24]	; (1a2ec <ip_interface_init+0x38>)
   1a2d4:	701a      	strb	r2, [r3, #0]
   1a2d6:	bd38      	pop	{r3, r4, r5, pc}
   1a2d8:	f04f 30ff 	mov.w	r0, #4294967295
   1a2dc:	bd38      	pop	{r3, r4, r5, pc}
   1a2de:	bf00      	nop
   1a2e0:	20021fa0 	.word	0x20021fa0
   1a2e4:	20021f9c 	.word	0x20021f9c
   1a2e8:	20021fa4 	.word	0x20021fa4
   1a2ec:	2002a08c 	.word	0x2002a08c

0001a2f0 <ip_interface_open>:
   1a2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2f4:	2500      	movs	r5, #0
   1a2f6:	f04f 37ff 	mov.w	r7, #4294967295
   1a2fa:	4c5e      	ldr	r4, [pc, #376]	; (1a474 <ip_interface_open+0x184>)
   1a2fc:	4606      	mov	r6, r0
   1a2fe:	7820      	ldrb	r0, [r4, #0]
   1a300:	b084      	sub	sp, #16
   1a302:	e9cd 5701 	strd	r5, r7, [sp, #4]
   1a306:	2800      	cmp	r0, #0
   1a308:	f000 80b0 	beq.w	1a46c <ip_interface_open+0x17c>
   1a30c:	4690      	mov	r8, r2
   1a30e:	f026 0208 	bic.w	r2, r6, #8
   1a312:	2a02      	cmp	r2, #2
   1a314:	460c      	mov	r4, r1
   1a316:	d002      	beq.n	1a31e <ip_interface_open+0x2e>
   1a318:	2e05      	cmp	r6, #5
   1a31a:	f040 808d 	bne.w	1a438 <ip_interface_open+0x148>
   1a31e:	1e63      	subs	r3, r4, #1
   1a320:	2b02      	cmp	r3, #2
   1a322:	f200 809d 	bhi.w	1a460 <ip_interface_open+0x170>
   1a326:	f1b8 0f00 	cmp.w	r8, #0
   1a32a:	d159      	bne.n	1a3e0 <ip_interface_open+0xf0>
   1a32c:	2c01      	cmp	r4, #1
   1a32e:	d06f      	beq.n	1a410 <ip_interface_open+0x120>
   1a330:	2c03      	cmp	r4, #3
   1a332:	bf18      	it	ne
   1a334:	f04f 0802 	movne.w	r8, #2
   1a338:	4a4f      	ldr	r2, [pc, #316]	; (1a478 <ip_interface_open+0x188>)
   1a33a:	4621      	mov	r1, r4
   1a33c:	a801      	add	r0, sp, #4
   1a33e:	f005 fc6b 	bl	1fc18 <interface_socket_allocate>
   1a342:	9b01      	ldr	r3, [sp, #4]
   1a344:	4607      	mov	r7, r0
   1a346:	2b00      	cmp	r3, #0
   1a348:	d060      	beq.n	1a40c <ip_interface_open+0x11c>
   1a34a:	2100      	movs	r1, #0
   1a34c:	a804      	add	r0, sp, #16
   1a34e:	f840 1d04 	str.w	r1, [r0, #-4]!
   1a352:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1a356:	f8c3 8014 	str.w	r8, [r3, #20]
   1a35a:	f7ff ff13 	bl	1a184 <rpc_ip_client_request_alloc>
   1a35e:	2800      	cmp	r0, #0
   1a360:	d151      	bne.n	1a406 <ip_interface_open+0x116>
   1a362:	f247 0201 	movw	r2, #28673	; 0x7001
   1a366:	f04f 33ff 	mov.w	r3, #4294967295
   1a36a:	2108      	movs	r1, #8
   1a36c:	9d03      	ldr	r5, [sp, #12]
   1a36e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1a372:	60ea      	str	r2, [r5, #12]
   1a374:	7268      	strb	r0, [r5, #9]
   1a376:	72a8      	strb	r0, [r5, #10]
   1a378:	72e8      	strb	r0, [r5, #11]
   1a37a:	7229      	strb	r1, [r5, #8]
   1a37c:	742b      	strb	r3, [r5, #16]
   1a37e:	746b      	strb	r3, [r5, #17]
   1a380:	74ab      	strb	r3, [r5, #18]
   1a382:	74eb      	strb	r3, [r5, #19]
   1a384:	68ab      	ldr	r3, [r5, #8]
   1a386:	2e05      	cmp	r6, #5
   1a388:	f103 030c 	add.w	r3, r3, #12
   1a38c:	60ab      	str	r3, [r5, #8]
   1a38e:	d003      	beq.n	1a398 <ip_interface_open+0xa8>
   1a390:	2e0a      	cmp	r6, #10
   1a392:	bf14      	ite	ne
   1a394:	2601      	movne	r6, #1
   1a396:	2602      	moveq	r6, #2
   1a398:	616e      	str	r6, [r5, #20]
   1a39a:	f8c5 801c 	str.w	r8, [r5, #28]
   1a39e:	61ac      	str	r4, [r5, #24]
   1a3a0:	f247 0101 	movw	r1, #28673	; 0x7001
   1a3a4:	4628      	mov	r0, r5
   1a3a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1a3aa:	f7ff feff 	bl	1a1ac <rpc_ip_client_request_send>
   1a3ae:	4606      	mov	r6, r0
   1a3b0:	b380      	cbz	r0, 1a414 <ip_interface_open+0x124>
   1a3b2:	6828      	ldr	r0, [r5, #0]
   1a3b4:	b108      	cbz	r0, 1a3ba <ip_interface_open+0xca>
   1a3b6:	f7ff ff17 	bl	1a1e8 <rpc_ip_client_data_free>
   1a3ba:	4628      	mov	r0, r5
   1a3bc:	f7ff ff0c 	bl	1a1d8 <rpc_ip_client_message_free>
   1a3c0:	2301      	movs	r3, #1
   1a3c2:	2523      	movs	r5, #35	; 0x23
   1a3c4:	f8c8 3000 	str.w	r3, [r8]
   1a3c8:	4638      	mov	r0, r7
   1a3ca:	f005 fc89 	bl	1fce0 <interface_socket_free>
   1a3ce:	4628      	mov	r0, r5
   1a3d0:	f7fb fc22 	bl	15c18 <bsd_os_errno_set>
   1a3d4:	f04f 37ff 	mov.w	r7, #4294967295
   1a3d8:	4638      	mov	r0, r7
   1a3da:	b004      	add	sp, #16
   1a3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a3e0:	2c01      	cmp	r4, #1
   1a3e2:	d00a      	beq.n	1a3fa <ip_interface_open+0x10a>
   1a3e4:	2c02      	cmp	r4, #2
   1a3e6:	d10b      	bne.n	1a400 <ip_interface_open+0x110>
   1a3e8:	f1b8 0f02 	cmp.w	r8, #2
   1a3ec:	d0a4      	beq.n	1a338 <ip_interface_open+0x48>
   1a3ee:	2029      	movs	r0, #41	; 0x29
   1a3f0:	f7fb fc12 	bl	15c18 <bsd_os_errno_set>
   1a3f4:	f04f 37ff 	mov.w	r7, #4294967295
   1a3f8:	e7ee      	b.n	1a3d8 <ip_interface_open+0xe8>
   1a3fa:	f1b8 0f01 	cmp.w	r8, #1
   1a3fe:	d1f6      	bne.n	1a3ee <ip_interface_open+0xfe>
   1a400:	f04f 0802 	mov.w	r8, #2
   1a404:	e798      	b.n	1a338 <ip_interface_open+0x48>
   1a406:	9d03      	ldr	r5, [sp, #12]
   1a408:	2d00      	cmp	r5, #0
   1a40a:	d1bb      	bne.n	1a384 <ip_interface_open+0x94>
   1a40c:	2569      	movs	r5, #105	; 0x69
   1a40e:	e7db      	b.n	1a3c8 <ip_interface_open+0xd8>
   1a410:	46a0      	mov	r8, r4
   1a412:	e791      	b.n	1a338 <ip_interface_open+0x48>
   1a414:	ab02      	add	r3, sp, #8
   1a416:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a41a:	2102      	movs	r1, #2
   1a41c:	4638      	mov	r0, r7
   1a41e:	f005 fcad 	bl	1fd7c <interface_socket_wait>
   1a422:	4605      	mov	r5, r0
   1a424:	2800      	cmp	r0, #0
   1a426:	d1cf      	bne.n	1a3c8 <ip_interface_open+0xd8>
   1a428:	4638      	mov	r0, r7
   1a42a:	f005 fd27 	bl	1fe7c <interface_socket_from_handle_get>
   1a42e:	b138      	cbz	r0, 1a440 <ip_interface_open+0x150>
   1a430:	6845      	ldr	r5, [r0, #4]
   1a432:	b12d      	cbz	r5, 1a440 <ip_interface_open+0x150>
   1a434:	6046      	str	r6, [r0, #4]
   1a436:	e7c7      	b.n	1a3c8 <ip_interface_open+0xd8>
   1a438:	202f      	movs	r0, #47	; 0x2f
   1a43a:	f7fb fbed 	bl	15c18 <bsd_os_errno_set>
   1a43e:	e7cb      	b.n	1a3d8 <ip_interface_open+0xe8>
   1a440:	3c02      	subs	r4, #2
   1a442:	2c01      	cmp	r4, #1
   1a444:	d8c8      	bhi.n	1a3d8 <ip_interface_open+0xe8>
   1a446:	4638      	mov	r0, r7
   1a448:	9b01      	ldr	r3, [sp, #4]
   1a44a:	681a      	ldr	r2, [r3, #0]
   1a44c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1a450:	601a      	str	r2, [r3, #0]
   1a452:	681a      	ldr	r2, [r3, #0]
   1a454:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1a458:	601a      	str	r2, [r3, #0]
   1a45a:	b004      	add	sp, #16
   1a45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a460:	2016      	movs	r0, #22
   1a462:	f7fb fbd9 	bl	15c18 <bsd_os_errno_set>
   1a466:	f04f 37ff 	mov.w	r7, #4294967295
   1a46a:	e7b5      	b.n	1a3d8 <ip_interface_open+0xe8>
   1a46c:	2005      	movs	r0, #5
   1a46e:	f7fb fbd3 	bl	15c18 <bsd_os_errno_set>
   1a472:	e7b1      	b.n	1a3d8 <ip_interface_open+0xe8>
   1a474:	2002a08c 	.word	0x2002a08c
   1a478:	0001a1f9 	.word	0x0001a1f9

0001a47c <ip_interface_close>:
   1a47c:	f04f 33ff 	mov.w	r3, #4294967295
   1a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a484:	b082      	sub	sp, #8
   1a486:	4606      	mov	r6, r0
   1a488:	9300      	str	r3, [sp, #0]
   1a48a:	f005 fcf7 	bl	1fe7c <interface_socket_from_handle_get>
   1a48e:	2800      	cmp	r0, #0
   1a490:	d062      	beq.n	1a558 <ip_interface_close+0xdc>
   1a492:	4604      	mov	r4, r0
   1a494:	2100      	movs	r1, #0
   1a496:	a802      	add	r0, sp, #8
   1a498:	6827      	ldr	r7, [r4, #0]
   1a49a:	f840 1d04 	str.w	r1, [r0, #-4]!
   1a49e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1a4a2:	f7ff fe6f 	bl	1a184 <rpc_ip_client_request_alloc>
   1a4a6:	2800      	cmp	r0, #0
   1a4a8:	d139      	bne.n	1a51e <ip_interface_close+0xa2>
   1a4aa:	f247 0309 	movw	r3, #28681	; 0x7009
   1a4ae:	2208      	movs	r2, #8
   1a4b0:	9d01      	ldr	r5, [sp, #4]
   1a4b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1a4b6:	60eb      	str	r3, [r5, #12]
   1a4b8:	f8c5 8010 	str.w	r8, [r5, #16]
   1a4bc:	7268      	strb	r0, [r5, #9]
   1a4be:	72a8      	strb	r0, [r5, #10]
   1a4c0:	72e8      	strb	r0, [r5, #11]
   1a4c2:	722a      	strb	r2, [r5, #8]
   1a4c4:	6823      	ldr	r3, [r4, #0]
   1a4c6:	f247 0109 	movw	r1, #28681	; 0x7009
   1a4ca:	0c1b      	lsrs	r3, r3, #16
   1a4cc:	041b      	lsls	r3, r3, #16
   1a4ce:	f043 030d 	orr.w	r3, r3, #13
   1a4d2:	6023      	str	r3, [r4, #0]
   1a4d4:	6823      	ldr	r3, [r4, #0]
   1a4d6:	4628      	mov	r0, r5
   1a4d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1a4dc:	6023      	str	r3, [r4, #0]
   1a4de:	6823      	ldr	r3, [r4, #0]
   1a4e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a4e4:	6023      	str	r3, [r4, #0]
   1a4e6:	f7ff fe61 	bl	1a1ac <rpc_ip_client_request_send>
   1a4ea:	bb38      	cbnz	r0, 1a53c <ip_interface_close+0xc0>
   1a4ec:	466b      	mov	r3, sp
   1a4ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a4f2:	210e      	movs	r1, #14
   1a4f4:	4630      	mov	r0, r6
   1a4f6:	f005 fc41 	bl	1fd7c <interface_socket_wait>
   1a4fa:	4604      	mov	r4, r0
   1a4fc:	b1a0      	cbz	r0, 1a528 <ip_interface_close+0xac>
   1a4fe:	4c17      	ldr	r4, [pc, #92]	; (1a55c <ip_interface_close+0xe0>)
   1a500:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   1a504:	b120      	cbz	r0, 1a510 <ip_interface_close+0x94>
   1a506:	f7ff fe67 	bl	1a1d8 <rpc_ip_client_message_free>
   1a50a:	2300      	movs	r3, #0
   1a50c:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1a510:	4630      	mov	r0, r6
   1a512:	f005 fbe5 	bl	1fce0 <interface_socket_free>
   1a516:	2000      	movs	r0, #0
   1a518:	b002      	add	sp, #8
   1a51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a51e:	9d01      	ldr	r5, [sp, #4]
   1a520:	200c      	movs	r0, #12
   1a522:	2d00      	cmp	r5, #0
   1a524:	d1ce      	bne.n	1a4c4 <ip_interface_close+0x48>
   1a526:	e012      	b.n	1a54e <ip_interface_close+0xd2>
   1a528:	4630      	mov	r0, r6
   1a52a:	f005 fca7 	bl	1fe7c <interface_socket_from_handle_get>
   1a52e:	2800      	cmp	r0, #0
   1a530:	d0e5      	beq.n	1a4fe <ip_interface_close+0x82>
   1a532:	6843      	ldr	r3, [r0, #4]
   1a534:	2b00      	cmp	r3, #0
   1a536:	d0e2      	beq.n	1a4fe <ip_interface_close+0x82>
   1a538:	6044      	str	r4, [r0, #4]
   1a53a:	e7e0      	b.n	1a4fe <ip_interface_close+0x82>
   1a53c:	6828      	ldr	r0, [r5, #0]
   1a53e:	b108      	cbz	r0, 1a544 <ip_interface_close+0xc8>
   1a540:	f7ff fe52 	bl	1a1e8 <rpc_ip_client_data_free>
   1a544:	4628      	mov	r0, r5
   1a546:	f7ff fe47 	bl	1a1d8 <rpc_ip_client_message_free>
   1a54a:	2023      	movs	r0, #35	; 0x23
   1a54c:	6027      	str	r7, [r4, #0]
   1a54e:	f7fb fb63 	bl	15c18 <bsd_os_errno_set>
   1a552:	f04f 30ff 	mov.w	r0, #4294967295
   1a556:	e7df      	b.n	1a518 <ip_interface_close+0x9c>
   1a558:	2009      	movs	r0, #9
   1a55a:	e7f8      	b.n	1a54e <ip_interface_close+0xd2>
   1a55c:	20021fa4 	.word	0x20021fa4

0001a560 <ip_interface_sendto>:
   1a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a564:	2400      	movs	r4, #0
   1a566:	b089      	sub	sp, #36	; 0x24
   1a568:	9102      	str	r1, [sp, #8]
   1a56a:	4615      	mov	r5, r2
   1a56c:	4699      	mov	r9, r3
   1a56e:	9406      	str	r4, [sp, #24]
   1a570:	4607      	mov	r7, r0
   1a572:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1a574:	f005 fc82 	bl	1fe7c <interface_socket_from_handle_get>
   1a578:	2800      	cmp	r0, #0
   1a57a:	f000 814c 	beq.w	1a816 <ip_interface_sendto+0x2b6>
   1a57e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1a582:	f300 8139 	bgt.w	1a7f8 <ip_interface_sendto+0x298>
   1a586:	6903      	ldr	r3, [r0, #16]
   1a588:	4604      	mov	r4, r0
   1a58a:	2b01      	cmp	r3, #1
   1a58c:	f000 80ea 	beq.w	1a764 <ip_interface_sendto+0x204>
   1a590:	6822      	ldr	r2, [r4, #0]
   1a592:	0391      	lsls	r1, r2, #14
   1a594:	d56a      	bpl.n	1a66c <ip_interface_sendto+0x10c>
   1a596:	f1b9 0f00 	cmp.w	r9, #0
   1a59a:	f000 80f3 	beq.w	1a784 <ip_interface_sendto+0x224>
   1a59e:	f019 0f02 	tst.w	r9, #2
   1a5a2:	f000 8133 	beq.w	1a80c <ip_interface_sendto+0x2ac>
   1a5a6:	2300      	movs	r3, #0
   1a5a8:	9303      	str	r3, [sp, #12]
   1a5aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a5ac:	f247 0806 	movw	r8, #28678	; 0x7006
   1a5b0:	2b00      	cmp	r3, #0
   1a5b2:	bf08      	it	eq
   1a5b4:	f04f 33ff 	moveq.w	r3, #4294967295
   1a5b8:	f04f 0b0c 	mov.w	fp, #12
   1a5bc:	4a9a      	ldr	r2, [pc, #616]	; (1a828 <ip_interface_sendto+0x2c8>)
   1a5be:	9307      	str	r3, [sp, #28]
   1a5c0:	043b      	lsls	r3, r7, #16
   1a5c2:	9200      	str	r2, [sp, #0]
   1a5c4:	9304      	str	r3, [sp, #16]
   1a5c6:	4629      	mov	r1, r5
   1a5c8:	a806      	add	r0, sp, #24
   1a5ca:	f7ff fddb 	bl	1a184 <rpc_ip_client_request_alloc>
   1a5ce:	2804      	cmp	r0, #4
   1a5d0:	f000 8098 	beq.w	1a704 <ip_interface_sendto+0x1a4>
   1a5d4:	2800      	cmp	r0, #0
   1a5d6:	f040 8123 	bne.w	1a820 <ip_interface_sendto+0x2c0>
   1a5da:	9b06      	ldr	r3, [sp, #24]
   1a5dc:	f883 b008 	strb.w	fp, [r3, #8]
   1a5e0:	7258      	strb	r0, [r3, #9]
   1a5e2:	7298      	strb	r0, [r3, #10]
   1a5e4:	72d8      	strb	r0, [r3, #11]
   1a5e6:	2e00      	cmp	r6, #0
   1a5e8:	d053      	beq.n	1a692 <ip_interface_sendto+0x132>
   1a5ea:	68e2      	ldr	r2, [r4, #12]
   1a5ec:	6871      	ldr	r1, [r6, #4]
   1a5ee:	428a      	cmp	r2, r1
   1a5f0:	f040 809a 	bne.w	1a728 <ip_interface_sendto+0x1c8>
   1a5f4:	7831      	ldrb	r1, [r6, #0]
   1a5f6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1a5f8:	4288      	cmp	r0, r1
   1a5fa:	d10a      	bne.n	1a612 <ip_interface_sendto+0xb2>
   1a5fc:	2a02      	cmp	r2, #2
   1a5fe:	f103 001c 	add.w	r0, r3, #28
   1a602:	f000 80e7 	beq.w	1a7d4 <ip_interface_sendto+0x274>
   1a606:	2a0a      	cmp	r2, #10
   1a608:	d103      	bne.n	1a612 <ip_interface_sendto+0xb2>
   1a60a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a60c:	2a24      	cmp	r2, #36	; 0x24
   1a60e:	f000 80ce 	beq.w	1a7ae <ip_interface_sendto+0x24e>
   1a612:	f04f 0a16 	mov.w	sl, #22
   1a616:	6818      	ldr	r0, [r3, #0]
   1a618:	b110      	cbz	r0, 1a620 <ip_interface_sendto+0xc0>
   1a61a:	f7ff fde5 	bl	1a1e8 <rpc_ip_client_data_free>
   1a61e:	9b06      	ldr	r3, [sp, #24]
   1a620:	4618      	mov	r0, r3
   1a622:	f7ff fdd9 	bl	1a1d8 <rpc_ip_client_message_free>
   1a626:	6823      	ldr	r3, [r4, #0]
   1a628:	0318      	lsls	r0, r3, #12
   1a62a:	d40b      	bmi.n	1a644 <ip_interface_sendto+0xe4>
   1a62c:	6823      	ldr	r3, [r4, #0]
   1a62e:	b29b      	uxth	r3, r3
   1a630:	2b0d      	cmp	r3, #13
   1a632:	d007      	beq.n	1a644 <ip_interface_sendto+0xe4>
   1a634:	6823      	ldr	r3, [r4, #0]
   1a636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1a63a:	6023      	str	r3, [r4, #0]
   1a63c:	6823      	ldr	r3, [r4, #0]
   1a63e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a642:	6023      	str	r3, [r4, #0]
   1a644:	f1ba 0f00 	cmp.w	sl, #0
   1a648:	f040 8093 	bne.w	1a772 <ip_interface_sendto+0x212>
   1a64c:	6823      	ldr	r3, [r4, #0]
   1a64e:	0119      	lsls	r1, r3, #4
   1a650:	d56d      	bpl.n	1a72e <ip_interface_sendto+0x1ce>
   1a652:	6823      	ldr	r3, [r4, #0]
   1a654:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1a658:	6023      	str	r3, [r4, #0]
   1a65a:	9b00      	ldr	r3, [sp, #0]
   1a65c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1a660:	2800      	cmp	r0, #0
   1a662:	d168      	bne.n	1a736 <ip_interface_sendto+0x1d6>
   1a664:	4628      	mov	r0, r5
   1a666:	b009      	add	sp, #36	; 0x24
   1a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a66c:	6822      	ldr	r2, [r4, #0]
   1a66e:	0092      	lsls	r2, r2, #2
   1a670:	d406      	bmi.n	1a680 <ip_interface_sendto+0x120>
   1a672:	2b01      	cmp	r3, #1
   1a674:	f000 8095 	beq.w	1a7a2 <ip_interface_sendto+0x242>
   1a678:	6823      	ldr	r3, [r4, #0]
   1a67a:	031b      	lsls	r3, r3, #12
   1a67c:	f140 80b7 	bpl.w	1a7ee <ip_interface_sendto+0x28e>
   1a680:	6823      	ldr	r3, [r4, #0]
   1a682:	031e      	lsls	r6, r3, #12
   1a684:	f140 80bd 	bpl.w	1a802 <ip_interface_sendto+0x2a2>
   1a688:	4b67      	ldr	r3, [pc, #412]	; (1a828 <ip_interface_sendto+0x2c8>)
   1a68a:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1a68e:	9300      	str	r3, [sp, #0]
   1a690:	e7d8      	b.n	1a644 <ip_interface_sendto+0xe4>
   1a692:	4642      	mov	r2, r8
   1a694:	f8c3 9014 	str.w	r9, [r3, #20]
   1a698:	69a1      	ldr	r1, [r4, #24]
   1a69a:	9804      	ldr	r0, [sp, #16]
   1a69c:	6119      	str	r1, [r3, #16]
   1a69e:	9902      	ldr	r1, [sp, #8]
   1a6a0:	4302      	orrs	r2, r0
   1a6a2:	60da      	str	r2, [r3, #12]
   1a6a4:	605d      	str	r5, [r3, #4]
   1a6a6:	b119      	cbz	r1, 1a6b0 <ip_interface_sendto+0x150>
   1a6a8:	6818      	ldr	r0, [r3, #0]
   1a6aa:	462a      	mov	r2, r5
   1a6ac:	f00c f9ab 	bl	26a06 <memcpy>
   1a6b0:	6823      	ldr	r3, [r4, #0]
   1a6b2:	4641      	mov	r1, r8
   1a6b4:	9305      	str	r3, [sp, #20]
   1a6b6:	6823      	ldr	r3, [r4, #0]
   1a6b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1a6bc:	6023      	str	r3, [r4, #0]
   1a6be:	6823      	ldr	r3, [r4, #0]
   1a6c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1a6c4:	6023      	str	r3, [r4, #0]
   1a6c6:	9b06      	ldr	r3, [sp, #24]
   1a6c8:	4618      	mov	r0, r3
   1a6ca:	9301      	str	r3, [sp, #4]
   1a6cc:	f7ff fd6e 	bl	1a1ac <rpc_ip_client_request_send>
   1a6d0:	9b01      	ldr	r3, [sp, #4]
   1a6d2:	4682      	mov	sl, r0
   1a6d4:	2800      	cmp	r0, #0
   1a6d6:	d138      	bne.n	1a74a <ip_interface_sendto+0x1ea>
   1a6d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a6dc:	ab07      	add	r3, sp, #28
   1a6de:	4611      	mov	r1, r2
   1a6e0:	4638      	mov	r0, r7
   1a6e2:	f005 fb4b 	bl	1fd7c <interface_socket_wait>
   1a6e6:	4603      	mov	r3, r0
   1a6e8:	b198      	cbz	r0, 1a712 <ip_interface_sendto+0x1b2>
   1a6ea:	6822      	ldr	r2, [r4, #0]
   1a6ec:	0312      	lsls	r2, r2, #12
   1a6ee:	d455      	bmi.n	1a79c <ip_interface_sendto+0x23c>
   1a6f0:	2b3c      	cmp	r3, #60	; 0x3c
   1a6f2:	d017      	beq.n	1a724 <ip_interface_sendto+0x1c4>
   1a6f4:	2b0c      	cmp	r3, #12
   1a6f6:	d115      	bne.n	1a724 <ip_interface_sendto+0x1c4>
   1a6f8:	9b00      	ldr	r3, [sp, #0]
   1a6fa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1a6fe:	b108      	cbz	r0, 1a704 <ip_interface_sendto+0x1a4>
   1a700:	f7ff fd6a 	bl	1a1d8 <rpc_ip_client_message_free>
   1a704:	9b03      	ldr	r3, [sp, #12]
   1a706:	2b00      	cmp	r3, #0
   1a708:	f47f af5d 	bne.w	1a5c6 <ip_interface_sendto+0x66>
   1a70c:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1a710:	e789      	b.n	1a626 <ip_interface_sendto+0xc6>
   1a712:	9001      	str	r0, [sp, #4]
   1a714:	4638      	mov	r0, r7
   1a716:	f005 fbb1 	bl	1fe7c <interface_socket_from_handle_get>
   1a71a:	9b01      	ldr	r3, [sp, #4]
   1a71c:	b110      	cbz	r0, 1a724 <ip_interface_sendto+0x1c4>
   1a71e:	6843      	ldr	r3, [r0, #4]
   1a720:	2b00      	cmp	r3, #0
   1a722:	d136      	bne.n	1a792 <ip_interface_sendto+0x232>
   1a724:	469a      	mov	sl, r3
   1a726:	e77e      	b.n	1a626 <ip_interface_sendto+0xc6>
   1a728:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   1a72c:	e773      	b.n	1a616 <ip_interface_sendto+0xb6>
   1a72e:	9b00      	ldr	r3, [sp, #0]
   1a730:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1a734:	6985      	ldr	r5, [r0, #24]
   1a736:	f7ff fd4f 	bl	1a1d8 <rpc_ip_client_message_free>
   1a73a:	2300      	movs	r3, #0
   1a73c:	4628      	mov	r0, r5
   1a73e:	9a00      	ldr	r2, [sp, #0]
   1a740:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   1a744:	b009      	add	sp, #36	; 0x24
   1a746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a74a:	6818      	ldr	r0, [r3, #0]
   1a74c:	469a      	mov	sl, r3
   1a74e:	b108      	cbz	r0, 1a754 <ip_interface_sendto+0x1f4>
   1a750:	f7ff fd4a 	bl	1a1e8 <rpc_ip_client_data_free>
   1a754:	4650      	mov	r0, sl
   1a756:	f7ff fd3f 	bl	1a1d8 <rpc_ip_client_message_free>
   1a75a:	9b05      	ldr	r3, [sp, #20]
   1a75c:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1a760:	6023      	str	r3, [r4, #0]
   1a762:	e760      	b.n	1a626 <ip_interface_sendto+0xc6>
   1a764:	2e00      	cmp	r6, #0
   1a766:	f43f af13 	beq.w	1a590 <ip_interface_sendto+0x30>
   1a76a:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1a76e:	4b2e      	ldr	r3, [pc, #184]	; (1a828 <ip_interface_sendto+0x2c8>)
   1a770:	9300      	str	r3, [sp, #0]
   1a772:	4650      	mov	r0, sl
   1a774:	f7fb fa50 	bl	15c18 <bsd_os_errno_set>
   1a778:	9b00      	ldr	r3, [sp, #0]
   1a77a:	f04f 35ff 	mov.w	r5, #4294967295
   1a77e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1a782:	e76d      	b.n	1a660 <ip_interface_sendto+0x100>
   1a784:	6823      	ldr	r3, [r4, #0]
   1a786:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   1a78a:	f3c3 7300 	ubfx	r3, r3, #28, #1
   1a78e:	9303      	str	r3, [sp, #12]
   1a790:	e70b      	b.n	1a5aa <ip_interface_sendto+0x4a>
   1a792:	f8c0 a004 	str.w	sl, [r0, #4]
   1a796:	6822      	ldr	r2, [r4, #0]
   1a798:	0312      	lsls	r2, r2, #12
   1a79a:	d5a9      	bpl.n	1a6f0 <ip_interface_sendto+0x190>
   1a79c:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1a7a0:	e741      	b.n	1a626 <ip_interface_sendto+0xc6>
   1a7a2:	6823      	ldr	r3, [r4, #0]
   1a7a4:	b29b      	uxth	r3, r3
   1a7a6:	2b05      	cmp	r3, #5
   1a7a8:	f47f af6a 	bne.w	1a680 <ip_interface_sendto+0x120>
   1a7ac:	e764      	b.n	1a678 <ip_interface_sendto+0x118>
   1a7ae:	2210      	movs	r2, #16
   1a7b0:	8931      	ldrh	r1, [r6, #8]
   1a7b2:	835a      	strh	r2, [r3, #26]
   1a7b4:	8319      	strh	r1, [r3, #24]
   1a7b6:	18b1      	adds	r1, r6, r2
   1a7b8:	f00c f925 	bl	26a06 <memcpy>
   1a7bc:	f247 0207 	movw	r2, #28679	; 0x7007
   1a7c0:	9b06      	ldr	r3, [sp, #24]
   1a7c2:	4690      	mov	r8, r2
   1a7c4:	6899      	ldr	r1, [r3, #8]
   1a7c6:	8b58      	ldrh	r0, [r3, #26]
   1a7c8:	3104      	adds	r1, #4
   1a7ca:	4401      	add	r1, r0
   1a7cc:	f8c3 9014 	str.w	r9, [r3, #20]
   1a7d0:	6099      	str	r1, [r3, #8]
   1a7d2:	e761      	b.n	1a698 <ip_interface_sendto+0x138>
   1a7d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a7d6:	2a10      	cmp	r2, #16
   1a7d8:	f47f af1b 	bne.w	1a612 <ip_interface_sendto+0xb2>
   1a7dc:	2204      	movs	r2, #4
   1a7de:	8931      	ldrh	r1, [r6, #8]
   1a7e0:	835a      	strh	r2, [r3, #26]
   1a7e2:	8319      	strh	r1, [r3, #24]
   1a7e4:	f106 010c 	add.w	r1, r6, #12
   1a7e8:	f00c f90d 	bl	26a06 <memcpy>
   1a7ec:	e7e6      	b.n	1a7bc <ip_interface_sendto+0x25c>
   1a7ee:	4b0e      	ldr	r3, [pc, #56]	; (1a828 <ip_interface_sendto+0x2c8>)
   1a7f0:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1a7f4:	9300      	str	r3, [sp, #0]
   1a7f6:	e7bc      	b.n	1a772 <ip_interface_sendto+0x212>
   1a7f8:	4b0b      	ldr	r3, [pc, #44]	; (1a828 <ip_interface_sendto+0x2c8>)
   1a7fa:	f04f 0a28 	mov.w	sl, #40	; 0x28
   1a7fe:	9300      	str	r3, [sp, #0]
   1a800:	e7b7      	b.n	1a772 <ip_interface_sendto+0x212>
   1a802:	4b09      	ldr	r3, [pc, #36]	; (1a828 <ip_interface_sendto+0x2c8>)
   1a804:	f04f 0a39 	mov.w	sl, #57	; 0x39
   1a808:	9300      	str	r3, [sp, #0]
   1a80a:	e7b2      	b.n	1a772 <ip_interface_sendto+0x212>
   1a80c:	4b06      	ldr	r3, [pc, #24]	; (1a828 <ip_interface_sendto+0x2c8>)
   1a80e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1a812:	9300      	str	r3, [sp, #0]
   1a814:	e7ad      	b.n	1a772 <ip_interface_sendto+0x212>
   1a816:	4b04      	ldr	r3, [pc, #16]	; (1a828 <ip_interface_sendto+0x2c8>)
   1a818:	f04f 0a09 	mov.w	sl, #9
   1a81c:	9300      	str	r3, [sp, #0]
   1a81e:	e7a8      	b.n	1a772 <ip_interface_sendto+0x212>
   1a820:	f04f 0a0c 	mov.w	sl, #12
   1a824:	e6ff      	b.n	1a626 <ip_interface_sendto+0xc6>
   1a826:	bf00      	nop
   1a828:	20021fa4 	.word	0x20021fa4

0001a82c <ip_interface_recvfrom>:
   1a82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a830:	b087      	sub	sp, #28
   1a832:	2a00      	cmp	r2, #0
   1a834:	f000 8112 	beq.w	1aa5c <ip_interface_recvfrom+0x230>
   1a838:	4680      	mov	r8, r0
   1a83a:	468b      	mov	fp, r1
   1a83c:	469a      	mov	sl, r3
   1a83e:	4691      	mov	r9, r2
   1a840:	b11b      	cbz	r3, 1a84a <ip_interface_recvfrom+0x1e>
   1a842:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   1a846:	f000 8107 	beq.w	1aa58 <ip_interface_recvfrom+0x22c>
   1a84a:	4640      	mov	r0, r8
   1a84c:	f005 fb16 	bl	1fe7c <interface_socket_from_handle_get>
   1a850:	4604      	mov	r4, r0
   1a852:	2800      	cmp	r0, #0
   1a854:	f000 8104 	beq.w	1aa60 <ip_interface_recvfrom+0x234>
   1a858:	6803      	ldr	r3, [r0, #0]
   1a85a:	02db      	lsls	r3, r3, #11
   1a85c:	d562      	bpl.n	1a924 <ip_interface_recvfrom+0xf8>
   1a85e:	f01a 0f02 	tst.w	sl, #2
   1a862:	bf18      	it	ne
   1a864:	2600      	movne	r6, #0
   1a866:	f04f 35ff 	mov.w	r5, #4294967295
   1a86a:	bf08      	it	eq
   1a86c:	6806      	ldreq	r6, [r0, #0]
   1a86e:	f00a 0310 	and.w	r3, sl, #16
   1a872:	bf04      	itt	eq
   1a874:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   1a878:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   1a87c:	9301      	str	r3, [sp, #4]
   1a87e:	6823      	ldr	r3, [r4, #0]
   1a880:	03df      	lsls	r7, r3, #15
   1a882:	d567      	bpl.n	1a954 <ip_interface_recvfrom+0x128>
   1a884:	6823      	ldr	r3, [r4, #0]
   1a886:	69e0      	ldr	r0, [r4, #28]
   1a888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1a88c:	6023      	str	r3, [r4, #0]
   1a88e:	6803      	ldr	r3, [r0, #0]
   1a890:	68db      	ldr	r3, [r3, #12]
   1a892:	4798      	blx	r3
   1a894:	4605      	mov	r5, r0
   1a896:	3001      	adds	r0, #1
   1a898:	d07d      	beq.n	1a996 <ip_interface_recvfrom+0x16a>
   1a89a:	45a9      	cmp	r9, r5
   1a89c:	dd03      	ble.n	1a8a6 <ip_interface_recvfrom+0x7a>
   1a89e:	6923      	ldr	r3, [r4, #16]
   1a8a0:	2b01      	cmp	r3, #1
   1a8a2:	f000 80a3 	beq.w	1a9ec <ip_interface_recvfrom+0x1c0>
   1a8a6:	f04f 0800 	mov.w	r8, #0
   1a8aa:	af02      	add	r7, sp, #8
   1a8ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a8ae:	b103      	cbz	r3, 1a8b2 <ip_interface_recvfrom+0x86>
   1a8b0:	681b      	ldr	r3, [r3, #0]
   1a8b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a8b4:	e9cd b902 	strd	fp, r9, [sp, #8]
   1a8b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a8bc:	69e0      	ldr	r0, [r4, #28]
   1a8be:	4639      	mov	r1, r7
   1a8c0:	6803      	ldr	r3, [r0, #0]
   1a8c2:	4652      	mov	r2, sl
   1a8c4:	689b      	ldr	r3, [r3, #8]
   1a8c6:	4798      	blx	r3
   1a8c8:	4605      	mov	r5, r0
   1a8ca:	69e0      	ldr	r0, [r4, #28]
   1a8cc:	1c6b      	adds	r3, r5, #1
   1a8ce:	6803      	ldr	r3, [r0, #0]
   1a8d0:	bf18      	it	ne
   1a8d2:	2701      	movne	r7, #1
   1a8d4:	68db      	ldr	r3, [r3, #12]
   1a8d6:	bf0a      	itet	eq
   1a8d8:	2700      	moveq	r7, #0
   1a8da:	2600      	movne	r6, #0
   1a8dc:	2623      	moveq	r6, #35	; 0x23
   1a8de:	4798      	blx	r3
   1a8e0:	3001      	adds	r0, #1
   1a8e2:	d132      	bne.n	1a94a <ip_interface_recvfrom+0x11e>
   1a8e4:	f1b8 0f00 	cmp.w	r8, #0
   1a8e8:	f000 80b0 	beq.w	1aa4c <ip_interface_recvfrom+0x220>
   1a8ec:	2f00      	cmp	r7, #0
   1a8ee:	f000 80a1 	beq.w	1aa34 <ip_interface_recvfrom+0x208>
   1a8f2:	6823      	ldr	r3, [r4, #0]
   1a8f4:	0318      	lsls	r0, r3, #12
   1a8f6:	d506      	bpl.n	1a906 <ip_interface_recvfrom+0xda>
   1a8f8:	6823      	ldr	r3, [r4, #0]
   1a8fa:	b29b      	uxth	r3, r3
   1a8fc:	2b0d      	cmp	r3, #13
   1a8fe:	d002      	beq.n	1a906 <ip_interface_recvfrom+0xda>
   1a900:	6923      	ldr	r3, [r4, #16]
   1a902:	2b01      	cmp	r3, #1
   1a904:	d021      	beq.n	1a94a <ip_interface_recvfrom+0x11e>
   1a906:	6823      	ldr	r3, [r4, #0]
   1a908:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1a90c:	6823      	ldr	r3, [r4, #0]
   1a90e:	f040 80a9 	bne.w	1aa64 <ip_interface_recvfrom+0x238>
   1a912:	0319      	lsls	r1, r3, #12
   1a914:	d473      	bmi.n	1a9fe <ip_interface_recvfrom+0x1d2>
   1a916:	2e00      	cmp	r6, #0
   1a918:	f040 8086 	bne.w	1aa28 <ip_interface_recvfrom+0x1fc>
   1a91c:	4628      	mov	r0, r5
   1a91e:	b007      	add	sp, #28
   1a920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a924:	6803      	ldr	r3, [r0, #0]
   1a926:	b29b      	uxth	r3, r3
   1a928:	2b06      	cmp	r3, #6
   1a92a:	d071      	beq.n	1aa10 <ip_interface_recvfrom+0x1e4>
   1a92c:	6803      	ldr	r3, [r0, #0]
   1a92e:	b29b      	uxth	r3, r3
   1a930:	2b07      	cmp	r3, #7
   1a932:	bf0c      	ite	eq
   1a934:	2609      	moveq	r6, #9
   1a936:	2639      	movne	r6, #57	; 0x39
   1a938:	69e0      	ldr	r0, [r4, #28]
   1a93a:	6803      	ldr	r3, [r0, #0]
   1a93c:	68db      	ldr	r3, [r3, #12]
   1a93e:	4798      	blx	r3
   1a940:	1c43      	adds	r3, r0, #1
   1a942:	4605      	mov	r5, r0
   1a944:	d0df      	beq.n	1a906 <ip_interface_recvfrom+0xda>
   1a946:	f04f 35ff 	mov.w	r5, #4294967295
   1a94a:	6823      	ldr	r3, [r4, #0]
   1a94c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1a950:	6023      	str	r3, [r4, #0]
   1a952:	e7e0      	b.n	1a916 <ip_interface_recvfrom+0xea>
   1a954:	2e00      	cmp	r6, #0
   1a956:	d07d      	beq.n	1aa54 <ip_interface_recvfrom+0x228>
   1a958:	6a26      	ldr	r6, [r4, #32]
   1a95a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a95e:	2e00      	cmp	r6, #0
   1a960:	bf08      	it	eq
   1a962:	f04f 36ff 	moveq.w	r6, #4294967295
   1a966:	af02      	add	r7, sp, #8
   1a968:	463b      	mov	r3, r7
   1a96a:	4611      	mov	r1, r2
   1a96c:	4640      	mov	r0, r8
   1a96e:	9602      	str	r6, [sp, #8]
   1a970:	f005 fa04 	bl	1fd7c <interface_socket_wait>
   1a974:	4606      	mov	r6, r0
   1a976:	b350      	cbz	r0, 1a9ce <ip_interface_recvfrom+0x1a2>
   1a978:	6823      	ldr	r3, [r4, #0]
   1a97a:	031a      	lsls	r2, r3, #12
   1a97c:	d532      	bpl.n	1a9e4 <ip_interface_recvfrom+0x1b8>
   1a97e:	6823      	ldr	r3, [r4, #0]
   1a980:	b29b      	uxth	r3, r3
   1a982:	2b0d      	cmp	r3, #13
   1a984:	d02e      	beq.n	1a9e4 <ip_interface_recvfrom+0x1b8>
   1a986:	6923      	ldr	r3, [r4, #16]
   1a988:	f1a3 0801 	sub.w	r8, r3, #1
   1a98c:	fab8 f888 	clz	r8, r8
   1a990:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1a994:	e78a      	b.n	1a8ac <ip_interface_recvfrom+0x80>
   1a996:	6823      	ldr	r3, [r4, #0]
   1a998:	031a      	lsls	r2, r3, #12
   1a99a:	d5db      	bpl.n	1a954 <ip_interface_recvfrom+0x128>
   1a99c:	6823      	ldr	r3, [r4, #0]
   1a99e:	b29b      	uxth	r3, r3
   1a9a0:	2b0d      	cmp	r3, #13
   1a9a2:	d0d7      	beq.n	1a954 <ip_interface_recvfrom+0x128>
   1a9a4:	6923      	ldr	r3, [r4, #16]
   1a9a6:	69e0      	ldr	r0, [r4, #28]
   1a9a8:	2b01      	cmp	r3, #1
   1a9aa:	d033      	beq.n	1aa14 <ip_interface_recvfrom+0x1e8>
   1a9ac:	2639      	movs	r6, #57	; 0x39
   1a9ae:	6823      	ldr	r3, [r4, #0]
   1a9b0:	0c1b      	lsrs	r3, r3, #16
   1a9b2:	041b      	lsls	r3, r3, #16
   1a9b4:	f043 030d 	orr.w	r3, r3, #13
   1a9b8:	6023      	str	r3, [r4, #0]
   1a9ba:	6823      	ldr	r3, [r4, #0]
   1a9bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a9c0:	6023      	str	r3, [r4, #0]
   1a9c2:	6803      	ldr	r3, [r0, #0]
   1a9c4:	68db      	ldr	r3, [r3, #12]
   1a9c6:	4798      	blx	r3
   1a9c8:	3001      	adds	r0, #1
   1a9ca:	d1be      	bne.n	1a94a <ip_interface_recvfrom+0x11e>
   1a9cc:	e79b      	b.n	1a906 <ip_interface_recvfrom+0xda>
   1a9ce:	4640      	mov	r0, r8
   1a9d0:	f005 fa54 	bl	1fe7c <interface_socket_from_handle_get>
   1a9d4:	b140      	cbz	r0, 1a9e8 <ip_interface_recvfrom+0x1bc>
   1a9d6:	6846      	ldr	r6, [r0, #4]
   1a9d8:	b136      	cbz	r6, 1a9e8 <ip_interface_recvfrom+0x1bc>
   1a9da:	2300      	movs	r3, #0
   1a9dc:	6043      	str	r3, [r0, #4]
   1a9de:	6823      	ldr	r3, [r4, #0]
   1a9e0:	031a      	lsls	r2, r3, #12
   1a9e2:	d4cc      	bmi.n	1a97e <ip_interface_recvfrom+0x152>
   1a9e4:	69e0      	ldr	r0, [r4, #28]
   1a9e6:	e7ec      	b.n	1a9c2 <ip_interface_recvfrom+0x196>
   1a9e8:	2601      	movs	r6, #1
   1a9ea:	e748      	b.n	1a87e <ip_interface_recvfrom+0x52>
   1a9ec:	9b01      	ldr	r3, [sp, #4]
   1a9ee:	b11b      	cbz	r3, 1a9f8 <ip_interface_recvfrom+0x1cc>
   1a9f0:	6823      	ldr	r3, [r4, #0]
   1a9f2:	00d9      	lsls	r1, r3, #3
   1a9f4:	d5b0      	bpl.n	1a958 <ip_interface_recvfrom+0x12c>
   1a9f6:	e756      	b.n	1a8a6 <ip_interface_recvfrom+0x7a>
   1a9f8:	4698      	mov	r8, r3
   1a9fa:	af02      	add	r7, sp, #8
   1a9fc:	e756      	b.n	1a8ac <ip_interface_recvfrom+0x80>
   1a9fe:	6823      	ldr	r3, [r4, #0]
   1aa00:	b29b      	uxth	r3, r3
   1aa02:	2b0d      	cmp	r3, #13
   1aa04:	d187      	bne.n	1a916 <ip_interface_recvfrom+0xea>
   1aa06:	68a3      	ldr	r3, [r4, #8]
   1aa08:	2b00      	cmp	r3, #0
   1aa0a:	d084      	beq.n	1a916 <ip_interface_recvfrom+0xea>
   1aa0c:	68a6      	ldr	r6, [r4, #8]
   1aa0e:	e782      	b.n	1a916 <ip_interface_recvfrom+0xea>
   1aa10:	2609      	movs	r6, #9
   1aa12:	e791      	b.n	1a938 <ip_interface_recvfrom+0x10c>
   1aa14:	6803      	ldr	r3, [r0, #0]
   1aa16:	68db      	ldr	r3, [r3, #12]
   1aa18:	4798      	blx	r3
   1aa1a:	3001      	adds	r0, #1
   1aa1c:	d00a      	beq.n	1aa34 <ip_interface_recvfrom+0x208>
   1aa1e:	2623      	movs	r6, #35	; 0x23
   1aa20:	6823      	ldr	r3, [r4, #0]
   1aa22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1aa26:	6023      	str	r3, [r4, #0]
   1aa28:	4630      	mov	r0, r6
   1aa2a:	f7fb f8f5 	bl	15c18 <bsd_os_errno_set>
   1aa2e:	f04f 35ff 	mov.w	r5, #4294967295
   1aa32:	e773      	b.n	1a91c <ip_interface_recvfrom+0xf0>
   1aa34:	6823      	ldr	r3, [r4, #0]
   1aa36:	2500      	movs	r5, #0
   1aa38:	0c1b      	lsrs	r3, r3, #16
   1aa3a:	041b      	lsls	r3, r3, #16
   1aa3c:	f043 030d 	orr.w	r3, r3, #13
   1aa40:	6023      	str	r3, [r4, #0]
   1aa42:	6823      	ldr	r3, [r4, #0]
   1aa44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1aa48:	6023      	str	r3, [r4, #0]
   1aa4a:	e767      	b.n	1a91c <ip_interface_recvfrom+0xf0>
   1aa4c:	2f00      	cmp	r7, #0
   1aa4e:	f47f af50 	bne.w	1a8f2 <ip_interface_recvfrom+0xc6>
   1aa52:	e758      	b.n	1a906 <ip_interface_recvfrom+0xda>
   1aa54:	2623      	movs	r6, #35	; 0x23
   1aa56:	e7c5      	b.n	1a9e4 <ip_interface_recvfrom+0x1b8>
   1aa58:	262d      	movs	r6, #45	; 0x2d
   1aa5a:	e7e5      	b.n	1aa28 <ip_interface_recvfrom+0x1fc>
   1aa5c:	2616      	movs	r6, #22
   1aa5e:	e7e3      	b.n	1aa28 <ip_interface_recvfrom+0x1fc>
   1aa60:	2609      	movs	r6, #9
   1aa62:	e7e1      	b.n	1aa28 <ip_interface_recvfrom+0x1fc>
   1aa64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1aa68:	6023      	str	r3, [r4, #0]
   1aa6a:	6823      	ldr	r3, [r4, #0]
   1aa6c:	2669      	movs	r6, #105	; 0x69
   1aa6e:	0c1b      	lsrs	r3, r3, #16
   1aa70:	041b      	lsls	r3, r3, #16
   1aa72:	f043 030d 	orr.w	r3, r3, #13
   1aa76:	6023      	str	r3, [r4, #0]
   1aa78:	e7d6      	b.n	1aa28 <ip_interface_recvfrom+0x1fc>
   1aa7a:	bf00      	nop

0001aa7c <ip_interface_connect>:
   1aa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa80:	b082      	sub	sp, #8
   1aa82:	2900      	cmp	r1, #0
   1aa84:	d04b      	beq.n	1ab1e <ip_interface_connect+0xa2>
   1aa86:	4617      	mov	r7, r2
   1aa88:	2a00      	cmp	r2, #0
   1aa8a:	d048      	beq.n	1ab1e <ip_interface_connect+0xa2>
   1aa8c:	4680      	mov	r8, r0
   1aa8e:	4689      	mov	r9, r1
   1aa90:	f005 f9f4 	bl	1fe7c <interface_socket_from_handle_get>
   1aa94:	4605      	mov	r5, r0
   1aa96:	2800      	cmp	r0, #0
   1aa98:	f000 80af 	beq.w	1abfa <ip_interface_connect+0x17e>
   1aa9c:	6803      	ldr	r3, [r0, #0]
   1aa9e:	b29b      	uxth	r3, r3
   1aaa0:	2b02      	cmp	r3, #2
   1aaa2:	d004      	beq.n	1aaae <ip_interface_connect+0x32>
   1aaa4:	6803      	ldr	r3, [r0, #0]
   1aaa6:	b29b      	uxth	r3, r3
   1aaa8:	2b04      	cmp	r3, #4
   1aaaa:	f040 809d 	bne.w	1abe8 <ip_interface_connect+0x16c>
   1aaae:	6829      	ldr	r1, [r5, #0]
   1aab0:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1aab4:	f040 8089 	bne.w	1abca <ip_interface_connect+0x14e>
   1aab8:	ae02      	add	r6, sp, #8
   1aaba:	f8d5 a018 	ldr.w	sl, [r5, #24]
   1aabe:	f846 1d04 	str.w	r1, [r6, #-4]!
   1aac2:	4630      	mov	r0, r6
   1aac4:	f7ff fb5e 	bl	1a184 <rpc_ip_client_request_alloc>
   1aac8:	bb98      	cbnz	r0, 1ab32 <ip_interface_connect+0xb6>
   1aaca:	2108      	movs	r1, #8
   1aacc:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1aad0:	9c01      	ldr	r4, [sp, #4]
   1aad2:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1aad6:	f043 0302 	orr.w	r3, r3, #2
   1aada:	60e3      	str	r3, [r4, #12]
   1aadc:	f8c4 a010 	str.w	sl, [r4, #16]
   1aae0:	7260      	strb	r0, [r4, #9]
   1aae2:	72a0      	strb	r0, [r4, #10]
   1aae4:	72e0      	strb	r0, [r4, #11]
   1aae6:	7221      	strb	r1, [r4, #8]
   1aae8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   1aaec:	f042 0202 	orr.w	r2, r2, #2
   1aaf0:	60e2      	str	r2, [r4, #12]
   1aaf2:	68a3      	ldr	r3, [r4, #8]
   1aaf4:	69aa      	ldr	r2, [r5, #24]
   1aaf6:	3304      	adds	r3, #4
   1aaf8:	6122      	str	r2, [r4, #16]
   1aafa:	60a3      	str	r3, [r4, #8]
   1aafc:	68eb      	ldr	r3, [r5, #12]
   1aafe:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1ab02:	4293      	cmp	r3, r2
   1ab04:	d11b      	bne.n	1ab3e <ip_interface_connect+0xc2>
   1ab06:	f899 2000 	ldrb.w	r2, [r9]
   1ab0a:	4297      	cmp	r7, r2
   1ab0c:	d107      	bne.n	1ab1e <ip_interface_connect+0xa2>
   1ab0e:	2b02      	cmp	r3, #2
   1ab10:	f104 0018 	add.w	r0, r4, #24
   1ab14:	d015      	beq.n	1ab42 <ip_interface_connect+0xc6>
   1ab16:	2b0a      	cmp	r3, #10
   1ab18:	d101      	bne.n	1ab1e <ip_interface_connect+0xa2>
   1ab1a:	2f24      	cmp	r7, #36	; 0x24
   1ab1c:	d01d      	beq.n	1ab5a <ip_interface_connect+0xde>
   1ab1e:	2416      	movs	r4, #22
   1ab20:	4620      	mov	r0, r4
   1ab22:	f7fb f879 	bl	15c18 <bsd_os_errno_set>
   1ab26:	f04f 34ff 	mov.w	r4, #4294967295
   1ab2a:	4620      	mov	r0, r4
   1ab2c:	b002      	add	sp, #8
   1ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ab32:	9c01      	ldr	r4, [sp, #4]
   1ab34:	2c00      	cmp	r4, #0
   1ab36:	d05e      	beq.n	1abf6 <ip_interface_connect+0x17a>
   1ab38:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1ab3c:	e7d4      	b.n	1aae8 <ip_interface_connect+0x6c>
   1ab3e:	242f      	movs	r4, #47	; 0x2f
   1ab40:	e7ee      	b.n	1ab20 <ip_interface_connect+0xa4>
   1ab42:	2f10      	cmp	r7, #16
   1ab44:	d1eb      	bne.n	1ab1e <ip_interface_connect+0xa2>
   1ab46:	2204      	movs	r2, #4
   1ab48:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1ab4c:	f109 010c 	add.w	r1, r9, #12
   1ab50:	82e2      	strh	r2, [r4, #22]
   1ab52:	82a3      	strh	r3, [r4, #20]
   1ab54:	f00b ff57 	bl	26a06 <memcpy>
   1ab58:	e008      	b.n	1ab6c <ip_interface_connect+0xf0>
   1ab5a:	2210      	movs	r2, #16
   1ab5c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1ab60:	eb09 0102 	add.w	r1, r9, r2
   1ab64:	82e2      	strh	r2, [r4, #22]
   1ab66:	82a3      	strh	r3, [r4, #20]
   1ab68:	f00b ff4d 	bl	26a06 <memcpy>
   1ab6c:	68a3      	ldr	r3, [r4, #8]
   1ab6e:	8ae2      	ldrh	r2, [r4, #22]
   1ab70:	f247 0102 	movw	r1, #28674	; 0x7002
   1ab74:	4413      	add	r3, r2
   1ab76:	60a3      	str	r3, [r4, #8]
   1ab78:	682f      	ldr	r7, [r5, #0]
   1ab7a:	682b      	ldr	r3, [r5, #0]
   1ab7c:	4620      	mov	r0, r4
   1ab7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1ab82:	602b      	str	r3, [r5, #0]
   1ab84:	f7ff fb12 	bl	1a1ac <rpc_ip_client_request_send>
   1ab88:	b9a8      	cbnz	r0, 1abb6 <ip_interface_connect+0x13a>
   1ab8a:	682b      	ldr	r3, [r5, #0]
   1ab8c:	00db      	lsls	r3, r3, #3
   1ab8e:	d429      	bmi.n	1abe4 <ip_interface_connect+0x168>
   1ab90:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1ab92:	4633      	mov	r3, r6
   1ab94:	2c00      	cmp	r4, #0
   1ab96:	bf08      	it	eq
   1ab98:	f04f 34ff 	moveq.w	r4, #4294967295
   1ab9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aba0:	2105      	movs	r1, #5
   1aba2:	4640      	mov	r0, r8
   1aba4:	9401      	str	r4, [sp, #4]
   1aba6:	f005 f8e9 	bl	1fd7c <interface_socket_wait>
   1abaa:	4604      	mov	r4, r0
   1abac:	b178      	cbz	r0, 1abce <ip_interface_connect+0x152>
   1abae:	2c73      	cmp	r4, #115	; 0x73
   1abb0:	d0b6      	beq.n	1ab20 <ip_interface_connect+0xa4>
   1abb2:	602f      	str	r7, [r5, #0]
   1abb4:	e7b4      	b.n	1ab20 <ip_interface_connect+0xa4>
   1abb6:	6820      	ldr	r0, [r4, #0]
   1abb8:	b108      	cbz	r0, 1abbe <ip_interface_connect+0x142>
   1abba:	f7ff fb15 	bl	1a1e8 <rpc_ip_client_data_free>
   1abbe:	4620      	mov	r0, r4
   1abc0:	f7ff fb0a 	bl	1a1d8 <rpc_ip_client_message_free>
   1abc4:	2423      	movs	r4, #35	; 0x23
   1abc6:	602f      	str	r7, [r5, #0]
   1abc8:	e7aa      	b.n	1ab20 <ip_interface_connect+0xa4>
   1abca:	2472      	movs	r4, #114	; 0x72
   1abcc:	e7a8      	b.n	1ab20 <ip_interface_connect+0xa4>
   1abce:	4640      	mov	r0, r8
   1abd0:	f005 f954 	bl	1fe7c <interface_socket_from_handle_get>
   1abd4:	2800      	cmp	r0, #0
   1abd6:	d0a8      	beq.n	1ab2a <ip_interface_connect+0xae>
   1abd8:	6843      	ldr	r3, [r0, #4]
   1abda:	2b00      	cmp	r3, #0
   1abdc:	d0a5      	beq.n	1ab2a <ip_interface_connect+0xae>
   1abde:	6044      	str	r4, [r0, #4]
   1abe0:	461c      	mov	r4, r3
   1abe2:	e7e4      	b.n	1abae <ip_interface_connect+0x132>
   1abe4:	2473      	movs	r4, #115	; 0x73
   1abe6:	e79b      	b.n	1ab20 <ip_interface_connect+0xa4>
   1abe8:	6803      	ldr	r3, [r0, #0]
   1abea:	b29b      	uxth	r3, r3
   1abec:	2b05      	cmp	r3, #5
   1abee:	bf14      	ite	ne
   1abf0:	2409      	movne	r4, #9
   1abf2:	2438      	moveq	r4, #56	; 0x38
   1abf4:	e794      	b.n	1ab20 <ip_interface_connect+0xa4>
   1abf6:	240c      	movs	r4, #12
   1abf8:	e792      	b.n	1ab20 <ip_interface_connect+0xa4>
   1abfa:	2409      	movs	r4, #9
   1abfc:	e790      	b.n	1ab20 <ip_interface_connect+0xa4>
   1abfe:	bf00      	nop

0001ac00 <ip_interface_bind>:
   1ac00:	f04f 33ff 	mov.w	r3, #4294967295
   1ac04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ac08:	b083      	sub	sp, #12
   1ac0a:	9300      	str	r3, [sp, #0]
   1ac0c:	b3b1      	cbz	r1, 1ac7c <ip_interface_bind+0x7c>
   1ac0e:	4616      	mov	r6, r2
   1ac10:	b3a2      	cbz	r2, 1ac7c <ip_interface_bind+0x7c>
   1ac12:	4607      	mov	r7, r0
   1ac14:	4688      	mov	r8, r1
   1ac16:	f005 f931 	bl	1fe7c <interface_socket_from_handle_get>
   1ac1a:	4605      	mov	r5, r0
   1ac1c:	2800      	cmp	r0, #0
   1ac1e:	d04a      	beq.n	1acb6 <ip_interface_bind+0xb6>
   1ac20:	6803      	ldr	r3, [r0, #0]
   1ac22:	b29b      	uxth	r3, r3
   1ac24:	2b02      	cmp	r3, #2
   1ac26:	d146      	bne.n	1acb6 <ip_interface_bind+0xb6>
   1ac28:	2100      	movs	r1, #0
   1ac2a:	a802      	add	r0, sp, #8
   1ac2c:	f840 1d04 	str.w	r1, [r0, #-4]!
   1ac30:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1ac34:	f7ff faa6 	bl	1a184 <rpc_ip_client_request_alloc>
   1ac38:	bb50      	cbnz	r0, 1ac90 <ip_interface_bind+0x90>
   1ac3a:	f247 0305 	movw	r3, #28677	; 0x7005
   1ac3e:	2208      	movs	r2, #8
   1ac40:	9c01      	ldr	r4, [sp, #4]
   1ac42:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1ac46:	60e3      	str	r3, [r4, #12]
   1ac48:	f8c4 9010 	str.w	r9, [r4, #16]
   1ac4c:	7260      	strb	r0, [r4, #9]
   1ac4e:	72a0      	strb	r0, [r4, #10]
   1ac50:	72e0      	strb	r0, [r4, #11]
   1ac52:	7222      	strb	r2, [r4, #8]
   1ac54:	68a3      	ldr	r3, [r4, #8]
   1ac56:	3304      	adds	r3, #4
   1ac58:	60a3      	str	r3, [r4, #8]
   1ac5a:	68eb      	ldr	r3, [r5, #12]
   1ac5c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1ac60:	4293      	cmp	r3, r2
   1ac62:	d11a      	bne.n	1ac9a <ip_interface_bind+0x9a>
   1ac64:	f898 2000 	ldrb.w	r2, [r8]
   1ac68:	4296      	cmp	r6, r2
   1ac6a:	d107      	bne.n	1ac7c <ip_interface_bind+0x7c>
   1ac6c:	2b02      	cmp	r3, #2
   1ac6e:	f104 0018 	add.w	r0, r4, #24
   1ac72:	d014      	beq.n	1ac9e <ip_interface_bind+0x9e>
   1ac74:	2b0a      	cmp	r3, #10
   1ac76:	d101      	bne.n	1ac7c <ip_interface_bind+0x7c>
   1ac78:	2e24      	cmp	r6, #36	; 0x24
   1ac7a:	d01e      	beq.n	1acba <ip_interface_bind+0xba>
   1ac7c:	2416      	movs	r4, #22
   1ac7e:	4620      	mov	r0, r4
   1ac80:	f7fa ffca 	bl	15c18 <bsd_os_errno_set>
   1ac84:	f04f 34ff 	mov.w	r4, #4294967295
   1ac88:	4620      	mov	r0, r4
   1ac8a:	b003      	add	sp, #12
   1ac8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ac90:	9c01      	ldr	r4, [sp, #4]
   1ac92:	2c00      	cmp	r4, #0
   1ac94:	d1de      	bne.n	1ac54 <ip_interface_bind+0x54>
   1ac96:	240c      	movs	r4, #12
   1ac98:	e7f1      	b.n	1ac7e <ip_interface_bind+0x7e>
   1ac9a:	242f      	movs	r4, #47	; 0x2f
   1ac9c:	e7ef      	b.n	1ac7e <ip_interface_bind+0x7e>
   1ac9e:	2e10      	cmp	r6, #16
   1aca0:	d1ec      	bne.n	1ac7c <ip_interface_bind+0x7c>
   1aca2:	2204      	movs	r2, #4
   1aca4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1aca8:	f108 010c 	add.w	r1, r8, #12
   1acac:	82e2      	strh	r2, [r4, #22]
   1acae:	82a3      	strh	r3, [r4, #20]
   1acb0:	f00b fea9 	bl	26a06 <memcpy>
   1acb4:	e00a      	b.n	1accc <ip_interface_bind+0xcc>
   1acb6:	2409      	movs	r4, #9
   1acb8:	e7e1      	b.n	1ac7e <ip_interface_bind+0x7e>
   1acba:	2210      	movs	r2, #16
   1acbc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1acc0:	eb08 0102 	add.w	r1, r8, r2
   1acc4:	82e2      	strh	r2, [r4, #22]
   1acc6:	82a3      	strh	r3, [r4, #20]
   1acc8:	f00b fe9d 	bl	26a06 <memcpy>
   1accc:	68a3      	ldr	r3, [r4, #8]
   1acce:	8ae2      	ldrh	r2, [r4, #22]
   1acd0:	f247 0105 	movw	r1, #28677	; 0x7005
   1acd4:	4413      	add	r3, r2
   1acd6:	60a3      	str	r3, [r4, #8]
   1acd8:	682b      	ldr	r3, [r5, #0]
   1acda:	4620      	mov	r0, r4
   1acdc:	0c1b      	lsrs	r3, r3, #16
   1acde:	041b      	lsls	r3, r3, #16
   1ace0:	f043 0303 	orr.w	r3, r3, #3
   1ace4:	602b      	str	r3, [r5, #0]
   1ace6:	682e      	ldr	r6, [r5, #0]
   1ace8:	f7ff fa60 	bl	1a1ac <rpc_ip_client_request_send>
   1acec:	4680      	mov	r8, r0
   1acee:	b978      	cbnz	r0, 1ad10 <ip_interface_bind+0x110>
   1acf0:	466b      	mov	r3, sp
   1acf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1acf6:	2104      	movs	r1, #4
   1acf8:	4638      	mov	r0, r7
   1acfa:	f005 f83f 	bl	1fd7c <interface_socket_wait>
   1acfe:	4604      	mov	r4, r0
   1ad00:	b1a0      	cbz	r0, 1ad2c <ip_interface_bind+0x12c>
   1ad02:	682b      	ldr	r3, [r5, #0]
   1ad04:	0c1b      	lsrs	r3, r3, #16
   1ad06:	041b      	lsls	r3, r3, #16
   1ad08:	f043 0302 	orr.w	r3, r3, #2
   1ad0c:	602b      	str	r3, [r5, #0]
   1ad0e:	e7b6      	b.n	1ac7e <ip_interface_bind+0x7e>
   1ad10:	6820      	ldr	r0, [r4, #0]
   1ad12:	b108      	cbz	r0, 1ad18 <ip_interface_bind+0x118>
   1ad14:	f7ff fa68 	bl	1a1e8 <rpc_ip_client_data_free>
   1ad18:	0c36      	lsrs	r6, r6, #16
   1ad1a:	0436      	lsls	r6, r6, #16
   1ad1c:	4620      	mov	r0, r4
   1ad1e:	f046 0602 	orr.w	r6, r6, #2
   1ad22:	f7ff fa59 	bl	1a1d8 <rpc_ip_client_message_free>
   1ad26:	2423      	movs	r4, #35	; 0x23
   1ad28:	602e      	str	r6, [r5, #0]
   1ad2a:	e7a8      	b.n	1ac7e <ip_interface_bind+0x7e>
   1ad2c:	4638      	mov	r0, r7
   1ad2e:	f005 f8a5 	bl	1fe7c <interface_socket_from_handle_get>
   1ad32:	2800      	cmp	r0, #0
   1ad34:	d0a8      	beq.n	1ac88 <ip_interface_bind+0x88>
   1ad36:	6844      	ldr	r4, [r0, #4]
   1ad38:	2c00      	cmp	r4, #0
   1ad3a:	d0a5      	beq.n	1ac88 <ip_interface_bind+0x88>
   1ad3c:	f8c0 8004 	str.w	r8, [r0, #4]
   1ad40:	e7df      	b.n	1ad02 <ip_interface_bind+0x102>
   1ad42:	bf00      	nop

0001ad44 <ip_interface_listen>:
   1ad44:	f04f 33ff 	mov.w	r3, #4294967295
   1ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad4c:	b082      	sub	sp, #8
   1ad4e:	4606      	mov	r6, r0
   1ad50:	9300      	str	r3, [sp, #0]
   1ad52:	f005 f893 	bl	1fe7c <interface_socket_from_handle_get>
   1ad56:	2800      	cmp	r0, #0
   1ad58:	d066      	beq.n	1ae28 <ip_interface_listen+0xe4>
   1ad5a:	6803      	ldr	r3, [r0, #0]
   1ad5c:	4605      	mov	r5, r0
   1ad5e:	b29b      	uxth	r3, r3
   1ad60:	2b04      	cmp	r3, #4
   1ad62:	d161      	bne.n	1ae28 <ip_interface_listen+0xe4>
   1ad64:	2100      	movs	r1, #0
   1ad66:	4a32      	ldr	r2, [pc, #200]	; (1ae30 <ip_interface_listen+0xec>)
   1ad68:	4630      	mov	r0, r6
   1ad6a:	f004 ffcf 	bl	1fd0c <interface_socket_packet_handler_update>
   1ad6e:	4601      	mov	r1, r0
   1ad70:	2800      	cmp	r0, #0
   1ad72:	d15b      	bne.n	1ae2c <ip_interface_listen+0xe8>
   1ad74:	a802      	add	r0, sp, #8
   1ad76:	f840 1d04 	str.w	r1, [r0, #-4]!
   1ad7a:	69af      	ldr	r7, [r5, #24]
   1ad7c:	f7ff fa02 	bl	1a184 <rpc_ip_client_request_alloc>
   1ad80:	bba0      	cbnz	r0, 1adec <ip_interface_listen+0xa8>
   1ad82:	f247 0308 	movw	r3, #28680	; 0x7008
   1ad86:	2208      	movs	r2, #8
   1ad88:	9c01      	ldr	r4, [sp, #4]
   1ad8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1ad8e:	60e3      	str	r3, [r4, #12]
   1ad90:	6127      	str	r7, [r4, #16]
   1ad92:	7260      	strb	r0, [r4, #9]
   1ad94:	72a0      	strb	r0, [r4, #10]
   1ad96:	72e0      	strb	r0, [r4, #11]
   1ad98:	7222      	strb	r2, [r4, #8]
   1ad9a:	68a3      	ldr	r3, [r4, #8]
   1ad9c:	f247 0108 	movw	r1, #28680	; 0x7008
   1ada0:	3304      	adds	r3, #4
   1ada2:	60a3      	str	r3, [r4, #8]
   1ada4:	682b      	ldr	r3, [r5, #0]
   1ada6:	4620      	mov	r0, r4
   1ada8:	0c1b      	lsrs	r3, r3, #16
   1adaa:	041b      	lsls	r3, r3, #16
   1adac:	f043 0306 	orr.w	r3, r3, #6
   1adb0:	602b      	str	r3, [r5, #0]
   1adb2:	682f      	ldr	r7, [r5, #0]
   1adb4:	f7ff f9fa 	bl	1a1ac <rpc_ip_client_request_send>
   1adb8:	4680      	mov	r8, r0
   1adba:	b9e0      	cbnz	r0, 1adf6 <ip_interface_listen+0xb2>
   1adbc:	466b      	mov	r3, sp
   1adbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1adc2:	2107      	movs	r1, #7
   1adc4:	4630      	mov	r0, r6
   1adc6:	f004 ffd9 	bl	1fd7c <interface_socket_wait>
   1adca:	4604      	mov	r4, r0
   1adcc:	b308      	cbz	r0, 1ae12 <ip_interface_listen+0xce>
   1adce:	682b      	ldr	r3, [r5, #0]
   1add0:	0c1b      	lsrs	r3, r3, #16
   1add2:	041b      	lsls	r3, r3, #16
   1add4:	f043 0304 	orr.w	r3, r3, #4
   1add8:	602b      	str	r3, [r5, #0]
   1adda:	4620      	mov	r0, r4
   1addc:	f7fa ff1c 	bl	15c18 <bsd_os_errno_set>
   1ade0:	f04f 34ff 	mov.w	r4, #4294967295
   1ade4:	4620      	mov	r0, r4
   1ade6:	b002      	add	sp, #8
   1ade8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1adec:	9c01      	ldr	r4, [sp, #4]
   1adee:	2c00      	cmp	r4, #0
   1adf0:	d1d3      	bne.n	1ad9a <ip_interface_listen+0x56>
   1adf2:	240c      	movs	r4, #12
   1adf4:	e7f1      	b.n	1adda <ip_interface_listen+0x96>
   1adf6:	6820      	ldr	r0, [r4, #0]
   1adf8:	b108      	cbz	r0, 1adfe <ip_interface_listen+0xba>
   1adfa:	f7ff f9f5 	bl	1a1e8 <rpc_ip_client_data_free>
   1adfe:	0c3f      	lsrs	r7, r7, #16
   1ae00:	043f      	lsls	r7, r7, #16
   1ae02:	4620      	mov	r0, r4
   1ae04:	f047 0704 	orr.w	r7, r7, #4
   1ae08:	f7ff f9e6 	bl	1a1d8 <rpc_ip_client_message_free>
   1ae0c:	2423      	movs	r4, #35	; 0x23
   1ae0e:	602f      	str	r7, [r5, #0]
   1ae10:	e7e3      	b.n	1adda <ip_interface_listen+0x96>
   1ae12:	4630      	mov	r0, r6
   1ae14:	f005 f832 	bl	1fe7c <interface_socket_from_handle_get>
   1ae18:	2800      	cmp	r0, #0
   1ae1a:	d0e3      	beq.n	1ade4 <ip_interface_listen+0xa0>
   1ae1c:	6844      	ldr	r4, [r0, #4]
   1ae1e:	2c00      	cmp	r4, #0
   1ae20:	d0e0      	beq.n	1ade4 <ip_interface_listen+0xa0>
   1ae22:	f8c0 8004 	str.w	r8, [r0, #4]
   1ae26:	e7d2      	b.n	1adce <ip_interface_listen+0x8a>
   1ae28:	2409      	movs	r4, #9
   1ae2a:	e7d6      	b.n	1adda <ip_interface_listen+0x96>
   1ae2c:	2423      	movs	r4, #35	; 0x23
   1ae2e:	e7d4      	b.n	1adda <ip_interface_listen+0x96>
   1ae30:	0001a1f9 	.word	0x0001a1f9

0001ae34 <ip_interface_accept>:
   1ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae38:	f04f 33ff 	mov.w	r3, #4294967295
   1ae3c:	2500      	movs	r5, #0
   1ae3e:	b087      	sub	sp, #28
   1ae40:	460f      	mov	r7, r1
   1ae42:	4690      	mov	r8, r2
   1ae44:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1ae48:	4606      	mov	r6, r0
   1ae4a:	f005 f817 	bl	1fe7c <interface_socket_from_handle_get>
   1ae4e:	4604      	mov	r4, r0
   1ae50:	2800      	cmp	r0, #0
   1ae52:	f000 8123 	beq.w	1b09c <ip_interface_accept+0x268>
   1ae56:	6803      	ldr	r3, [r0, #0]
   1ae58:	b29b      	uxth	r3, r3
   1ae5a:	2b07      	cmp	r3, #7
   1ae5c:	d10a      	bne.n	1ae74 <ip_interface_accept+0x40>
   1ae5e:	6803      	ldr	r3, [r0, #0]
   1ae60:	6805      	ldr	r5, [r0, #0]
   1ae62:	00db      	lsls	r3, r3, #3
   1ae64:	d416      	bmi.n	1ae94 <ip_interface_accept+0x60>
   1ae66:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1ae6a:	d019      	beq.n	1aea0 <ip_interface_accept+0x6c>
   1ae6c:	6805      	ldr	r5, [r0, #0]
   1ae6e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1ae72:	d124      	bne.n	1aebe <ip_interface_accept+0x8a>
   1ae74:	f04f 0909 	mov.w	r9, #9
   1ae78:	9b03      	ldr	r3, [sp, #12]
   1ae7a:	b113      	cbz	r3, 1ae82 <ip_interface_accept+0x4e>
   1ae7c:	4628      	mov	r0, r5
   1ae7e:	f004 ff2f 	bl	1fce0 <interface_socket_free>
   1ae82:	4648      	mov	r0, r9
   1ae84:	f04f 39ff 	mov.w	r9, #4294967295
   1ae88:	f7fa fec6 	bl	15c18 <bsd_os_errno_set>
   1ae8c:	4648      	mov	r0, r9
   1ae8e:	b007      	add	sp, #28
   1ae90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae94:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1ae98:	d170      	bne.n	1af7c <ip_interface_accept+0x148>
   1ae9a:	f04f 0923 	mov.w	r9, #35	; 0x23
   1ae9e:	e7eb      	b.n	1ae78 <ip_interface_accept+0x44>
   1aea0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1aea4:	ab04      	add	r3, sp, #16
   1aea6:	4611      	mov	r1, r2
   1aea8:	4630      	mov	r0, r6
   1aeaa:	f004 ff67 	bl	1fd7c <interface_socket_wait>
   1aeae:	4681      	mov	r9, r0
   1aeb0:	2800      	cmp	r0, #0
   1aeb2:	f000 8082 	beq.w	1afba <ip_interface_accept+0x186>
   1aeb6:	6825      	ldr	r5, [r4, #0]
   1aeb8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1aebc:	d0dc      	beq.n	1ae78 <ip_interface_accept+0x44>
   1aebe:	f04f 30ff 	mov.w	r0, #4294967295
   1aec2:	2300      	movs	r3, #0
   1aec4:	e9cd 0300 	strd	r0, r3, [sp]
   1aec8:	4a78      	ldr	r2, [pc, #480]	; (1b0ac <ip_interface_accept+0x278>)
   1aeca:	6921      	ldr	r1, [r4, #16]
   1aecc:	a803      	add	r0, sp, #12
   1aece:	f004 fea3 	bl	1fc18 <interface_socket_allocate>
   1aed2:	9b03      	ldr	r3, [sp, #12]
   1aed4:	4605      	mov	r5, r0
   1aed6:	2b00      	cmp	r3, #0
   1aed8:	f000 80e4 	beq.w	1b0a4 <ip_interface_accept+0x270>
   1aedc:	2100      	movs	r1, #0
   1aede:	6962      	ldr	r2, [r4, #20]
   1aee0:	a806      	add	r0, sp, #24
   1aee2:	615a      	str	r2, [r3, #20]
   1aee4:	68e2      	ldr	r2, [r4, #12]
   1aee6:	f840 1d04 	str.w	r1, [r0, #-4]!
   1aeea:	60da      	str	r2, [r3, #12]
   1aeec:	6922      	ldr	r2, [r4, #16]
   1aeee:	611a      	str	r2, [r3, #16]
   1aef0:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1aef4:	f7ff f946 	bl	1a184 <rpc_ip_client_request_alloc>
   1aef8:	2800      	cmp	r0, #0
   1aefa:	d146      	bne.n	1af8a <ip_interface_accept+0x156>
   1aefc:	f247 030c 	movw	r3, #28684	; 0x700c
   1af00:	2108      	movs	r1, #8
   1af02:	f8dd b014 	ldr.w	fp, [sp, #20]
   1af06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1af0a:	f8cb 300c 	str.w	r3, [fp, #12]
   1af0e:	f8cb 9010 	str.w	r9, [fp, #16]
   1af12:	f88b 0009 	strb.w	r0, [fp, #9]
   1af16:	f88b 000a 	strb.w	r0, [fp, #10]
   1af1a:	f88b 000b 	strb.w	r0, [fp, #11]
   1af1e:	f88b 1008 	strb.w	r1, [fp, #8]
   1af22:	6823      	ldr	r3, [r4, #0]
   1af24:	f247 010c 	movw	r1, #28684	; 0x700c
   1af28:	0c1b      	lsrs	r3, r3, #16
   1af2a:	041b      	lsls	r3, r3, #16
   1af2c:	f043 0308 	orr.w	r3, r3, #8
   1af30:	6023      	str	r3, [r4, #0]
   1af32:	4658      	mov	r0, fp
   1af34:	f8d4 9000 	ldr.w	r9, [r4]
   1af38:	f7ff f938 	bl	1a1ac <rpc_ip_client_request_send>
   1af3c:	4682      	mov	sl, r0
   1af3e:	bb60      	cbnz	r0, 1af9a <ip_interface_accept+0x166>
   1af40:	6822      	ldr	r2, [r4, #0]
   1af42:	9900      	ldr	r1, [sp, #0]
   1af44:	ab04      	add	r3, sp, #16
   1af46:	400a      	ands	r2, r1
   1af48:	6022      	str	r2, [r4, #0]
   1af4a:	2109      	movs	r1, #9
   1af4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1af50:	4630      	mov	r0, r6
   1af52:	f004 ff13 	bl	1fd7c <interface_socket_wait>
   1af56:	4681      	mov	r9, r0
   1af58:	2800      	cmp	r0, #0
   1af5a:	f000 808d 	beq.w	1b078 <ip_interface_accept+0x244>
   1af5e:	6823      	ldr	r3, [r4, #0]
   1af60:	9a01      	ldr	r2, [sp, #4]
   1af62:	431a      	orrs	r2, r3
   1af64:	6022      	str	r2, [r4, #0]
   1af66:	6823      	ldr	r3, [r4, #0]
   1af68:	0c1b      	lsrs	r3, r3, #16
   1af6a:	041b      	lsls	r3, r3, #16
   1af6c:	f043 0307 	orr.w	r3, r3, #7
   1af70:	6023      	str	r3, [r4, #0]
   1af72:	6823      	ldr	r3, [r4, #0]
   1af74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1af78:	6023      	str	r3, [r4, #0]
   1af7a:	e77d      	b.n	1ae78 <ip_interface_accept+0x44>
   1af7c:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1af80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1af84:	e9cd 2300 	strd	r2, r3, [sp]
   1af88:	e79e      	b.n	1aec8 <ip_interface_accept+0x94>
   1af8a:	f8dd b014 	ldr.w	fp, [sp, #20]
   1af8e:	f04f 090c 	mov.w	r9, #12
   1af92:	f1bb 0f00 	cmp.w	fp, #0
   1af96:	d1c4      	bne.n	1af22 <ip_interface_accept+0xee>
   1af98:	e76e      	b.n	1ae78 <ip_interface_accept+0x44>
   1af9a:	f8db 0000 	ldr.w	r0, [fp]
   1af9e:	b108      	cbz	r0, 1afa4 <ip_interface_accept+0x170>
   1afa0:	f7ff f922 	bl	1a1e8 <rpc_ip_client_data_free>
   1afa4:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1afa8:	4658      	mov	r0, fp
   1afaa:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1afae:	f7ff f913 	bl	1a1d8 <rpc_ip_client_message_free>
   1afb2:	f049 0307 	orr.w	r3, r9, #7
   1afb6:	6023      	str	r3, [r4, #0]
   1afb8:	e76f      	b.n	1ae9a <ip_interface_accept+0x66>
   1afba:	4630      	mov	r0, r6
   1afbc:	f004 ff5e 	bl	1fe7c <interface_socket_from_handle_get>
   1afc0:	b130      	cbz	r0, 1afd0 <ip_interface_accept+0x19c>
   1afc2:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1afc6:	f1b9 0f00 	cmp.w	r9, #0
   1afca:	d001      	beq.n	1afd0 <ip_interface_accept+0x19c>
   1afcc:	6045      	str	r5, [r0, #4]
   1afce:	e772      	b.n	1aeb6 <ip_interface_accept+0x82>
   1afd0:	6823      	ldr	r3, [r4, #0]
   1afd2:	03d9      	lsls	r1, r3, #15
   1afd4:	f53f af73 	bmi.w	1aebe <ip_interface_accept+0x8a>
   1afd8:	4d35      	ldr	r5, [pc, #212]	; (1b0b0 <ip_interface_accept+0x27c>)
   1afda:	9903      	ldr	r1, [sp, #12]
   1afdc:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1afe0:	699b      	ldr	r3, [r3, #24]
   1afe2:	618b      	str	r3, [r1, #24]
   1afe4:	b147      	cbz	r7, 1aff8 <ip_interface_accept+0x1c4>
   1afe6:	68cb      	ldr	r3, [r1, #12]
   1afe8:	2b0a      	cmp	r3, #10
   1afea:	d028      	beq.n	1b03e <ip_interface_accept+0x20a>
   1afec:	2b02      	cmp	r3, #2
   1afee:	d103      	bne.n	1aff8 <ip_interface_accept+0x1c4>
   1aff0:	f8d8 2000 	ldr.w	r2, [r8]
   1aff4:	2a10      	cmp	r2, #16
   1aff6:	d036      	beq.n	1b066 <ip_interface_accept+0x232>
   1aff8:	680a      	ldr	r2, [r1, #0]
   1affa:	482e      	ldr	r0, [pc, #184]	; (1b0b4 <ip_interface_accept+0x280>)
   1affc:	4002      	ands	r2, r0
   1affe:	f042 0205 	orr.w	r2, r2, #5
   1b002:	600a      	str	r2, [r1, #0]
   1b004:	9a03      	ldr	r2, [sp, #12]
   1b006:	6811      	ldr	r1, [r2, #0]
   1b008:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   1b00c:	6011      	str	r1, [r2, #0]
   1b00e:	6811      	ldr	r1, [r2, #0]
   1b010:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b014:	6011      	str	r1, [r2, #0]
   1b016:	6823      	ldr	r3, [r4, #0]
   1b018:	4003      	ands	r3, r0
   1b01a:	f043 0307 	orr.w	r3, r3, #7
   1b01e:	6023      	str	r3, [r4, #0]
   1b020:	6823      	ldr	r3, [r4, #0]
   1b022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1b026:	6023      	str	r3, [r4, #0]
   1b028:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1b02c:	f7ff f8d4 	bl	1a1d8 <rpc_ip_client_message_free>
   1b030:	2300      	movs	r3, #0
   1b032:	4648      	mov	r0, r9
   1b034:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   1b038:	b007      	add	sp, #28
   1b03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b03e:	f8d8 2000 	ldr.w	r2, [r8]
   1b042:	2a24      	cmp	r2, #36	; 0x24
   1b044:	d1d8      	bne.n	1aff8 <ip_interface_accept+0x1c4>
   1b046:	703a      	strb	r2, [r7, #0]
   1b048:	2210      	movs	r2, #16
   1b04a:	607b      	str	r3, [r7, #4]
   1b04c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1b050:	f107 0010 	add.w	r0, r7, #16
   1b054:	8b9b      	ldrh	r3, [r3, #28]
   1b056:	813b      	strh	r3, [r7, #8]
   1b058:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1b05c:	3120      	adds	r1, #32
   1b05e:	f00b fcd2 	bl	26a06 <memcpy>
   1b062:	9903      	ldr	r1, [sp, #12]
   1b064:	e7c8      	b.n	1aff8 <ip_interface_accept+0x1c4>
   1b066:	703a      	strb	r2, [r7, #0]
   1b068:	607b      	str	r3, [r7, #4]
   1b06a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1b06e:	f107 000c 	add.w	r0, r7, #12
   1b072:	8b9b      	ldrh	r3, [r3, #28]
   1b074:	2204      	movs	r2, #4
   1b076:	e7ee      	b.n	1b056 <ip_interface_accept+0x222>
   1b078:	4630      	mov	r0, r6
   1b07a:	f004 feff 	bl	1fe7c <interface_socket_from_handle_get>
   1b07e:	b138      	cbz	r0, 1b090 <ip_interface_accept+0x25c>
   1b080:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1b084:	f1b9 0f00 	cmp.w	r9, #0
   1b088:	d002      	beq.n	1b090 <ip_interface_accept+0x25c>
   1b08a:	f8c0 a004 	str.w	sl, [r0, #4]
   1b08e:	e766      	b.n	1af5e <ip_interface_accept+0x12a>
   1b090:	6823      	ldr	r3, [r4, #0]
   1b092:	9a01      	ldr	r2, [sp, #4]
   1b094:	46a9      	mov	r9, r5
   1b096:	4313      	orrs	r3, r2
   1b098:	6023      	str	r3, [r4, #0]
   1b09a:	e79d      	b.n	1afd8 <ip_interface_accept+0x1a4>
   1b09c:	4605      	mov	r5, r0
   1b09e:	f04f 0909 	mov.w	r9, #9
   1b0a2:	e6e9      	b.n	1ae78 <ip_interface_accept+0x44>
   1b0a4:	f04f 090c 	mov.w	r9, #12
   1b0a8:	e6eb      	b.n	1ae82 <ip_interface_accept+0x4e>
   1b0aa:	bf00      	nop
   1b0ac:	0001a1f9 	.word	0x0001a1f9
   1b0b0:	20021fa4 	.word	0x20021fa4
   1b0b4:	ffff0000 	.word	0xffff0000

0001b0b8 <ip_interface_setopt>:
   1b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0bc:	2901      	cmp	r1, #1
   1b0be:	b086      	sub	sp, #24
   1b0c0:	f040 809d 	bne.w	1b1fe <ip_interface_setopt+0x146>
   1b0c4:	460e      	mov	r6, r1
   1b0c6:	4690      	mov	r8, r2
   1b0c8:	461d      	mov	r5, r3
   1b0ca:	4607      	mov	r7, r0
   1b0cc:	f004 fed6 	bl	1fe7c <interface_socket_from_handle_get>
   1b0d0:	4604      	mov	r4, r0
   1b0d2:	2800      	cmp	r0, #0
   1b0d4:	f000 80a6 	beq.w	1b224 <ip_interface_setopt+0x16c>
   1b0d8:	f1b8 0f19 	cmp.w	r8, #25
   1b0dc:	d16f      	bne.n	1b1be <ip_interface_setopt+0x106>
   1b0de:	2d00      	cmp	r5, #0
   1b0e0:	f000 8093 	beq.w	1b20a <ip_interface_setopt+0x152>
   1b0e4:	4628      	mov	r0, r5
   1b0e6:	f7f1 fec3 	bl	ce70 <strlen>
   1b0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b0ec:	4298      	cmp	r0, r3
   1b0ee:	f040 808c 	bne.w	1b20a <ip_interface_setopt+0x152>
   1b0f2:	6823      	ldr	r3, [r4, #0]
   1b0f4:	b29b      	uxth	r3, r3
   1b0f6:	2b02      	cmp	r3, #2
   1b0f8:	d174      	bne.n	1b1e4 <ip_interface_setopt+0x12c>
   1b0fa:	4629      	mov	r1, r5
   1b0fc:	68e0      	ldr	r0, [r4, #12]
   1b0fe:	f002 fbd9 	bl	1d8b4 <pdn_interface_pdn_id_get>
   1b102:	9003      	str	r0, [sp, #12]
   1b104:	3001      	adds	r0, #1
   1b106:	bf08      	it	eq
   1b108:	2516      	moveq	r5, #22
   1b10a:	d04f      	beq.n	1b1ac <ip_interface_setopt+0xf4>
   1b10c:	f04f 33ff 	mov.w	r3, #4294967295
   1b110:	9304      	str	r3, [sp, #16]
   1b112:	6823      	ldr	r3, [r4, #0]
   1b114:	025b      	lsls	r3, r3, #9
   1b116:	d448      	bmi.n	1b1aa <ip_interface_setopt+0xf2>
   1b118:	6823      	ldr	r3, [r4, #0]
   1b11a:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   1b11e:	d144      	bne.n	1b1aa <ip_interface_setopt+0xf2>
   1b120:	6826      	ldr	r6, [r4, #0]
   1b122:	6822      	ldr	r2, [r4, #0]
   1b124:	a806      	add	r0, sp, #24
   1b126:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   1b12a:	6022      	str	r2, [r4, #0]
   1b12c:	2104      	movs	r1, #4
   1b12e:	f840 3d04 	str.w	r3, [r0, #-4]!
   1b132:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1b136:	f7ff f825 	bl	1a184 <rpc_ip_client_request_alloc>
   1b13a:	2800      	cmp	r0, #0
   1b13c:	d14c      	bne.n	1b1d8 <ip_interface_setopt+0x120>
   1b13e:	f247 0203 	movw	r2, #28675	; 0x7003
   1b142:	2300      	movs	r3, #0
   1b144:	2108      	movs	r1, #8
   1b146:	9d05      	ldr	r5, [sp, #20]
   1b148:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1b14c:	60ea      	str	r2, [r5, #12]
   1b14e:	f8c5 8010 	str.w	r8, [r5, #16]
   1b152:	7229      	strb	r1, [r5, #8]
   1b154:	726b      	strb	r3, [r5, #9]
   1b156:	72ab      	strb	r3, [r5, #10]
   1b158:	72eb      	strb	r3, [r5, #11]
   1b15a:	f04f 0c08 	mov.w	ip, #8
   1b15e:	2300      	movs	r3, #0
   1b160:	2010      	movs	r0, #16
   1b162:	2130      	movs	r1, #48	; 0x30
   1b164:	68aa      	ldr	r2, [r5, #8]
   1b166:	756b      	strb	r3, [r5, #21]
   1b168:	4462      	add	r2, ip
   1b16a:	60aa      	str	r2, [r5, #8]
   1b16c:	75ab      	strb	r3, [r5, #22]
   1b16e:	75eb      	strb	r3, [r5, #23]
   1b170:	76ab      	strb	r3, [r5, #26]
   1b172:	76eb      	strb	r3, [r5, #27]
   1b174:	f885 c014 	strb.w	ip, [r5, #20]
   1b178:	7628      	strb	r0, [r5, #24]
   1b17a:	7669      	strb	r1, [r5, #25]
   1b17c:	2204      	movs	r2, #4
   1b17e:	a903      	add	r1, sp, #12
   1b180:	6828      	ldr	r0, [r5, #0]
   1b182:	f00b fc40 	bl	26a06 <memcpy>
   1b186:	f247 0103 	movw	r1, #28675	; 0x7003
   1b18a:	4628      	mov	r0, r5
   1b18c:	f7ff f80e 	bl	1a1ac <rpc_ip_client_request_send>
   1b190:	4680      	mov	r8, r0
   1b192:	bb48      	cbnz	r0, 1b1e8 <ip_interface_setopt+0x130>
   1b194:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1b198:	ab04      	add	r3, sp, #16
   1b19a:	4611      	mov	r1, r2
   1b19c:	4638      	mov	r0, r7
   1b19e:	f004 fded 	bl	1fd7c <interface_socket_wait>
   1b1a2:	4605      	mov	r5, r0
   1b1a4:	b398      	cbz	r0, 1b20e <ip_interface_setopt+0x156>
   1b1a6:	6026      	str	r6, [r4, #0]
   1b1a8:	e000      	b.n	1b1ac <ip_interface_setopt+0xf4>
   1b1aa:	2523      	movs	r5, #35	; 0x23
   1b1ac:	4628      	mov	r0, r5
   1b1ae:	f7fa fd33 	bl	15c18 <bsd_os_errno_set>
   1b1b2:	f04f 35ff 	mov.w	r5, #4294967295
   1b1b6:	4628      	mov	r0, r5
   1b1b8:	b006      	add	sp, #24
   1b1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b1be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b1c0:	4642      	mov	r2, r8
   1b1c2:	9300      	str	r3, [sp, #0]
   1b1c4:	4631      	mov	r1, r6
   1b1c6:	462b      	mov	r3, r5
   1b1c8:	4638      	mov	r0, r7
   1b1ca:	f004 fe7f 	bl	1fecc <interface_socket_setopt>
   1b1ce:	4605      	mov	r5, r0
   1b1d0:	4628      	mov	r0, r5
   1b1d2:	b006      	add	sp, #24
   1b1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b1d8:	9d05      	ldr	r5, [sp, #20]
   1b1da:	2d00      	cmp	r5, #0
   1b1dc:	d1bd      	bne.n	1b15a <ip_interface_setopt+0xa2>
   1b1de:	6026      	str	r6, [r4, #0]
   1b1e0:	250c      	movs	r5, #12
   1b1e2:	e7e3      	b.n	1b1ac <ip_interface_setopt+0xf4>
   1b1e4:	2509      	movs	r5, #9
   1b1e6:	e7e1      	b.n	1b1ac <ip_interface_setopt+0xf4>
   1b1e8:	6828      	ldr	r0, [r5, #0]
   1b1ea:	b108      	cbz	r0, 1b1f0 <ip_interface_setopt+0x138>
   1b1ec:	f7fe fffc 	bl	1a1e8 <rpc_ip_client_data_free>
   1b1f0:	4628      	mov	r0, r5
   1b1f2:	f7fe fff1 	bl	1a1d8 <rpc_ip_client_message_free>
   1b1f6:	2523      	movs	r5, #35	; 0x23
   1b1f8:	6026      	str	r6, [r4, #0]
   1b1fa:	6026      	str	r6, [r4, #0]
   1b1fc:	e7d6      	b.n	1b1ac <ip_interface_setopt+0xf4>
   1b1fe:	202a      	movs	r0, #42	; 0x2a
   1b200:	f7fa fd0a 	bl	15c18 <bsd_os_errno_set>
   1b204:	f04f 35ff 	mov.w	r5, #4294967295
   1b208:	e7d5      	b.n	1b1b6 <ip_interface_setopt+0xfe>
   1b20a:	250e      	movs	r5, #14
   1b20c:	e7ce      	b.n	1b1ac <ip_interface_setopt+0xf4>
   1b20e:	4638      	mov	r0, r7
   1b210:	f004 fe34 	bl	1fe7c <interface_socket_from_handle_get>
   1b214:	b120      	cbz	r0, 1b220 <ip_interface_setopt+0x168>
   1b216:	6845      	ldr	r5, [r0, #4]
   1b218:	b115      	cbz	r5, 1b220 <ip_interface_setopt+0x168>
   1b21a:	f8c0 8004 	str.w	r8, [r0, #4]
   1b21e:	e7c2      	b.n	1b1a6 <ip_interface_setopt+0xee>
   1b220:	6026      	str	r6, [r4, #0]
   1b222:	e7c8      	b.n	1b1b6 <ip_interface_setopt+0xfe>
   1b224:	2009      	movs	r0, #9
   1b226:	f7fa fcf7 	bl	15c18 <bsd_os_errno_set>
   1b22a:	f04f 35ff 	mov.w	r5, #4294967295
   1b22e:	e7c2      	b.n	1b1b6 <ip_interface_setopt+0xfe>

0001b230 <ip_interface_getopt>:
   1b230:	f004 be92 	b.w	1ff58 <interface_socket_getopt>

0001b234 <ip_interface_getaddrinfo>:
   1b234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b238:	f04f 0c00 	mov.w	ip, #0
   1b23c:	2401      	movs	r4, #1
   1b23e:	4e72      	ldr	r6, [pc, #456]	; (1b408 <ip_interface_getaddrinfo+0x1d4>)
   1b240:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 1b414 <ip_interface_getaddrinfo+0x1e0>
   1b244:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 1b418 <ip_interface_getaddrinfo+0x1e4>
   1b248:	b085      	sub	sp, #20
   1b24a:	4607      	mov	r7, r0
   1b24c:	4615      	mov	r5, r2
   1b24e:	9301      	str	r3, [sp, #4]
   1b250:	f8a6 c000 	strh.w	ip, [r6]
   1b254:	f8ca 4000 	str.w	r4, [sl]
   1b258:	f8c9 4000 	str.w	r4, [r9]
   1b25c:	b171      	cbz	r1, 1b27c <ip_interface_getaddrinfo+0x48>
   1b25e:	4608      	mov	r0, r1
   1b260:	220a      	movs	r2, #10
   1b262:	4661      	mov	r1, ip
   1b264:	f007 f8bc 	bl	223e0 <strtol>
   1b268:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1b26c:	1e42      	subs	r2, r0, #1
   1b26e:	429a      	cmp	r2, r3
   1b270:	f200 8083 	bhi.w	1b37a <ip_interface_getaddrinfo+0x146>
   1b274:	0203      	lsls	r3, r0, #8
   1b276:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1b27a:	8030      	strh	r0, [r6, #0]
   1b27c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 1b41c <ip_interface_getaddrinfo+0x1e8>
   1b280:	f8d8 3000 	ldr.w	r3, [r8]
   1b284:	2b00      	cmp	r3, #0
   1b286:	d174      	bne.n	1b372 <ip_interface_getaddrinfo+0x13e>
   1b288:	4a60      	ldr	r2, [pc, #384]	; (1b40c <ip_interface_getaddrinfo+0x1d8>)
   1b28a:	6013      	str	r3, [r2, #0]
   1b28c:	4a60      	ldr	r2, [pc, #384]	; (1b410 <ip_interface_getaddrinfo+0x1dc>)
   1b28e:	6013      	str	r3, [r2, #0]
   1b290:	2f00      	cmp	r7, #0
   1b292:	d062      	beq.n	1b35a <ip_interface_getaddrinfo+0x126>
   1b294:	4638      	mov	r0, r7
   1b296:	f7f1 fdeb 	bl	ce70 <strlen>
   1b29a:	4683      	mov	fp, r0
   1b29c:	b125      	cbz	r5, 1b2a8 <ip_interface_getaddrinfo+0x74>
   1b29e:	69ea      	ldr	r2, [r5, #28]
   1b2a0:	b112      	cbz	r2, 1b2a8 <ip_interface_getaddrinfo+0x74>
   1b2a2:	6851      	ldr	r1, [r2, #4]
   1b2a4:	2966      	cmp	r1, #102	; 0x66
   1b2a6:	d06c      	beq.n	1b382 <ip_interface_getaddrinfo+0x14e>
   1b2a8:	f04f 32ff 	mov.w	r2, #4294967295
   1b2ac:	2100      	movs	r1, #0
   1b2ae:	ae04      	add	r6, sp, #16
   1b2b0:	f846 1d04 	str.w	r1, [r6, #-4]!
   1b2b4:	4630      	mov	r0, r6
   1b2b6:	4659      	mov	r1, fp
   1b2b8:	9200      	str	r2, [sp, #0]
   1b2ba:	f7fe ff63 	bl	1a184 <rpc_ip_client_request_alloc>
   1b2be:	9a00      	ldr	r2, [sp, #0]
   1b2c0:	2800      	cmp	r0, #0
   1b2c2:	d14c      	bne.n	1b35e <ip_interface_getaddrinfo+0x12a>
   1b2c4:	f247 010d 	movw	r1, #28685	; 0x700d
   1b2c8:	f04f 0c08 	mov.w	ip, #8
   1b2cc:	9c03      	ldr	r4, [sp, #12]
   1b2ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1b2d2:	60e1      	str	r1, [r4, #12]
   1b2d4:	6122      	str	r2, [r4, #16]
   1b2d6:	7260      	strb	r0, [r4, #9]
   1b2d8:	72a0      	strb	r0, [r4, #10]
   1b2da:	72e0      	strb	r0, [r4, #11]
   1b2dc:	f884 c008 	strb.w	ip, [r4, #8]
   1b2e0:	2d00      	cmp	r5, #0
   1b2e2:	d076      	beq.n	1b3d2 <ip_interface_getaddrinfo+0x19e>
   1b2e4:	686a      	ldr	r2, [r5, #4]
   1b2e6:	f022 0108 	bic.w	r1, r2, #8
   1b2ea:	2902      	cmp	r1, #2
   1b2ec:	d05c      	beq.n	1b3a8 <ip_interface_getaddrinfo+0x174>
   1b2ee:	2a05      	cmp	r2, #5
   1b2f0:	d178      	bne.n	1b3e4 <ip_interface_getaddrinfo+0x1b0>
   1b2f2:	68a9      	ldr	r1, [r5, #8]
   1b2f4:	2902      	cmp	r1, #2
   1b2f6:	f8c9 1000 	str.w	r1, [r9]
   1b2fa:	d061      	beq.n	1b3c0 <ip_interface_getaddrinfo+0x18c>
   1b2fc:	61a2      	str	r2, [r4, #24]
   1b2fe:	68ea      	ldr	r2, [r5, #12]
   1b300:	6222      	str	r2, [r4, #32]
   1b302:	68aa      	ldr	r2, [r5, #8]
   1b304:	61e2      	str	r2, [r4, #28]
   1b306:	682a      	ldr	r2, [r5, #0]
   1b308:	6162      	str	r2, [r4, #20]
   1b30a:	68a2      	ldr	r2, [r4, #8]
   1b30c:	3210      	adds	r2, #16
   1b30e:	60a2      	str	r2, [r4, #8]
   1b310:	b12f      	cbz	r7, 1b31e <ip_interface_getaddrinfo+0xea>
   1b312:	6820      	ldr	r0, [r4, #0]
   1b314:	b118      	cbz	r0, 1b31e <ip_interface_getaddrinfo+0xea>
   1b316:	465a      	mov	r2, fp
   1b318:	4639      	mov	r1, r7
   1b31a:	f00b fb74 	bl	26a06 <memcpy>
   1b31e:	2301      	movs	r3, #1
   1b320:	f247 010d 	movw	r1, #28685	; 0x700d
   1b324:	4620      	mov	r0, r4
   1b326:	f8c8 3000 	str.w	r3, [r8]
   1b32a:	f7fe ff3f 	bl	1a1ac <rpc_ip_client_request_send>
   1b32e:	2800      	cmp	r0, #0
   1b330:	d156      	bne.n	1b3e0 <ip_interface_getaddrinfo+0x1ac>
   1b332:	f04f 33ff 	mov.w	r3, #4294967295
   1b336:	9303      	str	r3, [sp, #12]
   1b338:	4631      	mov	r1, r6
   1b33a:	4620      	mov	r0, r4
   1b33c:	f7fa fbb6 	bl	15aac <bsd_os_timedwait>
   1b340:	f8d8 3000 	ldr.w	r3, [r8]
   1b344:	2b01      	cmp	r3, #1
   1b346:	d0f7      	beq.n	1b338 <ip_interface_getaddrinfo+0x104>
   1b348:	4b31      	ldr	r3, [pc, #196]	; (1b410 <ip_interface_getaddrinfo+0x1dc>)
   1b34a:	6818      	ldr	r0, [r3, #0]
   1b34c:	2800      	cmp	r0, #0
   1b34e:	d13b      	bne.n	1b3c8 <ip_interface_getaddrinfo+0x194>
   1b350:	4b2e      	ldr	r3, [pc, #184]	; (1b40c <ip_interface_getaddrinfo+0x1d8>)
   1b352:	9a01      	ldr	r2, [sp, #4]
   1b354:	681b      	ldr	r3, [r3, #0]
   1b356:	6013      	str	r3, [r2, #0]
   1b358:	e00c      	b.n	1b374 <ip_interface_getaddrinfo+0x140>
   1b35a:	46bb      	mov	fp, r7
   1b35c:	e79e      	b.n	1b29c <ip_interface_getaddrinfo+0x68>
   1b35e:	9c03      	ldr	r4, [sp, #12]
   1b360:	2c00      	cmp	r4, #0
   1b362:	d1bd      	bne.n	1b2e0 <ip_interface_getaddrinfo+0xac>
   1b364:	200c      	movs	r0, #12
   1b366:	2300      	movs	r3, #0
   1b368:	f8c8 3000 	str.w	r3, [r8]
   1b36c:	b005      	add	sp, #20
   1b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b372:	2073      	movs	r0, #115	; 0x73
   1b374:	b005      	add	sp, #20
   1b376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b37a:	2016      	movs	r0, #22
   1b37c:	b005      	add	sp, #20
   1b37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b382:	6891      	ldr	r1, [r2, #8]
   1b384:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1b388:	d18e      	bne.n	1b2a8 <ip_interface_getaddrinfo+0x74>
   1b38a:	f240 2102 	movw	r1, #514	; 0x202
   1b38e:	68d0      	ldr	r0, [r2, #12]
   1b390:	4288      	cmp	r0, r1
   1b392:	d189      	bne.n	1b2a8 <ip_interface_getaddrinfo+0x74>
   1b394:	6991      	ldr	r1, [r2, #24]
   1b396:	2900      	cmp	r1, #0
   1b398:	d086      	beq.n	1b2a8 <ip_interface_getaddrinfo+0x74>
   1b39a:	6868      	ldr	r0, [r5, #4]
   1b39c:	f002 fa8a 	bl	1d8b4 <pdn_interface_pdn_id_get>
   1b3a0:	1c43      	adds	r3, r0, #1
   1b3a2:	d081      	beq.n	1b2a8 <ip_interface_getaddrinfo+0x74>
   1b3a4:	4602      	mov	r2, r0
   1b3a6:	e781      	b.n	1b2ac <ip_interface_getaddrinfo+0x78>
   1b3a8:	68a9      	ldr	r1, [r5, #8]
   1b3aa:	2902      	cmp	r1, #2
   1b3ac:	f8c9 1000 	str.w	r1, [r9]
   1b3b0:	d006      	beq.n	1b3c0 <ip_interface_getaddrinfo+0x18c>
   1b3b2:	2a05      	cmp	r2, #5
   1b3b4:	d0a2      	beq.n	1b2fc <ip_interface_getaddrinfo+0xc8>
   1b3b6:	2a0a      	cmp	r2, #10
   1b3b8:	bf14      	ite	ne
   1b3ba:	2201      	movne	r2, #1
   1b3bc:	2202      	moveq	r2, #2
   1b3be:	e79d      	b.n	1b2fc <ip_interface_getaddrinfo+0xc8>
   1b3c0:	2102      	movs	r1, #2
   1b3c2:	f8ca 1000 	str.w	r1, [sl]
   1b3c6:	e7f4      	b.n	1b3b2 <ip_interface_getaddrinfo+0x17e>
   1b3c8:	4b11      	ldr	r3, [pc, #68]	; (1b410 <ip_interface_getaddrinfo+0x1dc>)
   1b3ca:	6818      	ldr	r0, [r3, #0]
   1b3cc:	2800      	cmp	r0, #0
   1b3ce:	d0d1      	beq.n	1b374 <ip_interface_getaddrinfo+0x140>
   1b3d0:	e7c9      	b.n	1b366 <ip_interface_getaddrinfo+0x132>
   1b3d2:	4629      	mov	r1, r5
   1b3d4:	2210      	movs	r2, #16
   1b3d6:	f104 0014 	add.w	r0, r4, #20
   1b3da:	f00b fb21 	bl	26a20 <memset>
   1b3de:	e794      	b.n	1b30a <ip_interface_getaddrinfo+0xd6>
   1b3e0:	2023      	movs	r0, #35	; 0x23
   1b3e2:	e7c0      	b.n	1b366 <ip_interface_getaddrinfo+0x132>
   1b3e4:	202f      	movs	r0, #47	; 0x2f
   1b3e6:	f7fa fc17 	bl	15c18 <bsd_os_errno_set>
   1b3ea:	68a2      	ldr	r2, [r4, #8]
   1b3ec:	3210      	adds	r2, #16
   1b3ee:	60a2      	str	r2, [r4, #8]
   1b3f0:	b917      	cbnz	r7, 1b3f8 <ip_interface_getaddrinfo+0x1c4>
   1b3f2:	f04f 30ff 	mov.w	r0, #4294967295
   1b3f6:	e7b6      	b.n	1b366 <ip_interface_getaddrinfo+0x132>
   1b3f8:	6820      	ldr	r0, [r4, #0]
   1b3fa:	2800      	cmp	r0, #0
   1b3fc:	d0f9      	beq.n	1b3f2 <ip_interface_getaddrinfo+0x1be>
   1b3fe:	465a      	mov	r2, fp
   1b400:	4639      	mov	r1, r7
   1b402:	f00b fb00 	bl	26a06 <memcpy>
   1b406:	e7f4      	b.n	1b3f2 <ip_interface_getaddrinfo+0x1be>
   1b408:	20026ea0 	.word	0x20026ea0
   1b40c:	20021fa0 	.word	0x20021fa0
   1b410:	20021f98 	.word	0x20021f98
   1b414:	20021f90 	.word	0x20021f90
   1b418:	20021f94 	.word	0x20021f94
   1b41c:	20021f9c 	.word	0x20021f9c

0001b420 <ip_interface_freeaddrinfo>:
   1b420:	b538      	push	{r3, r4, r5, lr}
   1b422:	4d0b      	ldr	r5, [pc, #44]	; (1b450 <ip_interface_freeaddrinfo+0x30>)
   1b424:	682b      	ldr	r3, [r5, #0]
   1b426:	2b02      	cmp	r3, #2
   1b428:	d000      	beq.n	1b42c <ip_interface_freeaddrinfo+0xc>
   1b42a:	bd38      	pop	{r3, r4, r5, pc}
   1b42c:	b150      	cbz	r0, 1b444 <ip_interface_freeaddrinfo+0x24>
   1b42e:	4604      	mov	r4, r0
   1b430:	6940      	ldr	r0, [r0, #20]
   1b432:	f004 f8c9 	bl	1f5c8 <nrf_free>
   1b436:	69a0      	ldr	r0, [r4, #24]
   1b438:	b108      	cbz	r0, 1b43e <ip_interface_freeaddrinfo+0x1e>
   1b43a:	f004 f8c5 	bl	1f5c8 <nrf_free>
   1b43e:	4620      	mov	r0, r4
   1b440:	f004 f8c2 	bl	1f5c8 <nrf_free>
   1b444:	2300      	movs	r3, #0
   1b446:	4a03      	ldr	r2, [pc, #12]	; (1b454 <ip_interface_freeaddrinfo+0x34>)
   1b448:	602b      	str	r3, [r5, #0]
   1b44a:	6013      	str	r3, [r2, #0]
   1b44c:	bd38      	pop	{r3, r4, r5, pc}
   1b44e:	bf00      	nop
   1b450:	20021f9c 	.word	0x20021f9c
   1b454:	20021f98 	.word	0x20021f98

0001b458 <rpc_ip_event_handler>:
   1b458:	f248 030d 	movw	r3, #32781	; 0x800d
   1b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b460:	4299      	cmp	r1, r3
   1b462:	b089      	sub	sp, #36	; 0x24
   1b464:	4604      	mov	r4, r0
   1b466:	d062      	beq.n	1b52e <rpc_ip_event_handler+0xd6>
   1b468:	f248 030f 	movw	r3, #32783	; 0x800f
   1b46c:	4299      	cmp	r1, r3
   1b46e:	460d      	mov	r5, r1
   1b470:	d04b      	beq.n	1b50a <rpc_ip_event_handler+0xb2>
   1b472:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1b476:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1b47a:	68c0      	ldr	r0, [r0, #12]
   1b47c:	d07b      	beq.n	1b576 <rpc_ip_event_handler+0x11e>
   1b47e:	0c07      	lsrs	r7, r0, #16
   1b480:	4638      	mov	r0, r7
   1b482:	f004 fcfb 	bl	1fe7c <interface_socket_from_handle_get>
   1b486:	4606      	mov	r6, r0
   1b488:	2800      	cmp	r0, #0
   1b48a:	d05f      	beq.n	1b54c <rpc_ip_event_handler+0xf4>
   1b48c:	4601      	mov	r1, r0
   1b48e:	462b      	mov	r3, r5
   1b490:	4622      	mov	r2, r4
   1b492:	4638      	mov	r0, r7
   1b494:	f7fe fde4 	bl	1a060 <tls_rpc_ip_event_handler>
   1b498:	2800      	cmp	r0, #0
   1b49a:	d053      	beq.n	1b544 <rpc_ip_event_handler+0xec>
   1b49c:	f248 0307 	movw	r3, #32775	; 0x8007
   1b4a0:	429d      	cmp	r5, r3
   1b4a2:	d97d      	bls.n	1b5a0 <rpc_ip_event_handler+0x148>
   1b4a4:	f248 030c 	movw	r3, #32780	; 0x800c
   1b4a8:	429d      	cmp	r5, r3
   1b4aa:	d068      	beq.n	1b57e <rpc_ip_event_handler+0x126>
   1b4ac:	f240 8137 	bls.w	1b71e <rpc_ip_event_handler+0x2c6>
   1b4b0:	f249 0302 	movw	r3, #36866	; 0x9002
   1b4b4:	429d      	cmp	r5, r3
   1b4b6:	f000 819f 	beq.w	1b7f8 <rpc_ip_event_handler+0x3a0>
   1b4ba:	f249 0303 	movw	r3, #36867	; 0x9003
   1b4be:	429d      	cmp	r5, r3
   1b4c0:	f000 81b2 	beq.w	1b828 <rpc_ip_event_handler+0x3d0>
   1b4c4:	f249 0301 	movw	r3, #36865	; 0x9001
   1b4c8:	429d      	cmp	r5, r3
   1b4ca:	d13f      	bne.n	1b54c <rpc_ip_event_handler+0xf4>
   1b4cc:	6835      	ldr	r5, [r6, #0]
   1b4ce:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1b4d2:	f000 81d3 	beq.w	1b87c <rpc_ip_event_handler+0x424>
   1b4d6:	68a3      	ldr	r3, [r4, #8]
   1b4d8:	2b04      	cmp	r3, #4
   1b4da:	f200 8207 	bhi.w	1b8ec <rpc_ip_event_handler+0x494>
   1b4de:	2500      	movs	r5, #0
   1b4e0:	462f      	mov	r7, r5
   1b4e2:	6821      	ldr	r1, [r4, #0]
   1b4e4:	6862      	ldr	r2, [r4, #4]
   1b4e6:	e9cd 7506 	strd	r7, r5, [sp, #24]
   1b4ea:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1b4ee:	69f0      	ldr	r0, [r6, #28]
   1b4f0:	a904      	add	r1, sp, #16
   1b4f2:	6803      	ldr	r3, [r0, #0]
   1b4f4:	685b      	ldr	r3, [r3, #4]
   1b4f6:	4798      	blx	r3
   1b4f8:	3001      	adds	r0, #1
   1b4fa:	f000 81de 	beq.w	1b8ba <rpc_ip_event_handler+0x462>
   1b4fe:	6833      	ldr	r3, [r6, #0]
   1b500:	2000      	movs	r0, #0
   1b502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b506:	6033      	str	r3, [r6, #0]
   1b508:	e00e      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b50a:	6943      	ldr	r3, [r0, #20]
   1b50c:	2001      	movs	r0, #1
   1b50e:	2b10      	cmp	r3, #16
   1b510:	49bc      	ldr	r1, [pc, #752]	; (1b804 <rpc_ip_event_handler+0x3ac>)
   1b512:	bf88      	it	hi
   1b514:	222d      	movhi	r2, #45	; 0x2d
   1b516:	7008      	strb	r0, [r1, #0]
   1b518:	f04f 0000 	mov.w	r0, #0
   1b51c:	bf9c      	itt	ls
   1b51e:	4aba      	ldrls	r2, [pc, #744]	; (1b808 <rpc_ip_event_handler+0x3b0>)
   1b520:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1b524:	4bb9      	ldr	r3, [pc, #740]	; (1b80c <rpc_ip_event_handler+0x3b4>)
   1b526:	601a      	str	r2, [r3, #0]
   1b528:	b009      	add	sp, #36	; 0x24
   1b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b52e:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 1b820 <rpc_ip_event_handler+0x3c8>
   1b532:	6807      	ldr	r7, [r0, #0]
   1b534:	f8da 2000 	ldr.w	r2, [sl]
   1b538:	2a01      	cmp	r2, #1
   1b53a:	d00b      	beq.n	1b554 <rpc_ip_event_handler+0xfc>
   1b53c:	b117      	cbz	r7, 1b544 <rpc_ip_event_handler+0xec>
   1b53e:	4638      	mov	r0, r7
   1b540:	f7fe fe52 	bl	1a1e8 <rpc_ip_client_data_free>
   1b544:	2000      	movs	r0, #0
   1b546:	b009      	add	sp, #36	; 0x24
   1b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b54c:	6820      	ldr	r0, [r4, #0]
   1b54e:	2800      	cmp	r0, #0
   1b550:	d1f6      	bne.n	1b540 <rpc_ip_event_handler+0xe8>
   1b552:	e7f7      	b.n	1b544 <rpc_ip_event_handler+0xec>
   1b554:	6942      	ldr	r2, [r0, #20]
   1b556:	2a00      	cmp	r2, #0
   1b558:	d046      	beq.n	1b5e8 <rpc_ip_event_handler+0x190>
   1b55a:	2a10      	cmp	r2, #16
   1b55c:	bf8e      	itee	hi
   1b55e:	222d      	movhi	r2, #45	; 0x2d
   1b560:	49a9      	ldrls	r1, [pc, #676]	; (1b808 <rpc_ip_event_handler+0x3b0>)
   1b562:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   1b566:	49aa      	ldr	r1, [pc, #680]	; (1b810 <rpc_ip_event_handler+0x3b8>)
   1b568:	600a      	str	r2, [r1, #0]
   1b56a:	2202      	movs	r2, #2
   1b56c:	f8ca 2000 	str.w	r2, [sl]
   1b570:	2f00      	cmp	r7, #0
   1b572:	d1e4      	bne.n	1b53e <rpc_ip_event_handler+0xe6>
   1b574:	e7e6      	b.n	1b544 <rpc_ip_event_handler+0xec>
   1b576:	f004 fc2f 	bl	1fdd8 <interface_from_internal_id_search>
   1b57a:	4607      	mov	r7, r0
   1b57c:	e780      	b.n	1b480 <rpc_ip_event_handler+0x28>
   1b57e:	6833      	ldr	r3, [r6, #0]
   1b580:	b29b      	uxth	r3, r3
   1b582:	2b08      	cmp	r3, #8
   1b584:	d1de      	bne.n	1b544 <rpc_ip_event_handler+0xec>
   1b586:	6963      	ldr	r3, [r4, #20]
   1b588:	2b00      	cmp	r3, #0
   1b58a:	f000 8198 	beq.w	1b8be <rpc_ip_event_handler+0x466>
   1b58e:	2b10      	cmp	r3, #16
   1b590:	f200 8169 	bhi.w	1b866 <rpc_ip_event_handler+0x40e>
   1b594:	4a9c      	ldr	r2, [pc, #624]	; (1b808 <rpc_ip_event_handler+0x3b0>)
   1b596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b59a:	6073      	str	r3, [r6, #4]
   1b59c:	2000      	movs	r0, #0
   1b59e:	e7c3      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b5a0:	f248 0306 	movw	r3, #32774	; 0x8006
   1b5a4:	429d      	cmp	r5, r3
   1b5a6:	f080 80fc 	bcs.w	1b7a2 <rpc_ip_event_handler+0x34a>
   1b5aa:	f248 0302 	movw	r3, #32770	; 0x8002
   1b5ae:	429d      	cmp	r5, r3
   1b5b0:	f000 80df 	beq.w	1b772 <rpc_ip_event_handler+0x31a>
   1b5b4:	f240 80cc 	bls.w	1b750 <rpc_ip_event_handler+0x2f8>
   1b5b8:	f248 0303 	movw	r3, #32771	; 0x8003
   1b5bc:	429d      	cmp	r5, r3
   1b5be:	f000 810f 	beq.w	1b7e0 <rpc_ip_event_handler+0x388>
   1b5c2:	f248 0305 	movw	r3, #32773	; 0x8005
   1b5c6:	429d      	cmp	r5, r3
   1b5c8:	d1c0      	bne.n	1b54c <rpc_ip_event_handler+0xf4>
   1b5ca:	6833      	ldr	r3, [r6, #0]
   1b5cc:	b29b      	uxth	r3, r3
   1b5ce:	2b03      	cmp	r3, #3
   1b5d0:	d1b8      	bne.n	1b544 <rpc_ip_event_handler+0xec>
   1b5d2:	6963      	ldr	r3, [r4, #20]
   1b5d4:	2b00      	cmp	r3, #0
   1b5d6:	d1da      	bne.n	1b58e <rpc_ip_event_handler+0x136>
   1b5d8:	6833      	ldr	r3, [r6, #0]
   1b5da:	2000      	movs	r0, #0
   1b5dc:	0c1b      	lsrs	r3, r3, #16
   1b5de:	041b      	lsls	r3, r3, #16
   1b5e0:	f043 0304 	orr.w	r3, r3, #4
   1b5e4:	6033      	str	r3, [r6, #0]
   1b5e6:	e79f      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b5e8:	6985      	ldr	r5, [r0, #24]
   1b5ea:	016b      	lsls	r3, r5, #5
   1b5ec:	4618      	mov	r0, r3
   1b5ee:	9303      	str	r3, [sp, #12]
   1b5f0:	f003 ffe0 	bl	1f5b4 <nrf_malloc>
   1b5f4:	9002      	str	r0, [sp, #8]
   1b5f6:	2800      	cmp	r0, #0
   1b5f8:	f000 808a 	beq.w	1b710 <rpc_ip_event_handler+0x2b8>
   1b5fc:	00ee      	lsls	r6, r5, #3
   1b5fe:	1970      	adds	r0, r6, r5
   1b600:	0080      	lsls	r0, r0, #2
   1b602:	f003 ffd7 	bl	1f5b4 <nrf_malloc>
   1b606:	2800      	cmp	r0, #0
   1b608:	f000 8084 	beq.w	1b714 <rpc_ip_event_handler+0x2bc>
   1b60c:	2d00      	cmp	r5, #0
   1b60e:	f000 8084 	beq.w	1b71a <rpc_ip_event_handler+0x2c2>
   1b612:	2204      	movs	r2, #4
   1b614:	3610      	adds	r6, #16
   1b616:	1983      	adds	r3, r0, r6
   1b618:	9301      	str	r3, [sp, #4]
   1b61a:	9b02      	ldr	r3, [sp, #8]
   1b61c:	f8df b204 	ldr.w	fp, [pc, #516]	; 1b824 <rpc_ip_event_handler+0x3cc>
   1b620:	f100 0810 	add.w	r8, r0, #16
   1b624:	f103 0520 	add.w	r5, r3, #32
   1b628:	58bb      	ldr	r3, [r7, r2]
   1b62a:	18b9      	adds	r1, r7, r2
   1b62c:	f845 3c20 	str.w	r3, [r5, #-32]
   1b630:	684b      	ldr	r3, [r1, #4]
   1b632:	f8db 0000 	ldr.w	r0, [fp]
   1b636:	2b02      	cmp	r3, #2
   1b638:	bf14      	ite	ne
   1b63a:	2602      	movne	r6, #2
   1b63c:	260a      	moveq	r6, #10
   1b63e:	4b75      	ldr	r3, [pc, #468]	; (1b814 <rpc_ip_event_handler+0x3bc>)
   1b640:	e945 6007 	strd	r6, r0, [r5, #-28]
   1b644:	681b      	ldr	r3, [r3, #0]
   1b646:	f102 0614 	add.w	r6, r2, #20
   1b64a:	f845 3c14 	str.w	r3, [r5, #-20]
   1b64e:	8a08      	ldrh	r0, [r1, #16]
   1b650:	f1a8 0310 	sub.w	r3, r8, #16
   1b654:	f845 0c10 	str.w	r0, [r5, #-16]
   1b658:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   1b65c:	f845 3c0c 	str.w	r3, [r5, #-12]
   1b660:	4b6d      	ldr	r3, [pc, #436]	; (1b818 <rpc_ip_event_handler+0x3c0>)
   1b662:	2804      	cmp	r0, #4
   1b664:	eb07 0106 	add.w	r1, r7, r6
   1b668:	881b      	ldrh	r3, [r3, #0]
   1b66a:	d042      	beq.n	1b6f2 <rpc_ip_event_handler+0x29a>
   1b66c:	220a      	movs	r2, #10
   1b66e:	f848 2c0c 	str.w	r2, [r8, #-12]
   1b672:	f04f 0224 	mov.w	r2, #36	; 0x24
   1b676:	f828 3c08 	strh.w	r3, [r8, #-8]
   1b67a:	f808 2c10 	strb.w	r2, [r8, #-16]
   1b67e:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1b682:	4640      	mov	r0, r8
   1b684:	f00b f9bf 	bl	26a06 <memcpy>
   1b688:	f855 3c10 	ldr.w	r3, [r5, #-16]
   1b68c:	f109 0001 	add.w	r0, r9, #1
   1b690:	441e      	add	r6, r3
   1b692:	f003 ff8f 	bl	1f5b4 <nrf_malloc>
   1b696:	19b9      	adds	r1, r7, r6
   1b698:	eb09 0206 	add.w	r2, r9, r6
   1b69c:	f845 0c08 	str.w	r0, [r5, #-8]
   1b6a0:	b1e8      	cbz	r0, 1b6de <rpc_ip_event_handler+0x286>
   1b6a2:	464a      	mov	r2, r9
   1b6a4:	f00b f9af 	bl	26a06 <memcpy>
   1b6a8:	2100      	movs	r1, #0
   1b6aa:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1b6ae:	f108 0808 	add.w	r8, r8, #8
   1b6b2:	f803 1009 	strb.w	r1, [r3, r9]
   1b6b6:	9b01      	ldr	r3, [sp, #4]
   1b6b8:	f845 5c04 	str.w	r5, [r5, #-4]
   1b6bc:	4598      	cmp	r8, r3
   1b6be:	eb09 0206 	add.w	r2, r9, r6
   1b6c2:	f105 0520 	add.w	r5, r5, #32
   1b6c6:	d1af      	bne.n	1b628 <rpc_ip_event_handler+0x1d0>
   1b6c8:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   1b6cc:	2100      	movs	r1, #0
   1b6ce:	4403      	add	r3, r0
   1b6d0:	f843 1c04 	str.w	r1, [r3, #-4]
   1b6d4:	4603      	mov	r3, r0
   1b6d6:	4a51      	ldr	r2, [pc, #324]	; (1b81c <rpc_ip_event_handler+0x3c4>)
   1b6d8:	6827      	ldr	r7, [r4, #0]
   1b6da:	6013      	str	r3, [r2, #0]
   1b6dc:	e745      	b.n	1b56a <rpc_ip_event_handler+0x112>
   1b6de:	9b01      	ldr	r3, [sp, #4]
   1b6e0:	f108 0808 	add.w	r8, r8, #8
   1b6e4:	4543      	cmp	r3, r8
   1b6e6:	f845 5c04 	str.w	r5, [r5, #-4]
   1b6ea:	f105 0520 	add.w	r5, r5, #32
   1b6ee:	d19b      	bne.n	1b628 <rpc_ip_event_handler+0x1d0>
   1b6f0:	e7ea      	b.n	1b6c8 <rpc_ip_event_handler+0x270>
   1b6f2:	2210      	movs	r2, #16
   1b6f4:	2002      	movs	r0, #2
   1b6f6:	f828 3c08 	strh.w	r3, [r8, #-8]
   1b6fa:	f848 0c0c 	str.w	r0, [r8, #-12]
   1b6fe:	f808 2c10 	strb.w	r2, [r8, #-16]
   1b702:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1b706:	f1a8 0004 	sub.w	r0, r8, #4
   1b70a:	f00b f97c 	bl	26a06 <memcpy>
   1b70e:	e7bb      	b.n	1b688 <rpc_ip_event_handler+0x230>
   1b710:	f003 ff5a 	bl	1f5c8 <nrf_free>
   1b714:	210c      	movs	r1, #12
   1b716:	4a3e      	ldr	r2, [pc, #248]	; (1b810 <rpc_ip_event_handler+0x3b8>)
   1b718:	6011      	str	r1, [r2, #0]
   1b71a:	9b02      	ldr	r3, [sp, #8]
   1b71c:	e7db      	b.n	1b6d6 <rpc_ip_event_handler+0x27e>
   1b71e:	f248 0308 	movw	r3, #32776	; 0x8008
   1b722:	429d      	cmp	r5, r3
   1b724:	d04d      	beq.n	1b7c2 <rpc_ip_event_handler+0x36a>
   1b726:	f248 0309 	movw	r3, #32777	; 0x8009
   1b72a:	429d      	cmp	r5, r3
   1b72c:	f47f af0e 	bne.w	1b54c <rpc_ip_event_handler+0xf4>
   1b730:	6833      	ldr	r3, [r6, #0]
   1b732:	b29b      	uxth	r3, r3
   1b734:	2b0d      	cmp	r3, #13
   1b736:	f47f af05 	bne.w	1b544 <rpc_ip_event_handler+0xec>
   1b73a:	6960      	ldr	r0, [r4, #20]
   1b73c:	2800      	cmp	r0, #0
   1b73e:	f000 80c9 	beq.w	1b8d4 <rpc_ip_event_handler+0x47c>
   1b742:	2810      	cmp	r0, #16
   1b744:	f200 808f 	bhi.w	1b866 <rpc_ip_event_handler+0x40e>
   1b748:	4b2f      	ldr	r3, [pc, #188]	; (1b808 <rpc_ip_event_handler+0x3b0>)
   1b74a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b74e:	e724      	b.n	1b59a <rpc_ip_event_handler+0x142>
   1b750:	f248 0301 	movw	r3, #32769	; 0x8001
   1b754:	429d      	cmp	r5, r3
   1b756:	f47f aef9 	bne.w	1b54c <rpc_ip_event_handler+0xf4>
   1b75a:	6833      	ldr	r3, [r6, #0]
   1b75c:	2b01      	cmp	r3, #1
   1b75e:	f47f aef1 	bne.w	1b544 <rpc_ip_event_handler+0xec>
   1b762:	6960      	ldr	r0, [r4, #20]
   1b764:	2800      	cmp	r0, #0
   1b766:	d1ec      	bne.n	1b742 <rpc_ip_event_handler+0x2ea>
   1b768:	2302      	movs	r3, #2
   1b76a:	6033      	str	r3, [r6, #0]
   1b76c:	69a3      	ldr	r3, [r4, #24]
   1b76e:	61b3      	str	r3, [r6, #24]
   1b770:	e6da      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b772:	6833      	ldr	r3, [r6, #0]
   1b774:	0099      	lsls	r1, r3, #2
   1b776:	f57f aee5 	bpl.w	1b544 <rpc_ip_event_handler+0xec>
   1b77a:	6833      	ldr	r3, [r6, #0]
   1b77c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b780:	6033      	str	r3, [r6, #0]
   1b782:	6960      	ldr	r0, [r4, #20]
   1b784:	2800      	cmp	r0, #0
   1b786:	d07e      	beq.n	1b886 <rpc_ip_event_handler+0x42e>
   1b788:	2810      	cmp	r0, #16
   1b78a:	f200 8094 	bhi.w	1b8b6 <rpc_ip_event_handler+0x45e>
   1b78e:	4b1e      	ldr	r3, [pc, #120]	; (1b808 <rpc_ip_event_handler+0x3b0>)
   1b790:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b794:	6073      	str	r3, [r6, #4]
   1b796:	6833      	ldr	r3, [r6, #0]
   1b798:	2000      	movs	r0, #0
   1b79a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b79e:	6033      	str	r3, [r6, #0]
   1b7a0:	e6c2      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b7a2:	6833      	ldr	r3, [r6, #0]
   1b7a4:	029a      	lsls	r2, r3, #10
   1b7a6:	f57f aecd 	bpl.w	1b544 <rpc_ip_event_handler+0xec>
   1b7aa:	6963      	ldr	r3, [r4, #20]
   1b7ac:	2b00      	cmp	r3, #0
   1b7ae:	d079      	beq.n	1b8a4 <rpc_ip_event_handler+0x44c>
   1b7b0:	2b6b      	cmp	r3, #107	; 0x6b
   1b7b2:	f000 8096 	beq.w	1b8e2 <rpc_ip_event_handler+0x48a>
   1b7b6:	2b10      	cmp	r3, #16
   1b7b8:	d87d      	bhi.n	1b8b6 <rpc_ip_event_handler+0x45e>
   1b7ba:	4a13      	ldr	r2, [pc, #76]	; (1b808 <rpc_ip_event_handler+0x3b0>)
   1b7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b7c0:	e7e8      	b.n	1b794 <rpc_ip_event_handler+0x33c>
   1b7c2:	6833      	ldr	r3, [r6, #0]
   1b7c4:	b29b      	uxth	r3, r3
   1b7c6:	2b06      	cmp	r3, #6
   1b7c8:	f47f aebc 	bne.w	1b544 <rpc_ip_event_handler+0xec>
   1b7cc:	6960      	ldr	r0, [r4, #20]
   1b7ce:	2800      	cmp	r0, #0
   1b7d0:	d1b7      	bne.n	1b742 <rpc_ip_event_handler+0x2ea>
   1b7d2:	6833      	ldr	r3, [r6, #0]
   1b7d4:	0c1b      	lsrs	r3, r3, #16
   1b7d6:	041b      	lsls	r3, r3, #16
   1b7d8:	f043 0307 	orr.w	r3, r3, #7
   1b7dc:	6033      	str	r3, [r6, #0]
   1b7de:	e6a3      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b7e0:	6833      	ldr	r3, [r6, #0]
   1b7e2:	025b      	lsls	r3, r3, #9
   1b7e4:	f57f aeae 	bpl.w	1b544 <rpc_ip_event_handler+0xec>
   1b7e8:	6960      	ldr	r0, [r4, #20]
   1b7ea:	2800      	cmp	r0, #0
   1b7ec:	d1a9      	bne.n	1b742 <rpc_ip_event_handler+0x2ea>
   1b7ee:	6833      	ldr	r3, [r6, #0]
   1b7f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1b7f4:	6033      	str	r3, [r6, #0]
   1b7f6:	e697      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b7f8:	6833      	ldr	r3, [r6, #0]
   1b7fa:	b29b      	uxth	r3, r3
   1b7fc:	2b07      	cmp	r3, #7
   1b7fe:	f47f aea1 	bne.w	1b544 <rpc_ip_event_handler+0xec>
   1b802:	e67c      	b.n	1b4fe <rpc_ip_event_handler+0xa6>
   1b804:	2002a08d 	.word	0x2002a08d
   1b808:	00028240 	.word	0x00028240
   1b80c:	20021fc8 	.word	0x20021fc8
   1b810:	20021f98 	.word	0x20021f98
   1b814:	20021f90 	.word	0x20021f90
   1b818:	20026ea0 	.word	0x20026ea0
   1b81c:	20021fa0 	.word	0x20021fa0
   1b820:	20021f9c 	.word	0x20021f9c
   1b824:	20021f94 	.word	0x20021f94
   1b828:	6833      	ldr	r3, [r6, #0]
   1b82a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1b82e:	6033      	str	r3, [r6, #0]
   1b830:	6833      	ldr	r3, [r6, #0]
   1b832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b836:	6033      	str	r3, [r6, #0]
   1b838:	6833      	ldr	r3, [r6, #0]
   1b83a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1b83e:	6033      	str	r3, [r6, #0]
   1b840:	6833      	ldr	r3, [r6, #0]
   1b842:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b846:	6033      	str	r3, [r6, #0]
   1b848:	6923      	ldr	r3, [r4, #16]
   1b84a:	2b6c      	cmp	r3, #108	; 0x6c
   1b84c:	d00d      	beq.n	1b86a <rpc_ip_event_handler+0x412>
   1b84e:	2b10      	cmp	r3, #16
   1b850:	bf8c      	ite	hi
   1b852:	232d      	movhi	r3, #45	; 0x2d
   1b854:	4a41      	ldrls	r2, [pc, #260]	; (1b95c <rpc_ip_event_handler+0x504>)
   1b856:	f04f 0000 	mov.w	r0, #0
   1b85a:	bf98      	it	ls
   1b85c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1b860:	6073      	str	r3, [r6, #4]
   1b862:	60b3      	str	r3, [r6, #8]
   1b864:	e660      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b866:	232d      	movs	r3, #45	; 0x2d
   1b868:	e697      	b.n	1b59a <rpc_ip_event_handler+0x142>
   1b86a:	2239      	movs	r2, #57	; 0x39
   1b86c:	6833      	ldr	r3, [r6, #0]
   1b86e:	2000      	movs	r0, #0
   1b870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1b874:	6033      	str	r3, [r6, #0]
   1b876:	6072      	str	r2, [r6, #4]
   1b878:	60b2      	str	r2, [r6, #8]
   1b87a:	e655      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b87c:	6820      	ldr	r0, [r4, #0]
   1b87e:	f7fe fcb3 	bl	1a1e8 <rpc_ip_client_data_free>
   1b882:	4628      	mov	r0, r5
   1b884:	e650      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b886:	6833      	ldr	r3, [r6, #0]
   1b888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b88c:	6033      	str	r3, [r6, #0]
   1b88e:	6833      	ldr	r3, [r6, #0]
   1b890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b894:	6033      	str	r3, [r6, #0]
   1b896:	6833      	ldr	r3, [r6, #0]
   1b898:	0c1b      	lsrs	r3, r3, #16
   1b89a:	041b      	lsls	r3, r3, #16
   1b89c:	f043 0305 	orr.w	r3, r3, #5
   1b8a0:	6033      	str	r3, [r6, #0]
   1b8a2:	e641      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b8a4:	6833      	ldr	r3, [r6, #0]
   1b8a6:	4a2e      	ldr	r2, [pc, #184]	; (1b960 <rpc_ip_event_handler+0x508>)
   1b8a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b8ac:	6033      	str	r3, [r6, #0]
   1b8ae:	2001      	movs	r0, #1
   1b8b0:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
   1b8b4:	e638      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b8b6:	232d      	movs	r3, #45	; 0x2d
   1b8b8:	e76c      	b.n	1b794 <rpc_ip_event_handler+0x33c>
   1b8ba:	2002      	movs	r0, #2
   1b8bc:	e634      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b8be:	4b28      	ldr	r3, [pc, #160]	; (1b960 <rpc_ip_event_handler+0x508>)
   1b8c0:	2001      	movs	r0, #1
   1b8c2:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1b8c6:	6833      	ldr	r3, [r6, #0]
   1b8c8:	0c1b      	lsrs	r3, r3, #16
   1b8ca:	041b      	lsls	r3, r3, #16
   1b8cc:	f043 0309 	orr.w	r3, r3, #9
   1b8d0:	6033      	str	r3, [r6, #0]
   1b8d2:	e629      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b8d4:	6833      	ldr	r3, [r6, #0]
   1b8d6:	0c1b      	lsrs	r3, r3, #16
   1b8d8:	041b      	lsls	r3, r3, #16
   1b8da:	f043 030e 	orr.w	r3, r3, #14
   1b8de:	6033      	str	r3, [r6, #0]
   1b8e0:	e622      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b8e2:	6933      	ldr	r3, [r6, #16]
   1b8e4:	2b01      	cmp	r3, #1
   1b8e6:	d005      	beq.n	1b8f4 <rpc_ip_event_handler+0x49c>
   1b8e8:	230c      	movs	r3, #12
   1b8ea:	e753      	b.n	1b794 <rpc_ip_event_handler+0x33c>
   1b8ec:	8a65      	ldrh	r5, [r4, #18]
   1b8ee:	b94d      	cbnz	r5, 1b904 <rpc_ip_event_handler+0x4ac>
   1b8f0:	462f      	mov	r7, r5
   1b8f2:	e5f6      	b.n	1b4e2 <rpc_ip_event_handler+0x8a>
   1b8f4:	220c      	movs	r2, #12
   1b8f6:	6833      	ldr	r3, [r6, #0]
   1b8f8:	2000      	movs	r0, #0
   1b8fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1b8fe:	6033      	str	r3, [r6, #0]
   1b900:	6072      	str	r2, [r6, #4]
   1b902:	e611      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b904:	2024      	movs	r0, #36	; 0x24
   1b906:	f003 fe55 	bl	1f5b4 <nrf_malloc>
   1b90a:	4607      	mov	r7, r0
   1b90c:	2800      	cmp	r0, #0
   1b90e:	d0d4      	beq.n	1b8ba <rpc_ip_event_handler+0x462>
   1b910:	8a62      	ldrh	r2, [r4, #18]
   1b912:	2a10      	cmp	r2, #16
   1b914:	d015      	beq.n	1b942 <rpc_ip_event_handler+0x4ea>
   1b916:	2a04      	cmp	r2, #4
   1b918:	d007      	beq.n	1b92a <rpc_ip_event_handler+0x4d2>
   1b91a:	6820      	ldr	r0, [r4, #0]
   1b91c:	f7fe fc64 	bl	1a1e8 <rpc_ip_client_data_free>
   1b920:	4638      	mov	r0, r7
   1b922:	f003 fe51 	bl	1f5c8 <nrf_free>
   1b926:	2000      	movs	r0, #0
   1b928:	e5fe      	b.n	1b528 <rpc_ip_event_handler+0xd0>
   1b92a:	2302      	movs	r3, #2
   1b92c:	2510      	movs	r5, #16
   1b92e:	6043      	str	r3, [r0, #4]
   1b930:	7005      	strb	r5, [r0, #0]
   1b932:	8a23      	ldrh	r3, [r4, #16]
   1b934:	f104 0114 	add.w	r1, r4, #20
   1b938:	8103      	strh	r3, [r0, #8]
   1b93a:	300c      	adds	r0, #12
   1b93c:	f00b f863 	bl	26a06 <memcpy>
   1b940:	e5cf      	b.n	1b4e2 <rpc_ip_event_handler+0x8a>
   1b942:	230a      	movs	r3, #10
   1b944:	2524      	movs	r5, #36	; 0x24
   1b946:	6043      	str	r3, [r0, #4]
   1b948:	7005      	strb	r5, [r0, #0]
   1b94a:	8a23      	ldrh	r3, [r4, #16]
   1b94c:	f104 0114 	add.w	r1, r4, #20
   1b950:	8103      	strh	r3, [r0, #8]
   1b952:	3010      	adds	r0, #16
   1b954:	f00b f857 	bl	26a06 <memcpy>
   1b958:	e5c3      	b.n	1b4e2 <rpc_ip_event_handler+0x8a>
   1b95a:	bf00      	nop
   1b95c:	00028240 	.word	0x00028240
   1b960:	20021fa4 	.word	0x20021fa4

0001b964 <rpc_handle_ctrl_message>:
   1b964:	2902      	cmp	r1, #2
   1b966:	b510      	push	{r4, lr}
   1b968:	4604      	mov	r4, r0
   1b96a:	d00c      	beq.n	1b986 <rpc_handle_ctrl_message+0x22>
   1b96c:	2904      	cmp	r1, #4
   1b96e:	d008      	beq.n	1b982 <rpc_handle_ctrl_message+0x1e>
   1b970:	2901      	cmp	r1, #1
   1b972:	d006      	beq.n	1b982 <rpc_handle_ctrl_message+0x1e>
   1b974:	6880      	ldr	r0, [r0, #8]
   1b976:	b108      	cbz	r0, 1b97c <rpc_handle_ctrl_message+0x18>
   1b978:	f7fc ff38 	bl	187ec <rpc_transport_data_free>
   1b97c:	4620      	mov	r0, r4
   1b97e:	f7fc ff33 	bl	187e8 <rpc_transport_rpc_free>
   1b982:	2000      	movs	r0, #0
   1b984:	bd10      	pop	{r4, pc}
   1b986:	6880      	ldr	r0, [r0, #8]
   1b988:	2800      	cmp	r0, #0
   1b98a:	d0fa      	beq.n	1b982 <rpc_handle_ctrl_message+0x1e>
   1b98c:	f7fc ff2e 	bl	187ec <rpc_transport_data_free>
   1b990:	2000      	movs	r0, #0
   1b992:	bd10      	pop	{r4, pc}

0001b994 <rpc_handle_data_message>:
   1b994:	4b23      	ldr	r3, [pc, #140]	; (1ba24 <rpc_handle_data_message+0x90>)
   1b996:	6802      	ldr	r2, [r0, #0]
   1b998:	8819      	ldrh	r1, [r3, #0]
   1b99a:	b292      	uxth	r2, r2
   1b99c:	4291      	cmp	r1, r2
   1b99e:	d027      	beq.n	1b9f0 <rpc_handle_data_message+0x5c>
   1b9a0:	8a19      	ldrh	r1, [r3, #16]
   1b9a2:	4291      	cmp	r1, r2
   1b9a4:	d02a      	beq.n	1b9fc <rpc_handle_data_message+0x68>
   1b9a6:	8c19      	ldrh	r1, [r3, #32]
   1b9a8:	4291      	cmp	r1, r2
   1b9aa:	d02b      	beq.n	1ba04 <rpc_handle_data_message+0x70>
   1b9ac:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   1b9ae:	4291      	cmp	r1, r2
   1b9b0:	d02a      	beq.n	1ba08 <rpc_handle_data_message+0x74>
   1b9b2:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   1b9b6:	4291      	cmp	r1, r2
   1b9b8:	d028      	beq.n	1ba0c <rpc_handle_data_message+0x78>
   1b9ba:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   1b9be:	4291      	cmp	r1, r2
   1b9c0:	d026      	beq.n	1ba10 <rpc_handle_data_message+0x7c>
   1b9c2:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   1b9c6:	4291      	cmp	r1, r2
   1b9c8:	d026      	beq.n	1ba18 <rpc_handle_data_message+0x84>
   1b9ca:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   1b9ce:	4291      	cmp	r1, r2
   1b9d0:	d024      	beq.n	1ba1c <rpc_handle_data_message+0x88>
   1b9d2:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1b9d6:	4291      	cmp	r1, r2
   1b9d8:	d01c      	beq.n	1ba14 <rpc_handle_data_message+0x80>
   1b9da:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   1b9de:	4291      	cmp	r1, r2
   1b9e0:	d01e      	beq.n	1ba20 <rpc_handle_data_message+0x8c>
   1b9e2:	6880      	ldr	r0, [r0, #8]
   1b9e4:	b160      	cbz	r0, 1ba00 <rpc_handle_data_message+0x6c>
   1b9e6:	b510      	push	{r4, lr}
   1b9e8:	f7fc ff00 	bl	187ec <rpc_transport_data_free>
   1b9ec:	2000      	movs	r0, #0
   1b9ee:	bd10      	pop	{r4, pc}
   1b9f0:	2200      	movs	r2, #0
   1b9f2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1b9f6:	685a      	ldr	r2, [r3, #4]
   1b9f8:	68d9      	ldr	r1, [r3, #12]
   1b9fa:	4710      	bx	r2
   1b9fc:	2201      	movs	r2, #1
   1b9fe:	e7f8      	b.n	1b9f2 <rpc_handle_data_message+0x5e>
   1ba00:	2000      	movs	r0, #0
   1ba02:	4770      	bx	lr
   1ba04:	2202      	movs	r2, #2
   1ba06:	e7f4      	b.n	1b9f2 <rpc_handle_data_message+0x5e>
   1ba08:	2203      	movs	r2, #3
   1ba0a:	e7f2      	b.n	1b9f2 <rpc_handle_data_message+0x5e>
   1ba0c:	2204      	movs	r2, #4
   1ba0e:	e7f0      	b.n	1b9f2 <rpc_handle_data_message+0x5e>
   1ba10:	2205      	movs	r2, #5
   1ba12:	e7ee      	b.n	1b9f2 <rpc_handle_data_message+0x5e>
   1ba14:	2208      	movs	r2, #8
   1ba16:	e7ec      	b.n	1b9f2 <rpc_handle_data_message+0x5e>
   1ba18:	2206      	movs	r2, #6
   1ba1a:	e7ea      	b.n	1b9f2 <rpc_handle_data_message+0x5e>
   1ba1c:	2207      	movs	r2, #7
   1ba1e:	e7e8      	b.n	1b9f2 <rpc_handle_data_message+0x5e>
   1ba20:	2209      	movs	r2, #9
   1ba22:	e7e6      	b.n	1b9f2 <rpc_handle_data_message+0x5e>
   1ba24:	20021fcc 	.word	0x20021fcc

0001ba28 <rpc_framework_init>:
   1ba28:	b508      	push	{r3, lr}
   1ba2a:	22a0      	movs	r2, #160	; 0xa0
   1ba2c:	2100      	movs	r1, #0
   1ba2e:	4802      	ldr	r0, [pc, #8]	; (1ba38 <rpc_framework_init+0x10>)
   1ba30:	f00a fff6 	bl	26a20 <memset>
   1ba34:	2000      	movs	r0, #0
   1ba36:	bd08      	pop	{r3, pc}
   1ba38:	20021fcc 	.word	0x20021fcc

0001ba3c <rpc_client_register>:
   1ba3c:	8803      	ldrh	r3, [r0, #0]
   1ba3e:	2b00      	cmp	r3, #0
   1ba40:	d045      	beq.n	1bace <rpc_client_register+0x92>
   1ba42:	6842      	ldr	r2, [r0, #4]
   1ba44:	4601      	mov	r1, r0
   1ba46:	2a00      	cmp	r2, #0
   1ba48:	d050      	beq.n	1baec <rpc_client_register+0xb0>
   1ba4a:	4a30      	ldr	r2, [pc, #192]	; (1bb0c <rpc_client_register+0xd0>)
   1ba4c:	8810      	ldrh	r0, [r2, #0]
   1ba4e:	4283      	cmp	r3, r0
   1ba50:	d03d      	beq.n	1bace <rpc_client_register+0x92>
   1ba52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba56:	8a14      	ldrh	r4, [r2, #16]
   1ba58:	42a3      	cmp	r3, r4
   1ba5a:	d035      	beq.n	1bac8 <rpc_client_register+0x8c>
   1ba5c:	8c15      	ldrh	r5, [r2, #32]
   1ba5e:	42ab      	cmp	r3, r5
   1ba60:	d032      	beq.n	1bac8 <rpc_client_register+0x8c>
   1ba62:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1ba64:	42b3      	cmp	r3, r6
   1ba66:	d02f      	beq.n	1bac8 <rpc_client_register+0x8c>
   1ba68:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   1ba6c:	42bb      	cmp	r3, r7
   1ba6e:	d02b      	beq.n	1bac8 <rpc_client_register+0x8c>
   1ba70:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1ba74:	4563      	cmp	r3, ip
   1ba76:	d027      	beq.n	1bac8 <rpc_client_register+0x8c>
   1ba78:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   1ba7c:	4573      	cmp	r3, lr
   1ba7e:	d023      	beq.n	1bac8 <rpc_client_register+0x8c>
   1ba80:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1ba84:	4543      	cmp	r3, r8
   1ba86:	d01f      	beq.n	1bac8 <rpc_client_register+0x8c>
   1ba88:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   1ba8c:	454b      	cmp	r3, r9
   1ba8e:	d01b      	beq.n	1bac8 <rpc_client_register+0x8c>
   1ba90:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   1ba94:	4553      	cmp	r3, sl
   1ba96:	d017      	beq.n	1bac8 <rpc_client_register+0x8c>
   1ba98:	b1e0      	cbz	r0, 1bad4 <rpc_client_register+0x98>
   1ba9a:	b35c      	cbz	r4, 1baf4 <rpc_client_register+0xb8>
   1ba9c:	b365      	cbz	r5, 1baf8 <rpc_client_register+0xbc>
   1ba9e:	b36e      	cbz	r6, 1bafc <rpc_client_register+0xc0>
   1baa0:	b377      	cbz	r7, 1bb00 <rpc_client_register+0xc4>
   1baa2:	f1bc 0f00 	cmp.w	ip, #0
   1baa6:	d02d      	beq.n	1bb04 <rpc_client_register+0xc8>
   1baa8:	f1be 0f00 	cmp.w	lr, #0
   1baac:	d020      	beq.n	1baf0 <rpc_client_register+0xb4>
   1baae:	f1b8 0f00 	cmp.w	r8, #0
   1bab2:	d029      	beq.n	1bb08 <rpc_client_register+0xcc>
   1bab4:	f1b9 0f00 	cmp.w	r9, #0
   1bab8:	d00b      	beq.n	1bad2 <rpc_client_register+0x96>
   1baba:	2009      	movs	r0, #9
   1babc:	f1ba 0f00 	cmp.w	sl, #0
   1bac0:	d008      	beq.n	1bad4 <rpc_client_register+0x98>
   1bac2:	2004      	movs	r0, #4
   1bac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bac8:	2007      	movs	r0, #7
   1baca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bace:	2007      	movs	r0, #7
   1bad0:	4770      	bx	lr
   1bad2:	2008      	movs	r0, #8
   1bad4:	0100      	lsls	r0, r0, #4
   1bad6:	5213      	strh	r3, [r2, r0]
   1bad8:	684b      	ldr	r3, [r1, #4]
   1bada:	4402      	add	r2, r0
   1badc:	6053      	str	r3, [r2, #4]
   1bade:	688b      	ldr	r3, [r1, #8]
   1bae0:	2000      	movs	r0, #0
   1bae2:	6093      	str	r3, [r2, #8]
   1bae4:	68cb      	ldr	r3, [r1, #12]
   1bae6:	60d3      	str	r3, [r2, #12]
   1bae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1baec:	200e      	movs	r0, #14
   1baee:	4770      	bx	lr
   1baf0:	2006      	movs	r0, #6
   1baf2:	e7ef      	b.n	1bad4 <rpc_client_register+0x98>
   1baf4:	2001      	movs	r0, #1
   1baf6:	e7ed      	b.n	1bad4 <rpc_client_register+0x98>
   1baf8:	2002      	movs	r0, #2
   1bafa:	e7eb      	b.n	1bad4 <rpc_client_register+0x98>
   1bafc:	2003      	movs	r0, #3
   1bafe:	e7e9      	b.n	1bad4 <rpc_client_register+0x98>
   1bb00:	2004      	movs	r0, #4
   1bb02:	e7e7      	b.n	1bad4 <rpc_client_register+0x98>
   1bb04:	2005      	movs	r0, #5
   1bb06:	e7e5      	b.n	1bad4 <rpc_client_register+0x98>
   1bb08:	2007      	movs	r0, #7
   1bb0a:	e7e3      	b.n	1bad4 <rpc_client_register+0x98>
   1bb0c:	20021fcc 	.word	0x20021fcc

0001bb10 <rpc_message_send>:
   1bb10:	b150      	cbz	r0, 1bb28 <rpc_message_send+0x18>
   1bb12:	b159      	cbz	r1, 1bb2c <rpc_message_send+0x1c>
   1bb14:	684b      	ldr	r3, [r1, #4]
   1bb16:	8008      	strh	r0, [r1, #0]
   1bb18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1bb1c:	f043 0302 	orr.w	r3, r3, #2
   1bb20:	604b      	str	r3, [r1, #4]
   1bb22:	4608      	mov	r0, r1
   1bb24:	f7fc be5a 	b.w	187dc <rpc_transport_send>
   1bb28:	2007      	movs	r0, #7
   1bb2a:	4770      	bx	lr
   1bb2c:	200e      	movs	r0, #14
   1bb2e:	4770      	bx	lr

0001bb30 <rpc_message_alloc>:
   1bb30:	b342      	cbz	r2, 1bb84 <rpc_message_alloc+0x54>
   1bb32:	b328      	cbz	r0, 1bb80 <rpc_message_alloc+0x50>
   1bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb36:	2300      	movs	r3, #0
   1bb38:	4616      	mov	r6, r2
   1bb3a:	460c      	mov	r4, r1
   1bb3c:	4605      	mov	r5, r0
   1bb3e:	6013      	str	r3, [r2, #0]
   1bb40:	b171      	cbz	r1, 1bb60 <rpc_message_alloc+0x30>
   1bb42:	4608      	mov	r0, r1
   1bb44:	f7fc fe4e 	bl	187e4 <rpc_transport_data_alloc>
   1bb48:	4607      	mov	r7, r0
   1bb4a:	b1b8      	cbz	r0, 1bb7c <rpc_message_alloc+0x4c>
   1bb4c:	f7fc fe48 	bl	187e0 <rpc_transport_rpc_alloc>
   1bb50:	4603      	mov	r3, r0
   1bb52:	b180      	cbz	r0, 1bb76 <rpc_message_alloc+0x46>
   1bb54:	2000      	movs	r0, #0
   1bb56:	60dc      	str	r4, [r3, #12]
   1bb58:	609f      	str	r7, [r3, #8]
   1bb5a:	801d      	strh	r5, [r3, #0]
   1bb5c:	6033      	str	r3, [r6, #0]
   1bb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb60:	f7fc fe3e 	bl	187e0 <rpc_transport_rpc_alloc>
   1bb64:	4603      	mov	r3, r0
   1bb66:	b148      	cbz	r0, 1bb7c <rpc_message_alloc+0x4c>
   1bb68:	4627      	mov	r7, r4
   1bb6a:	60dc      	str	r4, [r3, #12]
   1bb6c:	609f      	str	r7, [r3, #8]
   1bb6e:	801d      	strh	r5, [r3, #0]
   1bb70:	2000      	movs	r0, #0
   1bb72:	6033      	str	r3, [r6, #0]
   1bb74:	e7f3      	b.n	1bb5e <rpc_message_alloc+0x2e>
   1bb76:	4638      	mov	r0, r7
   1bb78:	f7fc fe38 	bl	187ec <rpc_transport_data_free>
   1bb7c:	2004      	movs	r0, #4
   1bb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb80:	2007      	movs	r0, #7
   1bb82:	4770      	bx	lr
   1bb84:	200e      	movs	r0, #14
   1bb86:	4770      	bx	lr

0001bb88 <rpc_message_free>:
   1bb88:	b130      	cbz	r0, 1bb98 <rpc_message_free+0x10>
   1bb8a:	b139      	cbz	r1, 1bb9c <rpc_message_free+0x14>
   1bb8c:	b508      	push	{r3, lr}
   1bb8e:	4608      	mov	r0, r1
   1bb90:	f7fc fe2a 	bl	187e8 <rpc_transport_rpc_free>
   1bb94:	2000      	movs	r0, #0
   1bb96:	bd08      	pop	{r3, pc}
   1bb98:	2007      	movs	r0, #7
   1bb9a:	4770      	bx	lr
   1bb9c:	200e      	movs	r0, #14
   1bb9e:	4770      	bx	lr

0001bba0 <rpc_message_data_free>:
   1bba0:	b130      	cbz	r0, 1bbb0 <rpc_message_data_free+0x10>
   1bba2:	b139      	cbz	r1, 1bbb4 <rpc_message_data_free+0x14>
   1bba4:	b508      	push	{r3, lr}
   1bba6:	4608      	mov	r0, r1
   1bba8:	f7fc fe20 	bl	187ec <rpc_transport_data_free>
   1bbac:	2000      	movs	r0, #0
   1bbae:	bd08      	pop	{r3, pc}
   1bbb0:	2007      	movs	r0, #7
   1bbb2:	4770      	bx	lr
   1bbb4:	200e      	movs	r0, #14
   1bbb6:	4770      	bx	lr

0001bbb8 <packet_free_cb>:
   1bbb8:	b510      	push	{r4, lr}
   1bbba:	4604      	mov	r4, r0
   1bbbc:	b118      	cbz	r0, 1bbc6 <packet_free_cb+0xe>
   1bbbe:	6800      	ldr	r0, [r0, #0]
   1bbc0:	b108      	cbz	r0, 1bbc6 <packet_free_cb+0xe>
   1bbc2:	f002 ff13 	bl	1e9ec <rpc_gnss_client_data_free>
   1bbc6:	68a0      	ldr	r0, [r4, #8]
   1bbc8:	b118      	cbz	r0, 1bbd2 <packet_free_cb+0x1a>
   1bbca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bbce:	f003 bcfb 	b.w	1f5c8 <nrf_free>
   1bbd2:	bd10      	pop	{r4, pc}

0001bbd4 <rpc_gnss_event_handler>:
   1bbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bbd6:	4b64      	ldr	r3, [pc, #400]	; (1bd68 <rpc_gnss_event_handler+0x194>)
   1bbd8:	4606      	mov	r6, r0
   1bbda:	6800      	ldr	r0, [r0, #0]
   1bbdc:	881b      	ldrh	r3, [r3, #0]
   1bbde:	6802      	ldr	r2, [r0, #0]
   1bbe0:	b085      	sub	sp, #20
   1bbe2:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1bbe6:	460d      	mov	r5, r1
   1bbe8:	d037      	beq.n	1bc5a <rpc_gnss_event_handler+0x86>
   1bbea:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   1bbee:	33ff      	adds	r3, #255	; 0xff
   1bbf0:	b29b      	uxth	r3, r3
   1bbf2:	2b02      	cmp	r3, #2
   1bbf4:	d811      	bhi.n	1bc1a <rpc_gnss_event_handler+0x46>
   1bbf6:	4c5d      	ldr	r4, [pc, #372]	; (1bd6c <rpc_gnss_event_handler+0x198>)
   1bbf8:	6823      	ldr	r3, [r4, #0]
   1bbfa:	075a      	lsls	r2, r3, #29
   1bbfc:	d410      	bmi.n	1bc20 <rpc_gnss_event_handler+0x4c>
   1bbfe:	6823      	ldr	r3, [r4, #0]
   1bc00:	079b      	lsls	r3, r3, #30
   1bc02:	d503      	bpl.n	1bc0c <rpc_gnss_event_handler+0x38>
   1bc04:	f244 0303 	movw	r3, #16387	; 0x4003
   1bc08:	429d      	cmp	r5, r3
   1bc0a:	d009      	beq.n	1bc20 <rpc_gnss_event_handler+0x4c>
   1bc0c:	6830      	ldr	r0, [r6, #0]
   1bc0e:	b120      	cbz	r0, 1bc1a <rpc_gnss_event_handler+0x46>
   1bc10:	f002 feec 	bl	1e9ec <rpc_gnss_client_data_free>
   1bc14:	2200      	movs	r2, #0
   1bc16:	4b56      	ldr	r3, [pc, #344]	; (1bd70 <rpc_gnss_event_handler+0x19c>)
   1bc18:	601a      	str	r2, [r3, #0]
   1bc1a:	2000      	movs	r0, #0
   1bc1c:	b005      	add	sp, #20
   1bc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc20:	2002      	movs	r0, #2
   1bc22:	f003 fcc7 	bl	1f5b4 <nrf_malloc>
   1bc26:	4607      	mov	r7, r0
   1bc28:	2800      	cmp	r0, #0
   1bc2a:	f000 8094 	beq.w	1bd56 <rpc_gnss_event_handler+0x182>
   1bc2e:	2302      	movs	r3, #2
   1bc30:	8005      	strh	r5, [r0, #0]
   1bc32:	6831      	ldr	r1, [r6, #0]
   1bc34:	6872      	ldr	r2, [r6, #4]
   1bc36:	484f      	ldr	r0, [pc, #316]	; (1bd74 <rpc_gnss_event_handler+0x1a0>)
   1bc38:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   1bc3c:	6800      	ldr	r0, [r0, #0]
   1bc3e:	9303      	str	r3, [sp, #12]
   1bc40:	6803      	ldr	r3, [r0, #0]
   1bc42:	4669      	mov	r1, sp
   1bc44:	685b      	ldr	r3, [r3, #4]
   1bc46:	4798      	blx	r3
   1bc48:	3001      	adds	r0, #1
   1bc4a:	d071      	beq.n	1bd30 <rpc_gnss_event_handler+0x15c>
   1bc4c:	2000      	movs	r0, #0
   1bc4e:	6823      	ldr	r3, [r4, #0]
   1bc50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1bc54:	6023      	str	r3, [r4, #0]
   1bc56:	b005      	add	sp, #20
   1bc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc5a:	4c44      	ldr	r4, [pc, #272]	; (1bd6c <rpc_gnss_event_handler+0x198>)
   1bc5c:	4f44      	ldr	r7, [pc, #272]	; (1bd70 <rpc_gnss_event_handler+0x19c>)
   1bc5e:	6823      	ldr	r3, [r4, #0]
   1bc60:	6038      	str	r0, [r7, #0]
   1bc62:	01d9      	lsls	r1, r3, #7
   1bc64:	d523      	bpl.n	1bcae <rpc_gnss_event_handler+0xda>
   1bc66:	f242 1302 	movw	r3, #8450	; 0x2102
   1bc6a:	429d      	cmp	r5, r3
   1bc6c:	d11f      	bne.n	1bcae <rpc_gnss_event_handler+0xda>
   1bc6e:	6843      	ldr	r3, [r0, #4]
   1bc70:	b91b      	cbnz	r3, 1bc7a <rpc_gnss_event_handler+0xa6>
   1bc72:	6823      	ldr	r3, [r4, #0]
   1bc74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1bc78:	6023      	str	r3, [r4, #0]
   1bc7a:	6823      	ldr	r3, [r4, #0]
   1bc7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1bc80:	6023      	str	r3, [r4, #0]
   1bc82:	6823      	ldr	r3, [r4, #0]
   1bc84:	025a      	lsls	r2, r3, #9
   1bc86:	d430      	bmi.n	1bcea <rpc_gnss_event_handler+0x116>
   1bc88:	f242 0305 	movw	r3, #8197	; 0x2005
   1bc8c:	429d      	cmp	r5, r3
   1bc8e:	d12c      	bne.n	1bcea <rpc_gnss_event_handler+0x116>
   1bc90:	6823      	ldr	r3, [r4, #0]
   1bc92:	0299      	lsls	r1, r3, #10
   1bc94:	d529      	bpl.n	1bcea <rpc_gnss_event_handler+0x116>
   1bc96:	6843      	ldr	r3, [r0, #4]
   1bc98:	2b00      	cmp	r3, #0
   1bc9a:	d157      	bne.n	1bd4c <rpc_gnss_event_handler+0x178>
   1bc9c:	6823      	ldr	r3, [r4, #0]
   1bc9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1bca2:	6023      	str	r3, [r4, #0]
   1bca4:	6823      	ldr	r3, [r4, #0]
   1bca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bcaa:	6023      	str	r3, [r4, #0]
   1bcac:	e01d      	b.n	1bcea <rpc_gnss_event_handler+0x116>
   1bcae:	6823      	ldr	r3, [r4, #0]
   1bcb0:	025b      	lsls	r3, r3, #9
   1bcb2:	d50e      	bpl.n	1bcd2 <rpc_gnss_event_handler+0xfe>
   1bcb4:	f242 1303 	movw	r3, #8451	; 0x2103
   1bcb8:	429d      	cmp	r5, r3
   1bcba:	d10a      	bne.n	1bcd2 <rpc_gnss_event_handler+0xfe>
   1bcbc:	6843      	ldr	r3, [r0, #4]
   1bcbe:	b91b      	cbnz	r3, 1bcc8 <rpc_gnss_event_handler+0xf4>
   1bcc0:	6823      	ldr	r3, [r4, #0]
   1bcc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1bcc6:	6023      	str	r3, [r4, #0]
   1bcc8:	6823      	ldr	r3, [r4, #0]
   1bcca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1bcce:	6023      	str	r3, [r4, #0]
   1bcd0:	e00b      	b.n	1bcea <rpc_gnss_event_handler+0x116>
   1bcd2:	f242 0301 	movw	r3, #8193	; 0x2001
   1bcd6:	429d      	cmp	r5, r3
   1bcd8:	d10c      	bne.n	1bcf4 <rpc_gnss_event_handler+0x120>
   1bcda:	6843      	ldr	r3, [r0, #4]
   1bcdc:	b92b      	cbnz	r3, 1bcea <rpc_gnss_event_handler+0x116>
   1bcde:	6823      	ldr	r3, [r4, #0]
   1bce0:	0c1b      	lsrs	r3, r3, #16
   1bce2:	041b      	lsls	r3, r3, #16
   1bce4:	f043 0302 	orr.w	r3, r3, #2
   1bce8:	6023      	str	r3, [r4, #0]
   1bcea:	f002 fe7f 	bl	1e9ec <rpc_gnss_client_data_free>
   1bcee:	2300      	movs	r3, #0
   1bcf0:	603b      	str	r3, [r7, #0]
   1bcf2:	e77a      	b.n	1bbea <rpc_gnss_event_handler+0x16>
   1bcf4:	f242 0304 	movw	r3, #8196	; 0x2004
   1bcf8:	429d      	cmp	r5, r3
   1bcfa:	d1c5      	bne.n	1bc88 <rpc_gnss_event_handler+0xb4>
   1bcfc:	6843      	ldr	r3, [r0, #4]
   1bcfe:	b993      	cbnz	r3, 1bd26 <rpc_gnss_event_handler+0x152>
   1bd00:	6823      	ldr	r3, [r4, #0]
   1bd02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1bd06:	6023      	str	r3, [r4, #0]
   1bd08:	6823      	ldr	r3, [r4, #0]
   1bd0a:	b29b      	uxth	r3, r3
   1bd0c:	2b03      	cmp	r3, #3
   1bd0e:	6823      	ldr	r3, [r4, #0]
   1bd10:	d016      	beq.n	1bd40 <rpc_gnss_event_handler+0x16c>
   1bd12:	b29b      	uxth	r3, r3
   1bd14:	2b04      	cmp	r3, #4
   1bd16:	d1d7      	bne.n	1bcc8 <rpc_gnss_event_handler+0xf4>
   1bd18:	6823      	ldr	r3, [r4, #0]
   1bd1a:	0c1b      	lsrs	r3, r3, #16
   1bd1c:	041b      	lsls	r3, r3, #16
   1bd1e:	f043 0302 	orr.w	r3, r3, #2
   1bd22:	6023      	str	r3, [r4, #0]
   1bd24:	e7d0      	b.n	1bcc8 <rpc_gnss_event_handler+0xf4>
   1bd26:	6823      	ldr	r3, [r4, #0]
   1bd28:	b29b      	uxth	r3, r3
   1bd2a:	2b03      	cmp	r3, #3
   1bd2c:	d1cc      	bne.n	1bcc8 <rpc_gnss_event_handler+0xf4>
   1bd2e:	e7f3      	b.n	1bd18 <rpc_gnss_event_handler+0x144>
   1bd30:	4638      	mov	r0, r7
   1bd32:	f003 fc49 	bl	1f5c8 <nrf_free>
   1bd36:	6830      	ldr	r0, [r6, #0]
   1bd38:	2800      	cmp	r0, #0
   1bd3a:	f47f af69 	bne.w	1bc10 <rpc_gnss_event_handler+0x3c>
   1bd3e:	e76c      	b.n	1bc1a <rpc_gnss_event_handler+0x46>
   1bd40:	0c1b      	lsrs	r3, r3, #16
   1bd42:	041b      	lsls	r3, r3, #16
   1bd44:	f043 0304 	orr.w	r3, r3, #4
   1bd48:	6023      	str	r3, [r4, #0]
   1bd4a:	e7bd      	b.n	1bcc8 <rpc_gnss_event_handler+0xf4>
   1bd4c:	6823      	ldr	r3, [r4, #0]
   1bd4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1bd52:	6023      	str	r3, [r4, #0]
   1bd54:	e7c9      	b.n	1bcea <rpc_gnss_event_handler+0x116>
   1bd56:	6830      	ldr	r0, [r6, #0]
   1bd58:	2800      	cmp	r0, #0
   1bd5a:	f43f af5e 	beq.w	1bc1a <rpc_gnss_event_handler+0x46>
   1bd5e:	f002 fe45 	bl	1e9ec <rpc_gnss_client_data_free>
   1bd62:	4b03      	ldr	r3, [pc, #12]	; (1bd70 <rpc_gnss_event_handler+0x19c>)
   1bd64:	601f      	str	r7, [r3, #0]
   1bd66:	e758      	b.n	1bc1a <rpc_gnss_event_handler+0x46>
   1bd68:	20026ea2 	.word	0x20026ea2
   1bd6c:	2002206c 	.word	0x2002206c
   1bd70:	20022070 	.word	0x20022070
   1bd74:	20022074 	.word	0x20022074

0001bd78 <gnss_interface_write>:
   1bd78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bd7c:	4a74      	ldr	r2, [pc, #464]	; (1bf50 <gnss_interface_write+0x1d8>)
   1bd7e:	b09f      	sub	sp, #124	; 0x7c
   1bd80:	4290      	cmp	r0, r2
   1bd82:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1bd84:	f040 80d7 	bne.w	1bf36 <gnss_interface_write+0x1be>
   1bd88:	2900      	cmp	r1, #0
   1bd8a:	f000 80c6 	beq.w	1bf1a <gnss_interface_write+0x1a2>
   1bd8e:	2d00      	cmp	r5, #0
   1bd90:	f000 80c3 	beq.w	1bf1a <gnss_interface_write+0x1a2>
   1bd94:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1bd96:	2a02      	cmp	r2, #2
   1bd98:	f040 80bf 	bne.w	1bf1a <gnss_interface_write+0x1a2>
   1bd9c:	4c6d      	ldr	r4, [pc, #436]	; (1bf54 <gnss_interface_write+0x1dc>)
   1bd9e:	6822      	ldr	r2, [r4, #0]
   1bda0:	b292      	uxth	r2, r2
   1bda2:	2a02      	cmp	r2, #2
   1bda4:	d004      	beq.n	1bdb0 <gnss_interface_write+0x38>
   1bda6:	6822      	ldr	r2, [r4, #0]
   1bda8:	b292      	uxth	r2, r2
   1bdaa:	2a04      	cmp	r2, #4
   1bdac:	f040 80bd 	bne.w	1bf2a <gnss_interface_write+0x1b2>
   1bdb0:	2b00      	cmp	r3, #0
   1bdb2:	f040 80c6 	bne.w	1bf42 <gnss_interface_write+0x1ca>
   1bdb6:	6822      	ldr	r2, [r4, #0]
   1bdb8:	0390      	lsls	r0, r2, #14
   1bdba:	d512      	bpl.n	1bde2 <gnss_interface_write+0x6a>
   1bdbc:	6822      	ldr	r2, [r4, #0]
   1bdbe:	882b      	ldrh	r3, [r5, #0]
   1bdc0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1bdc4:	6022      	str	r2, [r4, #0]
   1bdc6:	6822      	ldr	r2, [r4, #0]
   1bdc8:	3b01      	subs	r3, #1
   1bdca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1bdce:	6022      	str	r2, [r4, #0]
   1bdd0:	2b07      	cmp	r3, #7
   1bdd2:	f200 80a2 	bhi.w	1bf1a <gnss_interface_write+0x1a2>
   1bdd6:	e8df f003 	tbb	[pc, r3]
   1bdda:	7d82      	.short	0x7d82
   1bddc:	646e7378 	.word	0x646e7378
   1bde0:	0869      	.short	0x0869
   1bde2:	2000      	movs	r0, #0
   1bde4:	b01f      	add	sp, #124	; 0x7c
   1bde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bdea:	4608      	mov	r0, r1
   1bdec:	a902      	add	r1, sp, #8
   1bdee:	f002 fdb1 	bl	1e954 <rpc_gnss_serialize_integrity>
   1bdf2:	2172      	movs	r1, #114	; 0x72
   1bdf4:	4668      	mov	r0, sp
   1bdf6:	f002 fdc7 	bl	1e988 <rpc_gnss_client_request_alloc>
   1bdfa:	4605      	mov	r5, r0
   1bdfc:	9800      	ldr	r0, [sp, #0]
   1bdfe:	2d00      	cmp	r5, #0
   1be00:	d172      	bne.n	1bee8 <gnss_interface_write+0x170>
   1be02:	2800      	cmp	r0, #0
   1be04:	d077      	beq.n	1bef6 <gnss_interface_write+0x17e>
   1be06:	f241 0605 	movw	r6, #4101	; 0x1005
   1be0a:	f04f 0c49 	mov.w	ip, #73	; 0x49
   1be0e:	2272      	movs	r2, #114	; 0x72
   1be10:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1be14:	f04f 0943 	mov.w	r9, #67	; 0x43
   1be18:	f04f 0854 	mov.w	r8, #84	; 0x54
   1be1c:	4f4e      	ldr	r7, [pc, #312]	; (1bf58 <gnss_interface_write+0x1e0>)
   1be1e:	a91e      	add	r1, sp, #120	; 0x78
   1be20:	883b      	ldrh	r3, [r7, #0]
   1be22:	f880 c00f 	strb.w	ip, [r0, #15]
   1be26:	3301      	adds	r3, #1
   1be28:	b29b      	uxth	r3, r3
   1be2a:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   1be2e:	f841 cd74 	str.w	ip, [r1, #-116]!
   1be32:	7145      	strb	r5, [r0, #5]
   1be34:	7185      	strb	r5, [r0, #6]
   1be36:	71c5      	strb	r5, [r0, #7]
   1be38:	7205      	strb	r5, [r0, #8]
   1be3a:	7245      	strb	r5, [r0, #9]
   1be3c:	7285      	strb	r5, [r0, #10]
   1be3e:	72c5      	strb	r5, [r0, #11]
   1be40:	7102      	strb	r2, [r0, #4]
   1be42:	f880 900c 	strb.w	r9, [r0, #12]
   1be46:	f880 800d 	strb.w	r8, [r0, #13]
   1be4a:	f880 e00e 	strb.w	lr, [r0, #14]
   1be4e:	6800      	ldr	r0, [r0, #0]
   1be50:	803b      	strh	r3, [r7, #0]
   1be52:	f00a fdd8 	bl	26a06 <memcpy>
   1be56:	4b41      	ldr	r3, [pc, #260]	; (1bf5c <gnss_interface_write+0x1e4>)
   1be58:	4631      	mov	r1, r6
   1be5a:	9800      	ldr	r0, [sp, #0]
   1be5c:	601d      	str	r5, [r3, #0]
   1be5e:	f002 fda7 	bl	1e9b0 <rpc_gnss_client_request_send>
   1be62:	2800      	cmp	r0, #0
   1be64:	d14e      	bne.n	1bf04 <gnss_interface_write+0x18c>
   1be66:	6823      	ldr	r3, [r4, #0]
   1be68:	0299      	lsls	r1, r3, #10
   1be6a:	d50b      	bpl.n	1be84 <gnss_interface_write+0x10c>
   1be6c:	4e3c      	ldr	r6, [pc, #240]	; (1bf60 <gnss_interface_write+0x1e8>)
   1be6e:	4d38      	ldr	r5, [pc, #224]	; (1bf50 <gnss_interface_write+0x1d8>)
   1be70:	e000      	b.n	1be74 <gnss_interface_write+0xfc>
   1be72:	b978      	cbnz	r0, 1be94 <gnss_interface_write+0x11c>
   1be74:	4631      	mov	r1, r6
   1be76:	4628      	mov	r0, r5
   1be78:	f7f9 fe18 	bl	15aac <bsd_os_timedwait>
   1be7c:	6823      	ldr	r3, [r4, #0]
   1be7e:	029a      	lsls	r2, r3, #10
   1be80:	d4f7      	bmi.n	1be72 <gnss_interface_write+0xfa>
   1be82:	b938      	cbnz	r0, 1be94 <gnss_interface_write+0x11c>
   1be84:	6823      	ldr	r3, [r4, #0]
   1be86:	039b      	lsls	r3, r3, #14
   1be88:	d4ab      	bmi.n	1bde2 <gnss_interface_write+0x6a>
   1be8a:	2005      	movs	r0, #5
   1be8c:	6823      	ldr	r3, [r4, #0]
   1be8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1be92:	6023      	str	r3, [r4, #0]
   1be94:	f7f9 fec0 	bl	15c18 <bsd_os_errno_set>
   1be98:	f04f 30ff 	mov.w	r0, #4294967295
   1be9c:	b01f      	add	sp, #124	; 0x7c
   1be9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bea2:	4608      	mov	r0, r1
   1bea4:	a902      	add	r1, sp, #8
   1bea6:	f002 fd0d 	bl	1e8c4 <rpc_gnss_serialize_time_and_sv_tow>
   1beaa:	e7a2      	b.n	1bdf2 <gnss_interface_write+0x7a>
   1beac:	4608      	mov	r0, r1
   1beae:	a902      	add	r1, sp, #8
   1beb0:	f002 fd30 	bl	1e914 <rpc_gnss_serialize_location>
   1beb4:	e79d      	b.n	1bdf2 <gnss_interface_write+0x7a>
   1beb6:	4608      	mov	r0, r1
   1beb8:	a902      	add	r1, sp, #8
   1beba:	f002 fce9 	bl	1e890 <rpc_gnss_serialize_nequick>
   1bebe:	e798      	b.n	1bdf2 <gnss_interface_write+0x7a>
   1bec0:	4608      	mov	r0, r1
   1bec2:	a902      	add	r1, sp, #8
   1bec4:	f002 fcc0 	bl	1e848 <rpc_gnss_serialize_klob>
   1bec8:	e793      	b.n	1bdf2 <gnss_interface_write+0x7a>
   1beca:	4608      	mov	r0, r1
   1becc:	a902      	add	r1, sp, #8
   1bece:	f002 fc89 	bl	1e7e4 <rpc_gnss_serialize_alm>
   1bed2:	e78e      	b.n	1bdf2 <gnss_interface_write+0x7a>
   1bed4:	4608      	mov	r0, r1
   1bed6:	a902      	add	r1, sp, #8
   1bed8:	f002 fc32 	bl	1e740 <rpc_gnss_serialize_ephe>
   1bedc:	e789      	b.n	1bdf2 <gnss_interface_write+0x7a>
   1bede:	4608      	mov	r0, r1
   1bee0:	a902      	add	r1, sp, #8
   1bee2:	f002 fc0b 	bl	1e6fc <rpc_gnss_serialize_utc>
   1bee6:	e784      	b.n	1bdf2 <gnss_interface_write+0x7a>
   1bee8:	b128      	cbz	r0, 1bef6 <gnss_interface_write+0x17e>
   1beea:	6803      	ldr	r3, [r0, #0]
   1beec:	b11b      	cbz	r3, 1bef6 <gnss_interface_write+0x17e>
   1beee:	4618      	mov	r0, r3
   1bef0:	f002 fd7c 	bl	1e9ec <rpc_gnss_client_data_free>
   1bef4:	9800      	ldr	r0, [sp, #0]
   1bef6:	f002 fd71 	bl	1e9dc <rpc_gnss_client_message_free>
   1befa:	2023      	movs	r0, #35	; 0x23
   1befc:	f7f9 fe8c 	bl	15c18 <bsd_os_errno_set>
   1bf00:	f04f 30ff 	mov.w	r0, #4294967295
   1bf04:	6823      	ldr	r3, [r4, #0]
   1bf06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1bf0a:	6023      	str	r3, [r4, #0]
   1bf0c:	6823      	ldr	r3, [r4, #0]
   1bf0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bf12:	6023      	str	r3, [r4, #0]
   1bf14:	b01f      	add	sp, #124	; 0x7c
   1bf16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bf1a:	2016      	movs	r0, #22
   1bf1c:	f7f9 fe7c 	bl	15c18 <bsd_os_errno_set>
   1bf20:	f04f 30ff 	mov.w	r0, #4294967295
   1bf24:	b01f      	add	sp, #124	; 0x7c
   1bf26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bf2a:	2039      	movs	r0, #57	; 0x39
   1bf2c:	f7f9 fe74 	bl	15c18 <bsd_os_errno_set>
   1bf30:	f04f 30ff 	mov.w	r0, #4294967295
   1bf34:	e756      	b.n	1bde4 <gnss_interface_write+0x6c>
   1bf36:	2009      	movs	r0, #9
   1bf38:	f7f9 fe6e 	bl	15c18 <bsd_os_errno_set>
   1bf3c:	f04f 30ff 	mov.w	r0, #4294967295
   1bf40:	e750      	b.n	1bde4 <gnss_interface_write+0x6c>
   1bf42:	202d      	movs	r0, #45	; 0x2d
   1bf44:	f7f9 fe68 	bl	15c18 <bsd_os_errno_set>
   1bf48:	f04f 30ff 	mov.w	r0, #4294967295
   1bf4c:	e74a      	b.n	1bde4 <gnss_interface_write+0x6c>
   1bf4e:	bf00      	nop
   1bf50:	49765443 	.word	0x49765443
   1bf54:	2002206c 	.word	0x2002206c
   1bf58:	20026ea2 	.word	0x20026ea2
   1bf5c:	20022070 	.word	0x20022070
   1bf60:	200203d0 	.word	0x200203d0

0001bf64 <gnss_interface_read>:
   1bf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf68:	4c50      	ldr	r4, [pc, #320]	; (1c0ac <gnss_interface_read+0x148>)
   1bf6a:	b0b7      	sub	sp, #220	; 0xdc
   1bf6c:	42a0      	cmp	r0, r4
   1bf6e:	f040 81fe 	bne.w	1c36e <gnss_interface_read+0x40a>
   1bf72:	4688      	mov	r8, r1
   1bf74:	2900      	cmp	r1, #0
   1bf76:	f000 81f4 	beq.w	1c362 <gnss_interface_read+0x3fe>
   1bf7a:	2ad7      	cmp	r2, #215	; 0xd7
   1bf7c:	f240 81f1 	bls.w	1c362 <gnss_interface_read+0x3fe>
   1bf80:	4d4b      	ldr	r5, [pc, #300]	; (1c0b0 <gnss_interface_read+0x14c>)
   1bf82:	4699      	mov	r9, r3
   1bf84:	682b      	ldr	r3, [r5, #0]
   1bf86:	b29b      	uxth	r3, r3
   1bf88:	2b04      	cmp	r3, #4
   1bf8a:	d004      	beq.n	1bf96 <gnss_interface_read+0x32>
   1bf8c:	682b      	ldr	r3, [r5, #0]
   1bf8e:	b29b      	uxth	r3, r3
   1bf90:	2b02      	cmp	r3, #2
   1bf92:	f040 81e0 	bne.w	1c356 <gnss_interface_read+0x3f2>
   1bf96:	f1b9 0f00 	cmp.w	r9, #0
   1bf9a:	d158      	bne.n	1c04e <gnss_interface_read+0xea>
   1bf9c:	2102      	movs	r1, #2
   1bf9e:	20b6      	movs	r0, #182	; 0xb6
   1bfa0:	2400      	movs	r4, #0
   1bfa2:	682b      	ldr	r3, [r5, #0]
   1bfa4:	f10d 020e 	add.w	r2, sp, #14
   1bfa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1bfac:	602b      	str	r3, [r5, #0]
   1bfae:	f8df a108 	ldr.w	sl, [pc, #264]	; 1c0b8 <gnss_interface_read+0x154>
   1bfb2:	ab08      	add	r3, sp, #32
   1bfb4:	4f3f      	ldr	r7, [pc, #252]	; (1c0b4 <gnss_interface_read+0x150>)
   1bfb6:	4e3d      	ldr	r6, [pc, #244]	; (1c0ac <gnss_interface_read+0x148>)
   1bfb8:	9005      	str	r0, [sp, #20]
   1bfba:	9107      	str	r1, [sp, #28]
   1bfbc:	9304      	str	r3, [sp, #16]
   1bfbe:	9206      	str	r2, [sp, #24]
   1bfc0:	ea09 0b01 	and.w	fp, r9, r1
   1bfc4:	f8da 0000 	ldr.w	r0, [sl]
   1bfc8:	464a      	mov	r2, r9
   1bfca:	6803      	ldr	r3, [r0, #0]
   1bfcc:	a904      	add	r1, sp, #16
   1bfce:	689b      	ldr	r3, [r3, #8]
   1bfd0:	4798      	blx	r3
   1bfd2:	2800      	cmp	r0, #0
   1bfd4:	da11      	bge.n	1bffa <gnss_interface_read+0x96>
   1bfd6:	f1bb 0f00 	cmp.w	fp, #0
   1bfda:	d141      	bne.n	1c060 <gnss_interface_read+0xfc>
   1bfdc:	682b      	ldr	r3, [r5, #0]
   1bfde:	03d8      	lsls	r0, r3, #15
   1bfe0:	d4f0      	bmi.n	1bfc4 <gnss_interface_read+0x60>
   1bfe2:	b10c      	cbz	r4, 1bfe8 <gnss_interface_read+0x84>
   1bfe4:	e7ee      	b.n	1bfc4 <gnss_interface_read+0x60>
   1bfe6:	b930      	cbnz	r0, 1bff6 <gnss_interface_read+0x92>
   1bfe8:	4639      	mov	r1, r7
   1bfea:	4630      	mov	r0, r6
   1bfec:	f7f9 fd5e 	bl	15aac <bsd_os_timedwait>
   1bff0:	682b      	ldr	r3, [r5, #0]
   1bff2:	03d9      	lsls	r1, r3, #15
   1bff4:	d5f7      	bpl.n	1bfe6 <gnss_interface_read+0x82>
   1bff6:	4604      	mov	r4, r0
   1bff8:	e7e4      	b.n	1bfc4 <gnss_interface_read+0x60>
   1bffa:	f244 0202 	movw	r2, #16386	; 0x4002
   1bffe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1c002:	4293      	cmp	r3, r2
   1c004:	d042      	beq.n	1c08c <gnss_interface_read+0x128>
   1c006:	f244 0201 	movw	r2, #16385	; 0x4001
   1c00a:	4293      	cmp	r3, r2
   1c00c:	d056      	beq.n	1c0bc <gnss_interface_read+0x158>
   1c00e:	f244 0203 	movw	r2, #16387	; 0x4003
   1c012:	4293      	cmp	r3, r2
   1c014:	f040 81a5 	bne.w	1c362 <gnss_interface_read+0x3fe>
   1c018:	2203      	movs	r2, #3
   1c01a:	2414      	movs	r4, #20
   1c01c:	9b08      	ldr	r3, [sp, #32]
   1c01e:	f888 2000 	strb.w	r2, [r8]
   1c022:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c024:	f8c8 3008 	str.w	r3, [r8, #8]
   1c028:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1c02c:	e9c8 2303 	strd	r2, r3, [r8, #12]
   1c030:	f8da 0000 	ldr.w	r0, [sl]
   1c034:	6803      	ldr	r3, [r0, #0]
   1c036:	68db      	ldr	r3, [r3, #12]
   1c038:	4798      	blx	r3
   1c03a:	2800      	cmp	r0, #0
   1c03c:	dd03      	ble.n	1c046 <gnss_interface_read+0xe2>
   1c03e:	682b      	ldr	r3, [r5, #0]
   1c040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c044:	602b      	str	r3, [r5, #0]
   1c046:	4620      	mov	r0, r4
   1c048:	b037      	add	sp, #220	; 0xdc
   1c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c04e:	f019 0f2a 	tst.w	r9, #42	; 0x2a
   1c052:	d1a3      	bne.n	1bf9c <gnss_interface_read+0x38>
   1c054:	202d      	movs	r0, #45	; 0x2d
   1c056:	f7f9 fddf 	bl	15c18 <bsd_os_errno_set>
   1c05a:	f04f 34ff 	mov.w	r4, #4294967295
   1c05e:	e7f2      	b.n	1c046 <gnss_interface_read+0xe2>
   1c060:	1c42      	adds	r2, r0, #1
   1c062:	4603      	mov	r3, r0
   1c064:	d1c9      	bne.n	1bffa <gnss_interface_read+0x96>
   1c066:	b93c      	cbnz	r4, 1c078 <gnss_interface_read+0x114>
   1c068:	461c      	mov	r4, r3
   1c06a:	2023      	movs	r0, #35	; 0x23
   1c06c:	f7f9 fdd4 	bl	15c18 <bsd_os_errno_set>
   1c070:	4620      	mov	r0, r4
   1c072:	b037      	add	sp, #220	; 0xdc
   1c074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c078:	9001      	str	r0, [sp, #4]
   1c07a:	4620      	mov	r0, r4
   1c07c:	f7f9 fdcc 	bl	15c18 <bsd_os_errno_set>
   1c080:	9b01      	ldr	r3, [sp, #4]
   1c082:	461c      	mov	r4, r3
   1c084:	4620      	mov	r0, r4
   1c086:	b037      	add	sp, #220	; 0xdc
   1c088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c08c:	a808      	add	r0, sp, #32
   1c08e:	f7f0 feef 	bl	ce70 <strlen>
   1c092:	2302      	movs	r3, #2
   1c094:	1c44      	adds	r4, r0, #1
   1c096:	b2a4      	uxth	r4, r4
   1c098:	f808 3b08 	strb.w	r3, [r8], #8
   1c09c:	4622      	mov	r2, r4
   1c09e:	a908      	add	r1, sp, #32
   1c0a0:	4640      	mov	r0, r8
   1c0a2:	f00a fcb0 	bl	26a06 <memcpy>
   1c0a6:	3408      	adds	r4, #8
   1c0a8:	e7c2      	b.n	1c030 <gnss_interface_read+0xcc>
   1c0aa:	bf00      	nop
   1c0ac:	49765443 	.word	0x49765443
   1c0b0:	2002206c 	.word	0x2002206c
   1c0b4:	200203d0 	.word	0x200203d0
   1c0b8:	20022074 	.word	0x20022074
   1c0bc:	2401      	movs	r4, #1
   1c0be:	a809      	add	r0, sp, #36	; 0x24
   1c0c0:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1c0c2:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1c0c6:	e9c8 2304 	strd	r2, r3, [r8, #16]
   1c0ca:	990d      	ldr	r1, [sp, #52]	; 0x34
   1c0cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c0ce:	f888 4000 	strb.w	r4, [r8]
   1c0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c0d4:	f8c8 1018 	str.w	r1, [r8, #24]
   1c0d8:	9910      	ldr	r1, [sp, #64]	; 0x40
   1c0da:	f8c8 201c 	str.w	r2, [r8, #28]
   1c0de:	f8c8 3020 	str.w	r3, [r8, #32]
   1c0e2:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   1c0e6:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   1c0ea:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   1c0ee:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1c0f2:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   1c0f6:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   1c0fa:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   1c0fe:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1c102:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   1c106:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1c10a:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   1c10e:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   1c112:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1c116:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1c11a:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   1c11e:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   1c122:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   1c126:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1c12a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   1c12e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1c130:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   1c134:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   1c138:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   1c13c:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1c140:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1c142:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1c146:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   1c14a:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   1c14e:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   1c152:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1c156:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   1c15a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1c15e:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   1c162:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   1c166:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   1c16a:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   1c16e:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1c172:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1c176:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   1c17a:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1c17e:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   1c182:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   1c186:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   1c18a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1c18e:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1c192:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   1c196:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   1c19a:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   1c19e:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1c1a2:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   1c1a6:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   1c1aa:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1c1ae:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   1c1b2:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   1c1b6:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   1c1ba:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1c1be:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1c1c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c1c4:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   1c1c8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1c1cc:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1c1d0:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1c1d4:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   1c1d8:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   1c1dc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1c1e0:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   1c1e4:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   1c1e8:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   1c1ec:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1c1f0:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   1c1f4:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   1c1f8:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1c1fc:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   1c200:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   1c204:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   1c208:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   1c20c:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   1c210:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   1c214:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   1c218:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   1c21c:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   1c220:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   1c224:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   1c228:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   1c22c:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   1c230:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   1c234:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   1c238:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   1c23c:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   1c240:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   1c244:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   1c248:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1c24a:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   1c24e:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   1c252:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1c256:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1c258:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1c25c:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   1c260:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   1c264:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   1c268:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1c26c:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   1c270:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   1c274:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   1c278:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   1c27c:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   1c280:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1c284:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   1c288:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   1c28c:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   1c290:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   1c294:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   1c298:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   1c29c:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1c2a0:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   1c2a4:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   1c2a8:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   1c2ac:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   1c2b0:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   1c2b4:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   1c2b8:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   1c2bc:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1c2c0:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   1c2c4:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   1c2c8:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   1c2cc:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   1c2d0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   1c2d4:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   1c2d8:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   1c2dc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1c2de:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1c2e2:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   1c2e6:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   1c2ea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1c2ee:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1c2f2:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   1c2f6:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   1c2fa:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   1c2fe:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   1c302:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1c306:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   1c30a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1c30e:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1c312:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   1c316:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   1c31a:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   1c31e:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   1c322:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1c326:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1c32a:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1c32e:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   1c332:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   1c336:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1c33a:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1c33e:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   1c342:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1c346:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   1c34a:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   1c34e:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   1c352:	24d8      	movs	r4, #216	; 0xd8
   1c354:	e66c      	b.n	1c030 <gnss_interface_read+0xcc>
   1c356:	2039      	movs	r0, #57	; 0x39
   1c358:	f7f9 fc5e 	bl	15c18 <bsd_os_errno_set>
   1c35c:	f04f 34ff 	mov.w	r4, #4294967295
   1c360:	e671      	b.n	1c046 <gnss_interface_read+0xe2>
   1c362:	2016      	movs	r0, #22
   1c364:	f7f9 fc58 	bl	15c18 <bsd_os_errno_set>
   1c368:	f04f 34ff 	mov.w	r4, #4294967295
   1c36c:	e66b      	b.n	1c046 <gnss_interface_read+0xe2>
   1c36e:	2009      	movs	r0, #9
   1c370:	f7f9 fc52 	bl	15c18 <bsd_os_errno_set>
   1c374:	f04f 34ff 	mov.w	r4, #4294967295
   1c378:	e665      	b.n	1c046 <gnss_interface_read+0xe2>
   1c37a:	bf00      	nop

0001c37c <gnss_interface_setopt>:
   1c37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c380:	4db3      	ldr	r5, [pc, #716]	; (1c650 <gnss_interface_setopt+0x2d4>)
   1c382:	b086      	sub	sp, #24
   1c384:	682c      	ldr	r4, [r5, #0]
   1c386:	b2a4      	uxth	r4, r4
   1c388:	2c02      	cmp	r4, #2
   1c38a:	d00d      	beq.n	1c3a8 <gnss_interface_setopt+0x2c>
   1c38c:	2a08      	cmp	r2, #8
   1c38e:	d00b      	beq.n	1c3a8 <gnss_interface_setopt+0x2c>
   1c390:	f1a2 040a 	sub.w	r4, r2, #10
   1c394:	2c01      	cmp	r4, #1
   1c396:	d907      	bls.n	1c3a8 <gnss_interface_setopt+0x2c>
   1c398:	200e      	movs	r0, #14
   1c39a:	f7f9 fc3d 	bl	15c18 <bsd_os_errno_set>
   1c39e:	f04f 30ff 	mov.w	r0, #4294967295
   1c3a2:	b006      	add	sp, #24
   1c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c3a8:	682c      	ldr	r4, [r5, #0]
   1c3aa:	0264      	lsls	r4, r4, #9
   1c3ac:	f100 8149 	bmi.w	1c642 <gnss_interface_setopt+0x2c6>
   1c3b0:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1c3b4:	f040 8139 	bne.w	1c62a <gnss_interface_setopt+0x2ae>
   1c3b8:	49a6      	ldr	r1, [pc, #664]	; (1c654 <gnss_interface_setopt+0x2d8>)
   1c3ba:	4288      	cmp	r0, r1
   1c3bc:	f040 813b 	bne.w	1c636 <gnss_interface_setopt+0x2ba>
   1c3c0:	f1a2 010a 	sub.w	r1, r2, #10
   1c3c4:	2901      	cmp	r1, #1
   1c3c6:	d902      	bls.n	1c3ce <gnss_interface_setopt+0x52>
   1c3c8:	2b00      	cmp	r3, #0
   1c3ca:	f000 8112 	beq.w	1c5f2 <gnss_interface_setopt+0x276>
   1c3ce:	3a01      	subs	r2, #1
   1c3d0:	2a0a      	cmp	r2, #10
   1c3d2:	f200 810e 	bhi.w	1c5f2 <gnss_interface_setopt+0x276>
   1c3d6:	e8df f012 	tbh	[pc, r2, lsl #1]
   1c3da:	007f      	.short	0x007f
   1c3dc:	0098008c 	.word	0x0098008c
   1c3e0:	00ae00a2 	.word	0x00ae00a2
   1c3e4:	00c500b9 	.word	0x00c500b9
   1c3e8:	00f300dd 	.word	0x00f300dd
   1c3ec:	000b00ff 	.word	0x000b00ff
   1c3f0:	682b      	ldr	r3, [r5, #0]
   1c3f2:	b29b      	uxth	r3, r3
   1c3f4:	2b04      	cmp	r3, #4
   1c3f6:	d1cf      	bne.n	1c398 <gnss_interface_setopt+0x1c>
   1c3f8:	2203      	movs	r2, #3
   1c3fa:	f241 0604 	movw	r6, #4100	; 0x1004
   1c3fe:	2300      	movs	r3, #0
   1c400:	4637      	mov	r7, r6
   1c402:	f88d 2008 	strb.w	r2, [sp, #8]
   1c406:	f88d 3009 	strb.w	r3, [sp, #9]
   1c40a:	f88d 300a 	strb.w	r3, [sp, #10]
   1c40e:	f88d 300b 	strb.w	r3, [sp, #11]
   1c412:	f88d 300c 	strb.w	r3, [sp, #12]
   1c416:	682b      	ldr	r3, [r5, #0]
   1c418:	2112      	movs	r1, #18
   1c41a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1c41e:	4668      	mov	r0, sp
   1c420:	602b      	str	r3, [r5, #0]
   1c422:	f002 fab1 	bl	1e988 <rpc_gnss_client_request_alloc>
   1c426:	4604      	mov	r4, r0
   1c428:	9800      	ldr	r0, [sp, #0]
   1c42a:	2c00      	cmp	r4, #0
   1c42c:	f040 80e7 	bne.w	1c5fe <gnss_interface_setopt+0x282>
   1c430:	2800      	cmp	r0, #0
   1c432:	f000 80eb 	beq.w	1c60c <gnss_interface_setopt+0x290>
   1c436:	2212      	movs	r2, #18
   1c438:	f04f 0876 	mov.w	r8, #118	; 0x76
   1c43c:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1c440:	f04f 0a43 	mov.w	sl, #67	; 0x43
   1c444:	f04f 0954 	mov.w	r9, #84	; 0x54
   1c448:	f8df c210 	ldr.w	ip, [pc, #528]	; 1c65c <gnss_interface_setopt+0x2e0>
   1c44c:	a906      	add	r1, sp, #24
   1c44e:	f8bc 3000 	ldrh.w	r3, [ip]
   1c452:	f880 800e 	strb.w	r8, [r0, #14]
   1c456:	3301      	adds	r3, #1
   1c458:	b29b      	uxth	r3, r3
   1c45a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1c45e:	f841 6d14 	str.w	r6, [r1, #-20]!
   1c462:	7144      	strb	r4, [r0, #5]
   1c464:	7184      	strb	r4, [r0, #6]
   1c466:	71c4      	strb	r4, [r0, #7]
   1c468:	7204      	strb	r4, [r0, #8]
   1c46a:	7244      	strb	r4, [r0, #9]
   1c46c:	7284      	strb	r4, [r0, #10]
   1c46e:	72c4      	strb	r4, [r0, #11]
   1c470:	7102      	strb	r2, [r0, #4]
   1c472:	f880 a00c 	strb.w	sl, [r0, #12]
   1c476:	f880 900d 	strb.w	r9, [r0, #13]
   1c47a:	f880 e00f 	strb.w	lr, [r0, #15]
   1c47e:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 1c660 <gnss_interface_setopt+0x2e4>
   1c482:	6800      	ldr	r0, [r0, #0]
   1c484:	f8ac 3000 	strh.w	r3, [ip]
   1c488:	f00a fabd 	bl	26a06 <memcpy>
   1c48c:	4639      	mov	r1, r7
   1c48e:	9800      	ldr	r0, [sp, #0]
   1c490:	f8c8 4000 	str.w	r4, [r8]
   1c494:	f002 fa8c 	bl	1e9b0 <rpc_gnss_client_request_send>
   1c498:	2800      	cmp	r0, #0
   1c49a:	f040 80bc 	bne.w	1c616 <gnss_interface_setopt+0x29a>
   1c49e:	4f6e      	ldr	r7, [pc, #440]	; (1c658 <gnss_interface_setopt+0x2dc>)
   1c4a0:	4e6c      	ldr	r6, [pc, #432]	; (1c654 <gnss_interface_setopt+0x2d8>)
   1c4a2:	4639      	mov	r1, r7
   1c4a4:	4630      	mov	r0, r6
   1c4a6:	f7f9 fb01 	bl	15aac <bsd_os_timedwait>
   1c4aa:	682c      	ldr	r4, [r5, #0]
   1c4ac:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1c4b0:	d1f7      	bne.n	1c4a2 <gnss_interface_setopt+0x126>
   1c4b2:	f8d8 0000 	ldr.w	r0, [r8]
   1c4b6:	b118      	cbz	r0, 1c4c0 <gnss_interface_setopt+0x144>
   1c4b8:	f002 fa98 	bl	1e9ec <rpc_gnss_client_data_free>
   1c4bc:	f8c8 4000 	str.w	r4, [r8]
   1c4c0:	682b      	ldr	r3, [r5, #0]
   1c4c2:	021b      	lsls	r3, r3, #8
   1c4c4:	f140 808f 	bpl.w	1c5e6 <gnss_interface_setopt+0x26a>
   1c4c8:	2000      	movs	r0, #0
   1c4ca:	682b      	ldr	r3, [r5, #0]
   1c4cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1c4d0:	602b      	str	r3, [r5, #0]
   1c4d2:	b006      	add	sp, #24
   1c4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c4d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c4da:	2a02      	cmp	r2, #2
   1c4dc:	f040 8089 	bne.w	1c5f2 <gnss_interface_setopt+0x276>
   1c4e0:	2208      	movs	r2, #8
   1c4e2:	f241 1603 	movw	r6, #4355	; 0x1103
   1c4e6:	881b      	ldrh	r3, [r3, #0]
   1c4e8:	9202      	str	r2, [sp, #8]
   1c4ea:	f8ad 300f 	strh.w	r3, [sp, #15]
   1c4ee:	4637      	mov	r7, r6
   1c4f0:	e791      	b.n	1c416 <gnss_interface_setopt+0x9a>
   1c4f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c4f4:	2a02      	cmp	r2, #2
   1c4f6:	d17c      	bne.n	1c5f2 <gnss_interface_setopt+0x276>
   1c4f8:	2210      	movs	r2, #16
   1c4fa:	f241 1603 	movw	r6, #4355	; 0x1103
   1c4fe:	881b      	ldrh	r3, [r3, #0]
   1c500:	9202      	str	r2, [sp, #8]
   1c502:	f8ad 3011 	strh.w	r3, [sp, #17]
   1c506:	4637      	mov	r7, r6
   1c508:	e785      	b.n	1c416 <gnss_interface_setopt+0x9a>
   1c50a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c50c:	2a01      	cmp	r2, #1
   1c50e:	d170      	bne.n	1c5f2 <gnss_interface_setopt+0x276>
   1c510:	781b      	ldrb	r3, [r3, #0]
   1c512:	2b01      	cmp	r3, #1
   1c514:	d16d      	bne.n	1c5f2 <gnss_interface_setopt+0x276>
   1c516:	f241 1603 	movw	r6, #4355	; 0x1103
   1c51a:	4637      	mov	r7, r6
   1c51c:	e77b      	b.n	1c416 <gnss_interface_setopt+0x9a>
   1c51e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c520:	2a02      	cmp	r2, #2
   1c522:	d166      	bne.n	1c5f2 <gnss_interface_setopt+0x276>
   1c524:	2220      	movs	r2, #32
   1c526:	f241 1603 	movw	r6, #4355	; 0x1103
   1c52a:	881b      	ldrh	r3, [r3, #0]
   1c52c:	9202      	str	r2, [sp, #8]
   1c52e:	f8ad 3013 	strh.w	r3, [sp, #19]
   1c532:	4637      	mov	r7, r6
   1c534:	e76f      	b.n	1c416 <gnss_interface_setopt+0x9a>
   1c536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c538:	2a01      	cmp	r2, #1
   1c53a:	d15a      	bne.n	1c5f2 <gnss_interface_setopt+0x276>
   1c53c:	f241 1603 	movw	r6, #4355	; 0x1103
   1c540:	781b      	ldrb	r3, [r3, #0]
   1c542:	9202      	str	r2, [sp, #8]
   1c544:	f88d 300c 	strb.w	r3, [sp, #12]
   1c548:	4637      	mov	r7, r6
   1c54a:	e764      	b.n	1c416 <gnss_interface_setopt+0x9a>
   1c54c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c54e:	2a01      	cmp	r2, #1
   1c550:	d14f      	bne.n	1c5f2 <gnss_interface_setopt+0x276>
   1c552:	2202      	movs	r2, #2
   1c554:	f241 1603 	movw	r6, #4355	; 0x1103
   1c558:	781b      	ldrb	r3, [r3, #0]
   1c55a:	9202      	str	r2, [sp, #8]
   1c55c:	f88d 300d 	strb.w	r3, [sp, #13]
   1c560:	4637      	mov	r7, r6
   1c562:	e758      	b.n	1c416 <gnss_interface_setopt+0x9a>
   1c564:	682a      	ldr	r2, [r5, #0]
   1c566:	b292      	uxth	r2, r2
   1c568:	2a02      	cmp	r2, #2
   1c56a:	f47f af15 	bne.w	1c398 <gnss_interface_setopt+0x1c>
   1c56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c570:	2a04      	cmp	r2, #4
   1c572:	d13e      	bne.n	1c5f2 <gnss_interface_setopt+0x276>
   1c574:	2101      	movs	r1, #1
   1c576:	f241 0604 	movw	r6, #4100	; 0x1004
   1c57a:	682a      	ldr	r2, [r5, #0]
   1c57c:	6818      	ldr	r0, [r3, #0]
   1c57e:	0c13      	lsrs	r3, r2, #16
   1c580:	041b      	lsls	r3, r3, #16
   1c582:	f043 0303 	orr.w	r3, r3, #3
   1c586:	f8cd 0009 	str.w	r0, [sp, #9]
   1c58a:	602b      	str	r3, [r5, #0]
   1c58c:	f88d 1008 	strb.w	r1, [sp, #8]
   1c590:	4637      	mov	r7, r6
   1c592:	e740      	b.n	1c416 <gnss_interface_setopt+0x9a>
   1c594:	682a      	ldr	r2, [r5, #0]
   1c596:	b292      	uxth	r2, r2
   1c598:	2a04      	cmp	r2, #4
   1c59a:	d004      	beq.n	1c5a6 <gnss_interface_setopt+0x22a>
   1c59c:	682a      	ldr	r2, [r5, #0]
   1c59e:	b292      	uxth	r2, r2
   1c5a0:	2a02      	cmp	r2, #2
   1c5a2:	f47f aef9 	bne.w	1c398 <gnss_interface_setopt+0x1c>
   1c5a6:	2200      	movs	r2, #0
   1c5a8:	f88d 2008 	strb.w	r2, [sp, #8]
   1c5ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c5ae:	2a04      	cmp	r2, #4
   1c5b0:	d11f      	bne.n	1c5f2 <gnss_interface_setopt+0x276>
   1c5b2:	f241 0604 	movw	r6, #4100	; 0x1004
   1c5b6:	681b      	ldr	r3, [r3, #0]
   1c5b8:	4637      	mov	r7, r6
   1c5ba:	f8cd 3009 	str.w	r3, [sp, #9]
   1c5be:	e72a      	b.n	1c416 <gnss_interface_setopt+0x9a>
   1c5c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c5c2:	2a01      	cmp	r2, #1
   1c5c4:	d115      	bne.n	1c5f2 <gnss_interface_setopt+0x276>
   1c5c6:	2240      	movs	r2, #64	; 0x40
   1c5c8:	f241 1603 	movw	r6, #4355	; 0x1103
   1c5cc:	781b      	ldrb	r3, [r3, #0]
   1c5ce:	9202      	str	r2, [sp, #8]
   1c5d0:	f88d 3015 	strb.w	r3, [sp, #21]
   1c5d4:	4637      	mov	r7, r6
   1c5d6:	e71e      	b.n	1c416 <gnss_interface_setopt+0x9a>
   1c5d8:	682b      	ldr	r3, [r5, #0]
   1c5da:	b29b      	uxth	r3, r3
   1c5dc:	2b04      	cmp	r3, #4
   1c5de:	f47f aedb 	bne.w	1c398 <gnss_interface_setopt+0x1c>
   1c5e2:	2202      	movs	r2, #2
   1c5e4:	e709      	b.n	1c3fa <gnss_interface_setopt+0x7e>
   1c5e6:	200e      	movs	r0, #14
   1c5e8:	f7f9 fb16 	bl	15c18 <bsd_os_errno_set>
   1c5ec:	f04f 30ff 	mov.w	r0, #4294967295
   1c5f0:	e76b      	b.n	1c4ca <gnss_interface_setopt+0x14e>
   1c5f2:	2016      	movs	r0, #22
   1c5f4:	f7f9 fb10 	bl	15c18 <bsd_os_errno_set>
   1c5f8:	f04f 30ff 	mov.w	r0, #4294967295
   1c5fc:	e6d1      	b.n	1c3a2 <gnss_interface_setopt+0x26>
   1c5fe:	b128      	cbz	r0, 1c60c <gnss_interface_setopt+0x290>
   1c600:	6803      	ldr	r3, [r0, #0]
   1c602:	b11b      	cbz	r3, 1c60c <gnss_interface_setopt+0x290>
   1c604:	4618      	mov	r0, r3
   1c606:	f002 f9f1 	bl	1e9ec <rpc_gnss_client_data_free>
   1c60a:	9800      	ldr	r0, [sp, #0]
   1c60c:	f002 f9e6 	bl	1e9dc <rpc_gnss_client_message_free>
   1c610:	2023      	movs	r0, #35	; 0x23
   1c612:	f7f9 fb01 	bl	15c18 <bsd_os_errno_set>
   1c616:	682b      	ldr	r3, [r5, #0]
   1c618:	200e      	movs	r0, #14
   1c61a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1c61e:	602b      	str	r3, [r5, #0]
   1c620:	f7f9 fafa 	bl	15c18 <bsd_os_errno_set>
   1c624:	f04f 30ff 	mov.w	r0, #4294967295
   1c628:	e6bb      	b.n	1c3a2 <gnss_interface_setopt+0x26>
   1c62a:	202a      	movs	r0, #42	; 0x2a
   1c62c:	f7f9 faf4 	bl	15c18 <bsd_os_errno_set>
   1c630:	f04f 30ff 	mov.w	r0, #4294967295
   1c634:	e6b5      	b.n	1c3a2 <gnss_interface_setopt+0x26>
   1c636:	2009      	movs	r0, #9
   1c638:	f7f9 faee 	bl	15c18 <bsd_os_errno_set>
   1c63c:	f04f 30ff 	mov.w	r0, #4294967295
   1c640:	e6af      	b.n	1c3a2 <gnss_interface_setopt+0x26>
   1c642:	2073      	movs	r0, #115	; 0x73
   1c644:	f7f9 fae8 	bl	15c18 <bsd_os_errno_set>
   1c648:	f04f 30ff 	mov.w	r0, #4294967295
   1c64c:	e6a9      	b.n	1c3a2 <gnss_interface_setopt+0x26>
   1c64e:	bf00      	nop
   1c650:	2002206c 	.word	0x2002206c
   1c654:	49765443 	.word	0x49765443
   1c658:	200203d0 	.word	0x200203d0
   1c65c:	20026ea2 	.word	0x20026ea2
   1c660:	20022070 	.word	0x20022070

0001c664 <gnss_interface_getopt>:
   1c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c668:	4c81      	ldr	r4, [pc, #516]	; (1c870 <gnss_interface_getopt+0x20c>)
   1c66a:	b087      	sub	sp, #28
   1c66c:	6825      	ldr	r5, [r4, #0]
   1c66e:	4698      	mov	r8, r3
   1c670:	b2ad      	uxth	r5, r5
   1c672:	2d02      	cmp	r5, #2
   1c674:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c676:	f040 80dd 	bne.w	1c834 <gnss_interface_getopt+0x1d0>
   1c67a:	6825      	ldr	r5, [r4, #0]
   1c67c:	03ee      	lsls	r6, r5, #15
   1c67e:	f100 80eb 	bmi.w	1c858 <gnss_interface_getopt+0x1f4>
   1c682:	6825      	ldr	r5, [r4, #0]
   1c684:	01ed      	lsls	r5, r5, #7
   1c686:	f100 80ed 	bmi.w	1c864 <gnss_interface_getopt+0x200>
   1c68a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1c68e:	f040 80d7 	bne.w	1c840 <gnss_interface_getopt+0x1dc>
   1c692:	4978      	ldr	r1, [pc, #480]	; (1c874 <gnss_interface_getopt+0x210>)
   1c694:	4288      	cmp	r0, r1
   1c696:	f040 80d9 	bne.w	1c84c <gnss_interface_getopt+0x1e8>
   1c69a:	f1b8 0f00 	cmp.w	r8, #0
   1c69e:	d00b      	beq.n	1c6b8 <gnss_interface_getopt+0x54>
   1c6a0:	b153      	cbz	r3, 1c6b8 <gnss_interface_getopt+0x54>
   1c6a2:	1e57      	subs	r7, r2, #1
   1c6a4:	2f05      	cmp	r7, #5
   1c6a6:	d807      	bhi.n	1c6b8 <gnss_interface_getopt+0x54>
   1c6a8:	e8df f007 	tbb	[pc, r7]
   1c6ac:	0f030f0f 	.word	0x0f030f0f
   1c6b0:	0303      	.short	0x0303
   1c6b2:	681b      	ldr	r3, [r3, #0]
   1c6b4:	2b01      	cmp	r3, #1
   1c6b6:	d00b      	beq.n	1c6d0 <gnss_interface_getopt+0x6c>
   1c6b8:	2016      	movs	r0, #22
   1c6ba:	f7f9 faad 	bl	15c18 <bsd_os_errno_set>
   1c6be:	f04f 35ff 	mov.w	r5, #4294967295
   1c6c2:	4628      	mov	r0, r5
   1c6c4:	b007      	add	sp, #28
   1c6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6ca:	681b      	ldr	r3, [r3, #0]
   1c6cc:	2b02      	cmp	r3, #2
   1c6ce:	d1f3      	bne.n	1c6b8 <gnss_interface_getopt+0x54>
   1c6d0:	6823      	ldr	r3, [r4, #0]
   1c6d2:	2212      	movs	r2, #18
   1c6d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c6d8:	2100      	movs	r1, #0
   1c6da:	a801      	add	r0, sp, #4
   1c6dc:	6023      	str	r3, [r4, #0]
   1c6de:	f00a f99f 	bl	26a20 <memset>
   1c6e2:	2112      	movs	r1, #18
   1c6e4:	4668      	mov	r0, sp
   1c6e6:	f002 f94f 	bl	1e988 <rpc_gnss_client_request_alloc>
   1c6ea:	4605      	mov	r5, r0
   1c6ec:	9800      	ldr	r0, [sp, #0]
   1c6ee:	2d00      	cmp	r5, #0
   1c6f0:	f040 808a 	bne.w	1c808 <gnss_interface_getopt+0x1a4>
   1c6f4:	2800      	cmp	r0, #0
   1c6f6:	f000 808e 	beq.w	1c816 <gnss_interface_getopt+0x1b2>
   1c6fa:	f241 1602 	movw	r6, #4354	; 0x1102
   1c6fe:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1c702:	2212      	movs	r2, #18
   1c704:	f04f 0976 	mov.w	r9, #118	; 0x76
   1c708:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1c70c:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1c710:	f8df c168 	ldr.w	ip, [pc, #360]	; 1c87c <gnss_interface_getopt+0x218>
   1c714:	f880 e00f 	strb.w	lr, [r0, #15]
   1c718:	f8bc 3000 	ldrh.w	r3, [ip]
   1c71c:	f880 900e 	strb.w	r9, [r0, #14]
   1c720:	3301      	adds	r3, #1
   1c722:	b29b      	uxth	r3, r3
   1c724:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1c728:	f8cd e004 	str.w	lr, [sp, #4]
   1c72c:	7145      	strb	r5, [r0, #5]
   1c72e:	7185      	strb	r5, [r0, #6]
   1c730:	71c5      	strb	r5, [r0, #7]
   1c732:	7205      	strb	r5, [r0, #8]
   1c734:	7245      	strb	r5, [r0, #9]
   1c736:	7285      	strb	r5, [r0, #10]
   1c738:	72c5      	strb	r5, [r0, #11]
   1c73a:	a901      	add	r1, sp, #4
   1c73c:	7102      	strb	r2, [r0, #4]
   1c73e:	f880 b00c 	strb.w	fp, [r0, #12]
   1c742:	f880 a00d 	strb.w	sl, [r0, #13]
   1c746:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1c880 <gnss_interface_getopt+0x21c>
   1c74a:	6800      	ldr	r0, [r0, #0]
   1c74c:	f8ac 3000 	strh.w	r3, [ip]
   1c750:	f00a f959 	bl	26a06 <memcpy>
   1c754:	4631      	mov	r1, r6
   1c756:	9800      	ldr	r0, [sp, #0]
   1c758:	f8c9 5000 	str.w	r5, [r9]
   1c75c:	f002 f928 	bl	1e9b0 <rpc_gnss_client_request_send>
   1c760:	2800      	cmp	r0, #0
   1c762:	d15d      	bne.n	1c820 <gnss_interface_getopt+0x1bc>
   1c764:	4e44      	ldr	r6, [pc, #272]	; (1c878 <gnss_interface_getopt+0x214>)
   1c766:	4d43      	ldr	r5, [pc, #268]	; (1c874 <gnss_interface_getopt+0x210>)
   1c768:	4631      	mov	r1, r6
   1c76a:	4628      	mov	r0, r5
   1c76c:	f7f9 f99e 	bl	15aac <bsd_os_timedwait>
   1c770:	6823      	ldr	r3, [r4, #0]
   1c772:	01db      	lsls	r3, r3, #7
   1c774:	d4f8      	bmi.n	1c768 <gnss_interface_getopt+0x104>
   1c776:	f8d9 0000 	ldr.w	r0, [r9]
   1c77a:	b1d8      	cbz	r0, 1c7b4 <gnss_interface_getopt+0x150>
   1c77c:	6825      	ldr	r5, [r4, #0]
   1c77e:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1c782:	d00f      	beq.n	1c7a4 <gnss_interface_getopt+0x140>
   1c784:	2f05      	cmp	r7, #5
   1c786:	d837      	bhi.n	1c7f8 <gnss_interface_getopt+0x194>
   1c788:	e8df f007 	tbb	[pc, r7]
   1c78c:	2b26201a 	.word	0x2b26201a
   1c790:	0331      	.short	0x0331
   1c792:	2500      	movs	r5, #0
   1c794:	7b43      	ldrb	r3, [r0, #13]
   1c796:	f888 3000 	strb.w	r3, [r8]
   1c79a:	f002 f927 	bl	1e9ec <rpc_gnss_client_data_free>
   1c79e:	2300      	movs	r3, #0
   1c7a0:	f8c9 3000 	str.w	r3, [r9]
   1c7a4:	6823      	ldr	r3, [r4, #0]
   1c7a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1c7aa:	6023      	str	r3, [r4, #0]
   1c7ac:	4628      	mov	r0, r5
   1c7ae:	b007      	add	sp, #28
   1c7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7b4:	6823      	ldr	r3, [r4, #0]
   1c7b6:	4605      	mov	r5, r0
   1c7b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1c7bc:	6023      	str	r3, [r4, #0]
   1c7be:	e7f5      	b.n	1c7ac <gnss_interface_getopt+0x148>
   1c7c0:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1c7c4:	2500      	movs	r5, #0
   1c7c6:	f8a8 3000 	strh.w	r3, [r8]
   1c7ca:	e7e6      	b.n	1c79a <gnss_interface_getopt+0x136>
   1c7cc:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1c7d0:	2500      	movs	r5, #0
   1c7d2:	f8a8 3000 	strh.w	r3, [r8]
   1c7d6:	e7e0      	b.n	1c79a <gnss_interface_getopt+0x136>
   1c7d8:	7b83      	ldrb	r3, [r0, #14]
   1c7da:	2500      	movs	r5, #0
   1c7dc:	f888 3000 	strb.w	r3, [r8]
   1c7e0:	e7db      	b.n	1c79a <gnss_interface_getopt+0x136>
   1c7e2:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1c7e6:	2500      	movs	r5, #0
   1c7e8:	f8a8 3000 	strh.w	r3, [r8]
   1c7ec:	e7d5      	b.n	1c79a <gnss_interface_getopt+0x136>
   1c7ee:	7b03      	ldrb	r3, [r0, #12]
   1c7f0:	2500      	movs	r5, #0
   1c7f2:	f888 3000 	strb.w	r3, [r8]
   1c7f6:	e7d0      	b.n	1c79a <gnss_interface_getopt+0x136>
   1c7f8:	2016      	movs	r0, #22
   1c7fa:	f7f9 fa0d 	bl	15c18 <bsd_os_errno_set>
   1c7fe:	f04f 35ff 	mov.w	r5, #4294967295
   1c802:	f8d9 0000 	ldr.w	r0, [r9]
   1c806:	e7c8      	b.n	1c79a <gnss_interface_getopt+0x136>
   1c808:	b128      	cbz	r0, 1c816 <gnss_interface_getopt+0x1b2>
   1c80a:	6803      	ldr	r3, [r0, #0]
   1c80c:	b11b      	cbz	r3, 1c816 <gnss_interface_getopt+0x1b2>
   1c80e:	4618      	mov	r0, r3
   1c810:	f002 f8ec 	bl	1e9ec <rpc_gnss_client_data_free>
   1c814:	9800      	ldr	r0, [sp, #0]
   1c816:	f002 f8e1 	bl	1e9dc <rpc_gnss_client_message_free>
   1c81a:	2023      	movs	r0, #35	; 0x23
   1c81c:	f7f9 f9fc 	bl	15c18 <bsd_os_errno_set>
   1c820:	6823      	ldr	r3, [r4, #0]
   1c822:	200e      	movs	r0, #14
   1c824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1c828:	6023      	str	r3, [r4, #0]
   1c82a:	f04f 35ff 	mov.w	r5, #4294967295
   1c82e:	f7f9 f9f3 	bl	15c18 <bsd_os_errno_set>
   1c832:	e746      	b.n	1c6c2 <gnss_interface_getopt+0x5e>
   1c834:	200e      	movs	r0, #14
   1c836:	f7f9 f9ef 	bl	15c18 <bsd_os_errno_set>
   1c83a:	f04f 35ff 	mov.w	r5, #4294967295
   1c83e:	e740      	b.n	1c6c2 <gnss_interface_getopt+0x5e>
   1c840:	202a      	movs	r0, #42	; 0x2a
   1c842:	f7f9 f9e9 	bl	15c18 <bsd_os_errno_set>
   1c846:	f04f 35ff 	mov.w	r5, #4294967295
   1c84a:	e73a      	b.n	1c6c2 <gnss_interface_getopt+0x5e>
   1c84c:	2009      	movs	r0, #9
   1c84e:	f7f9 f9e3 	bl	15c18 <bsd_os_errno_set>
   1c852:	f04f 35ff 	mov.w	r5, #4294967295
   1c856:	e734      	b.n	1c6c2 <gnss_interface_getopt+0x5e>
   1c858:	2005      	movs	r0, #5
   1c85a:	f7f9 f9dd 	bl	15c18 <bsd_os_errno_set>
   1c85e:	f04f 35ff 	mov.w	r5, #4294967295
   1c862:	e72e      	b.n	1c6c2 <gnss_interface_getopt+0x5e>
   1c864:	2073      	movs	r0, #115	; 0x73
   1c866:	f7f9 f9d7 	bl	15c18 <bsd_os_errno_set>
   1c86a:	f04f 35ff 	mov.w	r5, #4294967295
   1c86e:	e728      	b.n	1c6c2 <gnss_interface_getopt+0x5e>
   1c870:	2002206c 	.word	0x2002206c
   1c874:	49765443 	.word	0x49765443
   1c878:	200203d0 	.word	0x200203d0
   1c87c:	20026ea2 	.word	0x20026ea2
   1c880:	20022070 	.word	0x20022070

0001c884 <gnss_interface_init>:
   1c884:	2100      	movs	r1, #0
   1c886:	b538      	push	{r3, r4, r5, lr}
   1c888:	4c09      	ldr	r4, [pc, #36]	; (1c8b0 <gnss_interface_init+0x2c>)
   1c88a:	4d0a      	ldr	r5, [pc, #40]	; (1c8b4 <gnss_interface_init+0x30>)
   1c88c:	6822      	ldr	r2, [r4, #0]
   1c88e:	480a      	ldr	r0, [pc, #40]	; (1c8b8 <gnss_interface_init+0x34>)
   1c890:	4b0a      	ldr	r3, [pc, #40]	; (1c8bc <gnss_interface_init+0x38>)
   1c892:	402a      	ands	r2, r5
   1c894:	6022      	str	r2, [r4, #0]
   1c896:	8001      	strh	r1, [r0, #0]
   1c898:	6019      	str	r1, [r3, #0]
   1c89a:	f002 f86f 	bl	1e97c <rpc_gnss_client_init>
   1c89e:	b928      	cbnz	r0, 1c8ac <gnss_interface_init+0x28>
   1c8a0:	6823      	ldr	r3, [r4, #0]
   1c8a2:	402b      	ands	r3, r5
   1c8a4:	f043 0301 	orr.w	r3, r3, #1
   1c8a8:	6023      	str	r3, [r4, #0]
   1c8aa:	bd38      	pop	{r3, r4, r5, pc}
   1c8ac:	2003      	movs	r0, #3
   1c8ae:	bd38      	pop	{r3, r4, r5, pc}
   1c8b0:	2002206c 	.word	0x2002206c
   1c8b4:	ffff0000 	.word	0xffff0000
   1c8b8:	20026ea2 	.word	0x20026ea2
   1c8bc:	20022070 	.word	0x20022070

0001c8c0 <gnss_interface_open>:
   1c8c0:	2902      	cmp	r1, #2
   1c8c2:	b510      	push	{r4, lr}
   1c8c4:	d121      	bne.n	1c90a <gnss_interface_open+0x4a>
   1c8c6:	4c17      	ldr	r4, [pc, #92]	; (1c924 <gnss_interface_open+0x64>)
   1c8c8:	6823      	ldr	r3, [r4, #0]
   1c8ca:	b29b      	uxth	r3, r3
   1c8cc:	2b01      	cmp	r3, #1
   1c8ce:	d116      	bne.n	1c8fe <gnss_interface_open+0x3e>
   1c8d0:	6823      	ldr	r3, [r4, #0]
   1c8d2:	4608      	mov	r0, r1
   1c8d4:	0c1b      	lsrs	r3, r3, #16
   1c8d6:	041b      	lsls	r3, r3, #16
   1c8d8:	f043 0302 	orr.w	r3, r3, #2
   1c8dc:	2200      	movs	r2, #0
   1c8de:	4912      	ldr	r1, [pc, #72]	; (1c928 <gnss_interface_open+0x68>)
   1c8e0:	6023      	str	r3, [r4, #0]
   1c8e2:	f002 f96d 	bl	1ebc0 <packet_handler_create>
   1c8e6:	4a11      	ldr	r2, [pc, #68]	; (1c92c <gnss_interface_open+0x6c>)
   1c8e8:	6010      	str	r0, [r2, #0]
   1c8ea:	b1a0      	cbz	r0, 1c916 <gnss_interface_open+0x56>
   1c8ec:	6823      	ldr	r3, [r4, #0]
   1c8ee:	6802      	ldr	r2, [r0, #0]
   1c8f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1c8f4:	6812      	ldr	r2, [r2, #0]
   1c8f6:	6023      	str	r3, [r4, #0]
   1c8f8:	4790      	blx	r2
   1c8fa:	480d      	ldr	r0, [pc, #52]	; (1c930 <gnss_interface_open+0x70>)
   1c8fc:	bd10      	pop	{r4, pc}
   1c8fe:	2005      	movs	r0, #5
   1c900:	f7f9 f98a 	bl	15c18 <bsd_os_errno_set>
   1c904:	f04f 30ff 	mov.w	r0, #4294967295
   1c908:	bd10      	pop	{r4, pc}
   1c90a:	2029      	movs	r0, #41	; 0x29
   1c90c:	f7f9 f984 	bl	15c18 <bsd_os_errno_set>
   1c910:	f04f 30ff 	mov.w	r0, #4294967295
   1c914:	bd10      	pop	{r4, pc}
   1c916:	200e      	movs	r0, #14
   1c918:	f7f9 f97e 	bl	15c18 <bsd_os_errno_set>
   1c91c:	f04f 30ff 	mov.w	r0, #4294967295
   1c920:	bd10      	pop	{r4, pc}
   1c922:	bf00      	nop
   1c924:	2002206c 	.word	0x2002206c
   1c928:	0001bbb9 	.word	0x0001bbb9
   1c92c:	20022074 	.word	0x20022074
   1c930:	49765443 	.word	0x49765443

0001c934 <gnss_interface_close>:
   1c934:	b530      	push	{r4, r5, lr}
   1c936:	4b15      	ldr	r3, [pc, #84]	; (1c98c <gnss_interface_close+0x58>)
   1c938:	b085      	sub	sp, #20
   1c93a:	4298      	cmp	r0, r3
   1c93c:	d11f      	bne.n	1c97e <gnss_interface_close+0x4a>
   1c93e:	4c14      	ldr	r4, [pc, #80]	; (1c990 <gnss_interface_close+0x5c>)
   1c940:	6822      	ldr	r2, [r4, #0]
   1c942:	b292      	uxth	r2, r2
   1c944:	2a04      	cmp	r2, #4
   1c946:	d00f      	beq.n	1c968 <gnss_interface_close+0x34>
   1c948:	4d12      	ldr	r5, [pc, #72]	; (1c994 <gnss_interface_close+0x60>)
   1c94a:	6828      	ldr	r0, [r5, #0]
   1c94c:	b118      	cbz	r0, 1c956 <gnss_interface_close+0x22>
   1c94e:	f002 f957 	bl	1ec00 <packet_handler_delete>
   1c952:	2300      	movs	r3, #0
   1c954:	602b      	str	r3, [r5, #0]
   1c956:	2000      	movs	r0, #0
   1c958:	6823      	ldr	r3, [r4, #0]
   1c95a:	0c1b      	lsrs	r3, r3, #16
   1c95c:	041b      	lsls	r3, r3, #16
   1c95e:	f043 0301 	orr.w	r3, r3, #1
   1c962:	6023      	str	r3, [r4, #0]
   1c964:	b005      	add	sp, #20
   1c966:	bd30      	pop	{r4, r5, pc}
   1c968:	2100      	movs	r1, #0
   1c96a:	ab04      	add	r3, sp, #16
   1c96c:	f843 1d04 	str.w	r1, [r3, #-4]!
   1c970:	9200      	str	r2, [sp, #0]
   1c972:	f44f 7101 	mov.w	r1, #516	; 0x204
   1c976:	2208      	movs	r2, #8
   1c978:	f001 fe80 	bl	1e67c <nrf_setsockopt>
   1c97c:	e7e4      	b.n	1c948 <gnss_interface_close+0x14>
   1c97e:	2009      	movs	r0, #9
   1c980:	f7f9 f94a 	bl	15c18 <bsd_os_errno_set>
   1c984:	f04f 30ff 	mov.w	r0, #4294967295
   1c988:	e7ec      	b.n	1c964 <gnss_interface_close+0x30>
   1c98a:	bf00      	nop
   1c98c:	49765443 	.word	0x49765443
   1c990:	2002206c 	.word	0x2002206c
   1c994:	20022074 	.word	0x20022074

0001c998 <rpc_logobj_client_evt_handler>:
   1c998:	b120      	cbz	r0, 1c9a4 <rpc_logobj_client_evt_handler+0xc>
   1c99a:	f850 1b08 	ldr.w	r1, [r0], #8
   1c99e:	0c09      	lsrs	r1, r1, #16
   1c9a0:	f7fb bb6c 	b.w	1807c <logobj_event_handler>
   1c9a4:	4770      	bx	lr
   1c9a6:	bf00      	nop

0001c9a8 <rpc_logobj_client_init>:
   1c9a8:	4801      	ldr	r0, [pc, #4]	; (1c9b0 <rpc_logobj_client_init+0x8>)
   1c9aa:	f7ff b847 	b.w	1ba3c <rpc_client_register>
   1c9ae:	bf00      	nop
   1c9b0:	00028284 	.word	0x00028284

0001c9b4 <rpc_logobj_client_request_alloc>:
   1c9b4:	2300      	movs	r3, #0
   1c9b6:	b510      	push	{r4, lr}
   1c9b8:	b082      	sub	sp, #8
   1c9ba:	9301      	str	r3, [sp, #4]
   1c9bc:	b961      	cbnz	r1, 1c9d8 <rpc_logobj_client_request_alloc+0x24>
   1c9be:	b170      	cbz	r0, 1c9de <rpc_logobj_client_request_alloc+0x2a>
   1c9c0:	4604      	mov	r4, r0
   1c9c2:	aa01      	add	r2, sp, #4
   1c9c4:	2009      	movs	r0, #9
   1c9c6:	f7ff f8b3 	bl	1bb30 <rpc_message_alloc>
   1c9ca:	b918      	cbnz	r0, 1c9d4 <rpc_logobj_client_request_alloc+0x20>
   1c9cc:	9b01      	ldr	r3, [sp, #4]
   1c9ce:	b10b      	cbz	r3, 1c9d4 <rpc_logobj_client_request_alloc+0x20>
   1c9d0:	3308      	adds	r3, #8
   1c9d2:	6023      	str	r3, [r4, #0]
   1c9d4:	b002      	add	sp, #8
   1c9d6:	bd10      	pop	{r4, pc}
   1c9d8:	200f      	movs	r0, #15
   1c9da:	b002      	add	sp, #8
   1c9dc:	bd10      	pop	{r4, pc}
   1c9de:	200e      	movs	r0, #14
   1c9e0:	b002      	add	sp, #8
   1c9e2:	bd10      	pop	{r4, pc}

0001c9e4 <rpc_logobj_client_request_send>:
   1c9e4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1c9e8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1c9ec:	d10b      	bne.n	1ca06 <rpc_logobj_client_request_send+0x22>
   1c9ee:	b160      	cbz	r0, 1ca0a <rpc_logobj_client_request_send+0x26>
   1c9f0:	4603      	mov	r3, r0
   1c9f2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1c9f6:	2009      	movs	r0, #9
   1c9f8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1c9fc:	f843 1d08 	str.w	r1, [r3, #-8]!
   1ca00:	4619      	mov	r1, r3
   1ca02:	f7ff b885 	b.w	1bb10 <rpc_message_send>
   1ca06:	200f      	movs	r0, #15
   1ca08:	4770      	bx	lr
   1ca0a:	200e      	movs	r0, #14
   1ca0c:	4770      	bx	lr
   1ca0e:	bf00      	nop

0001ca10 <rpc_logobj_client_message_free>:
   1ca10:	b120      	cbz	r0, 1ca1c <rpc_logobj_client_message_free+0xc>
   1ca12:	f1a0 0108 	sub.w	r1, r0, #8
   1ca16:	2009      	movs	r0, #9
   1ca18:	f7ff b8b6 	b.w	1bb88 <rpc_message_free>
   1ca1c:	200e      	movs	r0, #14
   1ca1e:	4770      	bx	lr

0001ca20 <rpc_logobj_client_data_free>:
   1ca20:	b118      	cbz	r0, 1ca2a <rpc_logobj_client_data_free+0xa>
   1ca22:	4601      	mov	r1, r0
   1ca24:	2009      	movs	r0, #9
   1ca26:	f7ff b8bb 	b.w	1bba0 <rpc_message_data_free>
   1ca2a:	200e      	movs	r0, #14
   1ca2c:	4770      	bx	lr
   1ca2e:	bf00      	nop

0001ca30 <dfu_client_event_handler>:
   1ca30:	f850 1b08 	ldr.w	r1, [r0], #8
   1ca34:	0c09      	lsrs	r1, r1, #16
   1ca36:	f002 bde9 	b.w	1f60c <rpc_dfu_event_handler>
   1ca3a:	bf00      	nop

0001ca3c <rpc_dfu_client_init>:
   1ca3c:	4801      	ldr	r0, [pc, #4]	; (1ca44 <rpc_dfu_client_init+0x8>)
   1ca3e:	f7fe bffd 	b.w	1ba3c <rpc_client_register>
   1ca42:	bf00      	nop
   1ca44:	00028294 	.word	0x00028294

0001ca48 <rpc_dfu_client_request_alloc>:
   1ca48:	2300      	movs	r3, #0
   1ca4a:	b510      	push	{r4, lr}
   1ca4c:	b082      	sub	sp, #8
   1ca4e:	9301      	str	r3, [sp, #4]
   1ca50:	b158      	cbz	r0, 1ca6a <rpc_dfu_client_request_alloc+0x22>
   1ca52:	4604      	mov	r4, r0
   1ca54:	aa01      	add	r2, sp, #4
   1ca56:	2006      	movs	r0, #6
   1ca58:	f7ff f86a 	bl	1bb30 <rpc_message_alloc>
   1ca5c:	b918      	cbnz	r0, 1ca66 <rpc_dfu_client_request_alloc+0x1e>
   1ca5e:	9b01      	ldr	r3, [sp, #4]
   1ca60:	b10b      	cbz	r3, 1ca66 <rpc_dfu_client_request_alloc+0x1e>
   1ca62:	3308      	adds	r3, #8
   1ca64:	6023      	str	r3, [r4, #0]
   1ca66:	b002      	add	sp, #8
   1ca68:	bd10      	pop	{r4, pc}
   1ca6a:	2007      	movs	r0, #7
   1ca6c:	b002      	add	sp, #8
   1ca6e:	bd10      	pop	{r4, pc}

0001ca70 <rpc_dfu_client_request_send>:
   1ca70:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1ca74:	d10b      	bne.n	1ca8e <rpc_dfu_client_request_send+0x1e>
   1ca76:	b160      	cbz	r0, 1ca92 <rpc_dfu_client_request_send+0x22>
   1ca78:	4603      	mov	r3, r0
   1ca7a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1ca7e:	2006      	movs	r0, #6
   1ca80:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1ca84:	f843 1d08 	str.w	r1, [r3, #-8]!
   1ca88:	4619      	mov	r1, r3
   1ca8a:	f7ff b841 	b.w	1bb10 <rpc_message_send>
   1ca8e:	200f      	movs	r0, #15
   1ca90:	4770      	bx	lr
   1ca92:	2007      	movs	r0, #7
   1ca94:	4770      	bx	lr
   1ca96:	bf00      	nop

0001ca98 <rpc_dfu_client_message_free>:
   1ca98:	b120      	cbz	r0, 1caa4 <rpc_dfu_client_message_free+0xc>
   1ca9a:	f1a0 0108 	sub.w	r1, r0, #8
   1ca9e:	2006      	movs	r0, #6
   1caa0:	f7ff b872 	b.w	1bb88 <rpc_message_free>
   1caa4:	2007      	movs	r0, #7
   1caa6:	4770      	bx	lr

0001caa8 <rpc_dfu_client_data_free>:
   1caa8:	b118      	cbz	r0, 1cab2 <rpc_dfu_client_data_free+0xa>
   1caaa:	4601      	mov	r1, r0
   1caac:	2006      	movs	r0, #6
   1caae:	f7ff b877 	b.w	1bba0 <rpc_message_data_free>
   1cab2:	2007      	movs	r0, #7
   1cab4:	4770      	bx	lr
   1cab6:	bf00      	nop

0001cab8 <packet_free_cb>:
   1cab8:	6800      	ldr	r0, [r0, #0]
   1caba:	f003 bb41 	b.w	20140 <rpc_at_client_data_free>
   1cabe:	bf00      	nop

0001cac0 <at_interface_write>:
   1cac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cac4:	b083      	sub	sp, #12
   1cac6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1cac8:	2c00      	cmp	r4, #0
   1caca:	d166      	bne.n	1cb9a <at_interface_write+0xda>
   1cacc:	4688      	mov	r8, r1
   1cace:	4615      	mov	r5, r2
   1cad0:	461e      	mov	r6, r3
   1cad2:	4607      	mov	r7, r0
   1cad4:	f003 f9d2 	bl	1fe7c <interface_socket_from_handle_get>
   1cad8:	4604      	mov	r4, r0
   1cada:	2e00      	cmp	r6, #0
   1cadc:	d137      	bne.n	1cb4e <at_interface_write+0x8e>
   1cade:	2800      	cmp	r0, #0
   1cae0:	d061      	beq.n	1cba6 <at_interface_write+0xe6>
   1cae2:	6803      	ldr	r3, [r0, #0]
   1cae4:	039b      	lsls	r3, r3, #14
   1cae6:	d55e      	bpl.n	1cba6 <at_interface_write+0xe6>
   1cae8:	6803      	ldr	r3, [r0, #0]
   1caea:	4629      	mov	r1, r5
   1caec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1caf0:	6003      	str	r3, [r0, #0]
   1caf2:	6803      	ldr	r3, [r0, #0]
   1caf4:	4668      	mov	r0, sp
   1caf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1cafa:	6023      	str	r3, [r4, #0]
   1cafc:	f003 faf6 	bl	200ec <rpc_at_client_request_alloc>
   1cb00:	4606      	mov	r6, r0
   1cb02:	4638      	mov	r0, r7
   1cb04:	f003 f9ba 	bl	1fe7c <interface_socket_from_handle_get>
   1cb08:	4681      	mov	r9, r0
   1cb0a:	2e00      	cmp	r6, #0
   1cb0c:	d13f      	bne.n	1cb8e <at_interface_write+0xce>
   1cb0e:	2304      	movs	r3, #4
   1cb10:	9800      	ldr	r0, [sp, #0]
   1cb12:	7203      	strb	r3, [r0, #8]
   1cb14:	7246      	strb	r6, [r0, #9]
   1cb16:	7286      	strb	r6, [r0, #10]
   1cb18:	72c6      	strb	r6, [r0, #11]
   1cb1a:	60c7      	str	r7, [r0, #12]
   1cb1c:	b9fd      	cbnz	r5, 1cb5e <at_interface_write+0x9e>
   1cb1e:	2101      	movs	r1, #1
   1cb20:	f003 faf8 	bl	20114 <rpc_at_client_request_send>
   1cb24:	bb50      	cbnz	r0, 1cb7c <at_interface_write+0xbc>
   1cb26:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   1cb2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1cb2e:	2900      	cmp	r1, #0
   1cb30:	bf08      	it	eq
   1cb32:	f04f 31ff 	moveq.w	r1, #4294967295
   1cb36:	ab02      	add	r3, sp, #8
   1cb38:	f843 1d04 	str.w	r1, [r3, #-4]!
   1cb3c:	4638      	mov	r0, r7
   1cb3e:	4611      	mov	r1, r2
   1cb40:	f003 f91c 	bl	1fd7c <interface_socket_wait>
   1cb44:	b9f0      	cbnz	r0, 1cb84 <at_interface_write+0xc4>
   1cb46:	4628      	mov	r0, r5
   1cb48:	b003      	add	sp, #12
   1cb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cb4e:	b360      	cbz	r0, 1cbaa <at_interface_write+0xea>
   1cb50:	6803      	ldr	r3, [r0, #0]
   1cb52:	202d      	movs	r0, #45	; 0x2d
   1cb54:	f7f9 f860 	bl	15c18 <bsd_os_errno_set>
   1cb58:	f04f 30ff 	mov.w	r0, #4294967295
   1cb5c:	e7f4      	b.n	1cb48 <at_interface_write+0x88>
   1cb5e:	4641      	mov	r1, r8
   1cb60:	6800      	ldr	r0, [r0, #0]
   1cb62:	462a      	mov	r2, r5
   1cb64:	f009 ff4f 	bl	26a06 <memcpy>
   1cb68:	2101      	movs	r1, #1
   1cb6a:	9800      	ldr	r0, [sp, #0]
   1cb6c:	f003 fad2 	bl	20114 <rpc_at_client_request_send>
   1cb70:	2800      	cmp	r0, #0
   1cb72:	d0d8      	beq.n	1cb26 <at_interface_write+0x66>
   1cb74:	9b00      	ldr	r3, [sp, #0]
   1cb76:	6818      	ldr	r0, [r3, #0]
   1cb78:	f003 fae2 	bl	20140 <rpc_at_client_data_free>
   1cb7c:	9800      	ldr	r0, [sp, #0]
   1cb7e:	f003 fad7 	bl	20130 <rpc_at_client_message_free>
   1cb82:	2023      	movs	r0, #35	; 0x23
   1cb84:	6823      	ldr	r3, [r4, #0]
   1cb86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1cb8a:	6023      	str	r3, [r4, #0]
   1cb8c:	e7e2      	b.n	1cb54 <at_interface_write+0x94>
   1cb8e:	6823      	ldr	r3, [r4, #0]
   1cb90:	200c      	movs	r0, #12
   1cb92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1cb96:	6023      	str	r3, [r4, #0]
   1cb98:	e7dc      	b.n	1cb54 <at_interface_write+0x94>
   1cb9a:	2038      	movs	r0, #56	; 0x38
   1cb9c:	f7f9 f83c 	bl	15c18 <bsd_os_errno_set>
   1cba0:	f04f 30ff 	mov.w	r0, #4294967295
   1cba4:	e7d0      	b.n	1cb48 <at_interface_write+0x88>
   1cba6:	2016      	movs	r0, #22
   1cba8:	e7d4      	b.n	1cb54 <at_interface_write+0x94>
   1cbaa:	202d      	movs	r0, #45	; 0x2d
   1cbac:	e7d2      	b.n	1cb54 <at_interface_write+0x94>
   1cbae:	bf00      	nop

0001cbb0 <at_interface_init>:
   1cbb0:	b508      	push	{r3, lr}
   1cbb2:	f003 fa95 	bl	200e0 <rpc_at_client_init>
   1cbb6:	b910      	cbnz	r0, 1cbbe <at_interface_init+0xe>
   1cbb8:	2201      	movs	r2, #1
   1cbba:	4b01      	ldr	r3, [pc, #4]	; (1cbc0 <at_interface_init+0x10>)
   1cbbc:	701a      	strb	r2, [r3, #0]
   1cbbe:	bd08      	pop	{r3, pc}
   1cbc0:	2002a08e 	.word	0x2002a08e

0001cbc4 <at_interface_open>:
   1cbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbc8:	2600      	movs	r6, #0
   1cbca:	4b2e      	ldr	r3, [pc, #184]	; (1cc84 <at_interface_open+0xc0>)
   1cbcc:	b084      	sub	sp, #16
   1cbce:	781b      	ldrb	r3, [r3, #0]
   1cbd0:	9601      	str	r6, [sp, #4]
   1cbd2:	2b00      	cmp	r3, #0
   1cbd4:	d050      	beq.n	1cc78 <at_interface_open+0xb4>
   1cbd6:	2902      	cmp	r1, #2
   1cbd8:	460d      	mov	r5, r1
   1cbda:	d147      	bne.n	1cc6c <at_interface_open+0xa8>
   1cbdc:	4680      	mov	r8, r0
   1cbde:	4617      	mov	r7, r2
   1cbe0:	a801      	add	r0, sp, #4
   1cbe2:	4a29      	ldr	r2, [pc, #164]	; (1cc88 <at_interface_open+0xc4>)
   1cbe4:	f003 f818 	bl	1fc18 <interface_socket_allocate>
   1cbe8:	9b01      	ldr	r3, [sp, #4]
   1cbea:	4604      	mov	r4, r0
   1cbec:	b35b      	cbz	r3, 1cc46 <at_interface_open+0x82>
   1cbee:	615f      	str	r7, [r3, #20]
   1cbf0:	4631      	mov	r1, r6
   1cbf2:	e9c3 8503 	strd	r8, r5, [r3, #12]
   1cbf6:	a802      	add	r0, sp, #8
   1cbf8:	f003 fa78 	bl	200ec <rpc_at_client_request_alloc>
   1cbfc:	4606      	mov	r6, r0
   1cbfe:	4620      	mov	r0, r4
   1cc00:	f003 f93c 	bl	1fe7c <interface_socket_from_handle_get>
   1cc04:	4607      	mov	r7, r0
   1cc06:	bb16      	cbnz	r6, 1cc4e <at_interface_open+0x8a>
   1cc08:	2304      	movs	r3, #4
   1cc0a:	9802      	ldr	r0, [sp, #8]
   1cc0c:	2105      	movs	r1, #5
   1cc0e:	7203      	strb	r3, [r0, #8]
   1cc10:	7246      	strb	r6, [r0, #9]
   1cc12:	7286      	strb	r6, [r0, #10]
   1cc14:	72c6      	strb	r6, [r0, #11]
   1cc16:	60c4      	str	r4, [r0, #12]
   1cc18:	f003 fa7c 	bl	20114 <rpc_at_client_request_send>
   1cc1c:	bb08      	cbnz	r0, 1cc62 <at_interface_open+0x9e>
   1cc1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1cc20:	ab04      	add	r3, sp, #16
   1cc22:	2a00      	cmp	r2, #0
   1cc24:	bf08      	it	eq
   1cc26:	f04f 32ff 	moveq.w	r2, #4294967295
   1cc2a:	4629      	mov	r1, r5
   1cc2c:	f843 2d04 	str.w	r2, [r3, #-4]!
   1cc30:	4620      	mov	r0, r4
   1cc32:	462a      	mov	r2, r5
   1cc34:	f003 f8a2 	bl	1fd7c <interface_socket_wait>
   1cc38:	4605      	mov	r5, r0
   1cc3a:	b948      	cbnz	r0, 1cc50 <at_interface_open+0x8c>
   1cc3c:	9a01      	ldr	r2, [sp, #4]
   1cc3e:	6813      	ldr	r3, [r2, #0]
   1cc40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1cc44:	6013      	str	r3, [r2, #0]
   1cc46:	4620      	mov	r0, r4
   1cc48:	b004      	add	sp, #16
   1cc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc4e:	250c      	movs	r5, #12
   1cc50:	4620      	mov	r0, r4
   1cc52:	f003 f845 	bl	1fce0 <interface_socket_free>
   1cc56:	4628      	mov	r0, r5
   1cc58:	f7f8 ffde 	bl	15c18 <bsd_os_errno_set>
   1cc5c:	f04f 34ff 	mov.w	r4, #4294967295
   1cc60:	e7f1      	b.n	1cc46 <at_interface_open+0x82>
   1cc62:	9802      	ldr	r0, [sp, #8]
   1cc64:	f003 fa64 	bl	20130 <rpc_at_client_message_free>
   1cc68:	2523      	movs	r5, #35	; 0x23
   1cc6a:	e7f1      	b.n	1cc50 <at_interface_open+0x8c>
   1cc6c:	2029      	movs	r0, #41	; 0x29
   1cc6e:	f7f8 ffd3 	bl	15c18 <bsd_os_errno_set>
   1cc72:	f04f 34ff 	mov.w	r4, #4294967295
   1cc76:	e7e6      	b.n	1cc46 <at_interface_open+0x82>
   1cc78:	2005      	movs	r0, #5
   1cc7a:	f7f8 ffcd 	bl	15c18 <bsd_os_errno_set>
   1cc7e:	f04f 34ff 	mov.w	r4, #4294967295
   1cc82:	e7e0      	b.n	1cc46 <at_interface_open+0x82>
   1cc84:	2002a08e 	.word	0x2002a08e
   1cc88:	0001cab9 	.word	0x0001cab9

0001cc8c <at_interface_close>:
   1cc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc90:	b082      	sub	sp, #8
   1cc92:	4606      	mov	r6, r0
   1cc94:	f003 f8f2 	bl	1fe7c <interface_socket_from_handle_get>
   1cc98:	2800      	cmp	r0, #0
   1cc9a:	d044      	beq.n	1cd26 <at_interface_close+0x9a>
   1cc9c:	230d      	movs	r3, #13
   1cc9e:	6807      	ldr	r7, [r0, #0]
   1cca0:	6003      	str	r3, [r0, #0]
   1cca2:	6803      	ldr	r3, [r0, #0]
   1cca4:	4604      	mov	r4, r0
   1cca6:	039b      	lsls	r3, r3, #14
   1cca8:	d42b      	bmi.n	1cd02 <at_interface_close+0x76>
   1ccaa:	2100      	movs	r1, #0
   1ccac:	4668      	mov	r0, sp
   1ccae:	f003 fa1d 	bl	200ec <rpc_at_client_request_alloc>
   1ccb2:	4605      	mov	r5, r0
   1ccb4:	4630      	mov	r0, r6
   1ccb6:	f003 f8e1 	bl	1fe7c <interface_socket_from_handle_get>
   1ccba:	4680      	mov	r8, r0
   1ccbc:	bb8d      	cbnz	r5, 1cd22 <at_interface_close+0x96>
   1ccbe:	2304      	movs	r3, #4
   1ccc0:	9800      	ldr	r0, [sp, #0]
   1ccc2:	2106      	movs	r1, #6
   1ccc4:	7203      	strb	r3, [r0, #8]
   1ccc6:	7245      	strb	r5, [r0, #9]
   1ccc8:	7285      	strb	r5, [r0, #10]
   1ccca:	72c5      	strb	r5, [r0, #11]
   1cccc:	60c6      	str	r6, [r0, #12]
   1ccce:	f003 fa21 	bl	20114 <rpc_at_client_request_send>
   1ccd2:	b9d8      	cbnz	r0, 1cd0c <at_interface_close+0x80>
   1ccd4:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   1ccd8:	220e      	movs	r2, #14
   1ccda:	2900      	cmp	r1, #0
   1ccdc:	bf08      	it	eq
   1ccde:	f04f 31ff 	moveq.w	r1, #4294967295
   1cce2:	ab02      	add	r3, sp, #8
   1cce4:	f843 1d04 	str.w	r1, [r3, #-4]!
   1cce8:	4630      	mov	r0, r6
   1ccea:	4611      	mov	r1, r2
   1ccec:	f003 f846 	bl	1fd7c <interface_socket_wait>
   1ccf0:	4605      	mov	r5, r0
   1ccf2:	b978      	cbnz	r0, 1cd14 <at_interface_close+0x88>
   1ccf4:	4630      	mov	r0, r6
   1ccf6:	f002 fff3 	bl	1fce0 <interface_socket_free>
   1ccfa:	4628      	mov	r0, r5
   1ccfc:	b002      	add	sp, #8
   1ccfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd02:	6803      	ldr	r3, [r0, #0]
   1cd04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1cd08:	6003      	str	r3, [r0, #0]
   1cd0a:	e7ce      	b.n	1ccaa <at_interface_close+0x1e>
   1cd0c:	9800      	ldr	r0, [sp, #0]
   1cd0e:	f003 fa0f 	bl	20130 <rpc_at_client_message_free>
   1cd12:	2523      	movs	r5, #35	; 0x23
   1cd14:	6027      	str	r7, [r4, #0]
   1cd16:	4628      	mov	r0, r5
   1cd18:	f7f8 ff7e 	bl	15c18 <bsd_os_errno_set>
   1cd1c:	f04f 35ff 	mov.w	r5, #4294967295
   1cd20:	e7eb      	b.n	1ccfa <at_interface_close+0x6e>
   1cd22:	250c      	movs	r5, #12
   1cd24:	e7f6      	b.n	1cd14 <at_interface_close+0x88>
   1cd26:	2516      	movs	r5, #22
   1cd28:	e7f5      	b.n	1cd16 <at_interface_close+0x8a>
   1cd2a:	bf00      	nop

0001cd2c <at_interface_read>:
   1cd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd30:	b086      	sub	sp, #24
   1cd32:	4688      	mov	r8, r1
   1cd34:	4615      	mov	r5, r2
   1cd36:	461e      	mov	r6, r3
   1cd38:	4607      	mov	r7, r0
   1cd3a:	f003 f89f 	bl	1fe7c <interface_socket_from_handle_get>
   1cd3e:	2800      	cmp	r0, #0
   1cd40:	d045      	beq.n	1cdce <at_interface_read+0xa2>
   1cd42:	2300      	movs	r3, #0
   1cd44:	4604      	mov	r4, r0
   1cd46:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1cd4a:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1cd4e:	bb3e      	cbnz	r6, 1cda0 <at_interface_read+0x74>
   1cd50:	f016 0502 	ands.w	r5, r6, #2
   1cd54:	d00f      	beq.n	1cd76 <at_interface_read+0x4a>
   1cd56:	e02a      	b.n	1cdae <at_interface_read+0x82>
   1cd58:	b9dd      	cbnz	r5, 1cd92 <at_interface_read+0x66>
   1cd5a:	6a25      	ldr	r5, [r4, #32]
   1cd5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1cd60:	2d00      	cmp	r5, #0
   1cd62:	bf08      	it	eq
   1cd64:	f04f 35ff 	moveq.w	r5, #4294967295
   1cd68:	4611      	mov	r1, r2
   1cd6a:	ab01      	add	r3, sp, #4
   1cd6c:	4638      	mov	r0, r7
   1cd6e:	9501      	str	r5, [sp, #4]
   1cd70:	f003 f804 	bl	1fd7c <interface_socket_wait>
   1cd74:	4605      	mov	r5, r0
   1cd76:	6823      	ldr	r3, [r4, #0]
   1cd78:	69e0      	ldr	r0, [r4, #28]
   1cd7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1cd7e:	6023      	str	r3, [r4, #0]
   1cd80:	6803      	ldr	r3, [r0, #0]
   1cd82:	4632      	mov	r2, r6
   1cd84:	689b      	ldr	r3, [r3, #8]
   1cd86:	a902      	add	r1, sp, #8
   1cd88:	4798      	blx	r3
   1cd8a:	f1b0 0800 	subs.w	r8, r0, #0
   1cd8e:	dbe3      	blt.n	1cd58 <at_interface_read+0x2c>
   1cd90:	b115      	cbz	r5, 1cd98 <at_interface_read+0x6c>
   1cd92:	4628      	mov	r0, r5
   1cd94:	f7f8 ff40 	bl	15c18 <bsd_os_errno_set>
   1cd98:	4640      	mov	r0, r8
   1cd9a:	b006      	add	sp, #24
   1cd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cda0:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   1cda4:	d1d4      	bne.n	1cd50 <at_interface_read+0x24>
   1cda6:	252d      	movs	r5, #45	; 0x2d
   1cda8:	f04f 38ff 	mov.w	r8, #4294967295
   1cdac:	e7f1      	b.n	1cd92 <at_interface_read+0x66>
   1cdae:	6823      	ldr	r3, [r4, #0]
   1cdb0:	69e0      	ldr	r0, [r4, #28]
   1cdb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1cdb6:	6023      	str	r3, [r4, #0]
   1cdb8:	6803      	ldr	r3, [r0, #0]
   1cdba:	4632      	mov	r2, r6
   1cdbc:	689b      	ldr	r3, [r3, #8]
   1cdbe:	a902      	add	r1, sp, #8
   1cdc0:	4798      	blx	r3
   1cdc2:	f1b0 3fff 	cmp.w	r0, #4294967295
   1cdc6:	4680      	mov	r8, r0
   1cdc8:	d1e6      	bne.n	1cd98 <at_interface_read+0x6c>
   1cdca:	2523      	movs	r5, #35	; 0x23
   1cdcc:	e7e1      	b.n	1cd92 <at_interface_read+0x66>
   1cdce:	2516      	movs	r5, #22
   1cdd0:	f04f 38ff 	mov.w	r8, #4294967295
   1cdd4:	e7dd      	b.n	1cd92 <at_interface_read+0x66>
   1cdd6:	bf00      	nop

0001cdd8 <at_interface_getopt>:
   1cdd8:	f003 b8be 	b.w	1ff58 <interface_socket_getopt>

0001cddc <at_interface_setopt>:
   1cddc:	f003 b876 	b.w	1fecc <interface_socket_setopt>

0001cde0 <rpc_at_event_handler>:
   1cde0:	b570      	push	{r4, r5, r6, lr}
   1cde2:	4606      	mov	r6, r0
   1cde4:	b084      	sub	sp, #16
   1cde6:	68c0      	ldr	r0, [r0, #12]
   1cde8:	460d      	mov	r5, r1
   1cdea:	f003 f847 	bl	1fe7c <interface_socket_from_handle_get>
   1cdee:	4604      	mov	r4, r0
   1cdf0:	b348      	cbz	r0, 1ce46 <rpc_at_event_handler+0x66>
   1cdf2:	6803      	ldr	r3, [r0, #0]
   1cdf4:	b29b      	uxth	r3, r3
   1cdf6:	2b01      	cmp	r3, #1
   1cdf8:	d01f      	beq.n	1ce3a <rpc_at_event_handler+0x5a>
   1cdfa:	6803      	ldr	r3, [r0, #0]
   1cdfc:	b29b      	uxth	r3, r3
   1cdfe:	2b0d      	cmp	r3, #13
   1ce00:	d029      	beq.n	1ce56 <rpc_at_event_handler+0x76>
   1ce02:	6803      	ldr	r3, [r0, #0]
   1ce04:	b29b      	uxth	r3, r3
   1ce06:	2b02      	cmp	r3, #2
   1ce08:	d02d      	beq.n	1ce66 <rpc_at_event_handler+0x86>
   1ce0a:	3d03      	subs	r5, #3
   1ce0c:	2d01      	cmp	r5, #1
   1ce0e:	d817      	bhi.n	1ce40 <rpc_at_event_handler+0x60>
   1ce10:	2500      	movs	r5, #0
   1ce12:	6873      	ldr	r3, [r6, #4]
   1ce14:	6832      	ldr	r2, [r6, #0]
   1ce16:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1ce1a:	e9cd 2300 	strd	r2, r3, [sp]
   1ce1e:	69e0      	ldr	r0, [r4, #28]
   1ce20:	4669      	mov	r1, sp
   1ce22:	6803      	ldr	r3, [r0, #0]
   1ce24:	685b      	ldr	r3, [r3, #4]
   1ce26:	4798      	blx	r3
   1ce28:	3001      	adds	r0, #1
   1ce2a:	d019      	beq.n	1ce60 <rpc_at_event_handler+0x80>
   1ce2c:	4628      	mov	r0, r5
   1ce2e:	6823      	ldr	r3, [r4, #0]
   1ce30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ce34:	6023      	str	r3, [r4, #0]
   1ce36:	b004      	add	sp, #16
   1ce38:	bd70      	pop	{r4, r5, r6, pc}
   1ce3a:	2d02      	cmp	r5, #2
   1ce3c:	d1e5      	bne.n	1ce0a <rpc_at_event_handler+0x2a>
   1ce3e:	6005      	str	r5, [r0, #0]
   1ce40:	2000      	movs	r0, #0
   1ce42:	b004      	add	sp, #16
   1ce44:	bd70      	pop	{r4, r5, r6, pc}
   1ce46:	6830      	ldr	r0, [r6, #0]
   1ce48:	2800      	cmp	r0, #0
   1ce4a:	d0f9      	beq.n	1ce40 <rpc_at_event_handler+0x60>
   1ce4c:	f003 f978 	bl	20140 <rpc_at_client_data_free>
   1ce50:	4620      	mov	r0, r4
   1ce52:	b004      	add	sp, #16
   1ce54:	bd70      	pop	{r4, r5, r6, pc}
   1ce56:	2d02      	cmp	r5, #2
   1ce58:	d1d7      	bne.n	1ce0a <rpc_at_event_handler+0x2a>
   1ce5a:	230e      	movs	r3, #14
   1ce5c:	6003      	str	r3, [r0, #0]
   1ce5e:	e7ef      	b.n	1ce40 <rpc_at_event_handler+0x60>
   1ce60:	2002      	movs	r0, #2
   1ce62:	b004      	add	sp, #16
   1ce64:	bd70      	pop	{r4, r5, r6, pc}
   1ce66:	6803      	ldr	r3, [r0, #0]
   1ce68:	029b      	lsls	r3, r3, #10
   1ce6a:	d5ce      	bpl.n	1ce0a <rpc_at_event_handler+0x2a>
   1ce6c:	2d02      	cmp	r5, #2
   1ce6e:	d1cc      	bne.n	1ce0a <rpc_at_event_handler+0x2a>
   1ce70:	6803      	ldr	r3, [r0, #0]
   1ce72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1ce76:	6003      	str	r3, [r0, #0]
   1ce78:	6803      	ldr	r3, [r0, #0]
   1ce7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ce7e:	6003      	str	r3, [r0, #0]
   1ce80:	e7de      	b.n	1ce40 <rpc_at_event_handler+0x60>
   1ce82:	bf00      	nop

0001ce84 <ok_rsp_parser>:
   1ce84:	2000      	movs	r0, #0
   1ce86:	4770      	bx	lr

0001ce88 <pdn_state_get_parser>:
   1ce88:	2200      	movs	r2, #0
   1ce8a:	b570      	push	{r4, r5, r6, lr}
   1ce8c:	780b      	ldrb	r3, [r1, #0]
   1ce8e:	b084      	sub	sp, #16
   1ce90:	460e      	mov	r6, r1
   1ce92:	e9cd 2200 	strd	r2, r2, [sp]
   1ce96:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1ce9a:	b323      	cbz	r3, 1cee6 <pdn_state_get_parser+0x5e>
   1ce9c:	460c      	mov	r4, r1
   1ce9e:	2b20      	cmp	r3, #32
   1cea0:	460d      	mov	r5, r1
   1cea2:	d01b      	beq.n	1cedc <pdn_state_get_parser+0x54>
   1cea4:	700b      	strb	r3, [r1, #0]
   1cea6:	3201      	adds	r2, #1
   1cea8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ceac:	18b1      	adds	r1, r6, r2
   1ceae:	460d      	mov	r5, r1
   1ceb0:	2b00      	cmp	r3, #0
   1ceb2:	d1f4      	bne.n	1ce9e <pdn_state_get_parser+0x16>
   1ceb4:	2200      	movs	r2, #0
   1ceb6:	4b0d      	ldr	r3, [pc, #52]	; (1ceec <pdn_state_get_parser+0x64>)
   1ceb8:	702a      	strb	r2, [r5, #0]
   1ceba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1cebe:	4a0c      	ldr	r2, [pc, #48]	; (1cef0 <pdn_state_get_parser+0x68>)
   1cec0:	681b      	ldr	r3, [r3, #0]
   1cec2:	2110      	movs	r1, #16
   1cec4:	4668      	mov	r0, sp
   1cec6:	f005 f9bf 	bl	22248 <sniprintf>
   1ceca:	4669      	mov	r1, sp
   1cecc:	4630      	mov	r0, r6
   1cece:	f009 ff88 	bl	26de2 <strstr>
   1ced2:	3000      	adds	r0, #0
   1ced4:	bf18      	it	ne
   1ced6:	2001      	movne	r0, #1
   1ced8:	b004      	add	sp, #16
   1ceda:	bd70      	pop	{r4, r5, r6, pc}
   1cedc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1cee0:	2b00      	cmp	r3, #0
   1cee2:	d1dc      	bne.n	1ce9e <pdn_state_get_parser+0x16>
   1cee4:	e7e6      	b.n	1ceb4 <pdn_state_get_parser+0x2c>
   1cee6:	460d      	mov	r5, r1
   1cee8:	e7e4      	b.n	1ceb4 <pdn_state_get_parser+0x2c>
   1ceea:	bf00      	nop
   1ceec:	2002217c 	.word	0x2002217c
   1cef0:	0002834c 	.word	0x0002834c

0001cef4 <pdn_id_get_parser>:
   1cef4:	b570      	push	{r4, r5, r6, lr}
   1cef6:	780b      	ldrb	r3, [r1, #0]
   1cef8:	4606      	mov	r6, r0
   1cefa:	b313      	cbz	r3, 1cf42 <pdn_id_get_parser+0x4e>
   1cefc:	4608      	mov	r0, r1
   1cefe:	2400      	movs	r4, #0
   1cf00:	460a      	mov	r2, r1
   1cf02:	2b20      	cmp	r3, #32
   1cf04:	4615      	mov	r5, r2
   1cf06:	d017      	beq.n	1cf38 <pdn_id_get_parser+0x44>
   1cf08:	7013      	strb	r3, [r2, #0]
   1cf0a:	3401      	adds	r4, #1
   1cf0c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1cf10:	190a      	adds	r2, r1, r4
   1cf12:	4615      	mov	r5, r2
   1cf14:	2b00      	cmp	r3, #0
   1cf16:	d1f4      	bne.n	1cf02 <pdn_id_get_parser+0xe>
   1cf18:	2300      	movs	r3, #0
   1cf1a:	4608      	mov	r0, r1
   1cf1c:	702b      	strb	r3, [r5, #0]
   1cf1e:	213a      	movs	r1, #58	; 0x3a
   1cf20:	f009 fee2 	bl	26ce8 <strchr>
   1cf24:	b130      	cbz	r0, 1cf34 <pdn_id_get_parser+0x40>
   1cf26:	3001      	adds	r0, #1
   1cf28:	f009 fd4d 	bl	269c6 <atoi>
   1cf2c:	4b06      	ldr	r3, [pc, #24]	; (1cf48 <pdn_id_get_parser+0x54>)
   1cf2e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1cf32:	6058      	str	r0, [r3, #4]
   1cf34:	2000      	movs	r0, #0
   1cf36:	bd70      	pop	{r4, r5, r6, pc}
   1cf38:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1cf3c:	2b00      	cmp	r3, #0
   1cf3e:	d1e0      	bne.n	1cf02 <pdn_id_get_parser+0xe>
   1cf40:	e7ea      	b.n	1cf18 <pdn_id_get_parser+0x24>
   1cf42:	460d      	mov	r5, r1
   1cf44:	e7e8      	b.n	1cf18 <pdn_id_get_parser+0x24>
   1cf46:	bf00      	nop
   1cf48:	2002217c 	.word	0x2002217c

0001cf4c <context_create_parser>:
   1cf4c:	b570      	push	{r4, r5, r6, lr}
   1cf4e:	780b      	ldrb	r3, [r1, #0]
   1cf50:	4606      	mov	r6, r0
   1cf52:	b313      	cbz	r3, 1cf9a <context_create_parser+0x4e>
   1cf54:	4608      	mov	r0, r1
   1cf56:	2400      	movs	r4, #0
   1cf58:	460a      	mov	r2, r1
   1cf5a:	2b20      	cmp	r3, #32
   1cf5c:	4615      	mov	r5, r2
   1cf5e:	d017      	beq.n	1cf90 <context_create_parser+0x44>
   1cf60:	7013      	strb	r3, [r2, #0]
   1cf62:	3401      	adds	r4, #1
   1cf64:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1cf68:	190a      	adds	r2, r1, r4
   1cf6a:	4615      	mov	r5, r2
   1cf6c:	2b00      	cmp	r3, #0
   1cf6e:	d1f4      	bne.n	1cf5a <context_create_parser+0xe>
   1cf70:	2300      	movs	r3, #0
   1cf72:	4608      	mov	r0, r1
   1cf74:	702b      	strb	r3, [r5, #0]
   1cf76:	213a      	movs	r1, #58	; 0x3a
   1cf78:	f009 feb6 	bl	26ce8 <strchr>
   1cf7c:	b130      	cbz	r0, 1cf8c <context_create_parser+0x40>
   1cf7e:	4b08      	ldr	r3, [pc, #32]	; (1cfa0 <context_create_parser+0x54>)
   1cf80:	3001      	adds	r0, #1
   1cf82:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1cf86:	f009 fd1e 	bl	269c6 <atoi>
   1cf8a:	6020      	str	r0, [r4, #0]
   1cf8c:	2000      	movs	r0, #0
   1cf8e:	bd70      	pop	{r4, r5, r6, pc}
   1cf90:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1cf94:	2b00      	cmp	r3, #0
   1cf96:	d1e0      	bne.n	1cf5a <context_create_parser+0xe>
   1cf98:	e7ea      	b.n	1cf70 <context_create_parser+0x24>
   1cf9a:	460d      	mov	r5, r1
   1cf9c:	e7e8      	b.n	1cf70 <context_create_parser+0x24>
   1cf9e:	bf00      	nop
   1cfa0:	2002217c 	.word	0x2002217c

0001cfa4 <pdn_interface_init>:
   1cfa4:	f04f 33ff 	mov.w	r3, #4294967295
   1cfa8:	b510      	push	{r4, lr}
   1cfaa:	4c0b      	ldr	r4, [pc, #44]	; (1cfd8 <pdn_interface_init+0x34>)
   1cfac:	2228      	movs	r2, #40	; 0x28
   1cfae:	2100      	movs	r1, #0
   1cfb0:	480a      	ldr	r0, [pc, #40]	; (1cfdc <pdn_interface_init+0x38>)
   1cfb2:	6023      	str	r3, [r4, #0]
   1cfb4:	f009 fd34 	bl	26a20 <memset>
   1cfb8:	f240 2201 	movw	r2, #513	; 0x201
   1cfbc:	2102      	movs	r1, #2
   1cfbe:	2066      	movs	r0, #102	; 0x66
   1cfc0:	f7ff fe00 	bl	1cbc4 <at_interface_open>
   1cfc4:	2800      	cmp	r0, #0
   1cfc6:	6020      	str	r0, [r4, #0]
   1cfc8:	db04      	blt.n	1cfd4 <pdn_interface_init+0x30>
   1cfca:	2201      	movs	r2, #1
   1cfcc:	4b04      	ldr	r3, [pc, #16]	; (1cfe0 <pdn_interface_init+0x3c>)
   1cfce:	2000      	movs	r0, #0
   1cfd0:	701a      	strb	r2, [r3, #0]
   1cfd2:	bd10      	pop	{r4, pc}
   1cfd4:	2003      	movs	r0, #3
   1cfd6:	bd10      	pop	{r4, pc}
   1cfd8:	20022078 	.word	0x20022078
   1cfdc:	2002217c 	.word	0x2002217c
   1cfe0:	2002a08f 	.word	0x2002a08f

0001cfe4 <pdn_interface_open>:
   1cfe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cfe8:	4b66      	ldr	r3, [pc, #408]	; (1d184 <pdn_interface_open+0x1a0>)
   1cfea:	b083      	sub	sp, #12
   1cfec:	781b      	ldrb	r3, [r3, #0]
   1cfee:	2b00      	cmp	r3, #0
   1cff0:	f000 80c2 	beq.w	1d178 <pdn_interface_open+0x194>
   1cff4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1cff8:	f040 80ad 	bne.w	1d156 <pdn_interface_open+0x172>
   1cffc:	4c62      	ldr	r4, [pc, #392]	; (1d188 <pdn_interface_open+0x1a4>)
   1cffe:	6825      	ldr	r5, [r4, #0]
   1d000:	b34d      	cbz	r5, 1d056 <pdn_interface_open+0x72>
   1d002:	6863      	ldr	r3, [r4, #4]
   1d004:	2b00      	cmp	r3, #0
   1d006:	f000 8098 	beq.w	1d13a <pdn_interface_open+0x156>
   1d00a:	68a3      	ldr	r3, [r4, #8]
   1d00c:	2b00      	cmp	r3, #0
   1d00e:	f000 8096 	beq.w	1d13e <pdn_interface_open+0x15a>
   1d012:	68e3      	ldr	r3, [r4, #12]
   1d014:	2b00      	cmp	r3, #0
   1d016:	f000 8094 	beq.w	1d142 <pdn_interface_open+0x15e>
   1d01a:	6923      	ldr	r3, [r4, #16]
   1d01c:	2b00      	cmp	r3, #0
   1d01e:	f000 8092 	beq.w	1d146 <pdn_interface_open+0x162>
   1d022:	6963      	ldr	r3, [r4, #20]
   1d024:	2b00      	cmp	r3, #0
   1d026:	f000 8090 	beq.w	1d14a <pdn_interface_open+0x166>
   1d02a:	69a3      	ldr	r3, [r4, #24]
   1d02c:	2b00      	cmp	r3, #0
   1d02e:	f000 808e 	beq.w	1d14e <pdn_interface_open+0x16a>
   1d032:	69e3      	ldr	r3, [r4, #28]
   1d034:	2b00      	cmp	r3, #0
   1d036:	f000 808c 	beq.w	1d152 <pdn_interface_open+0x16e>
   1d03a:	6a23      	ldr	r3, [r4, #32]
   1d03c:	b153      	cbz	r3, 1d054 <pdn_interface_open+0x70>
   1d03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d040:	2509      	movs	r5, #9
   1d042:	b143      	cbz	r3, 1d056 <pdn_interface_open+0x72>
   1d044:	200c      	movs	r0, #12
   1d046:	f7f8 fde7 	bl	15c18 <bsd_os_errno_set>
   1d04a:	f04f 30ff 	mov.w	r0, #4294967295
   1d04e:	b003      	add	sp, #12
   1d050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d054:	2508      	movs	r5, #8
   1d056:	2074      	movs	r0, #116	; 0x74
   1d058:	f002 faac 	bl	1f5b4 <nrf_malloc>
   1d05c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1d060:	2800      	cmp	r0, #0
   1d062:	d0ef      	beq.n	1d044 <pdn_interface_open+0x60>
   1d064:	2274      	movs	r2, #116	; 0x74
   1d066:	2100      	movs	r1, #0
   1d068:	f009 fcda 	bl	26a20 <memset>
   1d06c:	2101      	movs	r1, #1
   1d06e:	2003      	movs	r0, #3
   1d070:	f04f 37ff 	mov.w	r7, #4294967295
   1d074:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1d078:	4a44      	ldr	r2, [pc, #272]	; (1d18c <pdn_interface_open+0x1a8>)
   1d07a:	6099      	str	r1, [r3, #8]
   1d07c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1d080:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d084:	6718      	str	r0, [r3, #112]	; 0x70
   1d086:	605f      	str	r7, [r3, #4]
   1d088:	4841      	ldr	r0, [pc, #260]	; (1d190 <pdn_interface_open+0x1ac>)
   1d08a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1d19c <pdn_interface_open+0x1b8>
   1d08e:	f005 f8db 	bl	22248 <sniprintf>
   1d092:	483f      	ldr	r0, [pc, #252]	; (1d190 <pdn_interface_open+0x1ac>)
   1d094:	f8d8 9000 	ldr.w	r9, [r8]
   1d098:	2600      	movs	r6, #0
   1d09a:	f7ef fee9 	bl	ce70 <strlen>
   1d09e:	4633      	mov	r3, r6
   1d0a0:	4602      	mov	r2, r0
   1d0a2:	493b      	ldr	r1, [pc, #236]	; (1d190 <pdn_interface_open+0x1ac>)
   1d0a4:	4648      	mov	r0, r9
   1d0a6:	9601      	str	r6, [sp, #4]
   1d0a8:	9600      	str	r6, [sp, #0]
   1d0aa:	f7ff fd09 	bl	1cac0 <at_interface_write>
   1d0ae:	4681      	mov	r9, r0
   1d0b0:	4837      	ldr	r0, [pc, #220]	; (1d190 <pdn_interface_open+0x1ac>)
   1d0b2:	f7ef fedd 	bl	ce70 <strlen>
   1d0b6:	4548      	cmp	r0, r9
   1d0b8:	d153      	bne.n	1d162 <pdn_interface_open+0x17e>
   1d0ba:	4633      	mov	r3, r6
   1d0bc:	e9cd 6600 	strd	r6, r6, [sp]
   1d0c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d0c4:	4932      	ldr	r1, [pc, #200]	; (1d190 <pdn_interface_open+0x1ac>)
   1d0c6:	f8d8 0000 	ldr.w	r0, [r8]
   1d0ca:	f7ff fe2f 	bl	1cd2c <at_interface_read>
   1d0ce:	4606      	mov	r6, r0
   1d0d0:	4830      	ldr	r0, [pc, #192]	; (1d194 <pdn_interface_open+0x1b0>)
   1d0d2:	f7ef fecd 	bl	ce70 <strlen>
   1d0d6:	4286      	cmp	r6, r0
   1d0d8:	db15      	blt.n	1d106 <pdn_interface_open+0x122>
   1d0da:	4602      	mov	r2, r0
   1d0dc:	492c      	ldr	r1, [pc, #176]	; (1d190 <pdn_interface_open+0x1ac>)
   1d0de:	482d      	ldr	r0, [pc, #180]	; (1d194 <pdn_interface_open+0x1b0>)
   1d0e0:	f009 fe33 	bl	26d4a <strncmp>
   1d0e4:	b978      	cbnz	r0, 1d106 <pdn_interface_open+0x122>
   1d0e6:	492a      	ldr	r1, [pc, #168]	; (1d190 <pdn_interface_open+0x1ac>)
   1d0e8:	4628      	mov	r0, r5
   1d0ea:	f7ff ff2f 	bl	1cf4c <context_create_parser>
   1d0ee:	b9b0      	cbnz	r0, 1d11e <pdn_interface_open+0x13a>
   1d0f0:	2202      	movs	r2, #2
   1d0f2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1d0f6:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1d0fa:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1d0fe:	609a      	str	r2, [r3, #8]
   1d100:	b003      	add	sp, #12
   1d102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d106:	4824      	ldr	r0, [pc, #144]	; (1d198 <pdn_interface_open+0x1b4>)
   1d108:	f7ef feb2 	bl	ce70 <strlen>
   1d10c:	4920      	ldr	r1, [pc, #128]	; (1d190 <pdn_interface_open+0x1ac>)
   1d10e:	4602      	mov	r2, r0
   1d110:	4821      	ldr	r0, [pc, #132]	; (1d198 <pdn_interface_open+0x1b4>)
   1d112:	f009 fe1a 	bl	26d4a <strncmp>
   1d116:	b960      	cbnz	r0, 1d132 <pdn_interface_open+0x14e>
   1d118:	2008      	movs	r0, #8
   1d11a:	f7f8 fd7d 	bl	15c18 <bsd_os_errno_set>
   1d11e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1d122:	f002 fa51 	bl	1f5c8 <nrf_free>
   1d126:	2300      	movs	r3, #0
   1d128:	f04f 30ff 	mov.w	r0, #4294967295
   1d12c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1d130:	e78d      	b.n	1d04e <pdn_interface_open+0x6a>
   1d132:	2005      	movs	r0, #5
   1d134:	f7f8 fd70 	bl	15c18 <bsd_os_errno_set>
   1d138:	e7f1      	b.n	1d11e <pdn_interface_open+0x13a>
   1d13a:	2501      	movs	r5, #1
   1d13c:	e78b      	b.n	1d056 <pdn_interface_open+0x72>
   1d13e:	2502      	movs	r5, #2
   1d140:	e789      	b.n	1d056 <pdn_interface_open+0x72>
   1d142:	2503      	movs	r5, #3
   1d144:	e787      	b.n	1d056 <pdn_interface_open+0x72>
   1d146:	2504      	movs	r5, #4
   1d148:	e785      	b.n	1d056 <pdn_interface_open+0x72>
   1d14a:	2505      	movs	r5, #5
   1d14c:	e783      	b.n	1d056 <pdn_interface_open+0x72>
   1d14e:	2506      	movs	r5, #6
   1d150:	e781      	b.n	1d056 <pdn_interface_open+0x72>
   1d152:	2507      	movs	r5, #7
   1d154:	e77f      	b.n	1d056 <pdn_interface_open+0x72>
   1d156:	2029      	movs	r0, #41	; 0x29
   1d158:	f7f8 fd5e 	bl	15c18 <bsd_os_errno_set>
   1d15c:	f04f 30ff 	mov.w	r0, #4294967295
   1d160:	e775      	b.n	1d04e <pdn_interface_open+0x6a>
   1d162:	2005      	movs	r0, #5
   1d164:	f7f8 fd58 	bl	15c18 <bsd_os_errno_set>
   1d168:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1d16c:	f002 fa2c 	bl	1f5c8 <nrf_free>
   1d170:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   1d174:	4638      	mov	r0, r7
   1d176:	e76a      	b.n	1d04e <pdn_interface_open+0x6a>
   1d178:	2005      	movs	r0, #5
   1d17a:	f7f8 fd4d 	bl	15c18 <bsd_os_errno_set>
   1d17e:	f04f 30ff 	mov.w	r0, #4294967295
   1d182:	e764      	b.n	1d04e <pdn_interface_open+0x6a>
   1d184:	2002a08f 	.word	0x2002a08f
   1d188:	2002217c 	.word	0x2002217c
   1d18c:	00028328 	.word	0x00028328
   1d190:	2002207c 	.word	0x2002207c
   1d194:	00028338 	.word	0x00028338
   1d198:	00028344 	.word	0x00028344
   1d19c:	20022078 	.word	0x20022078

0001d1a0 <pdn_interface_connect>:
   1d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1a4:	b083      	sub	sp, #12
   1d1a6:	2900      	cmp	r1, #0
   1d1a8:	f000 813d 	beq.w	1d426 <pdn_interface_connect+0x286>
   1d1ac:	2a64      	cmp	r2, #100	; 0x64
   1d1ae:	4691      	mov	r9, r2
   1d1b0:	f200 8139 	bhi.w	1d426 <pdn_interface_connect+0x286>
   1d1b4:	4605      	mov	r5, r0
   1d1b6:	4608      	mov	r0, r1
   1d1b8:	4688      	mov	r8, r1
   1d1ba:	f7ef fe59 	bl	ce70 <strlen>
   1d1be:	2864      	cmp	r0, #100	; 0x64
   1d1c0:	f200 8131 	bhi.w	1d426 <pdn_interface_connect+0x286>
   1d1c4:	0c2b      	lsrs	r3, r5, #16
   1d1c6:	4aa5      	ldr	r2, [pc, #660]	; (1d45c <pdn_interface_connect+0x2bc>)
   1d1c8:	041b      	lsls	r3, r3, #16
   1d1ca:	4293      	cmp	r3, r2
   1d1cc:	f040 8122 	bne.w	1d414 <pdn_interface_connect+0x274>
   1d1d0:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   1d1d4:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   1d1d8:	2d09      	cmp	r5, #9
   1d1da:	f300 811b 	bgt.w	1d414 <pdn_interface_connect+0x274>
   1d1de:	4fa0      	ldr	r7, [pc, #640]	; (1d460 <pdn_interface_connect+0x2c0>)
   1d1e0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d1e4:	2b00      	cmp	r3, #0
   1d1e6:	f000 8115 	beq.w	1d414 <pdn_interface_connect+0x274>
   1d1ea:	689a      	ldr	r2, [r3, #8]
   1d1ec:	2a00      	cmp	r2, #0
   1d1ee:	f000 8111 	beq.w	1d414 <pdn_interface_connect+0x274>
   1d1f2:	689b      	ldr	r3, [r3, #8]
   1d1f4:	2b02      	cmp	r3, #2
   1d1f6:	f040 810d 	bne.w	1d414 <pdn_interface_connect+0x274>
   1d1fa:	4e9a      	ldr	r6, [pc, #616]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d1fc:	4a9a      	ldr	r2, [pc, #616]	; (1d468 <pdn_interface_connect+0x2c8>)
   1d1fe:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d202:	4630      	mov	r0, r6
   1d204:	f005 f820 	bl	22248 <sniprintf>
   1d208:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d20c:	4604      	mov	r4, r0
   1d20e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d212:	681b      	ldr	r3, [r3, #0]
   1d214:	4a95      	ldr	r2, [pc, #596]	; (1d46c <pdn_interface_connect+0x2cc>)
   1d216:	1830      	adds	r0, r6, r0
   1d218:	f005 f816 	bl	22248 <sniprintf>
   1d21c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d220:	4404      	add	r4, r0
   1d222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1d224:	f003 0203 	and.w	r2, r3, #3
   1d228:	2a03      	cmp	r2, #3
   1d22a:	f000 80ea 	beq.w	1d402 <pdn_interface_connect+0x262>
   1d22e:	079b      	lsls	r3, r3, #30
   1d230:	eb06 0004 	add.w	r0, r6, r4
   1d234:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1d238:	bf4c      	ite	mi
   1d23a:	4b8d      	ldrmi	r3, [pc, #564]	; (1d470 <pdn_interface_connect+0x2d0>)
   1d23c:	4b8d      	ldrpl	r3, [pc, #564]	; (1d474 <pdn_interface_connect+0x2d4>)
   1d23e:	4a8e      	ldr	r2, [pc, #568]	; (1d478 <pdn_interface_connect+0x2d8>)
   1d240:	f005 f802 	bl	22248 <sniprintf>
   1d244:	4404      	add	r4, r0
   1d246:	4643      	mov	r3, r8
   1d248:	4a8c      	ldr	r2, [pc, #560]	; (1d47c <pdn_interface_connect+0x2dc>)
   1d24a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1d24e:	1930      	adds	r0, r6, r4
   1d250:	f004 fffa 	bl	22248 <sniprintf>
   1d254:	4420      	add	r0, r4
   1d256:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1d25a:	f300 80f7 	bgt.w	1d44c <pdn_interface_connect+0x2ac>
   1d25e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 1d49c <pdn_interface_connect+0x2fc>
   1d262:	4880      	ldr	r0, [pc, #512]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d264:	f8da b000 	ldr.w	fp, [sl]
   1d268:	2400      	movs	r4, #0
   1d26a:	f7ef fe01 	bl	ce70 <strlen>
   1d26e:	4623      	mov	r3, r4
   1d270:	4602      	mov	r2, r0
   1d272:	497c      	ldr	r1, [pc, #496]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d274:	4658      	mov	r0, fp
   1d276:	9401      	str	r4, [sp, #4]
   1d278:	9400      	str	r4, [sp, #0]
   1d27a:	f7ff fc21 	bl	1cac0 <at_interface_write>
   1d27e:	4683      	mov	fp, r0
   1d280:	4878      	ldr	r0, [pc, #480]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d282:	f7ef fdf5 	bl	ce70 <strlen>
   1d286:	4558      	cmp	r0, fp
   1d288:	d008      	beq.n	1d29c <pdn_interface_connect+0xfc>
   1d28a:	2005      	movs	r0, #5
   1d28c:	f7f8 fcc4 	bl	15c18 <bsd_os_errno_set>
   1d290:	f04f 34ff 	mov.w	r4, #4294967295
   1d294:	4620      	mov	r0, r4
   1d296:	b003      	add	sp, #12
   1d298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d29c:	4623      	mov	r3, r4
   1d29e:	e9cd 4400 	strd	r4, r4, [sp]
   1d2a2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d2a6:	496f      	ldr	r1, [pc, #444]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d2a8:	f8da 0000 	ldr.w	r0, [sl]
   1d2ac:	f7ff fd3e 	bl	1cd2c <at_interface_read>
   1d2b0:	4604      	mov	r4, r0
   1d2b2:	4873      	ldr	r0, [pc, #460]	; (1d480 <pdn_interface_connect+0x2e0>)
   1d2b4:	f7ef fddc 	bl	ce70 <strlen>
   1d2b8:	4284      	cmp	r4, r0
   1d2ba:	f2c0 8091 	blt.w	1d3e0 <pdn_interface_connect+0x240>
   1d2be:	4602      	mov	r2, r0
   1d2c0:	4968      	ldr	r1, [pc, #416]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d2c2:	486f      	ldr	r0, [pc, #444]	; (1d480 <pdn_interface_connect+0x2e0>)
   1d2c4:	f009 fd41 	bl	26d4a <strncmp>
   1d2c8:	2800      	cmp	r0, #0
   1d2ca:	f040 8089 	bne.w	1d3e0 <pdn_interface_connect+0x240>
   1d2ce:	4965      	ldr	r1, [pc, #404]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d2d0:	4628      	mov	r0, r5
   1d2d2:	f7ff fdd7 	bl	1ce84 <ok_rsp_parser>
   1d2d6:	4604      	mov	r4, r0
   1d2d8:	2800      	cmp	r0, #0
   1d2da:	d1db      	bne.n	1d294 <pdn_interface_connect+0xf4>
   1d2dc:	4a69      	ldr	r2, [pc, #420]	; (1d484 <pdn_interface_connect+0x2e4>)
   1d2de:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d2e2:	4860      	ldr	r0, [pc, #384]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d2e4:	f004 ffb0 	bl	22248 <sniprintf>
   1d2e8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d2ec:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d2f0:	681b      	ldr	r3, [r3, #0]
   1d2f2:	4a65      	ldr	r2, [pc, #404]	; (1d488 <pdn_interface_connect+0x2e8>)
   1d2f4:	4430      	add	r0, r6
   1d2f6:	f004 ffa7 	bl	22248 <sniprintf>
   1d2fa:	485a      	ldr	r0, [pc, #360]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d2fc:	f8da b000 	ldr.w	fp, [sl]
   1d300:	f7ef fdb6 	bl	ce70 <strlen>
   1d304:	4623      	mov	r3, r4
   1d306:	4602      	mov	r2, r0
   1d308:	4956      	ldr	r1, [pc, #344]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d30a:	4658      	mov	r0, fp
   1d30c:	9401      	str	r4, [sp, #4]
   1d30e:	9400      	str	r4, [sp, #0]
   1d310:	f7ff fbd6 	bl	1cac0 <at_interface_write>
   1d314:	4683      	mov	fp, r0
   1d316:	4853      	ldr	r0, [pc, #332]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d318:	f7ef fdaa 	bl	ce70 <strlen>
   1d31c:	4558      	cmp	r0, fp
   1d31e:	d1b4      	bne.n	1d28a <pdn_interface_connect+0xea>
   1d320:	4623      	mov	r3, r4
   1d322:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d326:	494f      	ldr	r1, [pc, #316]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d328:	f8da 0000 	ldr.w	r0, [sl]
   1d32c:	e9cd 4400 	strd	r4, r4, [sp]
   1d330:	f7ff fcfc 	bl	1cd2c <at_interface_read>
   1d334:	4683      	mov	fp, r0
   1d336:	4852      	ldr	r0, [pc, #328]	; (1d480 <pdn_interface_connect+0x2e0>)
   1d338:	f7ef fd9a 	bl	ce70 <strlen>
   1d33c:	4583      	cmp	fp, r0
   1d33e:	db4f      	blt.n	1d3e0 <pdn_interface_connect+0x240>
   1d340:	4602      	mov	r2, r0
   1d342:	4948      	ldr	r1, [pc, #288]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d344:	484e      	ldr	r0, [pc, #312]	; (1d480 <pdn_interface_connect+0x2e0>)
   1d346:	f009 fd00 	bl	26d4a <strncmp>
   1d34a:	2800      	cmp	r0, #0
   1d34c:	d148      	bne.n	1d3e0 <pdn_interface_connect+0x240>
   1d34e:	2103      	movs	r1, #3
   1d350:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d354:	464a      	mov	r2, r9
   1d356:	6099      	str	r1, [r3, #8]
   1d358:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1d35c:	4641      	mov	r1, r8
   1d35e:	300c      	adds	r0, #12
   1d360:	f009 fb51 	bl	26a06 <memcpy>
   1d364:	4a49      	ldr	r2, [pc, #292]	; (1d48c <pdn_interface_connect+0x2ec>)
   1d366:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d36a:	483e      	ldr	r0, [pc, #248]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d36c:	f004 ff6c 	bl	22248 <sniprintf>
   1d370:	4601      	mov	r1, r0
   1d372:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d376:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1d37a:	681b      	ldr	r3, [r3, #0]
   1d37c:	4a42      	ldr	r2, [pc, #264]	; (1d488 <pdn_interface_connect+0x2e8>)
   1d37e:	1830      	adds	r0, r6, r0
   1d380:	f004 ff62 	bl	22248 <sniprintf>
   1d384:	4837      	ldr	r0, [pc, #220]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d386:	f8da 6000 	ldr.w	r6, [sl]
   1d38a:	f7ef fd71 	bl	ce70 <strlen>
   1d38e:	4623      	mov	r3, r4
   1d390:	4602      	mov	r2, r0
   1d392:	4934      	ldr	r1, [pc, #208]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d394:	4630      	mov	r0, r6
   1d396:	9401      	str	r4, [sp, #4]
   1d398:	9400      	str	r4, [sp, #0]
   1d39a:	f7ff fb91 	bl	1cac0 <at_interface_write>
   1d39e:	4606      	mov	r6, r0
   1d3a0:	4830      	ldr	r0, [pc, #192]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d3a2:	f7ef fd65 	bl	ce70 <strlen>
   1d3a6:	42b0      	cmp	r0, r6
   1d3a8:	d153      	bne.n	1d452 <pdn_interface_connect+0x2b2>
   1d3aa:	4623      	mov	r3, r4
   1d3ac:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d3b0:	492c      	ldr	r1, [pc, #176]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d3b2:	f8da 0000 	ldr.w	r0, [sl]
   1d3b6:	e9cd 4400 	strd	r4, r4, [sp]
   1d3ba:	f7ff fcb7 	bl	1cd2c <at_interface_read>
   1d3be:	4606      	mov	r6, r0
   1d3c0:	4833      	ldr	r0, [pc, #204]	; (1d490 <pdn_interface_connect+0x2f0>)
   1d3c2:	f7ef fd55 	bl	ce70 <strlen>
   1d3c6:	4286      	cmp	r6, r0
   1d3c8:	db33      	blt.n	1d432 <pdn_interface_connect+0x292>
   1d3ca:	4602      	mov	r2, r0
   1d3cc:	4925      	ldr	r1, [pc, #148]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d3ce:	4830      	ldr	r0, [pc, #192]	; (1d490 <pdn_interface_connect+0x2f0>)
   1d3d0:	f009 fcbb 	bl	26d4a <strncmp>
   1d3d4:	bb68      	cbnz	r0, 1d432 <pdn_interface_connect+0x292>
   1d3d6:	4628      	mov	r0, r5
   1d3d8:	4922      	ldr	r1, [pc, #136]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d3da:	f7ff fd8b 	bl	1cef4 <pdn_id_get_parser>
   1d3de:	e759      	b.n	1d294 <pdn_interface_connect+0xf4>
   1d3e0:	482c      	ldr	r0, [pc, #176]	; (1d494 <pdn_interface_connect+0x2f4>)
   1d3e2:	f7ef fd45 	bl	ce70 <strlen>
   1d3e6:	491f      	ldr	r1, [pc, #124]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d3e8:	4602      	mov	r2, r0
   1d3ea:	482a      	ldr	r0, [pc, #168]	; (1d494 <pdn_interface_connect+0x2f4>)
   1d3ec:	f009 fcad 	bl	26d4a <strncmp>
   1d3f0:	2800      	cmp	r0, #0
   1d3f2:	f47f af4a 	bne.w	1d28a <pdn_interface_connect+0xea>
   1d3f6:	2008      	movs	r0, #8
   1d3f8:	f7f8 fc0e 	bl	15c18 <bsd_os_errno_set>
   1d3fc:	f04f 34ff 	mov.w	r4, #4294967295
   1d400:	e748      	b.n	1d294 <pdn_interface_connect+0xf4>
   1d402:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1d406:	1930      	adds	r0, r6, r4
   1d408:	4b23      	ldr	r3, [pc, #140]	; (1d498 <pdn_interface_connect+0x2f8>)
   1d40a:	4a1b      	ldr	r2, [pc, #108]	; (1d478 <pdn_interface_connect+0x2d8>)
   1d40c:	f004 ff1c 	bl	22248 <sniprintf>
   1d410:	4404      	add	r4, r0
   1d412:	e718      	b.n	1d246 <pdn_interface_connect+0xa6>
   1d414:	f04f 34ff 	mov.w	r4, #4294967295
   1d418:	2009      	movs	r0, #9
   1d41a:	f7f8 fbfd 	bl	15c18 <bsd_os_errno_set>
   1d41e:	4620      	mov	r0, r4
   1d420:	b003      	add	sp, #12
   1d422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d426:	2016      	movs	r0, #22
   1d428:	f7f8 fbf6 	bl	15c18 <bsd_os_errno_set>
   1d42c:	f04f 34ff 	mov.w	r4, #4294967295
   1d430:	e730      	b.n	1d294 <pdn_interface_connect+0xf4>
   1d432:	4818      	ldr	r0, [pc, #96]	; (1d494 <pdn_interface_connect+0x2f4>)
   1d434:	f7ef fd1c 	bl	ce70 <strlen>
   1d438:	490a      	ldr	r1, [pc, #40]	; (1d464 <pdn_interface_connect+0x2c4>)
   1d43a:	4602      	mov	r2, r0
   1d43c:	4815      	ldr	r0, [pc, #84]	; (1d494 <pdn_interface_connect+0x2f4>)
   1d43e:	f009 fc84 	bl	26d4a <strncmp>
   1d442:	b930      	cbnz	r0, 1d452 <pdn_interface_connect+0x2b2>
   1d444:	2008      	movs	r0, #8
   1d446:	f7f8 fbe7 	bl	15c18 <bsd_os_errno_set>
   1d44a:	e723      	b.n	1d294 <pdn_interface_connect+0xf4>
   1d44c:	f04f 34ff 	mov.w	r4, #4294967295
   1d450:	e720      	b.n	1d294 <pdn_interface_connect+0xf4>
   1d452:	2005      	movs	r0, #5
   1d454:	f7f8 fbe0 	bl	15c18 <bsd_os_errno_set>
   1d458:	e71c      	b.n	1d294 <pdn_interface_connect+0xf4>
   1d45a:	bf00      	nop
   1d45c:	789a0000 	.word	0x789a0000
   1d460:	2002217c 	.word	0x2002217c
   1d464:	2002207c 	.word	0x2002207c
   1d468:	000282b0 	.word	0x000282b0
   1d46c:	000282bc 	.word	0x000282bc
   1d470:	000282d0 	.word	0x000282d0
   1d474:	000282d8 	.word	0x000282d8
   1d478:	000282c8 	.word	0x000282c8
   1d47c:	0002830c 	.word	0x0002830c
   1d480:	000282dc 	.word	0x000282dc
   1d484:	000282e0 	.word	0x000282e0
   1d488:	000282ec 	.word	0x000282ec
   1d48c:	000282f0 	.word	0x000282f0
   1d490:	00028300 	.word	0x00028300
   1d494:	00028344 	.word	0x00028344
   1d498:	000282c0 	.word	0x000282c0
   1d49c:	20022078 	.word	0x20022078

0001d4a0 <pdn_interface_close>:
   1d4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d4a4:	4a6b      	ldr	r2, [pc, #428]	; (1d654 <pdn_interface_close+0x1b4>)
   1d4a6:	0c03      	lsrs	r3, r0, #16
   1d4a8:	041b      	lsls	r3, r3, #16
   1d4aa:	4293      	cmp	r3, r2
   1d4ac:	b083      	sub	sp, #12
   1d4ae:	f040 80ac 	bne.w	1d60a <pdn_interface_close+0x16a>
   1d4b2:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1d4b6:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1d4ba:	2c09      	cmp	r4, #9
   1d4bc:	f300 80a5 	bgt.w	1d60a <pdn_interface_close+0x16a>
   1d4c0:	4d65      	ldr	r5, [pc, #404]	; (1d658 <pdn_interface_close+0x1b8>)
   1d4c2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d4c6:	2800      	cmp	r0, #0
   1d4c8:	f000 809f 	beq.w	1d60a <pdn_interface_close+0x16a>
   1d4cc:	6883      	ldr	r3, [r0, #8]
   1d4ce:	2b00      	cmp	r3, #0
   1d4d0:	f000 809b 	beq.w	1d60a <pdn_interface_close+0x16a>
   1d4d4:	6883      	ldr	r3, [r0, #8]
   1d4d6:	2b03      	cmp	r3, #3
   1d4d8:	d00b      	beq.n	1d4f2 <pdn_interface_close+0x52>
   1d4da:	6883      	ldr	r3, [r0, #8]
   1d4dc:	2b02      	cmp	r3, #2
   1d4de:	d055      	beq.n	1d58c <pdn_interface_close+0xec>
   1d4e0:	f002 f872 	bl	1f5c8 <nrf_free>
   1d4e4:	2300      	movs	r3, #0
   1d4e6:	4618      	mov	r0, r3
   1d4e8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1d4ec:	b003      	add	sp, #12
   1d4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d4f2:	4e5a      	ldr	r6, [pc, #360]	; (1d65c <pdn_interface_close+0x1bc>)
   1d4f4:	4a5a      	ldr	r2, [pc, #360]	; (1d660 <pdn_interface_close+0x1c0>)
   1d4f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d4fa:	4630      	mov	r0, r6
   1d4fc:	f004 fea4 	bl	22248 <sniprintf>
   1d500:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1d504:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d508:	681b      	ldr	r3, [r3, #0]
   1d50a:	4a56      	ldr	r2, [pc, #344]	; (1d664 <pdn_interface_close+0x1c4>)
   1d50c:	4430      	add	r0, r6
   1d50e:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1d674 <pdn_interface_close+0x1d4>
   1d512:	f004 fe99 	bl	22248 <sniprintf>
   1d516:	4630      	mov	r0, r6
   1d518:	f8d8 9000 	ldr.w	r9, [r8]
   1d51c:	2700      	movs	r7, #0
   1d51e:	f7ef fca7 	bl	ce70 <strlen>
   1d522:	4631      	mov	r1, r6
   1d524:	4602      	mov	r2, r0
   1d526:	463b      	mov	r3, r7
   1d528:	4648      	mov	r0, r9
   1d52a:	9701      	str	r7, [sp, #4]
   1d52c:	9700      	str	r7, [sp, #0]
   1d52e:	f7ff fac7 	bl	1cac0 <at_interface_write>
   1d532:	4681      	mov	r9, r0
   1d534:	4630      	mov	r0, r6
   1d536:	f7ef fc9b 	bl	ce70 <strlen>
   1d53a:	4548      	cmp	r0, r9
   1d53c:	f040 8082 	bne.w	1d644 <pdn_interface_close+0x1a4>
   1d540:	463b      	mov	r3, r7
   1d542:	e9cd 7700 	strd	r7, r7, [sp]
   1d546:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d54a:	4631      	mov	r1, r6
   1d54c:	f8d8 0000 	ldr.w	r0, [r8]
   1d550:	f7ff fbec 	bl	1cd2c <at_interface_read>
   1d554:	4607      	mov	r7, r0
   1d556:	4844      	ldr	r0, [pc, #272]	; (1d668 <pdn_interface_close+0x1c8>)
   1d558:	f7ef fc8a 	bl	ce70 <strlen>
   1d55c:	4287      	cmp	r7, r0
   1d55e:	da5a      	bge.n	1d616 <pdn_interface_close+0x176>
   1d560:	4842      	ldr	r0, [pc, #264]	; (1d66c <pdn_interface_close+0x1cc>)
   1d562:	f7ef fc85 	bl	ce70 <strlen>
   1d566:	493d      	ldr	r1, [pc, #244]	; (1d65c <pdn_interface_close+0x1bc>)
   1d568:	4602      	mov	r2, r0
   1d56a:	4840      	ldr	r0, [pc, #256]	; (1d66c <pdn_interface_close+0x1cc>)
   1d56c:	f009 fbed 	bl	26d4a <strncmp>
   1d570:	2800      	cmp	r0, #0
   1d572:	d167      	bne.n	1d644 <pdn_interface_close+0x1a4>
   1d574:	2008      	movs	r0, #8
   1d576:	f7f8 fb4f 	bl	15c18 <bsd_os_errno_set>
   1d57a:	2202      	movs	r2, #2
   1d57c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1d580:	609a      	str	r2, [r3, #8]
   1d582:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d586:	6883      	ldr	r3, [r0, #8]
   1d588:	2b02      	cmp	r3, #2
   1d58a:	d1a9      	bne.n	1d4e0 <pdn_interface_close+0x40>
   1d58c:	4e33      	ldr	r6, [pc, #204]	; (1d65c <pdn_interface_close+0x1bc>)
   1d58e:	4a38      	ldr	r2, [pc, #224]	; (1d670 <pdn_interface_close+0x1d0>)
   1d590:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d594:	4630      	mov	r0, r6
   1d596:	f004 fe57 	bl	22248 <sniprintf>
   1d59a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1d59e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d5a2:	681b      	ldr	r3, [r3, #0]
   1d5a4:	4a2f      	ldr	r2, [pc, #188]	; (1d664 <pdn_interface_close+0x1c4>)
   1d5a6:	4430      	add	r0, r6
   1d5a8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1d674 <pdn_interface_close+0x1d4>
   1d5ac:	f004 fe4c 	bl	22248 <sniprintf>
   1d5b0:	4630      	mov	r0, r6
   1d5b2:	f8d8 9000 	ldr.w	r9, [r8]
   1d5b6:	2700      	movs	r7, #0
   1d5b8:	f7ef fc5a 	bl	ce70 <strlen>
   1d5bc:	4631      	mov	r1, r6
   1d5be:	4602      	mov	r2, r0
   1d5c0:	463b      	mov	r3, r7
   1d5c2:	4648      	mov	r0, r9
   1d5c4:	9701      	str	r7, [sp, #4]
   1d5c6:	9700      	str	r7, [sp, #0]
   1d5c8:	f7ff fa7a 	bl	1cac0 <at_interface_write>
   1d5cc:	4681      	mov	r9, r0
   1d5ce:	4630      	mov	r0, r6
   1d5d0:	f7ef fc4e 	bl	ce70 <strlen>
   1d5d4:	4548      	cmp	r0, r9
   1d5d6:	d139      	bne.n	1d64c <pdn_interface_close+0x1ac>
   1d5d8:	463b      	mov	r3, r7
   1d5da:	e9cd 7700 	strd	r7, r7, [sp]
   1d5de:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d5e2:	4631      	mov	r1, r6
   1d5e4:	f8d8 0000 	ldr.w	r0, [r8]
   1d5e8:	f7ff fba0 	bl	1cd2c <at_interface_read>
   1d5ec:	4607      	mov	r7, r0
   1d5ee:	481e      	ldr	r0, [pc, #120]	; (1d668 <pdn_interface_close+0x1c8>)
   1d5f0:	f7ef fc3e 	bl	ce70 <strlen>
   1d5f4:	4287      	cmp	r7, r0
   1d5f6:	db16      	blt.n	1d626 <pdn_interface_close+0x186>
   1d5f8:	4602      	mov	r2, r0
   1d5fa:	4631      	mov	r1, r6
   1d5fc:	481a      	ldr	r0, [pc, #104]	; (1d668 <pdn_interface_close+0x1c8>)
   1d5fe:	f009 fba4 	bl	26d4a <strncmp>
   1d602:	b980      	cbnz	r0, 1d626 <pdn_interface_close+0x186>
   1d604:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d608:	e76a      	b.n	1d4e0 <pdn_interface_close+0x40>
   1d60a:	2009      	movs	r0, #9
   1d60c:	f7f8 fb04 	bl	15c18 <bsd_os_errno_set>
   1d610:	f04f 30ff 	mov.w	r0, #4294967295
   1d614:	e76a      	b.n	1d4ec <pdn_interface_close+0x4c>
   1d616:	4602      	mov	r2, r0
   1d618:	4631      	mov	r1, r6
   1d61a:	4813      	ldr	r0, [pc, #76]	; (1d668 <pdn_interface_close+0x1c8>)
   1d61c:	f009 fb95 	bl	26d4a <strncmp>
   1d620:	2800      	cmp	r0, #0
   1d622:	d0aa      	beq.n	1d57a <pdn_interface_close+0xda>
   1d624:	e79c      	b.n	1d560 <pdn_interface_close+0xc0>
   1d626:	4811      	ldr	r0, [pc, #68]	; (1d66c <pdn_interface_close+0x1cc>)
   1d628:	f7ef fc22 	bl	ce70 <strlen>
   1d62c:	490b      	ldr	r1, [pc, #44]	; (1d65c <pdn_interface_close+0x1bc>)
   1d62e:	4602      	mov	r2, r0
   1d630:	480e      	ldr	r0, [pc, #56]	; (1d66c <pdn_interface_close+0x1cc>)
   1d632:	f009 fb8a 	bl	26d4a <strncmp>
   1d636:	b948      	cbnz	r0, 1d64c <pdn_interface_close+0x1ac>
   1d638:	2008      	movs	r0, #8
   1d63a:	f7f8 faed 	bl	15c18 <bsd_os_errno_set>
   1d63e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d642:	e74d      	b.n	1d4e0 <pdn_interface_close+0x40>
   1d644:	2005      	movs	r0, #5
   1d646:	f7f8 fae7 	bl	15c18 <bsd_os_errno_set>
   1d64a:	e796      	b.n	1d57a <pdn_interface_close+0xda>
   1d64c:	2005      	movs	r0, #5
   1d64e:	f7f8 fae3 	bl	15c18 <bsd_os_errno_set>
   1d652:	e7d7      	b.n	1d604 <pdn_interface_close+0x164>
   1d654:	789a0000 	.word	0x789a0000
   1d658:	2002217c 	.word	0x2002217c
   1d65c:	2002207c 	.word	0x2002207c
   1d660:	000282a4 	.word	0x000282a4
   1d664:	000282ec 	.word	0x000282ec
   1d668:	000282dc 	.word	0x000282dc
   1d66c:	00028344 	.word	0x00028344
   1d670:	000282b0 	.word	0x000282b0
   1d674:	20022078 	.word	0x20022078

0001d678 <pdn_interface_setopt>:
   1d678:	b538      	push	{r3, r4, r5, lr}
   1d67a:	f240 2502 	movw	r5, #514	; 0x202
   1d67e:	42a9      	cmp	r1, r5
   1d680:	9c04      	ldr	r4, [sp, #16]
   1d682:	d140      	bne.n	1d706 <pdn_interface_setopt+0x8e>
   1d684:	2b00      	cmp	r3, #0
   1d686:	d03e      	beq.n	1d706 <pdn_interface_setopt+0x8e>
   1d688:	2c00      	cmp	r4, #0
   1d68a:	d03c      	beq.n	1d706 <pdn_interface_setopt+0x8e>
   1d68c:	0c01      	lsrs	r1, r0, #16
   1d68e:	4d22      	ldr	r5, [pc, #136]	; (1d718 <pdn_interface_setopt+0xa0>)
   1d690:	0409      	lsls	r1, r1, #16
   1d692:	42a9      	cmp	r1, r5
   1d694:	d005      	beq.n	1d6a2 <pdn_interface_setopt+0x2a>
   1d696:	2009      	movs	r0, #9
   1d698:	f7f8 fabe 	bl	15c18 <bsd_os_errno_set>
   1d69c:	f04f 30ff 	mov.w	r0, #4294967295
   1d6a0:	bd38      	pop	{r3, r4, r5, pc}
   1d6a2:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1d6a6:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1d6aa:	2809      	cmp	r0, #9
   1d6ac:	dcf3      	bgt.n	1d696 <pdn_interface_setopt+0x1e>
   1d6ae:	491b      	ldr	r1, [pc, #108]	; (1d71c <pdn_interface_setopt+0xa4>)
   1d6b0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1d6b4:	2900      	cmp	r1, #0
   1d6b6:	d0ee      	beq.n	1d696 <pdn_interface_setopt+0x1e>
   1d6b8:	6888      	ldr	r0, [r1, #8]
   1d6ba:	2800      	cmp	r0, #0
   1d6bc:	d0eb      	beq.n	1d696 <pdn_interface_setopt+0x1e>
   1d6be:	2a01      	cmp	r2, #1
   1d6c0:	d128      	bne.n	1d714 <pdn_interface_setopt+0x9c>
   1d6c2:	688a      	ldr	r2, [r1, #8]
   1d6c4:	b1ea      	cbz	r2, 1d702 <pdn_interface_setopt+0x8a>
   1d6c6:	688a      	ldr	r2, [r1, #8]
   1d6c8:	2a03      	cmp	r2, #3
   1d6ca:	d01a      	beq.n	1d702 <pdn_interface_setopt+0x8a>
   1d6cc:	688a      	ldr	r2, [r1, #8]
   1d6ce:	2a04      	cmp	r2, #4
   1d6d0:	d017      	beq.n	1d702 <pdn_interface_setopt+0x8a>
   1d6d2:	08a2      	lsrs	r2, r4, #2
   1d6d4:	1e50      	subs	r0, r2, #1
   1d6d6:	2801      	cmp	r0, #1
   1d6d8:	d815      	bhi.n	1d706 <pdn_interface_setopt+0x8e>
   1d6da:	07a0      	lsls	r0, r4, #30
   1d6dc:	d113      	bne.n	1d706 <pdn_interface_setopt+0x8e>
   1d6de:	6818      	ldr	r0, [r3, #0]
   1d6e0:	2802      	cmp	r0, #2
   1d6e2:	d012      	beq.n	1d70a <pdn_interface_setopt+0x92>
   1d6e4:	280a      	cmp	r0, #10
   1d6e6:	d10e      	bne.n	1d706 <pdn_interface_setopt+0x8e>
   1d6e8:	2002      	movs	r0, #2
   1d6ea:	2a02      	cmp	r2, #2
   1d6ec:	d106      	bne.n	1d6fc <pdn_interface_setopt+0x84>
   1d6ee:	685b      	ldr	r3, [r3, #4]
   1d6f0:	2b02      	cmp	r3, #2
   1d6f2:	d00c      	beq.n	1d70e <pdn_interface_setopt+0x96>
   1d6f4:	2b0a      	cmp	r3, #10
   1d6f6:	d106      	bne.n	1d706 <pdn_interface_setopt+0x8e>
   1d6f8:	f040 0002 	orr.w	r0, r0, #2
   1d6fc:	6708      	str	r0, [r1, #112]	; 0x70
   1d6fe:	2000      	movs	r0, #0
   1d700:	bd38      	pop	{r3, r4, r5, pc}
   1d702:	200e      	movs	r0, #14
   1d704:	e7c8      	b.n	1d698 <pdn_interface_setopt+0x20>
   1d706:	2016      	movs	r0, #22
   1d708:	e7c6      	b.n	1d698 <pdn_interface_setopt+0x20>
   1d70a:	2001      	movs	r0, #1
   1d70c:	e7ed      	b.n	1d6ea <pdn_interface_setopt+0x72>
   1d70e:	f040 0001 	orr.w	r0, r0, #1
   1d712:	e7f3      	b.n	1d6fc <pdn_interface_setopt+0x84>
   1d714:	202d      	movs	r0, #45	; 0x2d
   1d716:	e7bf      	b.n	1d698 <pdn_interface_setopt+0x20>
   1d718:	789a0000 	.word	0x789a0000
   1d71c:	2002217c 	.word	0x2002217c

0001d720 <pdn_interface_getopt>:
   1d720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d724:	f240 2402 	movw	r4, #514	; 0x202
   1d728:	b083      	sub	sp, #12
   1d72a:	42a1      	cmp	r1, r4
   1d72c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1d72e:	f040 809f 	bne.w	1d870 <pdn_interface_getopt+0x150>
   1d732:	461e      	mov	r6, r3
   1d734:	2b00      	cmp	r3, #0
   1d736:	f000 809b 	beq.w	1d870 <pdn_interface_getopt+0x150>
   1d73a:	2d00      	cmp	r5, #0
   1d73c:	f000 8098 	beq.w	1d870 <pdn_interface_getopt+0x150>
   1d740:	0c03      	lsrs	r3, r0, #16
   1d742:	4955      	ldr	r1, [pc, #340]	; (1d898 <pdn_interface_getopt+0x178>)
   1d744:	041b      	lsls	r3, r3, #16
   1d746:	428b      	cmp	r3, r1
   1d748:	f040 8094 	bne.w	1d874 <pdn_interface_getopt+0x154>
   1d74c:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1d750:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1d754:	2c09      	cmp	r4, #9
   1d756:	f300 808d 	bgt.w	1d874 <pdn_interface_getopt+0x154>
   1d75a:	4b50      	ldr	r3, [pc, #320]	; (1d89c <pdn_interface_getopt+0x17c>)
   1d75c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1d760:	2b00      	cmp	r3, #0
   1d762:	f000 8087 	beq.w	1d874 <pdn_interface_getopt+0x154>
   1d766:	6899      	ldr	r1, [r3, #8]
   1d768:	2900      	cmp	r1, #0
   1d76a:	f000 8083 	beq.w	1d874 <pdn_interface_getopt+0x154>
   1d76e:	2a02      	cmp	r2, #2
   1d770:	d04c      	beq.n	1d80c <pdn_interface_getopt+0xec>
   1d772:	2a03      	cmp	r2, #3
   1d774:	d009      	beq.n	1d78a <pdn_interface_getopt+0x6a>
   1d776:	2a01      	cmp	r2, #1
   1d778:	d052      	beq.n	1d820 <pdn_interface_getopt+0x100>
   1d77a:	202d      	movs	r0, #45	; 0x2d
   1d77c:	f7f8 fa4c 	bl	15c18 <bsd_os_errno_set>
   1d780:	f04f 30ff 	mov.w	r0, #4294967295
   1d784:	b003      	add	sp, #12
   1d786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d78a:	682b      	ldr	r3, [r5, #0]
   1d78c:	2b00      	cmp	r3, #0
   1d78e:	d06f      	beq.n	1d870 <pdn_interface_getopt+0x150>
   1d790:	4a43      	ldr	r2, [pc, #268]	; (1d8a0 <pdn_interface_getopt+0x180>)
   1d792:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d796:	4843      	ldr	r0, [pc, #268]	; (1d8a4 <pdn_interface_getopt+0x184>)
   1d798:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1d8b0 <pdn_interface_getopt+0x190>
   1d79c:	f004 fd54 	bl	22248 <sniprintf>
   1d7a0:	4840      	ldr	r0, [pc, #256]	; (1d8a4 <pdn_interface_getopt+0x184>)
   1d7a2:	f8d8 9000 	ldr.w	r9, [r8]
   1d7a6:	2700      	movs	r7, #0
   1d7a8:	f7ef fb62 	bl	ce70 <strlen>
   1d7ac:	463b      	mov	r3, r7
   1d7ae:	4602      	mov	r2, r0
   1d7b0:	493c      	ldr	r1, [pc, #240]	; (1d8a4 <pdn_interface_getopt+0x184>)
   1d7b2:	4648      	mov	r0, r9
   1d7b4:	9701      	str	r7, [sp, #4]
   1d7b6:	9700      	str	r7, [sp, #0]
   1d7b8:	f7ff f982 	bl	1cac0 <at_interface_write>
   1d7bc:	4681      	mov	r9, r0
   1d7be:	4839      	ldr	r0, [pc, #228]	; (1d8a4 <pdn_interface_getopt+0x184>)
   1d7c0:	f7ef fb56 	bl	ce70 <strlen>
   1d7c4:	4548      	cmp	r0, r9
   1d7c6:	d160      	bne.n	1d88a <pdn_interface_getopt+0x16a>
   1d7c8:	463b      	mov	r3, r7
   1d7ca:	e9cd 7700 	strd	r7, r7, [sp]
   1d7ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d7d2:	4934      	ldr	r1, [pc, #208]	; (1d8a4 <pdn_interface_getopt+0x184>)
   1d7d4:	f8d8 0000 	ldr.w	r0, [r8]
   1d7d8:	f7ff faa8 	bl	1cd2c <at_interface_read>
   1d7dc:	4607      	mov	r7, r0
   1d7de:	4832      	ldr	r0, [pc, #200]	; (1d8a8 <pdn_interface_getopt+0x188>)
   1d7e0:	f7ef fb46 	bl	ce70 <strlen>
   1d7e4:	4287      	cmp	r7, r0
   1d7e6:	db32      	blt.n	1d84e <pdn_interface_getopt+0x12e>
   1d7e8:	4602      	mov	r2, r0
   1d7ea:	492e      	ldr	r1, [pc, #184]	; (1d8a4 <pdn_interface_getopt+0x184>)
   1d7ec:	482e      	ldr	r0, [pc, #184]	; (1d8a8 <pdn_interface_getopt+0x188>)
   1d7ee:	f009 faac 	bl	26d4a <strncmp>
   1d7f2:	4607      	mov	r7, r0
   1d7f4:	bb58      	cbnz	r0, 1d84e <pdn_interface_getopt+0x12e>
   1d7f6:	4620      	mov	r0, r4
   1d7f8:	492a      	ldr	r1, [pc, #168]	; (1d8a4 <pdn_interface_getopt+0x184>)
   1d7fa:	f7ff fb45 	bl	1ce88 <pdn_state_get_parser>
   1d7fe:	2800      	cmp	r0, #0
   1d800:	dbbc      	blt.n	1d77c <pdn_interface_getopt+0x5c>
   1d802:	2301      	movs	r3, #1
   1d804:	7030      	strb	r0, [r6, #0]
   1d806:	4638      	mov	r0, r7
   1d808:	602b      	str	r3, [r5, #0]
   1d80a:	e7bb      	b.n	1d784 <pdn_interface_getopt+0x64>
   1d80c:	682a      	ldr	r2, [r5, #0]
   1d80e:	b37a      	cbz	r2, 1d870 <pdn_interface_getopt+0x150>
   1d810:	2201      	movs	r2, #1
   1d812:	2000      	movs	r0, #0
   1d814:	681b      	ldr	r3, [r3, #0]
   1d816:	7033      	strb	r3, [r6, #0]
   1d818:	602a      	str	r2, [r5, #0]
   1d81a:	b003      	add	sp, #12
   1d81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d820:	689a      	ldr	r2, [r3, #8]
   1d822:	b31a      	cbz	r2, 1d86c <pdn_interface_getopt+0x14c>
   1d824:	689a      	ldr	r2, [r3, #8]
   1d826:	2a04      	cmp	r2, #4
   1d828:	d020      	beq.n	1d86c <pdn_interface_getopt+0x14c>
   1d82a:	682a      	ldr	r2, [r5, #0]
   1d82c:	2a07      	cmp	r2, #7
   1d82e:	d91f      	bls.n	1d870 <pdn_interface_getopt+0x150>
   1d830:	f012 0203 	ands.w	r2, r2, #3
   1d834:	d11c      	bne.n	1d870 <pdn_interface_getopt+0x150>
   1d836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1d838:	0799      	lsls	r1, r3, #30
   1d83a:	d421      	bmi.n	1d880 <pdn_interface_getopt+0x160>
   1d83c:	2104      	movs	r1, #4
   1d83e:	07db      	lsls	r3, r3, #31
   1d840:	d502      	bpl.n	1d848 <pdn_interface_getopt+0x128>
   1d842:	2302      	movs	r3, #2
   1d844:	50b3      	str	r3, [r6, r2]
   1d846:	460a      	mov	r2, r1
   1d848:	602a      	str	r2, [r5, #0]
   1d84a:	2000      	movs	r0, #0
   1d84c:	e79a      	b.n	1d784 <pdn_interface_getopt+0x64>
   1d84e:	4817      	ldr	r0, [pc, #92]	; (1d8ac <pdn_interface_getopt+0x18c>)
   1d850:	f7ef fb0e 	bl	ce70 <strlen>
   1d854:	4913      	ldr	r1, [pc, #76]	; (1d8a4 <pdn_interface_getopt+0x184>)
   1d856:	4602      	mov	r2, r0
   1d858:	4814      	ldr	r0, [pc, #80]	; (1d8ac <pdn_interface_getopt+0x18c>)
   1d85a:	f009 fa76 	bl	26d4a <strncmp>
   1d85e:	b9a0      	cbnz	r0, 1d88a <pdn_interface_getopt+0x16a>
   1d860:	2008      	movs	r0, #8
   1d862:	f7f8 f9d9 	bl	15c18 <bsd_os_errno_set>
   1d866:	f04f 30ff 	mov.w	r0, #4294967295
   1d86a:	e787      	b.n	1d77c <pdn_interface_getopt+0x5c>
   1d86c:	200e      	movs	r0, #14
   1d86e:	e785      	b.n	1d77c <pdn_interface_getopt+0x5c>
   1d870:	2016      	movs	r0, #22
   1d872:	e783      	b.n	1d77c <pdn_interface_getopt+0x5c>
   1d874:	2009      	movs	r0, #9
   1d876:	f7f8 f9cf 	bl	15c18 <bsd_os_errno_set>
   1d87a:	f04f 30ff 	mov.w	r0, #4294967295
   1d87e:	e781      	b.n	1d784 <pdn_interface_getopt+0x64>
   1d880:	220a      	movs	r2, #10
   1d882:	2108      	movs	r1, #8
   1d884:	6032      	str	r2, [r6, #0]
   1d886:	2204      	movs	r2, #4
   1d888:	e7d9      	b.n	1d83e <pdn_interface_getopt+0x11e>
   1d88a:	2005      	movs	r0, #5
   1d88c:	f7f8 f9c4 	bl	15c18 <bsd_os_errno_set>
   1d890:	f04f 30ff 	mov.w	r0, #4294967295
   1d894:	e772      	b.n	1d77c <pdn_interface_getopt+0x5c>
   1d896:	bf00      	nop
   1d898:	789a0000 	.word	0x789a0000
   1d89c:	2002217c 	.word	0x2002217c
   1d8a0:	00028314 	.word	0x00028314
   1d8a4:	2002207c 	.word	0x2002207c
   1d8a8:	00028320 	.word	0x00028320
   1d8ac:	00028344 	.word	0x00028344
   1d8b0:	20022078 	.word	0x20022078

0001d8b4 <pdn_interface_pdn_id_get>:
   1d8b4:	2900      	cmp	r1, #0
   1d8b6:	f000 83b9 	beq.w	1e02c <pdn_interface_pdn_id_get+0x778>
   1d8ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d8be:	4ca3      	ldr	r4, [pc, #652]	; (1db4c <pdn_interface_pdn_id_get+0x298>)
   1d8c0:	2802      	cmp	r0, #2
   1d8c2:	b083      	sub	sp, #12
   1d8c4:	460d      	mov	r5, r1
   1d8c6:	6823      	ldr	r3, [r4, #0]
   1d8c8:	f000 8094 	beq.w	1d9f4 <pdn_interface_pdn_id_get+0x140>
   1d8cc:	280a      	cmp	r0, #10
   1d8ce:	d03f      	beq.n	1d950 <pdn_interface_pdn_id_get+0x9c>
   1d8d0:	b11b      	cbz	r3, 1d8da <pdn_interface_pdn_id_get+0x26>
   1d8d2:	689b      	ldr	r3, [r3, #8]
   1d8d4:	2b03      	cmp	r3, #3
   1d8d6:	f000 8127 	beq.w	1db28 <pdn_interface_pdn_id_get+0x274>
   1d8da:	6863      	ldr	r3, [r4, #4]
   1d8dc:	b11b      	cbz	r3, 1d8e6 <pdn_interface_pdn_id_get+0x32>
   1d8de:	689b      	ldr	r3, [r3, #8]
   1d8e0:	2b03      	cmp	r3, #3
   1d8e2:	f000 8110 	beq.w	1db06 <pdn_interface_pdn_id_get+0x252>
   1d8e6:	68a3      	ldr	r3, [r4, #8]
   1d8e8:	b11b      	cbz	r3, 1d8f2 <pdn_interface_pdn_id_get+0x3e>
   1d8ea:	689b      	ldr	r3, [r3, #8]
   1d8ec:	2b03      	cmp	r3, #3
   1d8ee:	f000 80f9 	beq.w	1dae4 <pdn_interface_pdn_id_get+0x230>
   1d8f2:	68e3      	ldr	r3, [r4, #12]
   1d8f4:	b11b      	cbz	r3, 1d8fe <pdn_interface_pdn_id_get+0x4a>
   1d8f6:	689b      	ldr	r3, [r3, #8]
   1d8f8:	2b03      	cmp	r3, #3
   1d8fa:	f000 80e2 	beq.w	1dac2 <pdn_interface_pdn_id_get+0x20e>
   1d8fe:	6923      	ldr	r3, [r4, #16]
   1d900:	b11b      	cbz	r3, 1d90a <pdn_interface_pdn_id_get+0x56>
   1d902:	689b      	ldr	r3, [r3, #8]
   1d904:	2b03      	cmp	r3, #3
   1d906:	f000 8123 	beq.w	1db50 <pdn_interface_pdn_id_get+0x29c>
   1d90a:	6963      	ldr	r3, [r4, #20]
   1d90c:	b11b      	cbz	r3, 1d916 <pdn_interface_pdn_id_get+0x62>
   1d90e:	689b      	ldr	r3, [r3, #8]
   1d910:	2b03      	cmp	r3, #3
   1d912:	f000 8161 	beq.w	1dbd8 <pdn_interface_pdn_id_get+0x324>
   1d916:	69a3      	ldr	r3, [r4, #24]
   1d918:	b11b      	cbz	r3, 1d922 <pdn_interface_pdn_id_get+0x6e>
   1d91a:	689b      	ldr	r3, [r3, #8]
   1d91c:	2b03      	cmp	r3, #3
   1d91e:	f000 814a 	beq.w	1dbb6 <pdn_interface_pdn_id_get+0x302>
   1d922:	69e3      	ldr	r3, [r4, #28]
   1d924:	b11b      	cbz	r3, 1d92e <pdn_interface_pdn_id_get+0x7a>
   1d926:	689b      	ldr	r3, [r3, #8]
   1d928:	2b03      	cmp	r3, #3
   1d92a:	f000 8133 	beq.w	1db94 <pdn_interface_pdn_id_get+0x2e0>
   1d92e:	6a23      	ldr	r3, [r4, #32]
   1d930:	b11b      	cbz	r3, 1d93a <pdn_interface_pdn_id_get+0x86>
   1d932:	689b      	ldr	r3, [r3, #8]
   1d934:	2b03      	cmp	r3, #3
   1d936:	f000 811c 	beq.w	1db72 <pdn_interface_pdn_id_get+0x2be>
   1d93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d93c:	b11b      	cbz	r3, 1d946 <pdn_interface_pdn_id_get+0x92>
   1d93e:	689b      	ldr	r3, [r3, #8]
   1d940:	2b03      	cmp	r3, #3
   1d942:	f000 80ad 	beq.w	1daa0 <pdn_interface_pdn_id_get+0x1ec>
   1d946:	f04f 30ff 	mov.w	r0, #4294967295
   1d94a:	b003      	add	sp, #12
   1d94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d950:	b11b      	cbz	r3, 1d95a <pdn_interface_pdn_id_get+0xa6>
   1d952:	689b      	ldr	r3, [r3, #8]
   1d954:	2b03      	cmp	r3, #3
   1d956:	f000 8335 	beq.w	1dfc4 <pdn_interface_pdn_id_get+0x710>
   1d95a:	6863      	ldr	r3, [r4, #4]
   1d95c:	b11b      	cbz	r3, 1d966 <pdn_interface_pdn_id_get+0xb2>
   1d95e:	689b      	ldr	r3, [r3, #8]
   1d960:	2b03      	cmp	r3, #3
   1d962:	f000 82fd 	beq.w	1df60 <pdn_interface_pdn_id_get+0x6ac>
   1d966:	68a3      	ldr	r3, [r4, #8]
   1d968:	b11b      	cbz	r3, 1d972 <pdn_interface_pdn_id_get+0xbe>
   1d96a:	689b      	ldr	r3, [r3, #8]
   1d96c:	2b03      	cmp	r3, #3
   1d96e:	f000 82d5 	beq.w	1df1c <pdn_interface_pdn_id_get+0x668>
   1d972:	68e3      	ldr	r3, [r4, #12]
   1d974:	b11b      	cbz	r3, 1d97e <pdn_interface_pdn_id_get+0xca>
   1d976:	689e      	ldr	r6, [r3, #8]
   1d978:	2e03      	cmp	r6, #3
   1d97a:	f000 81f0 	beq.w	1dd5e <pdn_interface_pdn_id_get+0x4aa>
   1d97e:	6923      	ldr	r3, [r4, #16]
   1d980:	b11b      	cbz	r3, 1d98a <pdn_interface_pdn_id_get+0xd6>
   1d982:	689b      	ldr	r3, [r3, #8]
   1d984:	2b03      	cmp	r3, #3
   1d986:	f000 8203 	beq.w	1dd90 <pdn_interface_pdn_id_get+0x4dc>
   1d98a:	6963      	ldr	r3, [r4, #20]
   1d98c:	b11b      	cbz	r3, 1d996 <pdn_interface_pdn_id_get+0xe2>
   1d98e:	689b      	ldr	r3, [r3, #8]
   1d990:	2b03      	cmp	r3, #3
   1d992:	f000 8215 	beq.w	1ddc0 <pdn_interface_pdn_id_get+0x50c>
   1d996:	69a3      	ldr	r3, [r4, #24]
   1d998:	b11b      	cbz	r3, 1d9a2 <pdn_interface_pdn_id_get+0xee>
   1d99a:	689b      	ldr	r3, [r3, #8]
   1d99c:	2b03      	cmp	r3, #3
   1d99e:	f000 8227 	beq.w	1ddf0 <pdn_interface_pdn_id_get+0x53c>
   1d9a2:	69e3      	ldr	r3, [r4, #28]
   1d9a4:	b11b      	cbz	r3, 1d9ae <pdn_interface_pdn_id_get+0xfa>
   1d9a6:	689b      	ldr	r3, [r3, #8]
   1d9a8:	2b03      	cmp	r3, #3
   1d9aa:	f000 8239 	beq.w	1de20 <pdn_interface_pdn_id_get+0x56c>
   1d9ae:	6a23      	ldr	r3, [r4, #32]
   1d9b0:	b11b      	cbz	r3, 1d9ba <pdn_interface_pdn_id_get+0x106>
   1d9b2:	689b      	ldr	r3, [r3, #8]
   1d9b4:	2b03      	cmp	r3, #3
   1d9b6:	f000 824d 	beq.w	1de54 <pdn_interface_pdn_id_get+0x5a0>
   1d9ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d9bc:	2b00      	cmp	r3, #0
   1d9be:	d0c2      	beq.n	1d946 <pdn_interface_pdn_id_get+0x92>
   1d9c0:	689b      	ldr	r3, [r3, #8]
   1d9c2:	2b03      	cmp	r3, #3
   1d9c4:	d1bf      	bne.n	1d946 <pdn_interface_pdn_id_get+0x92>
   1d9c6:	4628      	mov	r0, r5
   1d9c8:	f7ef fa52 	bl	ce70 <strlen>
   1d9cc:	4606      	mov	r6, r0
   1d9ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1d9d0:	300c      	adds	r0, #12
   1d9d2:	f7ef fa4d 	bl	ce70 <strlen>
   1d9d6:	42b0      	cmp	r0, r6
   1d9d8:	d1b5      	bne.n	1d946 <pdn_interface_pdn_id_get+0x92>
   1d9da:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d9dc:	4628      	mov	r0, r5
   1d9de:	310c      	adds	r1, #12
   1d9e0:	f7ef fa3c 	bl	ce5c <strcmp>
   1d9e4:	2800      	cmp	r0, #0
   1d9e6:	d1ae      	bne.n	1d946 <pdn_interface_pdn_id_get+0x92>
   1d9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d9ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d9ec:	0792      	lsls	r2, r2, #30
   1d9ee:	d5aa      	bpl.n	1d946 <pdn_interface_pdn_id_get+0x92>
   1d9f0:	2609      	movs	r6, #9
   1d9f2:	e11a      	b.n	1dc2a <pdn_interface_pdn_id_get+0x376>
   1d9f4:	b11b      	cbz	r3, 1d9fe <pdn_interface_pdn_id_get+0x14a>
   1d9f6:	689b      	ldr	r3, [r3, #8]
   1d9f8:	2b03      	cmp	r3, #3
   1d9fa:	f000 82fd 	beq.w	1dff8 <pdn_interface_pdn_id_get+0x744>
   1d9fe:	6863      	ldr	r3, [r4, #4]
   1da00:	b11b      	cbz	r3, 1da0a <pdn_interface_pdn_id_get+0x156>
   1da02:	689b      	ldr	r3, [r3, #8]
   1da04:	2b03      	cmp	r3, #3
   1da06:	f000 82c5 	beq.w	1df94 <pdn_interface_pdn_id_get+0x6e0>
   1da0a:	68a3      	ldr	r3, [r4, #8]
   1da0c:	b11b      	cbz	r3, 1da16 <pdn_interface_pdn_id_get+0x162>
   1da0e:	689b      	ldr	r3, [r3, #8]
   1da10:	2b03      	cmp	r3, #3
   1da12:	f000 8269 	beq.w	1dee8 <pdn_interface_pdn_id_get+0x634>
   1da16:	68e3      	ldr	r3, [r4, #12]
   1da18:	b11b      	cbz	r3, 1da22 <pdn_interface_pdn_id_get+0x16e>
   1da1a:	689e      	ldr	r6, [r3, #8]
   1da1c:	2e03      	cmp	r6, #3
   1da1e:	f000 80ec 	beq.w	1dbfa <pdn_interface_pdn_id_get+0x346>
   1da22:	6923      	ldr	r3, [r4, #16]
   1da24:	b11b      	cbz	r3, 1da2e <pdn_interface_pdn_id_get+0x17a>
   1da26:	689b      	ldr	r3, [r3, #8]
   1da28:	2b03      	cmp	r3, #3
   1da2a:	f000 814a 	beq.w	1dcc2 <pdn_interface_pdn_id_get+0x40e>
   1da2e:	6963      	ldr	r3, [r4, #20]
   1da30:	b11b      	cbz	r3, 1da3a <pdn_interface_pdn_id_get+0x186>
   1da32:	689b      	ldr	r3, [r3, #8]
   1da34:	2b03      	cmp	r3, #3
   1da36:	f000 815e 	beq.w	1dcf6 <pdn_interface_pdn_id_get+0x442>
   1da3a:	69a3      	ldr	r3, [r4, #24]
   1da3c:	b11b      	cbz	r3, 1da46 <pdn_interface_pdn_id_get+0x192>
   1da3e:	689b      	ldr	r3, [r3, #8]
   1da40:	2b03      	cmp	r3, #3
   1da42:	f000 8172 	beq.w	1dd2a <pdn_interface_pdn_id_get+0x476>
   1da46:	69e3      	ldr	r3, [r4, #28]
   1da48:	b11b      	cbz	r3, 1da52 <pdn_interface_pdn_id_get+0x19e>
   1da4a:	689b      	ldr	r3, [r3, #8]
   1da4c:	2b03      	cmp	r3, #3
   1da4e:	f000 821b 	beq.w	1de88 <pdn_interface_pdn_id_get+0x5d4>
   1da52:	6a23      	ldr	r3, [r4, #32]
   1da54:	b11b      	cbz	r3, 1da5e <pdn_interface_pdn_id_get+0x1aa>
   1da56:	689b      	ldr	r3, [r3, #8]
   1da58:	2b03      	cmp	r3, #3
   1da5a:	f000 822d 	beq.w	1deb8 <pdn_interface_pdn_id_get+0x604>
   1da5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1da60:	2b00      	cmp	r3, #0
   1da62:	f43f af70 	beq.w	1d946 <pdn_interface_pdn_id_get+0x92>
   1da66:	689b      	ldr	r3, [r3, #8]
   1da68:	2b03      	cmp	r3, #3
   1da6a:	f47f af6c 	bne.w	1d946 <pdn_interface_pdn_id_get+0x92>
   1da6e:	4628      	mov	r0, r5
   1da70:	f7ef f9fe 	bl	ce70 <strlen>
   1da74:	4606      	mov	r6, r0
   1da76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1da78:	300c      	adds	r0, #12
   1da7a:	f7ef f9f9 	bl	ce70 <strlen>
   1da7e:	4286      	cmp	r6, r0
   1da80:	f47f af61 	bne.w	1d946 <pdn_interface_pdn_id_get+0x92>
   1da84:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1da86:	4628      	mov	r0, r5
   1da88:	310c      	adds	r1, #12
   1da8a:	f7ef f9e7 	bl	ce5c <strcmp>
   1da8e:	2800      	cmp	r0, #0
   1da90:	f47f af59 	bne.w	1d946 <pdn_interface_pdn_id_get+0x92>
   1da94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1da96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1da98:	07d2      	lsls	r2, r2, #31
   1da9a:	f57f af54 	bpl.w	1d946 <pdn_interface_pdn_id_get+0x92>
   1da9e:	e7a7      	b.n	1d9f0 <pdn_interface_pdn_id_get+0x13c>
   1daa0:	4628      	mov	r0, r5
   1daa2:	f7ef f9e5 	bl	ce70 <strlen>
   1daa6:	4606      	mov	r6, r0
   1daa8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1daaa:	300c      	adds	r0, #12
   1daac:	f7ef f9e0 	bl	ce70 <strlen>
   1dab0:	42b0      	cmp	r0, r6
   1dab2:	f47f af48 	bne.w	1d946 <pdn_interface_pdn_id_get+0x92>
   1dab6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1dab8:	4628      	mov	r0, r5
   1daba:	310c      	adds	r1, #12
   1dabc:	f7ef f9ce 	bl	ce5c <strcmp>
   1dac0:	e741      	b.n	1d946 <pdn_interface_pdn_id_get+0x92>
   1dac2:	4628      	mov	r0, r5
   1dac4:	f7ef f9d4 	bl	ce70 <strlen>
   1dac8:	4606      	mov	r6, r0
   1daca:	68e0      	ldr	r0, [r4, #12]
   1dacc:	300c      	adds	r0, #12
   1dace:	f7ef f9cf 	bl	ce70 <strlen>
   1dad2:	4286      	cmp	r6, r0
   1dad4:	f47f af13 	bne.w	1d8fe <pdn_interface_pdn_id_get+0x4a>
   1dad8:	68e1      	ldr	r1, [r4, #12]
   1dada:	4628      	mov	r0, r5
   1dadc:	310c      	adds	r1, #12
   1dade:	f7ef f9bd 	bl	ce5c <strcmp>
   1dae2:	e70c      	b.n	1d8fe <pdn_interface_pdn_id_get+0x4a>
   1dae4:	4628      	mov	r0, r5
   1dae6:	f7ef f9c3 	bl	ce70 <strlen>
   1daea:	4606      	mov	r6, r0
   1daec:	68a0      	ldr	r0, [r4, #8]
   1daee:	300c      	adds	r0, #12
   1daf0:	f7ef f9be 	bl	ce70 <strlen>
   1daf4:	4286      	cmp	r6, r0
   1daf6:	f47f aefc 	bne.w	1d8f2 <pdn_interface_pdn_id_get+0x3e>
   1dafa:	68a1      	ldr	r1, [r4, #8]
   1dafc:	4628      	mov	r0, r5
   1dafe:	310c      	adds	r1, #12
   1db00:	f7ef f9ac 	bl	ce5c <strcmp>
   1db04:	e6f5      	b.n	1d8f2 <pdn_interface_pdn_id_get+0x3e>
   1db06:	4628      	mov	r0, r5
   1db08:	f7ef f9b2 	bl	ce70 <strlen>
   1db0c:	4606      	mov	r6, r0
   1db0e:	6860      	ldr	r0, [r4, #4]
   1db10:	300c      	adds	r0, #12
   1db12:	f7ef f9ad 	bl	ce70 <strlen>
   1db16:	4286      	cmp	r6, r0
   1db18:	f47f aee5 	bne.w	1d8e6 <pdn_interface_pdn_id_get+0x32>
   1db1c:	6861      	ldr	r1, [r4, #4]
   1db1e:	4628      	mov	r0, r5
   1db20:	310c      	adds	r1, #12
   1db22:	f7ef f99b 	bl	ce5c <strcmp>
   1db26:	e6de      	b.n	1d8e6 <pdn_interface_pdn_id_get+0x32>
   1db28:	4608      	mov	r0, r1
   1db2a:	f7ef f9a1 	bl	ce70 <strlen>
   1db2e:	4606      	mov	r6, r0
   1db30:	6820      	ldr	r0, [r4, #0]
   1db32:	300c      	adds	r0, #12
   1db34:	f7ef f99c 	bl	ce70 <strlen>
   1db38:	4286      	cmp	r6, r0
   1db3a:	f47f aece 	bne.w	1d8da <pdn_interface_pdn_id_get+0x26>
   1db3e:	6821      	ldr	r1, [r4, #0]
   1db40:	4628      	mov	r0, r5
   1db42:	310c      	adds	r1, #12
   1db44:	f7ef f98a 	bl	ce5c <strcmp>
   1db48:	e6c7      	b.n	1d8da <pdn_interface_pdn_id_get+0x26>
   1db4a:	bf00      	nop
   1db4c:	2002217c 	.word	0x2002217c
   1db50:	4628      	mov	r0, r5
   1db52:	f7ef f98d 	bl	ce70 <strlen>
   1db56:	4606      	mov	r6, r0
   1db58:	6920      	ldr	r0, [r4, #16]
   1db5a:	300c      	adds	r0, #12
   1db5c:	f7ef f988 	bl	ce70 <strlen>
   1db60:	4286      	cmp	r6, r0
   1db62:	f47f aed2 	bne.w	1d90a <pdn_interface_pdn_id_get+0x56>
   1db66:	6921      	ldr	r1, [r4, #16]
   1db68:	4628      	mov	r0, r5
   1db6a:	310c      	adds	r1, #12
   1db6c:	f7ef f976 	bl	ce5c <strcmp>
   1db70:	e6cb      	b.n	1d90a <pdn_interface_pdn_id_get+0x56>
   1db72:	4628      	mov	r0, r5
   1db74:	f7ef f97c 	bl	ce70 <strlen>
   1db78:	4606      	mov	r6, r0
   1db7a:	6a20      	ldr	r0, [r4, #32]
   1db7c:	300c      	adds	r0, #12
   1db7e:	f7ef f977 	bl	ce70 <strlen>
   1db82:	4286      	cmp	r6, r0
   1db84:	f47f aed9 	bne.w	1d93a <pdn_interface_pdn_id_get+0x86>
   1db88:	6a21      	ldr	r1, [r4, #32]
   1db8a:	4628      	mov	r0, r5
   1db8c:	310c      	adds	r1, #12
   1db8e:	f7ef f965 	bl	ce5c <strcmp>
   1db92:	e6d2      	b.n	1d93a <pdn_interface_pdn_id_get+0x86>
   1db94:	4628      	mov	r0, r5
   1db96:	f7ef f96b 	bl	ce70 <strlen>
   1db9a:	4606      	mov	r6, r0
   1db9c:	69e0      	ldr	r0, [r4, #28]
   1db9e:	300c      	adds	r0, #12
   1dba0:	f7ef f966 	bl	ce70 <strlen>
   1dba4:	4286      	cmp	r6, r0
   1dba6:	f47f aec2 	bne.w	1d92e <pdn_interface_pdn_id_get+0x7a>
   1dbaa:	69e1      	ldr	r1, [r4, #28]
   1dbac:	4628      	mov	r0, r5
   1dbae:	310c      	adds	r1, #12
   1dbb0:	f7ef f954 	bl	ce5c <strcmp>
   1dbb4:	e6bb      	b.n	1d92e <pdn_interface_pdn_id_get+0x7a>
   1dbb6:	4628      	mov	r0, r5
   1dbb8:	f7ef f95a 	bl	ce70 <strlen>
   1dbbc:	4606      	mov	r6, r0
   1dbbe:	69a0      	ldr	r0, [r4, #24]
   1dbc0:	300c      	adds	r0, #12
   1dbc2:	f7ef f955 	bl	ce70 <strlen>
   1dbc6:	4286      	cmp	r6, r0
   1dbc8:	f47f aeab 	bne.w	1d922 <pdn_interface_pdn_id_get+0x6e>
   1dbcc:	69a1      	ldr	r1, [r4, #24]
   1dbce:	4628      	mov	r0, r5
   1dbd0:	310c      	adds	r1, #12
   1dbd2:	f7ef f943 	bl	ce5c <strcmp>
   1dbd6:	e6a4      	b.n	1d922 <pdn_interface_pdn_id_get+0x6e>
   1dbd8:	4628      	mov	r0, r5
   1dbda:	f7ef f949 	bl	ce70 <strlen>
   1dbde:	4606      	mov	r6, r0
   1dbe0:	6960      	ldr	r0, [r4, #20]
   1dbe2:	300c      	adds	r0, #12
   1dbe4:	f7ef f944 	bl	ce70 <strlen>
   1dbe8:	4286      	cmp	r6, r0
   1dbea:	f47f ae94 	bne.w	1d916 <pdn_interface_pdn_id_get+0x62>
   1dbee:	6961      	ldr	r1, [r4, #20]
   1dbf0:	4628      	mov	r0, r5
   1dbf2:	310c      	adds	r1, #12
   1dbf4:	f7ef f932 	bl	ce5c <strcmp>
   1dbf8:	e68d      	b.n	1d916 <pdn_interface_pdn_id_get+0x62>
   1dbfa:	4628      	mov	r0, r5
   1dbfc:	f7ef f938 	bl	ce70 <strlen>
   1dc00:	4607      	mov	r7, r0
   1dc02:	68e0      	ldr	r0, [r4, #12]
   1dc04:	300c      	adds	r0, #12
   1dc06:	f7ef f933 	bl	ce70 <strlen>
   1dc0a:	4287      	cmp	r7, r0
   1dc0c:	f47f af09 	bne.w	1da22 <pdn_interface_pdn_id_get+0x16e>
   1dc10:	68e1      	ldr	r1, [r4, #12]
   1dc12:	4628      	mov	r0, r5
   1dc14:	310c      	adds	r1, #12
   1dc16:	f7ef f921 	bl	ce5c <strcmp>
   1dc1a:	2800      	cmp	r0, #0
   1dc1c:	f47f af01 	bne.w	1da22 <pdn_interface_pdn_id_get+0x16e>
   1dc20:	68e3      	ldr	r3, [r4, #12]
   1dc22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1dc24:	07d1      	lsls	r1, r2, #31
   1dc26:	f57f aefc 	bpl.w	1da22 <pdn_interface_pdn_id_get+0x16e>
   1dc2a:	6858      	ldr	r0, [r3, #4]
   1dc2c:	1c43      	adds	r3, r0, #1
   1dc2e:	f47f ae8c 	bne.w	1d94a <pdn_interface_pdn_id_get+0x96>
   1dc32:	4dc6      	ldr	r5, [pc, #792]	; (1df4c <pdn_interface_pdn_id_get+0x698>)
   1dc34:	4ac6      	ldr	r2, [pc, #792]	; (1df50 <pdn_interface_pdn_id_get+0x69c>)
   1dc36:	f44f 7180 	mov.w	r1, #256	; 0x100
   1dc3a:	4628      	mov	r0, r5
   1dc3c:	f004 fb04 	bl	22248 <sniprintf>
   1dc40:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1dc44:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1dc48:	681b      	ldr	r3, [r3, #0]
   1dc4a:	4ac2      	ldr	r2, [pc, #776]	; (1df54 <pdn_interface_pdn_id_get+0x6a0>)
   1dc4c:	4428      	add	r0, r5
   1dc4e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 1df5c <pdn_interface_pdn_id_get+0x6a8>
   1dc52:	f004 faf9 	bl	22248 <sniprintf>
   1dc56:	4628      	mov	r0, r5
   1dc58:	f8d8 9000 	ldr.w	r9, [r8]
   1dc5c:	2700      	movs	r7, #0
   1dc5e:	f7ef f907 	bl	ce70 <strlen>
   1dc62:	4629      	mov	r1, r5
   1dc64:	4602      	mov	r2, r0
   1dc66:	463b      	mov	r3, r7
   1dc68:	4648      	mov	r0, r9
   1dc6a:	9701      	str	r7, [sp, #4]
   1dc6c:	9700      	str	r7, [sp, #0]
   1dc6e:	f7fe ff27 	bl	1cac0 <at_interface_write>
   1dc72:	4681      	mov	r9, r0
   1dc74:	4628      	mov	r0, r5
   1dc76:	f7ef f8fb 	bl	ce70 <strlen>
   1dc7a:	4548      	cmp	r0, r9
   1dc7c:	f040 81e9 	bne.w	1e052 <pdn_interface_pdn_id_get+0x79e>
   1dc80:	463b      	mov	r3, r7
   1dc82:	f44f 7280 	mov.w	r2, #256	; 0x100
   1dc86:	e9cd 7700 	strd	r7, r7, [sp]
   1dc8a:	4629      	mov	r1, r5
   1dc8c:	f8d8 0000 	ldr.w	r0, [r8]
   1dc90:	f7ff f84c 	bl	1cd2c <at_interface_read>
   1dc94:	4607      	mov	r7, r0
   1dc96:	48b0      	ldr	r0, [pc, #704]	; (1df58 <pdn_interface_pdn_id_get+0x6a4>)
   1dc98:	f7ef f8ea 	bl	ce70 <strlen>
   1dc9c:	4287      	cmp	r7, r0
   1dc9e:	4602      	mov	r2, r0
   1dca0:	f2c0 81c7 	blt.w	1e032 <pdn_interface_pdn_id_get+0x77e>
   1dca4:	4629      	mov	r1, r5
   1dca6:	48ac      	ldr	r0, [pc, #688]	; (1df58 <pdn_interface_pdn_id_get+0x6a4>)
   1dca8:	f009 f84f 	bl	26d4a <strncmp>
   1dcac:	2800      	cmp	r0, #0
   1dcae:	f040 81c0 	bne.w	1e032 <pdn_interface_pdn_id_get+0x77e>
   1dcb2:	4629      	mov	r1, r5
   1dcb4:	4630      	mov	r0, r6
   1dcb6:	f7ff f91d 	bl	1cef4 <pdn_id_get_parser>
   1dcba:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1dcbe:	6858      	ldr	r0, [r3, #4]
   1dcc0:	e643      	b.n	1d94a <pdn_interface_pdn_id_get+0x96>
   1dcc2:	4628      	mov	r0, r5
   1dcc4:	f7ef f8d4 	bl	ce70 <strlen>
   1dcc8:	4606      	mov	r6, r0
   1dcca:	6920      	ldr	r0, [r4, #16]
   1dccc:	300c      	adds	r0, #12
   1dcce:	f7ef f8cf 	bl	ce70 <strlen>
   1dcd2:	4286      	cmp	r6, r0
   1dcd4:	f47f aeab 	bne.w	1da2e <pdn_interface_pdn_id_get+0x17a>
   1dcd8:	6921      	ldr	r1, [r4, #16]
   1dcda:	4628      	mov	r0, r5
   1dcdc:	310c      	adds	r1, #12
   1dcde:	f7ef f8bd 	bl	ce5c <strcmp>
   1dce2:	2800      	cmp	r0, #0
   1dce4:	f47f aea3 	bne.w	1da2e <pdn_interface_pdn_id_get+0x17a>
   1dce8:	6923      	ldr	r3, [r4, #16]
   1dcea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1dcec:	07d2      	lsls	r2, r2, #31
   1dcee:	f57f ae9e 	bpl.w	1da2e <pdn_interface_pdn_id_get+0x17a>
   1dcf2:	2604      	movs	r6, #4
   1dcf4:	e799      	b.n	1dc2a <pdn_interface_pdn_id_get+0x376>
   1dcf6:	4628      	mov	r0, r5
   1dcf8:	f7ef f8ba 	bl	ce70 <strlen>
   1dcfc:	4606      	mov	r6, r0
   1dcfe:	6960      	ldr	r0, [r4, #20]
   1dd00:	300c      	adds	r0, #12
   1dd02:	f7ef f8b5 	bl	ce70 <strlen>
   1dd06:	4286      	cmp	r6, r0
   1dd08:	f47f ae97 	bne.w	1da3a <pdn_interface_pdn_id_get+0x186>
   1dd0c:	6961      	ldr	r1, [r4, #20]
   1dd0e:	4628      	mov	r0, r5
   1dd10:	310c      	adds	r1, #12
   1dd12:	f7ef f8a3 	bl	ce5c <strcmp>
   1dd16:	2800      	cmp	r0, #0
   1dd18:	f47f ae8f 	bne.w	1da3a <pdn_interface_pdn_id_get+0x186>
   1dd1c:	6963      	ldr	r3, [r4, #20]
   1dd1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1dd20:	07d7      	lsls	r7, r2, #31
   1dd22:	f57f ae8a 	bpl.w	1da3a <pdn_interface_pdn_id_get+0x186>
   1dd26:	2605      	movs	r6, #5
   1dd28:	e77f      	b.n	1dc2a <pdn_interface_pdn_id_get+0x376>
   1dd2a:	4628      	mov	r0, r5
   1dd2c:	f7ef f8a0 	bl	ce70 <strlen>
   1dd30:	4606      	mov	r6, r0
   1dd32:	69a0      	ldr	r0, [r4, #24]
   1dd34:	300c      	adds	r0, #12
   1dd36:	f7ef f89b 	bl	ce70 <strlen>
   1dd3a:	4286      	cmp	r6, r0
   1dd3c:	f47f ae83 	bne.w	1da46 <pdn_interface_pdn_id_get+0x192>
   1dd40:	69a1      	ldr	r1, [r4, #24]
   1dd42:	4628      	mov	r0, r5
   1dd44:	310c      	adds	r1, #12
   1dd46:	f7ef f889 	bl	ce5c <strcmp>
   1dd4a:	2800      	cmp	r0, #0
   1dd4c:	f47f ae7b 	bne.w	1da46 <pdn_interface_pdn_id_get+0x192>
   1dd50:	69a3      	ldr	r3, [r4, #24]
   1dd52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1dd54:	07d6      	lsls	r6, r2, #31
   1dd56:	f57f ae76 	bpl.w	1da46 <pdn_interface_pdn_id_get+0x192>
   1dd5a:	2606      	movs	r6, #6
   1dd5c:	e765      	b.n	1dc2a <pdn_interface_pdn_id_get+0x376>
   1dd5e:	4628      	mov	r0, r5
   1dd60:	f7ef f886 	bl	ce70 <strlen>
   1dd64:	4607      	mov	r7, r0
   1dd66:	68e0      	ldr	r0, [r4, #12]
   1dd68:	300c      	adds	r0, #12
   1dd6a:	f7ef f881 	bl	ce70 <strlen>
   1dd6e:	4287      	cmp	r7, r0
   1dd70:	f47f ae05 	bne.w	1d97e <pdn_interface_pdn_id_get+0xca>
   1dd74:	68e1      	ldr	r1, [r4, #12]
   1dd76:	4628      	mov	r0, r5
   1dd78:	310c      	adds	r1, #12
   1dd7a:	f7ef f86f 	bl	ce5c <strcmp>
   1dd7e:	2800      	cmp	r0, #0
   1dd80:	f47f adfd 	bne.w	1d97e <pdn_interface_pdn_id_get+0xca>
   1dd84:	68e3      	ldr	r3, [r4, #12]
   1dd86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1dd88:	0791      	lsls	r1, r2, #30
   1dd8a:	f53f af4e 	bmi.w	1dc2a <pdn_interface_pdn_id_get+0x376>
   1dd8e:	e5f6      	b.n	1d97e <pdn_interface_pdn_id_get+0xca>
   1dd90:	4628      	mov	r0, r5
   1dd92:	f7ef f86d 	bl	ce70 <strlen>
   1dd96:	4606      	mov	r6, r0
   1dd98:	6920      	ldr	r0, [r4, #16]
   1dd9a:	300c      	adds	r0, #12
   1dd9c:	f7ef f868 	bl	ce70 <strlen>
   1dda0:	4286      	cmp	r6, r0
   1dda2:	f47f adf2 	bne.w	1d98a <pdn_interface_pdn_id_get+0xd6>
   1dda6:	6921      	ldr	r1, [r4, #16]
   1dda8:	4628      	mov	r0, r5
   1ddaa:	310c      	adds	r1, #12
   1ddac:	f7ef f856 	bl	ce5c <strcmp>
   1ddb0:	2800      	cmp	r0, #0
   1ddb2:	f47f adea 	bne.w	1d98a <pdn_interface_pdn_id_get+0xd6>
   1ddb6:	6923      	ldr	r3, [r4, #16]
   1ddb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1ddba:	0792      	lsls	r2, r2, #30
   1ddbc:	d499      	bmi.n	1dcf2 <pdn_interface_pdn_id_get+0x43e>
   1ddbe:	e5e4      	b.n	1d98a <pdn_interface_pdn_id_get+0xd6>
   1ddc0:	4628      	mov	r0, r5
   1ddc2:	f7ef f855 	bl	ce70 <strlen>
   1ddc6:	4606      	mov	r6, r0
   1ddc8:	6960      	ldr	r0, [r4, #20]
   1ddca:	300c      	adds	r0, #12
   1ddcc:	f7ef f850 	bl	ce70 <strlen>
   1ddd0:	4286      	cmp	r6, r0
   1ddd2:	f47f ade0 	bne.w	1d996 <pdn_interface_pdn_id_get+0xe2>
   1ddd6:	6961      	ldr	r1, [r4, #20]
   1ddd8:	4628      	mov	r0, r5
   1ddda:	310c      	adds	r1, #12
   1dddc:	f7ef f83e 	bl	ce5c <strcmp>
   1dde0:	2800      	cmp	r0, #0
   1dde2:	f47f add8 	bne.w	1d996 <pdn_interface_pdn_id_get+0xe2>
   1dde6:	6963      	ldr	r3, [r4, #20]
   1dde8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1ddea:	0797      	lsls	r7, r2, #30
   1ddec:	d49b      	bmi.n	1dd26 <pdn_interface_pdn_id_get+0x472>
   1ddee:	e5d2      	b.n	1d996 <pdn_interface_pdn_id_get+0xe2>
   1ddf0:	4628      	mov	r0, r5
   1ddf2:	f7ef f83d 	bl	ce70 <strlen>
   1ddf6:	4606      	mov	r6, r0
   1ddf8:	69a0      	ldr	r0, [r4, #24]
   1ddfa:	300c      	adds	r0, #12
   1ddfc:	f7ef f838 	bl	ce70 <strlen>
   1de00:	4286      	cmp	r6, r0
   1de02:	f47f adce 	bne.w	1d9a2 <pdn_interface_pdn_id_get+0xee>
   1de06:	69a1      	ldr	r1, [r4, #24]
   1de08:	4628      	mov	r0, r5
   1de0a:	310c      	adds	r1, #12
   1de0c:	f7ef f826 	bl	ce5c <strcmp>
   1de10:	2800      	cmp	r0, #0
   1de12:	f47f adc6 	bne.w	1d9a2 <pdn_interface_pdn_id_get+0xee>
   1de16:	69a3      	ldr	r3, [r4, #24]
   1de18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1de1a:	0796      	lsls	r6, r2, #30
   1de1c:	d49d      	bmi.n	1dd5a <pdn_interface_pdn_id_get+0x4a6>
   1de1e:	e5c0      	b.n	1d9a2 <pdn_interface_pdn_id_get+0xee>
   1de20:	4628      	mov	r0, r5
   1de22:	f7ef f825 	bl	ce70 <strlen>
   1de26:	4606      	mov	r6, r0
   1de28:	69e0      	ldr	r0, [r4, #28]
   1de2a:	300c      	adds	r0, #12
   1de2c:	f7ef f820 	bl	ce70 <strlen>
   1de30:	4286      	cmp	r6, r0
   1de32:	f47f adbc 	bne.w	1d9ae <pdn_interface_pdn_id_get+0xfa>
   1de36:	69e1      	ldr	r1, [r4, #28]
   1de38:	4628      	mov	r0, r5
   1de3a:	310c      	adds	r1, #12
   1de3c:	f7ef f80e 	bl	ce5c <strcmp>
   1de40:	2800      	cmp	r0, #0
   1de42:	f47f adb4 	bne.w	1d9ae <pdn_interface_pdn_id_get+0xfa>
   1de46:	69e3      	ldr	r3, [r4, #28]
   1de48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1de4a:	0790      	lsls	r0, r2, #30
   1de4c:	f57f adaf 	bpl.w	1d9ae <pdn_interface_pdn_id_get+0xfa>
   1de50:	2607      	movs	r6, #7
   1de52:	e6ea      	b.n	1dc2a <pdn_interface_pdn_id_get+0x376>
   1de54:	4628      	mov	r0, r5
   1de56:	f7ef f80b 	bl	ce70 <strlen>
   1de5a:	4606      	mov	r6, r0
   1de5c:	6a20      	ldr	r0, [r4, #32]
   1de5e:	300c      	adds	r0, #12
   1de60:	f7ef f806 	bl	ce70 <strlen>
   1de64:	4286      	cmp	r6, r0
   1de66:	f47f ada8 	bne.w	1d9ba <pdn_interface_pdn_id_get+0x106>
   1de6a:	6a21      	ldr	r1, [r4, #32]
   1de6c:	4628      	mov	r0, r5
   1de6e:	310c      	adds	r1, #12
   1de70:	f7ee fff4 	bl	ce5c <strcmp>
   1de74:	2800      	cmp	r0, #0
   1de76:	f47f ada0 	bne.w	1d9ba <pdn_interface_pdn_id_get+0x106>
   1de7a:	6a23      	ldr	r3, [r4, #32]
   1de7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1de7e:	0791      	lsls	r1, r2, #30
   1de80:	f57f ad9b 	bpl.w	1d9ba <pdn_interface_pdn_id_get+0x106>
   1de84:	2608      	movs	r6, #8
   1de86:	e6d0      	b.n	1dc2a <pdn_interface_pdn_id_get+0x376>
   1de88:	4628      	mov	r0, r5
   1de8a:	f7ee fff1 	bl	ce70 <strlen>
   1de8e:	4606      	mov	r6, r0
   1de90:	69e0      	ldr	r0, [r4, #28]
   1de92:	300c      	adds	r0, #12
   1de94:	f7ee ffec 	bl	ce70 <strlen>
   1de98:	4286      	cmp	r6, r0
   1de9a:	f47f adda 	bne.w	1da52 <pdn_interface_pdn_id_get+0x19e>
   1de9e:	69e1      	ldr	r1, [r4, #28]
   1dea0:	4628      	mov	r0, r5
   1dea2:	310c      	adds	r1, #12
   1dea4:	f7ee ffda 	bl	ce5c <strcmp>
   1dea8:	2800      	cmp	r0, #0
   1deaa:	f47f add2 	bne.w	1da52 <pdn_interface_pdn_id_get+0x19e>
   1deae:	69e3      	ldr	r3, [r4, #28]
   1deb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1deb2:	07d0      	lsls	r0, r2, #31
   1deb4:	d4cc      	bmi.n	1de50 <pdn_interface_pdn_id_get+0x59c>
   1deb6:	e5cc      	b.n	1da52 <pdn_interface_pdn_id_get+0x19e>
   1deb8:	4628      	mov	r0, r5
   1deba:	f7ee ffd9 	bl	ce70 <strlen>
   1debe:	4606      	mov	r6, r0
   1dec0:	6a20      	ldr	r0, [r4, #32]
   1dec2:	300c      	adds	r0, #12
   1dec4:	f7ee ffd4 	bl	ce70 <strlen>
   1dec8:	4286      	cmp	r6, r0
   1deca:	f47f adc8 	bne.w	1da5e <pdn_interface_pdn_id_get+0x1aa>
   1dece:	6a21      	ldr	r1, [r4, #32]
   1ded0:	4628      	mov	r0, r5
   1ded2:	310c      	adds	r1, #12
   1ded4:	f7ee ffc2 	bl	ce5c <strcmp>
   1ded8:	2800      	cmp	r0, #0
   1deda:	f47f adc0 	bne.w	1da5e <pdn_interface_pdn_id_get+0x1aa>
   1dede:	6a23      	ldr	r3, [r4, #32]
   1dee0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1dee2:	07d1      	lsls	r1, r2, #31
   1dee4:	d4ce      	bmi.n	1de84 <pdn_interface_pdn_id_get+0x5d0>
   1dee6:	e5ba      	b.n	1da5e <pdn_interface_pdn_id_get+0x1aa>
   1dee8:	4628      	mov	r0, r5
   1deea:	f7ee ffc1 	bl	ce70 <strlen>
   1deee:	4606      	mov	r6, r0
   1def0:	68a0      	ldr	r0, [r4, #8]
   1def2:	300c      	adds	r0, #12
   1def4:	f7ee ffbc 	bl	ce70 <strlen>
   1def8:	4286      	cmp	r6, r0
   1defa:	f47f ad8c 	bne.w	1da16 <pdn_interface_pdn_id_get+0x162>
   1defe:	68a1      	ldr	r1, [r4, #8]
   1df00:	4628      	mov	r0, r5
   1df02:	310c      	adds	r1, #12
   1df04:	f7ee ffaa 	bl	ce5c <strcmp>
   1df08:	2800      	cmp	r0, #0
   1df0a:	f47f ad84 	bne.w	1da16 <pdn_interface_pdn_id_get+0x162>
   1df0e:	68a3      	ldr	r3, [r4, #8]
   1df10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1df12:	07d0      	lsls	r0, r2, #31
   1df14:	f57f ad7f 	bpl.w	1da16 <pdn_interface_pdn_id_get+0x162>
   1df18:	2602      	movs	r6, #2
   1df1a:	e686      	b.n	1dc2a <pdn_interface_pdn_id_get+0x376>
   1df1c:	4628      	mov	r0, r5
   1df1e:	f7ee ffa7 	bl	ce70 <strlen>
   1df22:	4606      	mov	r6, r0
   1df24:	68a0      	ldr	r0, [r4, #8]
   1df26:	300c      	adds	r0, #12
   1df28:	f7ee ffa2 	bl	ce70 <strlen>
   1df2c:	4286      	cmp	r6, r0
   1df2e:	f47f ad20 	bne.w	1d972 <pdn_interface_pdn_id_get+0xbe>
   1df32:	68a1      	ldr	r1, [r4, #8]
   1df34:	4628      	mov	r0, r5
   1df36:	310c      	adds	r1, #12
   1df38:	f7ee ff90 	bl	ce5c <strcmp>
   1df3c:	2800      	cmp	r0, #0
   1df3e:	f47f ad18 	bne.w	1d972 <pdn_interface_pdn_id_get+0xbe>
   1df42:	68a3      	ldr	r3, [r4, #8]
   1df44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1df46:	0790      	lsls	r0, r2, #30
   1df48:	d4e6      	bmi.n	1df18 <pdn_interface_pdn_id_get+0x664>
   1df4a:	e512      	b.n	1d972 <pdn_interface_pdn_id_get+0xbe>
   1df4c:	2002207c 	.word	0x2002207c
   1df50:	000282f0 	.word	0x000282f0
   1df54:	000282ec 	.word	0x000282ec
   1df58:	00028300 	.word	0x00028300
   1df5c:	20022078 	.word	0x20022078
   1df60:	4628      	mov	r0, r5
   1df62:	f7ee ff85 	bl	ce70 <strlen>
   1df66:	4606      	mov	r6, r0
   1df68:	6860      	ldr	r0, [r4, #4]
   1df6a:	300c      	adds	r0, #12
   1df6c:	f7ee ff80 	bl	ce70 <strlen>
   1df70:	4286      	cmp	r6, r0
   1df72:	f47f acf8 	bne.w	1d966 <pdn_interface_pdn_id_get+0xb2>
   1df76:	6861      	ldr	r1, [r4, #4]
   1df78:	4628      	mov	r0, r5
   1df7a:	310c      	adds	r1, #12
   1df7c:	f7ee ff6e 	bl	ce5c <strcmp>
   1df80:	2800      	cmp	r0, #0
   1df82:	f47f acf0 	bne.w	1d966 <pdn_interface_pdn_id_get+0xb2>
   1df86:	6863      	ldr	r3, [r4, #4]
   1df88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1df8a:	0796      	lsls	r6, r2, #30
   1df8c:	f57f aceb 	bpl.w	1d966 <pdn_interface_pdn_id_get+0xb2>
   1df90:	2601      	movs	r6, #1
   1df92:	e64a      	b.n	1dc2a <pdn_interface_pdn_id_get+0x376>
   1df94:	4628      	mov	r0, r5
   1df96:	f7ee ff6b 	bl	ce70 <strlen>
   1df9a:	4606      	mov	r6, r0
   1df9c:	6860      	ldr	r0, [r4, #4]
   1df9e:	300c      	adds	r0, #12
   1dfa0:	f7ee ff66 	bl	ce70 <strlen>
   1dfa4:	4286      	cmp	r6, r0
   1dfa6:	f47f ad30 	bne.w	1da0a <pdn_interface_pdn_id_get+0x156>
   1dfaa:	6861      	ldr	r1, [r4, #4]
   1dfac:	4628      	mov	r0, r5
   1dfae:	310c      	adds	r1, #12
   1dfb0:	f7ee ff54 	bl	ce5c <strcmp>
   1dfb4:	2800      	cmp	r0, #0
   1dfb6:	f47f ad28 	bne.w	1da0a <pdn_interface_pdn_id_get+0x156>
   1dfba:	6863      	ldr	r3, [r4, #4]
   1dfbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1dfbe:	07d6      	lsls	r6, r2, #31
   1dfc0:	d4e6      	bmi.n	1df90 <pdn_interface_pdn_id_get+0x6dc>
   1dfc2:	e522      	b.n	1da0a <pdn_interface_pdn_id_get+0x156>
   1dfc4:	4608      	mov	r0, r1
   1dfc6:	f7ee ff53 	bl	ce70 <strlen>
   1dfca:	4606      	mov	r6, r0
   1dfcc:	6820      	ldr	r0, [r4, #0]
   1dfce:	300c      	adds	r0, #12
   1dfd0:	f7ee ff4e 	bl	ce70 <strlen>
   1dfd4:	4286      	cmp	r6, r0
   1dfd6:	f47f acc0 	bne.w	1d95a <pdn_interface_pdn_id_get+0xa6>
   1dfda:	6821      	ldr	r1, [r4, #0]
   1dfdc:	4628      	mov	r0, r5
   1dfde:	310c      	adds	r1, #12
   1dfe0:	f7ee ff3c 	bl	ce5c <strcmp>
   1dfe4:	4606      	mov	r6, r0
   1dfe6:	2800      	cmp	r0, #0
   1dfe8:	f47f acb7 	bne.w	1d95a <pdn_interface_pdn_id_get+0xa6>
   1dfec:	6823      	ldr	r3, [r4, #0]
   1dfee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1dff0:	0797      	lsls	r7, r2, #30
   1dff2:	f53f ae1a 	bmi.w	1dc2a <pdn_interface_pdn_id_get+0x376>
   1dff6:	e4b0      	b.n	1d95a <pdn_interface_pdn_id_get+0xa6>
   1dff8:	4608      	mov	r0, r1
   1dffa:	f7ee ff39 	bl	ce70 <strlen>
   1dffe:	4606      	mov	r6, r0
   1e000:	6820      	ldr	r0, [r4, #0]
   1e002:	300c      	adds	r0, #12
   1e004:	f7ee ff34 	bl	ce70 <strlen>
   1e008:	4286      	cmp	r6, r0
   1e00a:	f47f acf8 	bne.w	1d9fe <pdn_interface_pdn_id_get+0x14a>
   1e00e:	6821      	ldr	r1, [r4, #0]
   1e010:	4628      	mov	r0, r5
   1e012:	310c      	adds	r1, #12
   1e014:	f7ee ff22 	bl	ce5c <strcmp>
   1e018:	4606      	mov	r6, r0
   1e01a:	2800      	cmp	r0, #0
   1e01c:	f47f acef 	bne.w	1d9fe <pdn_interface_pdn_id_get+0x14a>
   1e020:	6823      	ldr	r3, [r4, #0]
   1e022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e024:	07d7      	lsls	r7, r2, #31
   1e026:	f53f ae00 	bmi.w	1dc2a <pdn_interface_pdn_id_get+0x376>
   1e02a:	e4e8      	b.n	1d9fe <pdn_interface_pdn_id_get+0x14a>
   1e02c:	f04f 30ff 	mov.w	r0, #4294967295
   1e030:	4770      	bx	lr
   1e032:	480b      	ldr	r0, [pc, #44]	; (1e060 <pdn_interface_pdn_id_get+0x7ac>)
   1e034:	f7ee ff1c 	bl	ce70 <strlen>
   1e038:	490a      	ldr	r1, [pc, #40]	; (1e064 <pdn_interface_pdn_id_get+0x7b0>)
   1e03a:	4602      	mov	r2, r0
   1e03c:	4808      	ldr	r0, [pc, #32]	; (1e060 <pdn_interface_pdn_id_get+0x7ac>)
   1e03e:	f008 fe84 	bl	26d4a <strncmp>
   1e042:	b930      	cbnz	r0, 1e052 <pdn_interface_pdn_id_get+0x79e>
   1e044:	2008      	movs	r0, #8
   1e046:	f7f7 fde7 	bl	15c18 <bsd_os_errno_set>
   1e04a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1e04e:	6858      	ldr	r0, [r3, #4]
   1e050:	e47b      	b.n	1d94a <pdn_interface_pdn_id_get+0x96>
   1e052:	2005      	movs	r0, #5
   1e054:	f7f7 fde0 	bl	15c18 <bsd_os_errno_set>
   1e058:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1e05c:	6858      	ldr	r0, [r3, #4]
   1e05e:	e474      	b.n	1d94a <pdn_interface_pdn_id_get+0x96>
   1e060:	00028344 	.word	0x00028344
   1e064:	2002207c 	.word	0x2002207c

0001e068 <bsd_platform_error_handler>:
   1e068:	b508      	push	{r3, lr}
   1e06a:	f7ef fd31 	bl	dad0 <bsd_recoverable_error_handler>
   1e06e:	bd08      	pop	{r3, pc}

0001e070 <bsd_init>:
   1e070:	b160      	cbz	r0, 1e08c <bsd_init+0x1c>
   1e072:	b510      	push	{r4, lr}
   1e074:	4c07      	ldr	r4, [pc, #28]	; (1e094 <bsd_init+0x24>)
   1e076:	7823      	ldrb	r3, [r4, #0]
   1e078:	b92b      	cbnz	r3, 1e086 <bsd_init+0x16>
   1e07a:	f000 f829 	bl	1e0d0 <bsd_platform_init>
   1e07e:	b908      	cbnz	r0, 1e084 <bsd_init+0x14>
   1e080:	2301      	movs	r3, #1
   1e082:	7023      	strb	r3, [r4, #0]
   1e084:	bd10      	pop	{r4, pc}
   1e086:	f04f 30ff 	mov.w	r0, #4294967295
   1e08a:	bd10      	pop	{r4, pc}
   1e08c:	f04f 30ff 	mov.w	r0, #4294967295
   1e090:	4770      	bx	lr
   1e092:	bf00      	nop
   1e094:	2002a090 	.word	0x2002a090

0001e098 <bsd_shutdown>:
   1e098:	b510      	push	{r4, lr}
   1e09a:	4c05      	ldr	r4, [pc, #20]	; (1e0b0 <bsd_shutdown+0x18>)
   1e09c:	7823      	ldrb	r3, [r4, #0]
   1e09e:	b123      	cbz	r3, 1e0aa <bsd_shutdown+0x12>
   1e0a0:	f000 f89a 	bl	1e1d8 <bsd_platform_shutdown>
   1e0a4:	b900      	cbnz	r0, 1e0a8 <bsd_shutdown+0x10>
   1e0a6:	7020      	strb	r0, [r4, #0]
   1e0a8:	bd10      	pop	{r4, pc}
   1e0aa:	f04f 30ff 	mov.w	r0, #4294967295
   1e0ae:	bd10      	pop	{r4, pc}
   1e0b0:	2002a090 	.word	0x2002a090

0001e0b4 <unimplemented_method>:
   1e0b4:	b40f      	push	{r0, r1, r2, r3}
   1e0b6:	b508      	push	{r3, lr}
   1e0b8:	202d      	movs	r0, #45	; 0x2d
   1e0ba:	f7f7 fdad 	bl	15c18 <bsd_os_errno_set>
   1e0be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e0c2:	f04f 30ff 	mov.w	r0, #4294967295
   1e0c6:	b004      	add	sp, #16
   1e0c8:	4770      	bx	lr
   1e0ca:	bf00      	nop

0001e0cc <rpc_transport_ipc_fault_handler>:
   1e0cc:	f7ff bfcc 	b.w	1e068 <bsd_platform_error_handler>

0001e0d0 <bsd_platform_init>:
   1e0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0d2:	f04f 0c00 	mov.w	ip, #0
   1e0d6:	f247 0660 	movw	r6, #28768	; 0x7060
   1e0da:	f24b 0260 	movw	r2, #45152	; 0xb060
   1e0de:	6843      	ldr	r3, [r0, #4]
   1e0e0:	4d3a      	ldr	r5, [pc, #232]	; (1e1cc <bsd_platform_init+0xfc>)
   1e0e2:	4607      	mov	r7, r0
   1e0e4:	602b      	str	r3, [r5, #0]
   1e0e6:	7801      	ldrb	r1, [r0, #0]
   1e0e8:	2006      	movs	r0, #6
   1e0ea:	4561      	cmp	r1, ip
   1e0ec:	bf08      	it	eq
   1e0ee:	4632      	moveq	r2, r6
   1e0f0:	4413      	add	r3, r2
   1e0f2:	4c37      	ldr	r4, [pc, #220]	; (1e1d0 <bsd_platform_init+0x100>)
   1e0f4:	60ab      	str	r3, [r5, #8]
   1e0f6:	68b9      	ldr	r1, [r7, #8]
   1e0f8:	6063      	str	r3, [r4, #4]
   1e0fa:	4b36      	ldr	r3, [pc, #216]	; (1e1d4 <bsd_platform_init+0x104>)
   1e0fc:	b093      	sub	sp, #76	; 0x4c
   1e0fe:	606a      	str	r2, [r5, #4]
   1e100:	f8a4 c000 	strh.w	ip, [r4]
   1e104:	1a8a      	subs	r2, r1, r2
   1e106:	60ea      	str	r2, [r5, #12]
   1e108:	60a2      	str	r2, [r4, #8]
   1e10a:	81a0      	strh	r0, [r4, #12]
   1e10c:	6123      	str	r3, [r4, #16]
   1e10e:	f001 f8c3 	bl	1f298 <nrf_mem_init>
   1e112:	2800      	cmp	r0, #0
   1e114:	d156      	bne.n	1e1c4 <bsd_platform_init+0xf4>
   1e116:	4621      	mov	r1, r4
   1e118:	a801      	add	r0, sp, #4
   1e11a:	f001 f931 	bl	1f380 <nrf_mem_register>
   1e11e:	2800      	cmp	r0, #0
   1e120:	d150      	bne.n	1e1c4 <bsd_platform_init+0xf4>
   1e122:	f7f7 ff09 	bl	15f38 <bsd_os_init>
   1e126:	f7fd fc7f 	bl	1ba28 <rpc_framework_init>
   1e12a:	2800      	cmp	r0, #0
   1e12c:	d14a      	bne.n	1e1c4 <bsd_platform_init+0xf4>
   1e12e:	783a      	ldrb	r2, [r7, #0]
   1e130:	682b      	ldr	r3, [r5, #0]
   1e132:	bb32      	cbnz	r2, 1e182 <bsd_platform_init+0xb2>
   1e134:	4606      	mov	r6, r0
   1e136:	2220      	movs	r2, #32
   1e138:	2408      	movs	r4, #8
   1e13a:	2500      	movs	r5, #0
   1e13c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   1e140:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   1e144:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   1e148:	4411      	add	r1, r2
   1e14a:	9302      	str	r3, [sp, #8]
   1e14c:	e9cd 6008 	strd	r6, r0, [sp, #32]
   1e150:	910c      	str	r1, [sp, #48]	; 0x30
   1e152:	9203      	str	r2, [sp, #12]
   1e154:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1e158:	9205      	str	r2, [sp, #20]
   1e15a:	9207      	str	r2, [sp, #28]
   1e15c:	eb0d 0004 	add.w	r0, sp, r4
   1e160:	189a      	adds	r2, r3, r2
   1e162:	3360      	adds	r3, #96	; 0x60
   1e164:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1e168:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1e16c:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   1e170:	940f      	str	r4, [sp, #60]	; 0x3c
   1e172:	9104      	str	r1, [sp, #16]
   1e174:	9206      	str	r2, [sp, #24]
   1e176:	930a      	str	r3, [sp, #40]	; 0x28
   1e178:	f7fa fdc0 	bl	18cfc <rpc_transport_ipc_init>
   1e17c:	b128      	cbz	r0, 1e18a <bsd_platform_init+0xba>
   1e17e:	b013      	add	sp, #76	; 0x4c
   1e180:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e182:	441e      	add	r6, r3
   1e184:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1e188:	e7d5      	b.n	1e136 <bsd_platform_init+0x66>
   1e18a:	f001 fd39 	bl	1fc00 <interface_init>
   1e18e:	b9c8      	cbnz	r0, 1e1c4 <bsd_platform_init+0xf4>
   1e190:	f7fe fd0e 	bl	1cbb0 <at_interface_init>
   1e194:	b9b0      	cbnz	r0, 1e1c4 <bsd_platform_init+0xf4>
   1e196:	f7fc f88d 	bl	1a2b4 <ip_interface_init>
   1e19a:	b998      	cbnz	r0, 1e1c4 <bsd_platform_init+0xf4>
   1e19c:	f7fb fbc0 	bl	19920 <tls_interface_init>
   1e1a0:	b980      	cbnz	r0, 1e1c4 <bsd_platform_init+0xf4>
   1e1a2:	f001 fa49 	bl	1f638 <mfu_interface_init>
   1e1a6:	b968      	cbnz	r0, 1e1c4 <bsd_platform_init+0xf4>
   1e1a8:	f7fe fefc 	bl	1cfa4 <pdn_interface_init>
   1e1ac:	b950      	cbnz	r0, 1e1c4 <bsd_platform_init+0xf4>
   1e1ae:	f7fe fb69 	bl	1c884 <gnss_interface_init>
   1e1b2:	b938      	cbnz	r0, 1e1c4 <bsd_platform_init+0xf4>
   1e1b4:	f7f9 ffe0 	bl	18178 <logobj_interface_init>
   1e1b8:	1b40      	subs	r0, r0, r5
   1e1ba:	bf18      	it	ne
   1e1bc:	2001      	movne	r0, #1
   1e1be:	4240      	negs	r0, r0
   1e1c0:	b013      	add	sp, #76	; 0x4c
   1e1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1c4:	f04f 30ff 	mov.w	r0, #4294967295
   1e1c8:	b013      	add	sp, #76	; 0x4c
   1e1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1cc:	200221b8 	.word	0x200221b8
   1e1d0:	200221a4 	.word	0x200221a4
   1e1d4:	00028498 	.word	0x00028498

0001e1d8 <bsd_platform_shutdown>:
   1e1d8:	b508      	push	{r3, lr}
   1e1da:	f001 ff07 	bl	1ffec <interface_shutdown>
   1e1de:	f7fb fad3 	bl	19788 <rpc_transport_ipc_request_shutdown>
   1e1e2:	f7fb f8e3 	bl	193ac <rpc_transport_ipc_shutdown_done>
   1e1e6:	2800      	cmp	r0, #0
   1e1e8:	d0fb      	beq.n	1e1e2 <bsd_platform_shutdown+0xa>
   1e1ea:	2000      	movs	r0, #0
   1e1ec:	bd08      	pop	{r3, pc}
   1e1ee:	bf00      	nop

0001e1f0 <bsd_platform_af_method_table_get>:
   1e1f0:	2805      	cmp	r0, #5
   1e1f2:	d02a      	beq.n	1e24a <bsd_platform_af_method_table_get+0x5a>
   1e1f4:	b508      	push	{r3, lr}
   1e1f6:	d914      	bls.n	1e222 <bsd_platform_af_method_table_get+0x32>
   1e1f8:	280a      	cmp	r0, #10
   1e1fa:	d016      	beq.n	1e22a <bsd_platform_af_method_table_get+0x3a>
   1e1fc:	2866      	cmp	r0, #102	; 0x66
   1e1fe:	d11f      	bne.n	1e240 <bsd_platform_af_method_table_get+0x50>
   1e200:	f240 2302 	movw	r3, #514	; 0x202
   1e204:	429a      	cmp	r2, r3
   1e206:	d035      	beq.n	1e274 <bsd_platform_af_method_table_get+0x84>
   1e208:	f240 2305 	movw	r3, #517	; 0x205
   1e20c:	429a      	cmp	r2, r3
   1e20e:	d035      	beq.n	1e27c <bsd_platform_af_method_table_get+0x8c>
   1e210:	f240 2301 	movw	r3, #513	; 0x201
   1e214:	429a      	cmp	r2, r3
   1e216:	d02f      	beq.n	1e278 <bsd_platform_af_method_table_get+0x88>
   1e218:	202b      	movs	r0, #43	; 0x2b
   1e21a:	f7f7 fcfd 	bl	15c18 <bsd_os_errno_set>
   1e21e:	2000      	movs	r0, #0
   1e220:	bd08      	pop	{r3, pc}
   1e222:	2801      	cmp	r0, #1
   1e224:	d016      	beq.n	1e254 <bsd_platform_af_method_table_get+0x64>
   1e226:	2802      	cmp	r0, #2
   1e228:	d10a      	bne.n	1e240 <bsd_platform_af_method_table_get+0x50>
   1e22a:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1e22e:	d21a      	bcs.n	1e266 <bsd_platform_af_method_table_get+0x76>
   1e230:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1e234:	d21a      	bcs.n	1e26c <bsd_platform_af_method_table_get+0x7c>
   1e236:	3a01      	subs	r2, #1
   1e238:	2a01      	cmp	r2, #1
   1e23a:	d8ed      	bhi.n	1e218 <bsd_platform_af_method_table_get+0x28>
   1e23c:	4810      	ldr	r0, [pc, #64]	; (1e280 <bsd_platform_af_method_table_get+0x90>)
   1e23e:	bd08      	pop	{r3, pc}
   1e240:	2016      	movs	r0, #22
   1e242:	f7f7 fce9 	bl	15c18 <bsd_os_errno_set>
   1e246:	2000      	movs	r0, #0
   1e248:	bd08      	pop	{r3, pc}
   1e24a:	2903      	cmp	r1, #3
   1e24c:	480d      	ldr	r0, [pc, #52]	; (1e284 <bsd_platform_af_method_table_get+0x94>)
   1e24e:	bf18      	it	ne
   1e250:	2000      	movne	r0, #0
   1e252:	4770      	bx	lr
   1e254:	f240 2303 	movw	r3, #515	; 0x203
   1e258:	429a      	cmp	r2, r3
   1e25a:	d009      	beq.n	1e270 <bsd_platform_af_method_table_get+0x80>
   1e25c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1e260:	d1da      	bne.n	1e218 <bsd_platform_af_method_table_get+0x28>
   1e262:	4809      	ldr	r0, [pc, #36]	; (1e288 <bsd_platform_af_method_table_get+0x98>)
   1e264:	bd08      	pop	{r3, pc}
   1e266:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1e26a:	d1d5      	bne.n	1e218 <bsd_platform_af_method_table_get+0x28>
   1e26c:	4807      	ldr	r0, [pc, #28]	; (1e28c <bsd_platform_af_method_table_get+0x9c>)
   1e26e:	bd08      	pop	{r3, pc}
   1e270:	4807      	ldr	r0, [pc, #28]	; (1e290 <bsd_platform_af_method_table_get+0xa0>)
   1e272:	bd08      	pop	{r3, pc}
   1e274:	4807      	ldr	r0, [pc, #28]	; (1e294 <bsd_platform_af_method_table_get+0xa4>)
   1e276:	bd08      	pop	{r3, pc}
   1e278:	4807      	ldr	r0, [pc, #28]	; (1e298 <bsd_platform_af_method_table_get+0xa8>)
   1e27a:	bd08      	pop	{r3, pc}
   1e27c:	4807      	ldr	r0, [pc, #28]	; (1e29c <bsd_platform_af_method_table_get+0xac>)
   1e27e:	bd08      	pop	{r3, pc}
   1e280:	00028380 	.word	0x00028380
   1e284:	00028470 	.word	0x00028470
   1e288:	00028420 	.word	0x00028420
   1e28c:	000283a8 	.word	0x000283a8
   1e290:	000283d0 	.word	0x000283d0
   1e294:	000283f8 	.word	0x000283f8
   1e298:	00028358 	.word	0x00028358
   1e29c:	00028448 	.word	0x00028448

0001e2a0 <bsd_platform_fd_method_table_get>:
   1e2a0:	b538      	push	{r3, r4, r5, lr}
   1e2a2:	4605      	mov	r5, r0
   1e2a4:	f001 fdea 	bl	1fe7c <interface_socket_from_handle_get>
   1e2a8:	4604      	mov	r4, r0
   1e2aa:	b960      	cbnz	r0, 1e2c6 <bsd_platform_fd_method_table_get+0x26>
   1e2ac:	4b2c      	ldr	r3, [pc, #176]	; (1e360 <bsd_platform_fd_method_table_get+0xc0>)
   1e2ae:	429d      	cmp	r5, r3
   1e2b0:	d02f      	beq.n	1e312 <bsd_platform_fd_method_table_get+0x72>
   1e2b2:	0c2b      	lsrs	r3, r5, #16
   1e2b4:	4a2b      	ldr	r2, [pc, #172]	; (1e364 <bsd_platform_fd_method_table_get+0xc4>)
   1e2b6:	041b      	lsls	r3, r3, #16
   1e2b8:	4293      	cmp	r3, r2
   1e2ba:	d03d      	beq.n	1e338 <bsd_platform_fd_method_table_get+0x98>
   1e2bc:	4b2a      	ldr	r3, [pc, #168]	; (1e368 <bsd_platform_fd_method_table_get+0xc8>)
   1e2be:	429d      	cmp	r5, r3
   1e2c0:	d149      	bne.n	1e356 <bsd_platform_fd_method_table_get+0xb6>
   1e2c2:	482a      	ldr	r0, [pc, #168]	; (1e36c <bsd_platform_fd_method_table_get+0xcc>)
   1e2c4:	bd38      	pop	{r3, r4, r5, pc}
   1e2c6:	68c3      	ldr	r3, [r0, #12]
   1e2c8:	6942      	ldr	r2, [r0, #20]
   1e2ca:	2b05      	cmp	r3, #5
   1e2cc:	d036      	beq.n	1e33c <bsd_platform_fd_method_table_get+0x9c>
   1e2ce:	d911      	bls.n	1e2f4 <bsd_platform_fd_method_table_get+0x54>
   1e2d0:	2b0a      	cmp	r3, #10
   1e2d2:	d013      	beq.n	1e2fc <bsd_platform_fd_method_table_get+0x5c>
   1e2d4:	2b66      	cmp	r3, #102	; 0x66
   1e2d6:	d11e      	bne.n	1e316 <bsd_platform_fd_method_table_get+0x76>
   1e2d8:	f240 2302 	movw	r3, #514	; 0x202
   1e2dc:	429a      	cmp	r2, r3
   1e2de:	d02b      	beq.n	1e338 <bsd_platform_fd_method_table_get+0x98>
   1e2e0:	f240 2305 	movw	r3, #517	; 0x205
   1e2e4:	429a      	cmp	r2, r3
   1e2e6:	d02f      	beq.n	1e348 <bsd_platform_fd_method_table_get+0xa8>
   1e2e8:	f240 2301 	movw	r3, #513	; 0x201
   1e2ec:	429a      	cmp	r2, r3
   1e2ee:	d11e      	bne.n	1e32e <bsd_platform_fd_method_table_get+0x8e>
   1e2f0:	481f      	ldr	r0, [pc, #124]	; (1e370 <bsd_platform_fd_method_table_get+0xd0>)
   1e2f2:	bd38      	pop	{r3, r4, r5, pc}
   1e2f4:	2b01      	cmp	r3, #1
   1e2f6:	d013      	beq.n	1e320 <bsd_platform_fd_method_table_get+0x80>
   1e2f8:	2b02      	cmp	r3, #2
   1e2fa:	d10c      	bne.n	1e316 <bsd_platform_fd_method_table_get+0x76>
   1e2fc:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1e300:	d224      	bcs.n	1e34c <bsd_platform_fd_method_table_get+0xac>
   1e302:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1e306:	d224      	bcs.n	1e352 <bsd_platform_fd_method_table_get+0xb2>
   1e308:	3a01      	subs	r2, #1
   1e30a:	2a01      	cmp	r2, #1
   1e30c:	d80f      	bhi.n	1e32e <bsd_platform_fd_method_table_get+0x8e>
   1e30e:	4819      	ldr	r0, [pc, #100]	; (1e374 <bsd_platform_fd_method_table_get+0xd4>)
   1e310:	bd38      	pop	{r3, r4, r5, pc}
   1e312:	4819      	ldr	r0, [pc, #100]	; (1e378 <bsd_platform_fd_method_table_get+0xd8>)
   1e314:	bd38      	pop	{r3, r4, r5, pc}
   1e316:	2016      	movs	r0, #22
   1e318:	f7f7 fc7e 	bl	15c18 <bsd_os_errno_set>
   1e31c:	2000      	movs	r0, #0
   1e31e:	bd38      	pop	{r3, r4, r5, pc}
   1e320:	f240 2303 	movw	r3, #515	; 0x203
   1e324:	429a      	cmp	r2, r3
   1e326:	d0f4      	beq.n	1e312 <bsd_platform_fd_method_table_get+0x72>
   1e328:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1e32c:	d0c9      	beq.n	1e2c2 <bsd_platform_fd_method_table_get+0x22>
   1e32e:	202b      	movs	r0, #43	; 0x2b
   1e330:	f7f7 fc72 	bl	15c18 <bsd_os_errno_set>
   1e334:	2000      	movs	r0, #0
   1e336:	bd38      	pop	{r3, r4, r5, pc}
   1e338:	4810      	ldr	r0, [pc, #64]	; (1e37c <bsd_platform_fd_method_table_get+0xdc>)
   1e33a:	bd38      	pop	{r3, r4, r5, pc}
   1e33c:	6903      	ldr	r3, [r0, #16]
   1e33e:	4810      	ldr	r0, [pc, #64]	; (1e380 <bsd_platform_fd_method_table_get+0xe0>)
   1e340:	2b03      	cmp	r3, #3
   1e342:	bf18      	it	ne
   1e344:	2000      	movne	r0, #0
   1e346:	bd38      	pop	{r3, r4, r5, pc}
   1e348:	480e      	ldr	r0, [pc, #56]	; (1e384 <bsd_platform_fd_method_table_get+0xe4>)
   1e34a:	bd38      	pop	{r3, r4, r5, pc}
   1e34c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1e350:	d1ed      	bne.n	1e32e <bsd_platform_fd_method_table_get+0x8e>
   1e352:	480d      	ldr	r0, [pc, #52]	; (1e388 <bsd_platform_fd_method_table_get+0xe8>)
   1e354:	bd38      	pop	{r3, r4, r5, pc}
   1e356:	2009      	movs	r0, #9
   1e358:	f7f7 fc5e 	bl	15c18 <bsd_os_errno_set>
   1e35c:	4620      	mov	r0, r4
   1e35e:	bd38      	pop	{r3, r4, r5, pc}
   1e360:	49765432 	.word	0x49765432
   1e364:	789a0000 	.word	0x789a0000
   1e368:	49765443 	.word	0x49765443
   1e36c:	00028420 	.word	0x00028420
   1e370:	00028358 	.word	0x00028358
   1e374:	00028380 	.word	0x00028380
   1e378:	000283d0 	.word	0x000283d0
   1e37c:	000283f8 	.word	0x000283f8
   1e380:	00028470 	.word	0x00028470
   1e384:	00028448 	.word	0x00028448
   1e388:	000283a8 	.word	0x000283a8

0001e38c <bsd_platform_getaddrinfo>:
   1e38c:	f7fc bf52 	b.w	1b234 <ip_interface_getaddrinfo>

0001e390 <bsd_platform_freeaddrinfo>:
   1e390:	f7fd b846 	b.w	1b420 <ip_interface_freeaddrinfo>

0001e394 <bsd_platform_poll>:
   1e394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e398:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   1e39c:	b083      	sub	sp, #12
   1e39e:	9200      	str	r2, [sp, #0]
   1e3a0:	2800      	cmp	r0, #0
   1e3a2:	d048      	beq.n	1e436 <bsd_platform_poll+0xa2>
   1e3a4:	1e4b      	subs	r3, r1, #1
   1e3a6:	2b08      	cmp	r3, #8
   1e3a8:	d845      	bhi.n	1e436 <bsd_platform_poll+0xa2>
   1e3aa:	4680      	mov	r8, r0
   1e3ac:	4605      	mov	r5, r0
   1e3ae:	2400      	movs	r4, #0
   1e3b0:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   1e3b4:	88ab      	ldrh	r3, [r5, #4]
   1e3b6:	6828      	ldr	r0, [r5, #0]
   1e3b8:	f003 0303 	and.w	r3, r3, #3
   1e3bc:	a901      	add	r1, sp, #4
   1e3be:	f043 061c 	orr.w	r6, r3, #28
   1e3c2:	f001 fd69 	bl	1fe98 <interface_socket_event_get>
   1e3c6:	9b01      	ldr	r3, [sp, #4]
   1e3c8:	3508      	adds	r5, #8
   1e3ca:	4033      	ands	r3, r6
   1e3cc:	f825 3c02 	strh.w	r3, [r5, #-2]
   1e3d0:	b103      	cbz	r3, 1e3d4 <bsd_platform_poll+0x40>
   1e3d2:	3401      	adds	r4, #1
   1e3d4:	42af      	cmp	r7, r5
   1e3d6:	d1ed      	bne.n	1e3b4 <bsd_platform_poll+0x20>
   1e3d8:	bb9c      	cbnz	r4, 1e442 <bsd_platform_poll+0xae>
   1e3da:	4669      	mov	r1, sp
   1e3dc:	4640      	mov	r0, r8
   1e3de:	f7f7 fb65 	bl	15aac <bsd_os_timedwait>
   1e3e2:	4607      	mov	r7, r0
   1e3e4:	b108      	cbz	r0, 1e3ea <bsd_platform_poll+0x56>
   1e3e6:	283c      	cmp	r0, #60	; 0x3c
   1e3e8:	d11d      	bne.n	1e426 <bsd_platform_poll+0x92>
   1e3ea:	46c1      	mov	r9, r8
   1e3ec:	2600      	movs	r6, #0
   1e3ee:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1e3f2:	f8d9 0000 	ldr.w	r0, [r9]
   1e3f6:	f003 0303 	and.w	r3, r3, #3
   1e3fa:	a901      	add	r1, sp, #4
   1e3fc:	f043 041c 	orr.w	r4, r3, #28
   1e400:	f001 fd4a 	bl	1fe98 <interface_socket_event_get>
   1e404:	9b01      	ldr	r3, [sp, #4]
   1e406:	f109 0908 	add.w	r9, r9, #8
   1e40a:	4023      	ands	r3, r4
   1e40c:	f829 3c02 	strh.w	r3, [r9, #-2]
   1e410:	b103      	cbz	r3, 1e414 <bsd_platform_poll+0x80>
   1e412:	3601      	adds	r6, #1
   1e414:	454d      	cmp	r5, r9
   1e416:	d1ea      	bne.n	1e3ee <bsd_platform_poll+0x5a>
   1e418:	b90e      	cbnz	r6, 1e41e <bsd_platform_poll+0x8a>
   1e41a:	2f00      	cmp	r7, #0
   1e41c:	d0dd      	beq.n	1e3da <bsd_platform_poll+0x46>
   1e41e:	4630      	mov	r0, r6
   1e420:	b003      	add	sp, #12
   1e422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e426:	2023      	movs	r0, #35	; 0x23
   1e428:	f7f7 fbf6 	bl	15c18 <bsd_os_errno_set>
   1e42c:	f04f 30ff 	mov.w	r0, #4294967295
   1e430:	b003      	add	sp, #12
   1e432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e436:	2016      	movs	r0, #22
   1e438:	f7f7 fbee 	bl	15c18 <bsd_os_errno_set>
   1e43c:	f04f 30ff 	mov.w	r0, #4294967295
   1e440:	e7ee      	b.n	1e420 <bsd_platform_poll+0x8c>
   1e442:	4620      	mov	r0, r4
   1e444:	e7ec      	b.n	1e420 <bsd_platform_poll+0x8c>
   1e446:	bf00      	nop

0001e448 <bsd_platform_fcntl>:
   1e448:	b508      	push	{r3, lr}
   1e44a:	4b06      	ldr	r3, [pc, #24]	; (1e464 <bsd_platform_fcntl+0x1c>)
   1e44c:	4298      	cmp	r0, r3
   1e44e:	d003      	beq.n	1e458 <bsd_platform_fcntl+0x10>
   1e450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e454:	f001 bdfe 	b.w	20054 <interface_socket_fcntl>
   1e458:	202d      	movs	r0, #45	; 0x2d
   1e45a:	f7f7 fbdd 	bl	15c18 <bsd_os_errno_set>
   1e45e:	f04f 30ff 	mov.w	r0, #4294967295
   1e462:	bd08      	pop	{r3, pc}
   1e464:	49765432 	.word	0x49765432

0001e468 <linked_list_init>:
   1e468:	b128      	cbz	r0, 1e476 <linked_list_init+0xe>
   1e46a:	2300      	movs	r3, #0
   1e46c:	6003      	str	r3, [r0, #0]
   1e46e:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1e472:	4618      	mov	r0, r3
   1e474:	4770      	bx	lr
   1e476:	2007      	movs	r0, #7
   1e478:	4770      	bx	lr
   1e47a:	bf00      	nop

0001e47c <linked_list_push>:
   1e47c:	6802      	ldr	r2, [r0, #0]
   1e47e:	4603      	mov	r3, r0
   1e480:	3201      	adds	r2, #1
   1e482:	d00e      	beq.n	1e4a2 <linked_list_push+0x26>
   1e484:	2200      	movs	r2, #0
   1e486:	600a      	str	r2, [r1, #0]
   1e488:	6802      	ldr	r2, [r0, #0]
   1e48a:	b13a      	cbz	r2, 1e49c <linked_list_push+0x20>
   1e48c:	6882      	ldr	r2, [r0, #8]
   1e48e:	6011      	str	r1, [r2, #0]
   1e490:	6081      	str	r1, [r0, #8]
   1e492:	681a      	ldr	r2, [r3, #0]
   1e494:	2000      	movs	r0, #0
   1e496:	3201      	adds	r2, #1
   1e498:	601a      	str	r2, [r3, #0]
   1e49a:	4770      	bx	lr
   1e49c:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1e4a0:	e7f7      	b.n	1e492 <linked_list_push+0x16>
   1e4a2:	2004      	movs	r0, #4
   1e4a4:	4770      	bx	lr
   1e4a6:	bf00      	nop

0001e4a8 <linked_list_pop>:
   1e4a8:	4603      	mov	r3, r0
   1e4aa:	6800      	ldr	r0, [r0, #0]
   1e4ac:	b128      	cbz	r0, 1e4ba <linked_list_pop+0x12>
   1e4ae:	6858      	ldr	r0, [r3, #4]
   1e4b0:	681a      	ldr	r2, [r3, #0]
   1e4b2:	6801      	ldr	r1, [r0, #0]
   1e4b4:	3a01      	subs	r2, #1
   1e4b6:	6059      	str	r1, [r3, #4]
   1e4b8:	601a      	str	r2, [r3, #0]
   1e4ba:	4770      	bx	lr

0001e4bc <linked_list_peek>:
   1e4bc:	6803      	ldr	r3, [r0, #0]
   1e4be:	b10b      	cbz	r3, 1e4c4 <linked_list_peek+0x8>
   1e4c0:	6840      	ldr	r0, [r0, #4]
   1e4c2:	4770      	bx	lr
   1e4c4:	4618      	mov	r0, r3
   1e4c6:	4770      	bx	lr

0001e4c8 <linked_list_size_get>:
   1e4c8:	6800      	ldr	r0, [r0, #0]
   1e4ca:	4770      	bx	lr

0001e4cc <linked_list_get_next>:
   1e4cc:	6800      	ldr	r0, [r0, #0]
   1e4ce:	4770      	bx	lr

0001e4d0 <nrf_socket>:
   1e4d0:	b570      	push	{r4, r5, r6, lr}
   1e4d2:	4604      	mov	r4, r0
   1e4d4:	460d      	mov	r5, r1
   1e4d6:	4616      	mov	r6, r2
   1e4d8:	f7ff fe8a 	bl	1e1f0 <bsd_platform_af_method_table_get>
   1e4dc:	b130      	cbz	r0, 1e4ec <nrf_socket+0x1c>
   1e4de:	6803      	ldr	r3, [r0, #0]
   1e4e0:	4632      	mov	r2, r6
   1e4e2:	4629      	mov	r1, r5
   1e4e4:	4620      	mov	r0, r4
   1e4e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e4ea:	4718      	bx	r3
   1e4ec:	f04f 30ff 	mov.w	r0, #4294967295
   1e4f0:	bd70      	pop	{r4, r5, r6, pc}
   1e4f2:	bf00      	nop

0001e4f4 <nrf_close>:
   1e4f4:	b510      	push	{r4, lr}
   1e4f6:	4604      	mov	r4, r0
   1e4f8:	f7ff fed2 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e4fc:	b120      	cbz	r0, 1e508 <nrf_close+0x14>
   1e4fe:	6843      	ldr	r3, [r0, #4]
   1e500:	4620      	mov	r0, r4
   1e502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e506:	4718      	bx	r3
   1e508:	f04f 30ff 	mov.w	r0, #4294967295
   1e50c:	bd10      	pop	{r4, pc}
   1e50e:	bf00      	nop

0001e510 <nrf_sendto>:
   1e510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e514:	460d      	mov	r5, r1
   1e516:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1e51a:	4616      	mov	r6, r2
   1e51c:	461f      	mov	r7, r3
   1e51e:	4604      	mov	r4, r0
   1e520:	f7ff febe 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e524:	b158      	cbz	r0, 1e53e <nrf_sendto+0x2e>
   1e526:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1e52a:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1e52e:	463b      	mov	r3, r7
   1e530:	4632      	mov	r2, r6
   1e532:	4629      	mov	r1, r5
   1e534:	4620      	mov	r0, r4
   1e536:	46f4      	mov	ip, lr
   1e538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e53c:	4760      	bx	ip
   1e53e:	f04f 30ff 	mov.w	r0, #4294967295
   1e542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e546:	bf00      	nop

0001e548 <nrf_send>:
   1e548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e54c:	b082      	sub	sp, #8
   1e54e:	460e      	mov	r6, r1
   1e550:	4617      	mov	r7, r2
   1e552:	4698      	mov	r8, r3
   1e554:	4605      	mov	r5, r0
   1e556:	f7ff fea3 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e55a:	b160      	cbz	r0, 1e576 <nrf_send+0x2e>
   1e55c:	4604      	mov	r4, r0
   1e55e:	2000      	movs	r0, #0
   1e560:	e9cd 0000 	strd	r0, r0, [sp]
   1e564:	4643      	mov	r3, r8
   1e566:	463a      	mov	r2, r7
   1e568:	4631      	mov	r1, r6
   1e56a:	4628      	mov	r0, r5
   1e56c:	68a4      	ldr	r4, [r4, #8]
   1e56e:	47a0      	blx	r4
   1e570:	b002      	add	sp, #8
   1e572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e576:	f04f 30ff 	mov.w	r0, #4294967295
   1e57a:	e7f9      	b.n	1e570 <nrf_send+0x28>

0001e57c <nrf_recvfrom>:
   1e57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e580:	460d      	mov	r5, r1
   1e582:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1e586:	4616      	mov	r6, r2
   1e588:	461f      	mov	r7, r3
   1e58a:	4604      	mov	r4, r0
   1e58c:	f7ff fe88 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e590:	b158      	cbz	r0, 1e5aa <nrf_recvfrom+0x2e>
   1e592:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1e596:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1e59a:	463b      	mov	r3, r7
   1e59c:	4632      	mov	r2, r6
   1e59e:	4629      	mov	r1, r5
   1e5a0:	4620      	mov	r0, r4
   1e5a2:	46f4      	mov	ip, lr
   1e5a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e5a8:	4760      	bx	ip
   1e5aa:	f04f 30ff 	mov.w	r0, #4294967295
   1e5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e5b2:	bf00      	nop

0001e5b4 <nrf_recv>:
   1e5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5b8:	b082      	sub	sp, #8
   1e5ba:	460e      	mov	r6, r1
   1e5bc:	4617      	mov	r7, r2
   1e5be:	4698      	mov	r8, r3
   1e5c0:	4605      	mov	r5, r0
   1e5c2:	f7ff fe6d 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e5c6:	b160      	cbz	r0, 1e5e2 <nrf_recv+0x2e>
   1e5c8:	4604      	mov	r4, r0
   1e5ca:	2000      	movs	r0, #0
   1e5cc:	e9cd 0000 	strd	r0, r0, [sp]
   1e5d0:	4643      	mov	r3, r8
   1e5d2:	463a      	mov	r2, r7
   1e5d4:	4631      	mov	r1, r6
   1e5d6:	4628      	mov	r0, r5
   1e5d8:	68e4      	ldr	r4, [r4, #12]
   1e5da:	47a0      	blx	r4
   1e5dc:	b002      	add	sp, #8
   1e5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e5e2:	f04f 30ff 	mov.w	r0, #4294967295
   1e5e6:	e7f9      	b.n	1e5dc <nrf_recv+0x28>

0001e5e8 <nrf_connect>:
   1e5e8:	b570      	push	{r4, r5, r6, lr}
   1e5ea:	460d      	mov	r5, r1
   1e5ec:	4616      	mov	r6, r2
   1e5ee:	4604      	mov	r4, r0
   1e5f0:	f7ff fe56 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e5f4:	b130      	cbz	r0, 1e604 <nrf_connect+0x1c>
   1e5f6:	6943      	ldr	r3, [r0, #20]
   1e5f8:	4632      	mov	r2, r6
   1e5fa:	4629      	mov	r1, r5
   1e5fc:	4620      	mov	r0, r4
   1e5fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e602:	4718      	bx	r3
   1e604:	f04f 30ff 	mov.w	r0, #4294967295
   1e608:	bd70      	pop	{r4, r5, r6, pc}
   1e60a:	bf00      	nop

0001e60c <nrf_listen>:
   1e60c:	b570      	push	{r4, r5, r6, lr}
   1e60e:	460d      	mov	r5, r1
   1e610:	4604      	mov	r4, r0
   1e612:	f7ff fe45 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e616:	b128      	cbz	r0, 1e624 <nrf_listen+0x18>
   1e618:	6983      	ldr	r3, [r0, #24]
   1e61a:	4629      	mov	r1, r5
   1e61c:	4620      	mov	r0, r4
   1e61e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e622:	4718      	bx	r3
   1e624:	f04f 30ff 	mov.w	r0, #4294967295
   1e628:	bd70      	pop	{r4, r5, r6, pc}
   1e62a:	bf00      	nop

0001e62c <nrf_accept>:
   1e62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e630:	460d      	mov	r5, r1
   1e632:	4616      	mov	r6, r2
   1e634:	4604      	mov	r4, r0
   1e636:	f7ff fe33 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e63a:	b140      	cbz	r0, 1e64e <nrf_accept+0x22>
   1e63c:	69c7      	ldr	r7, [r0, #28]
   1e63e:	4632      	mov	r2, r6
   1e640:	4629      	mov	r1, r5
   1e642:	4620      	mov	r0, r4
   1e644:	46bc      	mov	ip, r7
   1e646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e64a:	2300      	movs	r3, #0
   1e64c:	4760      	bx	ip
   1e64e:	f04f 30ff 	mov.w	r0, #4294967295
   1e652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e656:	bf00      	nop

0001e658 <nrf_bind>:
   1e658:	b570      	push	{r4, r5, r6, lr}
   1e65a:	460d      	mov	r5, r1
   1e65c:	4616      	mov	r6, r2
   1e65e:	4604      	mov	r4, r0
   1e660:	f7ff fe1e 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e664:	b130      	cbz	r0, 1e674 <nrf_bind+0x1c>
   1e666:	6903      	ldr	r3, [r0, #16]
   1e668:	4632      	mov	r2, r6
   1e66a:	4629      	mov	r1, r5
   1e66c:	4620      	mov	r0, r4
   1e66e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e672:	4718      	bx	r3
   1e674:	f04f 30ff 	mov.w	r0, #4294967295
   1e678:	bd70      	pop	{r4, r5, r6, pc}
   1e67a:	bf00      	nop

0001e67c <nrf_setsockopt>:
   1e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e680:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e684:	460d      	mov	r5, r1
   1e686:	4616      	mov	r6, r2
   1e688:	461f      	mov	r7, r3
   1e68a:	4604      	mov	r4, r0
   1e68c:	f7ff fe08 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e690:	b158      	cbz	r0, 1e6aa <nrf_setsockopt+0x2e>
   1e692:	f8cd 8018 	str.w	r8, [sp, #24]
   1e696:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1e69a:	463b      	mov	r3, r7
   1e69c:	4632      	mov	r2, r6
   1e69e:	4629      	mov	r1, r5
   1e6a0:	4620      	mov	r0, r4
   1e6a2:	46f4      	mov	ip, lr
   1e6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e6a8:	4760      	bx	ip
   1e6aa:	f04f 30ff 	mov.w	r0, #4294967295
   1e6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6b2:	bf00      	nop

0001e6b4 <nrf_getsockopt>:
   1e6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e6b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e6bc:	460d      	mov	r5, r1
   1e6be:	4616      	mov	r6, r2
   1e6c0:	461f      	mov	r7, r3
   1e6c2:	4604      	mov	r4, r0
   1e6c4:	f7ff fdec 	bl	1e2a0 <bsd_platform_fd_method_table_get>
   1e6c8:	b158      	cbz	r0, 1e6e2 <nrf_getsockopt+0x2e>
   1e6ca:	f8cd 8018 	str.w	r8, [sp, #24]
   1e6ce:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1e6d2:	463b      	mov	r3, r7
   1e6d4:	4632      	mov	r2, r6
   1e6d6:	4629      	mov	r1, r5
   1e6d8:	4620      	mov	r0, r4
   1e6da:	46f4      	mov	ip, lr
   1e6dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e6e0:	4760      	bx	ip
   1e6e2:	f04f 30ff 	mov.w	r0, #4294967295
   1e6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6ea:	bf00      	nop

0001e6ec <nrf_getaddrinfo>:
   1e6ec:	f7ff be4e 	b.w	1e38c <bsd_platform_getaddrinfo>

0001e6f0 <nrf_freeaddrinfo>:
   1e6f0:	f7ff be4e 	b.w	1e390 <bsd_platform_freeaddrinfo>

0001e6f4 <nrf_poll>:
   1e6f4:	f7ff be4e 	b.w	1e394 <bsd_platform_poll>

0001e6f8 <nrf_fcntl>:
   1e6f8:	f7ff bea6 	b.w	1e448 <bsd_platform_fcntl>

0001e6fc <rpc_gnss_serialize_utc>:
   1e6fc:	4603      	mov	r3, r0
   1e6fe:	b1d8      	cbz	r0, 1e738 <rpc_gnss_serialize_utc+0x3c>
   1e700:	b1d1      	cbz	r1, 1e738 <rpc_gnss_serialize_utc+0x3c>
   1e702:	2000      	movs	r0, #0
   1e704:	2201      	movs	r2, #1
   1e706:	7048      	strb	r0, [r1, #1]
   1e708:	700a      	strb	r2, [r1, #0]
   1e70a:	685a      	ldr	r2, [r3, #4]
   1e70c:	2010      	movs	r0, #16
   1e70e:	f8c1 2006 	str.w	r2, [r1, #6]
   1e712:	681a      	ldr	r2, [r3, #0]
   1e714:	f8c1 2002 	str.w	r2, [r1, #2]
   1e718:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1e71c:	730a      	strb	r2, [r1, #12]
   1e71e:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1e722:	73ca      	strb	r2, [r1, #15]
   1e724:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1e728:	738a      	strb	r2, [r1, #14]
   1e72a:	7a1a      	ldrb	r2, [r3, #8]
   1e72c:	728a      	strb	r2, [r1, #10]
   1e72e:	7ada      	ldrb	r2, [r3, #11]
   1e730:	734a      	strb	r2, [r1, #13]
   1e732:	7a5b      	ldrb	r3, [r3, #9]
   1e734:	72cb      	strb	r3, [r1, #11]
   1e736:	4770      	bx	lr
   1e738:	f04f 30ff 	mov.w	r0, #4294967295
   1e73c:	4770      	bx	lr
   1e73e:	bf00      	nop

0001e740 <rpc_gnss_serialize_ephe>:
   1e740:	4603      	mov	r3, r0
   1e742:	2800      	cmp	r0, #0
   1e744:	d04b      	beq.n	1e7de <rpc_gnss_serialize_ephe+0x9e>
   1e746:	2900      	cmp	r1, #0
   1e748:	d049      	beq.n	1e7de <rpc_gnss_serialize_ephe+0x9e>
   1e74a:	2000      	movs	r0, #0
   1e74c:	2202      	movs	r2, #2
   1e74e:	7048      	strb	r0, [r1, #1]
   1e750:	700a      	strb	r2, [r1, #0]
   1e752:	68da      	ldr	r2, [r3, #12]
   1e754:	2040      	movs	r0, #64	; 0x40
   1e756:	f8c1 200b 	str.w	r2, [r1, #11]
   1e75a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1e75e:	f8a1 2009 	strh.w	r2, [r1, #9]
   1e762:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1e766:	720a      	strb	r2, [r1, #8]
   1e768:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1e76c:	878a      	strh	r2, [r1, #60]	; 0x3c
   1e76e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1e772:	86ca      	strh	r2, [r1, #54]	; 0x36
   1e774:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1e778:	874a      	strh	r2, [r1, #58]	; 0x3a
   1e77a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1e77e:	868a      	strh	r2, [r1, #52]	; 0x34
   1e780:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1e784:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1e786:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1e78a:	870a      	strh	r2, [r1, #56]	; 0x38
   1e78c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1e790:	830a      	strh	r2, [r1, #24]
   1e792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e794:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1e798:	7c9a      	ldrb	r2, [r3, #18]
   1e79a:	744a      	strb	r2, [r1, #17]
   1e79c:	785a      	ldrb	r2, [r3, #1]
   1e79e:	70ca      	strb	r2, [r1, #3]
   1e7a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1e7a2:	62ca      	str	r2, [r1, #44]	; 0x2c
   1e7a4:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1e7a8:	84ca      	strh	r2, [r1, #38]	; 0x26
   1e7aa:	885a      	ldrh	r2, [r3, #2]
   1e7ac:	808a      	strh	r2, [r1, #4]
   1e7ae:	6a1a      	ldr	r2, [r3, #32]
   1e7b0:	f8c1 201a 	str.w	r2, [r1, #26]
   1e7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e7b6:	630a      	str	r2, [r1, #48]	; 0x30
   1e7b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1e7ba:	f8c1 201e 	str.w	r2, [r1, #30]
   1e7be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1e7c0:	628a      	str	r2, [r1, #40]	; 0x28
   1e7c2:	781a      	ldrb	r2, [r3, #0]
   1e7c4:	708a      	strb	r2, [r1, #2]
   1e7c6:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1e7ca:	73ca      	strb	r2, [r1, #15]
   1e7cc:	889a      	ldrh	r2, [r3, #4]
   1e7ce:	80ca      	strh	r2, [r1, #6]
   1e7d0:	8a9a      	ldrh	r2, [r3, #20]
   1e7d2:	824a      	strh	r2, [r1, #18]
   1e7d4:	7c5a      	ldrb	r2, [r3, #17]
   1e7d6:	740a      	strb	r2, [r1, #16]
   1e7d8:	699b      	ldr	r3, [r3, #24]
   1e7da:	614b      	str	r3, [r1, #20]
   1e7dc:	4770      	bx	lr
   1e7de:	f04f 30ff 	mov.w	r0, #4294967295
   1e7e2:	4770      	bx	lr

0001e7e4 <rpc_gnss_serialize_alm>:
   1e7e4:	4603      	mov	r3, r0
   1e7e6:	b360      	cbz	r0, 1e842 <rpc_gnss_serialize_alm+0x5e>
   1e7e8:	b359      	cbz	r1, 1e842 <rpc_gnss_serialize_alm+0x5e>
   1e7ea:	2000      	movs	r0, #0
   1e7ec:	2203      	movs	r2, #3
   1e7ee:	7048      	strb	r0, [r1, #1]
   1e7f0:	700a      	strb	r2, [r1, #0]
   1e7f2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1e7f6:	2021      	movs	r0, #33	; 0x21
   1e7f8:	f8a1 201d 	strh.w	r2, [r1, #29]
   1e7fc:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1e800:	f8a1 201f 	strh.w	r2, [r1, #31]
   1e804:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1e808:	810a      	strh	r2, [r1, #8]
   1e80a:	889a      	ldrh	r2, [r3, #4]
   1e80c:	80ca      	strh	r2, [r1, #6]
   1e80e:	78da      	ldrb	r2, [r3, #3]
   1e810:	714a      	strb	r2, [r1, #5]
   1e812:	699a      	ldr	r2, [r3, #24]
   1e814:	f8c1 2019 	str.w	r2, [r1, #25]
   1e818:	691a      	ldr	r2, [r3, #16]
   1e81a:	f8c1 2011 	str.w	r2, [r1, #17]
   1e81e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1e822:	814a      	strh	r2, [r1, #10]
   1e824:	68da      	ldr	r2, [r3, #12]
   1e826:	f8c1 200d 	str.w	r2, [r1, #13]
   1e82a:	7a9a      	ldrb	r2, [r3, #10]
   1e82c:	730a      	strb	r2, [r1, #12]
   1e82e:	781a      	ldrb	r2, [r3, #0]
   1e830:	708a      	strb	r2, [r1, #2]
   1e832:	789a      	ldrb	r2, [r3, #2]
   1e834:	710a      	strb	r2, [r1, #4]
   1e836:	695a      	ldr	r2, [r3, #20]
   1e838:	f8c1 2015 	str.w	r2, [r1, #21]
   1e83c:	785b      	ldrb	r3, [r3, #1]
   1e83e:	70cb      	strb	r3, [r1, #3]
   1e840:	4770      	bx	lr
   1e842:	f04f 30ff 	mov.w	r0, #4294967295
   1e846:	4770      	bx	lr

0001e848 <rpc_gnss_serialize_klob>:
   1e848:	4603      	mov	r3, r0
   1e84a:	b1f0      	cbz	r0, 1e88a <rpc_gnss_serialize_klob+0x42>
   1e84c:	b1e9      	cbz	r1, 1e88a <rpc_gnss_serialize_klob+0x42>
   1e84e:	2000      	movs	r0, #0
   1e850:	2204      	movs	r2, #4
   1e852:	7048      	strb	r0, [r1, #1]
   1e854:	700a      	strb	r2, [r1, #0]
   1e856:	f993 2000 	ldrsb.w	r2, [r3]
   1e85a:	200a      	movs	r0, #10
   1e85c:	708a      	strb	r2, [r1, #2]
   1e85e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1e862:	70ca      	strb	r2, [r1, #3]
   1e864:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1e868:	710a      	strb	r2, [r1, #4]
   1e86a:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1e86e:	714a      	strb	r2, [r1, #5]
   1e870:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1e874:	718a      	strb	r2, [r1, #6]
   1e876:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1e87a:	71ca      	strb	r2, [r1, #7]
   1e87c:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1e880:	720a      	strb	r2, [r1, #8]
   1e882:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1e886:	724b      	strb	r3, [r1, #9]
   1e888:	4770      	bx	lr
   1e88a:	f04f 30ff 	mov.w	r0, #4294967295
   1e88e:	4770      	bx	lr

0001e890 <rpc_gnss_serialize_nequick>:
   1e890:	4603      	mov	r3, r0
   1e892:	b198      	cbz	r0, 1e8bc <rpc_gnss_serialize_nequick+0x2c>
   1e894:	b191      	cbz	r1, 1e8bc <rpc_gnss_serialize_nequick+0x2c>
   1e896:	2000      	movs	r0, #0
   1e898:	2205      	movs	r2, #5
   1e89a:	7048      	strb	r0, [r1, #1]
   1e89c:	700a      	strb	r2, [r1, #0]
   1e89e:	f9b3 2000 	ldrsh.w	r2, [r3]
   1e8a2:	200a      	movs	r0, #10
   1e8a4:	804a      	strh	r2, [r1, #2]
   1e8a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1e8aa:	808a      	strh	r2, [r1, #4]
   1e8ac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1e8b0:	80ca      	strh	r2, [r1, #6]
   1e8b2:	799a      	ldrb	r2, [r3, #6]
   1e8b4:	720a      	strb	r2, [r1, #8]
   1e8b6:	79db      	ldrb	r3, [r3, #7]
   1e8b8:	724b      	strb	r3, [r1, #9]
   1e8ba:	4770      	bx	lr
   1e8bc:	f04f 30ff 	mov.w	r0, #4294967295
   1e8c0:	4770      	bx	lr
   1e8c2:	bf00      	nop

0001e8c4 <rpc_gnss_serialize_time_and_sv_tow>:
   1e8c4:	b310      	cbz	r0, 1e90c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1e8c6:	b309      	cbz	r1, 1e90c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1e8c8:	b470      	push	{r4, r5, r6}
   1e8ca:	2500      	movs	r5, #0
   1e8cc:	2606      	movs	r6, #6
   1e8ce:	460c      	mov	r4, r1
   1e8d0:	704d      	strb	r5, [r1, #1]
   1e8d2:	700e      	strb	r6, [r1, #0]
   1e8d4:	462b      	mov	r3, r5
   1e8d6:	8805      	ldrh	r5, [r0, #0]
   1e8d8:	4602      	mov	r2, r0
   1e8da:	804d      	strh	r5, [r1, #2]
   1e8dc:	68c5      	ldr	r5, [r0, #12]
   1e8de:	f8c1 500a 	str.w	r5, [r1, #10]
   1e8e2:	8905      	ldrh	r5, [r0, #8]
   1e8e4:	810d      	strh	r5, [r1, #8]
   1e8e6:	6840      	ldr	r0, [r0, #4]
   1e8e8:	6048      	str	r0, [r1, #4]
   1e8ea:	8a15      	ldrh	r5, [r2, #16]
   1e8ec:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1e8f0:	4408      	add	r0, r1
   1e8f2:	81c5      	strh	r5, [r0, #14]
   1e8f4:	7c90      	ldrb	r0, [r2, #18]
   1e8f6:	3301      	adds	r3, #1
   1e8f8:	2b20      	cmp	r3, #32
   1e8fa:	7420      	strb	r0, [r4, #16]
   1e8fc:	f102 0204 	add.w	r2, r2, #4
   1e900:	f104 0403 	add.w	r4, r4, #3
   1e904:	d1f1      	bne.n	1e8ea <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1e906:	206e      	movs	r0, #110	; 0x6e
   1e908:	bc70      	pop	{r4, r5, r6}
   1e90a:	4770      	bx	lr
   1e90c:	f04f 30ff 	mov.w	r0, #4294967295
   1e910:	4770      	bx	lr
   1e912:	bf00      	nop

0001e914 <rpc_gnss_serialize_location>:
   1e914:	4603      	mov	r3, r0
   1e916:	b1c8      	cbz	r0, 1e94c <rpc_gnss_serialize_location+0x38>
   1e918:	b1c1      	cbz	r1, 1e94c <rpc_gnss_serialize_location+0x38>
   1e91a:	2000      	movs	r0, #0
   1e91c:	2207      	movs	r2, #7
   1e91e:	7048      	strb	r0, [r1, #1]
   1e920:	700a      	strb	r2, [r1, #0]
   1e922:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1e926:	2011      	movs	r0, #17
   1e928:	814a      	strh	r2, [r1, #10]
   1e92a:	7b9a      	ldrb	r2, [r3, #14]
   1e92c:	740a      	strb	r2, [r1, #16]
   1e92e:	681a      	ldr	r2, [r3, #0]
   1e930:	f8c1 2002 	str.w	r2, [r1, #2]
   1e934:	685a      	ldr	r2, [r3, #4]
   1e936:	f8c1 2006 	str.w	r2, [r1, #6]
   1e93a:	7b1a      	ldrb	r2, [r3, #12]
   1e93c:	738a      	strb	r2, [r1, #14]
   1e93e:	7b5a      	ldrb	r2, [r3, #13]
   1e940:	73ca      	strb	r2, [r1, #15]
   1e942:	7a9a      	ldrb	r2, [r3, #10]
   1e944:	730a      	strb	r2, [r1, #12]
   1e946:	7adb      	ldrb	r3, [r3, #11]
   1e948:	734b      	strb	r3, [r1, #13]
   1e94a:	4770      	bx	lr
   1e94c:	f04f 30ff 	mov.w	r0, #4294967295
   1e950:	4770      	bx	lr
   1e952:	bf00      	nop

0001e954 <rpc_gnss_serialize_integrity>:
   1e954:	b148      	cbz	r0, 1e96a <rpc_gnss_serialize_integrity+0x16>
   1e956:	b141      	cbz	r1, 1e96a <rpc_gnss_serialize_integrity+0x16>
   1e958:	2200      	movs	r2, #0
   1e95a:	2308      	movs	r3, #8
   1e95c:	704a      	strb	r2, [r1, #1]
   1e95e:	700b      	strb	r3, [r1, #0]
   1e960:	6803      	ldr	r3, [r0, #0]
   1e962:	2006      	movs	r0, #6
   1e964:	f8c1 3002 	str.w	r3, [r1, #2]
   1e968:	4770      	bx	lr
   1e96a:	f04f 30ff 	mov.w	r0, #4294967295
   1e96e:	4770      	bx	lr

0001e970 <gnss_client_event_handler>:
   1e970:	f850 1b08 	ldr.w	r1, [r0], #8
   1e974:	0c09      	lsrs	r1, r1, #16
   1e976:	f7fd b92d 	b.w	1bbd4 <rpc_gnss_event_handler>
   1e97a:	bf00      	nop

0001e97c <rpc_gnss_client_init>:
   1e97c:	4801      	ldr	r0, [pc, #4]	; (1e984 <rpc_gnss_client_init+0x8>)
   1e97e:	f7fd b85d 	b.w	1ba3c <rpc_client_register>
   1e982:	bf00      	nop
   1e984:	000284b0 	.word	0x000284b0

0001e988 <rpc_gnss_client_request_alloc>:
   1e988:	2300      	movs	r3, #0
   1e98a:	b510      	push	{r4, lr}
   1e98c:	b082      	sub	sp, #8
   1e98e:	9301      	str	r3, [sp, #4]
   1e990:	b158      	cbz	r0, 1e9aa <rpc_gnss_client_request_alloc+0x22>
   1e992:	4604      	mov	r4, r0
   1e994:	aa01      	add	r2, sp, #4
   1e996:	2007      	movs	r0, #7
   1e998:	f7fd f8ca 	bl	1bb30 <rpc_message_alloc>
   1e99c:	b918      	cbnz	r0, 1e9a6 <rpc_gnss_client_request_alloc+0x1e>
   1e99e:	9b01      	ldr	r3, [sp, #4]
   1e9a0:	b10b      	cbz	r3, 1e9a6 <rpc_gnss_client_request_alloc+0x1e>
   1e9a2:	3308      	adds	r3, #8
   1e9a4:	6023      	str	r3, [r4, #0]
   1e9a6:	b002      	add	sp, #8
   1e9a8:	bd10      	pop	{r4, pc}
   1e9aa:	2007      	movs	r0, #7
   1e9ac:	b002      	add	sp, #8
   1e9ae:	bd10      	pop	{r4, pc}

0001e9b0 <rpc_gnss_client_request_send>:
   1e9b0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1e9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1e9b8:	d10b      	bne.n	1e9d2 <rpc_gnss_client_request_send+0x22>
   1e9ba:	b160      	cbz	r0, 1e9d6 <rpc_gnss_client_request_send+0x26>
   1e9bc:	4603      	mov	r3, r0
   1e9be:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e9c2:	2007      	movs	r0, #7
   1e9c4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e9c8:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e9cc:	4619      	mov	r1, r3
   1e9ce:	f7fd b89f 	b.w	1bb10 <rpc_message_send>
   1e9d2:	200f      	movs	r0, #15
   1e9d4:	4770      	bx	lr
   1e9d6:	2007      	movs	r0, #7
   1e9d8:	4770      	bx	lr
   1e9da:	bf00      	nop

0001e9dc <rpc_gnss_client_message_free>:
   1e9dc:	b120      	cbz	r0, 1e9e8 <rpc_gnss_client_message_free+0xc>
   1e9de:	f1a0 0108 	sub.w	r1, r0, #8
   1e9e2:	2007      	movs	r0, #7
   1e9e4:	f7fd b8d0 	b.w	1bb88 <rpc_message_free>
   1e9e8:	2007      	movs	r0, #7
   1e9ea:	4770      	bx	lr

0001e9ec <rpc_gnss_client_data_free>:
   1e9ec:	b118      	cbz	r0, 1e9f6 <rpc_gnss_client_data_free+0xa>
   1e9ee:	4601      	mov	r1, r0
   1e9f0:	2007      	movs	r0, #7
   1e9f2:	f7fd b8d5 	b.w	1bba0 <rpc_message_data_free>
   1e9f6:	2007      	movs	r0, #7
   1e9f8:	4770      	bx	lr
   1e9fa:	bf00      	nop

0001e9fc <datagram_handler_init>:
   1e9fc:	b510      	push	{r4, lr}
   1e9fe:	4604      	mov	r4, r0
   1ea00:	200c      	movs	r0, #12
   1ea02:	f000 fdd7 	bl	1f5b4 <nrf_malloc>
   1ea06:	60e0      	str	r0, [r4, #12]
   1ea08:	b118      	cbz	r0, 1ea12 <datagram_handler_init+0x16>
   1ea0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ea0e:	f7ff bd2b 	b.w	1e468 <linked_list_init>
   1ea12:	2004      	movs	r0, #4
   1ea14:	bd10      	pop	{r4, pc}
   1ea16:	bf00      	nop

0001ea18 <datagram_handler_put>:
   1ea18:	b570      	push	{r4, r5, r6, lr}
   1ea1a:	4606      	mov	r6, r0
   1ea1c:	2014      	movs	r0, #20
   1ea1e:	460d      	mov	r5, r1
   1ea20:	f000 fdc8 	bl	1f5b4 <nrf_malloc>
   1ea24:	b178      	cbz	r0, 1ea46 <datagram_handler_put+0x2e>
   1ea26:	682b      	ldr	r3, [r5, #0]
   1ea28:	4604      	mov	r4, r0
   1ea2a:	6043      	str	r3, [r0, #4]
   1ea2c:	686b      	ldr	r3, [r5, #4]
   1ea2e:	4601      	mov	r1, r0
   1ea30:	6083      	str	r3, [r0, #8]
   1ea32:	68eb      	ldr	r3, [r5, #12]
   1ea34:	60c3      	str	r3, [r0, #12]
   1ea36:	68ab      	ldr	r3, [r5, #8]
   1ea38:	6103      	str	r3, [r0, #16]
   1ea3a:	68f0      	ldr	r0, [r6, #12]
   1ea3c:	f7ff fd1e 	bl	1e47c <linked_list_push>
   1ea40:	b920      	cbnz	r0, 1ea4c <datagram_handler_put+0x34>
   1ea42:	6868      	ldr	r0, [r5, #4]
   1ea44:	bd70      	pop	{r4, r5, r6, pc}
   1ea46:	f04f 30ff 	mov.w	r0, #4294967295
   1ea4a:	bd70      	pop	{r4, r5, r6, pc}
   1ea4c:	4620      	mov	r0, r4
   1ea4e:	f000 fdbb 	bl	1f5c8 <nrf_free>
   1ea52:	f04f 30ff 	mov.w	r0, #4294967295
   1ea56:	bd70      	pop	{r4, r5, r6, pc}

0001ea58 <datagram_handler_get>:
   1ea58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea5c:	4607      	mov	r7, r0
   1ea5e:	b084      	sub	sp, #16
   1ea60:	68c0      	ldr	r0, [r0, #12]
   1ea62:	460c      	mov	r4, r1
   1ea64:	4616      	mov	r6, r2
   1ea66:	f7ff fd29 	bl	1e4bc <linked_list_peek>
   1ea6a:	2800      	cmp	r0, #0
   1ea6c:	d03b      	beq.n	1eae6 <datagram_handler_get+0x8e>
   1ea6e:	6882      	ldr	r2, [r0, #8]
   1ea70:	4605      	mov	r5, r0
   1ea72:	e9d4 0300 	ldrd	r0, r3, [r4]
   1ea76:	429a      	cmp	r2, r3
   1ea78:	bf28      	it	cs
   1ea7a:	461a      	movcs	r2, r3
   1ea7c:	6062      	str	r2, [r4, #4]
   1ea7e:	b110      	cbz	r0, 1ea86 <datagram_handler_get+0x2e>
   1ea80:	6869      	ldr	r1, [r5, #4]
   1ea82:	f007 ffc0 	bl	26a06 <memcpy>
   1ea86:	68a0      	ldr	r0, [r4, #8]
   1ea88:	b118      	cbz	r0, 1ea92 <datagram_handler_get+0x3a>
   1ea8a:	692b      	ldr	r3, [r5, #16]
   1ea8c:	b10b      	cbz	r3, 1ea92 <datagram_handler_get+0x3a>
   1ea8e:	68ea      	ldr	r2, [r5, #12]
   1ea90:	bb02      	cbnz	r2, 1ead4 <datagram_handler_get+0x7c>
   1ea92:	2300      	movs	r3, #0
   1ea94:	60e3      	str	r3, [r4, #12]
   1ea96:	0732      	lsls	r2, r6, #28
   1ea98:	d506      	bpl.n	1eaa8 <datagram_handler_get+0x50>
   1ea9a:	06b3      	lsls	r3, r6, #26
   1ea9c:	bf4c      	ite	mi
   1ea9e:	68a8      	ldrmi	r0, [r5, #8]
   1eaa0:	6860      	ldrpl	r0, [r4, #4]
   1eaa2:	b004      	add	sp, #16
   1eaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eaa8:	68f8      	ldr	r0, [r7, #12]
   1eaaa:	f7ff fcfd 	bl	1e4a8 <linked_list_pop>
   1eaae:	4680      	mov	r8, r0
   1eab0:	2800      	cmp	r0, #0
   1eab2:	d0f2      	beq.n	1ea9a <datagram_handler_get+0x42>
   1eab4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1eab8:	6902      	ldr	r2, [r0, #16]
   1eaba:	9300      	str	r3, [sp, #0]
   1eabc:	68c3      	ldr	r3, [r0, #12]
   1eabe:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1eac2:	9303      	str	r3, [sp, #12]
   1eac4:	4668      	mov	r0, sp
   1eac6:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   1eaca:	4798      	blx	r3
   1eacc:	4640      	mov	r0, r8
   1eace:	f000 fd7b 	bl	1f5c8 <nrf_free>
   1ead2:	e7e2      	b.n	1ea9a <datagram_handler_get+0x42>
   1ead4:	68e3      	ldr	r3, [r4, #12]
   1ead6:	429a      	cmp	r2, r3
   1ead8:	bf28      	it	cs
   1eada:	461a      	movcs	r2, r3
   1eadc:	60e2      	str	r2, [r4, #12]
   1eade:	6929      	ldr	r1, [r5, #16]
   1eae0:	f007 ff91 	bl	26a06 <memcpy>
   1eae4:	e7d7      	b.n	1ea96 <datagram_handler_get+0x3e>
   1eae6:	f04f 30ff 	mov.w	r0, #4294967295
   1eaea:	e7da      	b.n	1eaa2 <datagram_handler_get+0x4a>

0001eaec <datagram_handler_available>:
   1eaec:	b508      	push	{r3, lr}
   1eaee:	68c0      	ldr	r0, [r0, #12]
   1eaf0:	f7ff fce4 	bl	1e4bc <linked_list_peek>
   1eaf4:	b108      	cbz	r0, 1eafa <datagram_handler_available+0xe>
   1eaf6:	6880      	ldr	r0, [r0, #8]
   1eaf8:	bd08      	pop	{r3, pc}
   1eafa:	f04f 30ff 	mov.w	r0, #4294967295
   1eafe:	bd08      	pop	{r3, pc}

0001eb00 <datagram_handler_flush>:
   1eb00:	b530      	push	{r4, r5, lr}
   1eb02:	4605      	mov	r5, r0
   1eb04:	68c0      	ldr	r0, [r0, #12]
   1eb06:	b085      	sub	sp, #20
   1eb08:	b9a8      	cbnz	r0, 1eb36 <datagram_handler_flush+0x36>
   1eb0a:	e01a      	b.n	1eb42 <datagram_handler_flush+0x42>
   1eb0c:	68e8      	ldr	r0, [r5, #12]
   1eb0e:	f7ff fccb 	bl	1e4a8 <linked_list_pop>
   1eb12:	4604      	mov	r4, r0
   1eb14:	b170      	cbz	r0, 1eb34 <datagram_handler_flush+0x34>
   1eb16:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1eb1a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1eb1e:	e9cd 0100 	strd	r0, r1, [sp]
   1eb22:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1eb26:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1eb2a:	4668      	mov	r0, sp
   1eb2c:	4798      	blx	r3
   1eb2e:	4620      	mov	r0, r4
   1eb30:	f000 fd4a 	bl	1f5c8 <nrf_free>
   1eb34:	68e8      	ldr	r0, [r5, #12]
   1eb36:	f7ff fcc7 	bl	1e4c8 <linked_list_size_get>
   1eb3a:	2800      	cmp	r0, #0
   1eb3c:	d1e6      	bne.n	1eb0c <datagram_handler_flush+0xc>
   1eb3e:	b005      	add	sp, #20
   1eb40:	bd30      	pop	{r4, r5, pc}
   1eb42:	2008      	movs	r0, #8
   1eb44:	b005      	add	sp, #20
   1eb46:	bd30      	pop	{r4, r5, pc}

0001eb48 <datagram_handler_free>:
   1eb48:	b530      	push	{r4, r5, lr}
   1eb4a:	4605      	mov	r5, r0
   1eb4c:	68c0      	ldr	r0, [r0, #12]
   1eb4e:	b085      	sub	sp, #20
   1eb50:	b9a0      	cbnz	r0, 1eb7c <datagram_handler_free+0x34>
   1eb52:	e01c      	b.n	1eb8e <datagram_handler_free+0x46>
   1eb54:	f7ff fca8 	bl	1e4a8 <linked_list_pop>
   1eb58:	4604      	mov	r4, r0
   1eb5a:	b170      	cbz	r0, 1eb7a <datagram_handler_free+0x32>
   1eb5c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1eb60:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1eb64:	e9cd 0100 	strd	r0, r1, [sp]
   1eb68:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1eb6c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1eb70:	4668      	mov	r0, sp
   1eb72:	4798      	blx	r3
   1eb74:	4620      	mov	r0, r4
   1eb76:	f000 fd27 	bl	1f5c8 <nrf_free>
   1eb7a:	68e8      	ldr	r0, [r5, #12]
   1eb7c:	f7ff fca4 	bl	1e4c8 <linked_list_size_get>
   1eb80:	4604      	mov	r4, r0
   1eb82:	68e8      	ldr	r0, [r5, #12]
   1eb84:	2c00      	cmp	r4, #0
   1eb86:	d1e5      	bne.n	1eb54 <datagram_handler_free+0xc>
   1eb88:	f000 fd1e 	bl	1f5c8 <nrf_free>
   1eb8c:	60ec      	str	r4, [r5, #12]
   1eb8e:	b005      	add	sp, #20
   1eb90:	bd30      	pop	{r4, r5, pc}
   1eb92:	bf00      	nop

0001eb94 <null_handler_init>:
   1eb94:	2000      	movs	r0, #0
   1eb96:	4770      	bx	lr

0001eb98 <null_handler_put>:
   1eb98:	b510      	push	{r4, lr}
   1eb9a:	460c      	mov	r4, r1
   1eb9c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1eba0:	4620      	mov	r0, r4
   1eba2:	4798      	blx	r3
   1eba4:	6860      	ldr	r0, [r4, #4]
   1eba6:	bd10      	pop	{r4, pc}

0001eba8 <null_handler_get>:
   1eba8:	f04f 30ff 	mov.w	r0, #4294967295
   1ebac:	4770      	bx	lr
   1ebae:	bf00      	nop

0001ebb0 <null_handler_available>:
   1ebb0:	f04f 30ff 	mov.w	r0, #4294967295
   1ebb4:	4770      	bx	lr
   1ebb6:	bf00      	nop

0001ebb8 <null_handler_flush>:
   1ebb8:	2000      	movs	r0, #0
   1ebba:	4770      	bx	lr

0001ebbc <null_handler_free>:
   1ebbc:	4770      	bx	lr
   1ebbe:	bf00      	nop

0001ebc0 <packet_handler_create>:
   1ebc0:	2801      	cmp	r0, #1
   1ebc2:	b538      	push	{r3, r4, r5, lr}
   1ebc4:	460d      	mov	r5, r1
   1ebc6:	4614      	mov	r4, r2
   1ebc8:	d00d      	beq.n	1ebe6 <packet_handler_create+0x26>
   1ebca:	db11      	blt.n	1ebf0 <packet_handler_create+0x30>
   1ebcc:	2803      	cmp	r0, #3
   1ebce:	dc0f      	bgt.n	1ebf0 <packet_handler_create+0x30>
   1ebd0:	2010      	movs	r0, #16
   1ebd2:	f000 fcef 	bl	1f5b4 <nrf_malloc>
   1ebd6:	2218      	movs	r2, #24
   1ebd8:	b120      	cbz	r0, 1ebe4 <packet_handler_create+0x24>
   1ebda:	4b08      	ldr	r3, [pc, #32]	; (1ebfc <packet_handler_create+0x3c>)
   1ebdc:	6045      	str	r5, [r0, #4]
   1ebde:	4413      	add	r3, r2
   1ebe0:	6084      	str	r4, [r0, #8]
   1ebe2:	6003      	str	r3, [r0, #0]
   1ebe4:	bd38      	pop	{r3, r4, r5, pc}
   1ebe6:	2014      	movs	r0, #20
   1ebe8:	f000 fce4 	bl	1f5b4 <nrf_malloc>
   1ebec:	2230      	movs	r2, #48	; 0x30
   1ebee:	e7f3      	b.n	1ebd8 <packet_handler_create+0x18>
   1ebf0:	200c      	movs	r0, #12
   1ebf2:	f000 fcdf 	bl	1f5b4 <nrf_malloc>
   1ebf6:	2200      	movs	r2, #0
   1ebf8:	e7ee      	b.n	1ebd8 <packet_handler_create+0x18>
   1ebfa:	bf00      	nop
   1ebfc:	000284c0 	.word	0x000284c0

0001ec00 <packet_handler_delete>:
   1ec00:	b510      	push	{r4, lr}
   1ec02:	4604      	mov	r4, r0
   1ec04:	6803      	ldr	r3, [r0, #0]
   1ec06:	691b      	ldr	r3, [r3, #16]
   1ec08:	4798      	blx	r3
   1ec0a:	6823      	ldr	r3, [r4, #0]
   1ec0c:	4620      	mov	r0, r4
   1ec0e:	695b      	ldr	r3, [r3, #20]
   1ec10:	4798      	blx	r3
   1ec12:	4620      	mov	r0, r4
   1ec14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ec18:	f000 bcd6 	b.w	1f5c8 <nrf_free>

0001ec1c <stream_handler_init>:
   1ec1c:	b510      	push	{r4, lr}
   1ec1e:	4604      	mov	r4, r0
   1ec20:	200c      	movs	r0, #12
   1ec22:	f000 fcc7 	bl	1f5b4 <nrf_malloc>
   1ec26:	60e0      	str	r0, [r4, #12]
   1ec28:	b128      	cbz	r0, 1ec36 <stream_handler_init+0x1a>
   1ec2a:	2300      	movs	r3, #0
   1ec2c:	6123      	str	r3, [r4, #16]
   1ec2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ec32:	f7ff bc19 	b.w	1e468 <linked_list_init>
   1ec36:	2004      	movs	r0, #4
   1ec38:	bd10      	pop	{r4, pc}
   1ec3a:	bf00      	nop

0001ec3c <stream_handler_put>:
   1ec3c:	b570      	push	{r4, r5, r6, lr}
   1ec3e:	4606      	mov	r6, r0
   1ec40:	2014      	movs	r0, #20
   1ec42:	460d      	mov	r5, r1
   1ec44:	f000 fcb6 	bl	1f5b4 <nrf_malloc>
   1ec48:	b178      	cbz	r0, 1ec6a <stream_handler_put+0x2e>
   1ec4a:	682b      	ldr	r3, [r5, #0]
   1ec4c:	4604      	mov	r4, r0
   1ec4e:	6043      	str	r3, [r0, #4]
   1ec50:	686b      	ldr	r3, [r5, #4]
   1ec52:	4601      	mov	r1, r0
   1ec54:	6083      	str	r3, [r0, #8]
   1ec56:	68eb      	ldr	r3, [r5, #12]
   1ec58:	60c3      	str	r3, [r0, #12]
   1ec5a:	68ab      	ldr	r3, [r5, #8]
   1ec5c:	6103      	str	r3, [r0, #16]
   1ec5e:	68f0      	ldr	r0, [r6, #12]
   1ec60:	f7ff fc0c 	bl	1e47c <linked_list_push>
   1ec64:	b920      	cbnz	r0, 1ec70 <stream_handler_put+0x34>
   1ec66:	6868      	ldr	r0, [r5, #4]
   1ec68:	bd70      	pop	{r4, r5, r6, pc}
   1ec6a:	f04f 30ff 	mov.w	r0, #4294967295
   1ec6e:	bd70      	pop	{r4, r5, r6, pc}
   1ec70:	4620      	mov	r0, r4
   1ec72:	f000 fca9 	bl	1f5c8 <nrf_free>
   1ec76:	f04f 30ff 	mov.w	r0, #4294967295
   1ec7a:	bd70      	pop	{r4, r5, r6, pc}

0001ec7c <stream_handler_get>:
   1ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec80:	4682      	mov	sl, r0
   1ec82:	b089      	sub	sp, #36	; 0x24
   1ec84:	68c0      	ldr	r0, [r0, #12]
   1ec86:	4689      	mov	r9, r1
   1ec88:	4693      	mov	fp, r2
   1ec8a:	f7ff fc17 	bl	1e4bc <linked_list_peek>
   1ec8e:	2800      	cmp	r0, #0
   1ec90:	d071      	beq.n	1ed76 <stream_handler_get+0xfa>
   1ec92:	4605      	mov	r5, r0
   1ec94:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1ec98:	b120      	cbz	r0, 1eca4 <stream_handler_get+0x28>
   1ec9a:	692b      	ldr	r3, [r5, #16]
   1ec9c:	b113      	cbz	r3, 1eca4 <stream_handler_get+0x28>
   1ec9e:	68ea      	ldr	r2, [r5, #12]
   1eca0:	2a00      	cmp	r2, #0
   1eca2:	d15d      	bne.n	1ed60 <stream_handler_get+0xe4>
   1eca4:	2300      	movs	r3, #0
   1eca6:	f8c9 300c 	str.w	r3, [r9, #12]
   1ecaa:	f8d9 2000 	ldr.w	r2, [r9]
   1ecae:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1ecb2:	f8da 1010 	ldr.w	r1, [sl, #16]
   1ecb6:	9203      	str	r2, [sp, #12]
   1ecb8:	f1b8 0f00 	cmp.w	r8, #0
   1ecbc:	d030      	beq.n	1ed20 <stream_handler_get+0xa4>
   1ecbe:	2400      	movs	r4, #0
   1ecc0:	f00b 0320 	and.w	r3, fp, #32
   1ecc4:	9301      	str	r3, [sp, #4]
   1ecc6:	f00b 0b08 	and.w	fp, fp, #8
   1ecca:	68ae      	ldr	r6, [r5, #8]
   1eccc:	eba8 0304 	sub.w	r3, r8, r4
   1ecd0:	1a76      	subs	r6, r6, r1
   1ecd2:	429e      	cmp	r6, r3
   1ecd4:	4637      	mov	r7, r6
   1ecd6:	bf28      	it	cs
   1ecd8:	461f      	movcs	r7, r3
   1ecda:	b10a      	cbz	r2, 1ece0 <stream_handler_get+0x64>
   1ecdc:	9a01      	ldr	r2, [sp, #4]
   1ecde:	b1aa      	cbz	r2, 1ed0c <stream_handler_get+0x90>
   1ece0:	f1bb 0f00 	cmp.w	fp, #0
   1ece4:	d106      	bne.n	1ecf4 <stream_handler_get+0x78>
   1ece6:	429e      	cmp	r6, r3
   1ece8:	d921      	bls.n	1ed2e <stream_handler_get+0xb2>
   1ecea:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ecee:	443b      	add	r3, r7
   1ecf0:	f8ca 3010 	str.w	r3, [sl, #16]
   1ecf4:	4628      	mov	r0, r5
   1ecf6:	f7ff fbe9 	bl	1e4cc <linked_list_get_next>
   1ecfa:	443c      	add	r4, r7
   1ecfc:	4605      	mov	r5, r0
   1ecfe:	b180      	cbz	r0, 1ed22 <stream_handler_get+0xa6>
   1ed00:	45a0      	cmp	r8, r4
   1ed02:	d90e      	bls.n	1ed22 <stream_handler_get+0xa6>
   1ed04:	f8d9 2000 	ldr.w	r2, [r9]
   1ed08:	2100      	movs	r1, #0
   1ed0a:	e7de      	b.n	1ecca <stream_handler_get+0x4e>
   1ed0c:	6868      	ldr	r0, [r5, #4]
   1ed0e:	9302      	str	r3, [sp, #8]
   1ed10:	9b03      	ldr	r3, [sp, #12]
   1ed12:	4401      	add	r1, r0
   1ed14:	463a      	mov	r2, r7
   1ed16:	1918      	adds	r0, r3, r4
   1ed18:	f007 fe75 	bl	26a06 <memcpy>
   1ed1c:	9b02      	ldr	r3, [sp, #8]
   1ed1e:	e7df      	b.n	1ece0 <stream_handler_get+0x64>
   1ed20:	4644      	mov	r4, r8
   1ed22:	4620      	mov	r0, r4
   1ed24:	f8c9 4004 	str.w	r4, [r9, #4]
   1ed28:	b009      	add	sp, #36	; 0x24
   1ed2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed2e:	f8da 000c 	ldr.w	r0, [sl, #12]
   1ed32:	f7ff fbb9 	bl	1e4a8 <linked_list_pop>
   1ed36:	4606      	mov	r6, r0
   1ed38:	b170      	cbz	r0, 1ed58 <stream_handler_get+0xdc>
   1ed3a:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1ed3e:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1ed42:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ed46:	e9cd 1006 	strd	r1, r0, [sp, #24]
   1ed4a:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1ed4e:	a804      	add	r0, sp, #16
   1ed50:	4798      	blx	r3
   1ed52:	4630      	mov	r0, r6
   1ed54:	f000 fc38 	bl	1f5c8 <nrf_free>
   1ed58:	2300      	movs	r3, #0
   1ed5a:	f8ca 3010 	str.w	r3, [sl, #16]
   1ed5e:	e7c9      	b.n	1ecf4 <stream_handler_get+0x78>
   1ed60:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1ed64:	429a      	cmp	r2, r3
   1ed66:	bf28      	it	cs
   1ed68:	461a      	movcs	r2, r3
   1ed6a:	f8c9 200c 	str.w	r2, [r9, #12]
   1ed6e:	6929      	ldr	r1, [r5, #16]
   1ed70:	f007 fe49 	bl	26a06 <memcpy>
   1ed74:	e799      	b.n	1ecaa <stream_handler_get+0x2e>
   1ed76:	f04f 30ff 	mov.w	r0, #4294967295
   1ed7a:	e7d5      	b.n	1ed28 <stream_handler_get+0xac>

0001ed7c <stream_handler_available>:
   1ed7c:	b510      	push	{r4, lr}
   1ed7e:	4604      	mov	r4, r0
   1ed80:	68c0      	ldr	r0, [r0, #12]
   1ed82:	f7ff fb9b 	bl	1e4bc <linked_list_peek>
   1ed86:	b150      	cbz	r0, 1ed9e <stream_handler_available+0x22>
   1ed88:	6924      	ldr	r4, [r4, #16]
   1ed8a:	4264      	negs	r4, r4
   1ed8c:	6883      	ldr	r3, [r0, #8]
   1ed8e:	441c      	add	r4, r3
   1ed90:	f7ff fb9c 	bl	1e4cc <linked_list_get_next>
   1ed94:	2800      	cmp	r0, #0
   1ed96:	d1f9      	bne.n	1ed8c <stream_handler_available+0x10>
   1ed98:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1ed9c:	bd10      	pop	{r4, pc}
   1ed9e:	f04f 30ff 	mov.w	r0, #4294967295
   1eda2:	bd10      	pop	{r4, pc}

0001eda4 <stream_handler_flush>:
   1eda4:	b530      	push	{r4, r5, lr}
   1eda6:	4605      	mov	r5, r0
   1eda8:	68c0      	ldr	r0, [r0, #12]
   1edaa:	b085      	sub	sp, #20
   1edac:	b9a8      	cbnz	r0, 1edda <stream_handler_flush+0x36>
   1edae:	e01a      	b.n	1ede6 <stream_handler_flush+0x42>
   1edb0:	68e8      	ldr	r0, [r5, #12]
   1edb2:	f7ff fb79 	bl	1e4a8 <linked_list_pop>
   1edb6:	4604      	mov	r4, r0
   1edb8:	b170      	cbz	r0, 1edd8 <stream_handler_flush+0x34>
   1edba:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1edbe:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1edc2:	e9cd 0100 	strd	r0, r1, [sp]
   1edc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1edca:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1edce:	4668      	mov	r0, sp
   1edd0:	4798      	blx	r3
   1edd2:	4620      	mov	r0, r4
   1edd4:	f000 fbf8 	bl	1f5c8 <nrf_free>
   1edd8:	68e8      	ldr	r0, [r5, #12]
   1edda:	f7ff fb75 	bl	1e4c8 <linked_list_size_get>
   1edde:	2800      	cmp	r0, #0
   1ede0:	d1e6      	bne.n	1edb0 <stream_handler_flush+0xc>
   1ede2:	b005      	add	sp, #20
   1ede4:	bd30      	pop	{r4, r5, pc}
   1ede6:	2008      	movs	r0, #8
   1ede8:	b005      	add	sp, #20
   1edea:	bd30      	pop	{r4, r5, pc}

0001edec <stream_handler_free>:
   1edec:	b530      	push	{r4, r5, lr}
   1edee:	4605      	mov	r5, r0
   1edf0:	68c0      	ldr	r0, [r0, #12]
   1edf2:	b085      	sub	sp, #20
   1edf4:	b9a0      	cbnz	r0, 1ee20 <stream_handler_free+0x34>
   1edf6:	e01c      	b.n	1ee32 <stream_handler_free+0x46>
   1edf8:	f7ff fb56 	bl	1e4a8 <linked_list_pop>
   1edfc:	4604      	mov	r4, r0
   1edfe:	b170      	cbz	r0, 1ee1e <stream_handler_free+0x32>
   1ee00:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1ee04:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1ee08:	e9cd 0100 	strd	r0, r1, [sp]
   1ee0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ee10:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ee14:	4668      	mov	r0, sp
   1ee16:	4798      	blx	r3
   1ee18:	4620      	mov	r0, r4
   1ee1a:	f000 fbd5 	bl	1f5c8 <nrf_free>
   1ee1e:	68e8      	ldr	r0, [r5, #12]
   1ee20:	f7ff fb52 	bl	1e4c8 <linked_list_size_get>
   1ee24:	4604      	mov	r4, r0
   1ee26:	68e8      	ldr	r0, [r5, #12]
   1ee28:	2c00      	cmp	r4, #0
   1ee2a:	d1e5      	bne.n	1edf8 <stream_handler_free+0xc>
   1ee2c:	f000 fbcc 	bl	1f5c8 <nrf_free>
   1ee30:	60ec      	str	r4, [r5, #12]
   1ee32:	b005      	add	sp, #20
   1ee34:	bd30      	pop	{r4, r5, pc}
   1ee36:	bf00      	nop

0001ee38 <mem_free>:
   1ee38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee3c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1ef0c <mem_free+0xd4>
   1ee40:	b083      	sub	sp, #12
   1ee42:	9000      	str	r0, [sp, #0]
   1ee44:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   1ee48:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1ee4c:	b12b      	cbz	r3, 1ee5a <mem_free+0x22>
   1ee4e:	f8dc 2000 	ldr.w	r2, [ip]
   1ee52:	9c00      	ldr	r4, [sp, #0]
   1ee54:	7810      	ldrb	r0, [r2, #0]
   1ee56:	42a0      	cmp	r0, r4
   1ee58:	d006      	beq.n	1ee68 <mem_free+0x30>
   1ee5a:	f10c 0c0c 	add.w	ip, ip, #12
   1ee5e:	45e3      	cmp	fp, ip
   1ee60:	d1f2      	bne.n	1ee48 <mem_free+0x10>
   1ee62:	b003      	add	sp, #12
   1ee64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee68:	f8dc a004 	ldr.w	sl, [ip, #4]
   1ee6c:	eb03 080a 	add.w	r8, r3, sl
   1ee70:	45c2      	cmp	sl, r8
   1ee72:	d2f2      	bcs.n	1ee5a <mem_free+0x22>
   1ee74:	6853      	ldr	r3, [r2, #4]
   1ee76:	f8cd c004 	str.w	ip, [sp, #4]
   1ee7a:	46d6      	mov	lr, sl
   1ee7c:	469c      	mov	ip, r3
   1ee7e:	f8d2 9010 	ldr.w	r9, [r2, #16]
   1ee82:	8997      	ldrh	r7, [r2, #12]
   1ee84:	ebae 000a 	sub.w	r0, lr, sl
   1ee88:	b3df      	cbz	r7, 1ef02 <mem_free+0xca>
   1ee8a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1ee8e:	4290      	cmp	r0, r2
   1ee90:	d31c      	bcc.n	1eecc <mem_free+0x94>
   1ee92:	4665      	mov	r5, ip
   1ee94:	2400      	movs	r4, #0
   1ee96:	f109 0304 	add.w	r3, r9, #4
   1ee9a:	e003      	b.n	1eea4 <mem_free+0x6c>
   1ee9c:	885a      	ldrh	r2, [r3, #2]
   1ee9e:	3304      	adds	r3, #4
   1eea0:	4282      	cmp	r2, r0
   1eea2:	d815      	bhi.n	1eed0 <mem_free+0x98>
   1eea4:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   1eea8:	3401      	adds	r4, #1
   1eeaa:	42a7      	cmp	r7, r4
   1eeac:	fb02 5506 	mla	r5, r2, r6, r5
   1eeb0:	eba0 0002 	sub.w	r0, r0, r2
   1eeb4:	461e      	mov	r6, r3
   1eeb6:	d1f1      	bne.n	1ee9c <mem_free+0x64>
   1eeb8:	2000      	movs	r0, #0
   1eeba:	4281      	cmp	r1, r0
   1eebc:	d00d      	beq.n	1eeda <mem_free+0xa2>
   1eebe:	f10e 0e01 	add.w	lr, lr, #1
   1eec2:	45f0      	cmp	r8, lr
   1eec4:	d1de      	bne.n	1ee84 <mem_free+0x4c>
   1eec6:	f8dd c004 	ldr.w	ip, [sp, #4]
   1eeca:	e7c6      	b.n	1ee5a <mem_free+0x22>
   1eecc:	4665      	mov	r5, ip
   1eece:	464e      	mov	r6, r9
   1eed0:	8833      	ldrh	r3, [r6, #0]
   1eed2:	fb00 5003 	mla	r0, r0, r3, r5
   1eed6:	4281      	cmp	r1, r0
   1eed8:	d1f1      	bne.n	1eebe <mem_free+0x86>
   1eeda:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1eede:	f8dd c004 	ldr.w	ip, [sp, #4]
   1eee2:	d0ba      	beq.n	1ee5a <mem_free+0x22>
   1eee4:	2301      	movs	r3, #1
   1eee6:	4a08      	ldr	r2, [pc, #32]	; (1ef08 <mem_free+0xd0>)
   1eee8:	ea4f 115e 	mov.w	r1, lr, lsr #5
   1eeec:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1eef0:	f00e 0e1f 	and.w	lr, lr, #31
   1eef4:	fa03 fe0e 	lsl.w	lr, r3, lr
   1eef8:	ea4e 0000 	orr.w	r0, lr, r0
   1eefc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1ef00:	e7af      	b.n	1ee62 <mem_free+0x2a>
   1ef02:	4638      	mov	r0, r7
   1ef04:	e7d9      	b.n	1eeba <mem_free+0x82>
   1ef06:	bf00      	nop
   1ef08:	200221c8 	.word	0x200221c8
   1ef0c:	2002220c 	.word	0x2002220c

0001ef10 <mem_alloc.constprop.5>:
   1ef10:	2800      	cmp	r0, #0
   1ef12:	d050      	beq.n	1efb6 <mem_alloc.constprop.5+0xa6>
   1ef14:	4b6d      	ldr	r3, [pc, #436]	; (1f0cc <mem_alloc.constprop.5+0x1bc>)
   1ef16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1ef1a:	4290      	cmp	r0, r2
   1ef1c:	d84b      	bhi.n	1efb6 <mem_alloc.constprop.5+0xa6>
   1ef1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef22:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   1ef26:	b083      	sub	sp, #12
   1ef28:	f1bb 0f00 	cmp.w	fp, #0
   1ef2c:	d054      	beq.n	1efd8 <mem_alloc.constprop.5+0xc8>
   1ef2e:	f10b 32ff 	add.w	r2, fp, #4294967295
   1ef32:	4691      	mov	r9, r2
   1ef34:	2600      	movs	r6, #0
   1ef36:	f04f 0812 	mov.w	r8, #18
   1ef3a:	4f65      	ldr	r7, [pc, #404]	; (1f0d0 <mem_alloc.constprop.5+0x1c0>)
   1ef3c:	9201      	str	r2, [sp, #4]
   1ef3e:	f10b 0e11 	add.w	lr, fp, #17
   1ef42:	eb06 0209 	add.w	r2, r6, r9
   1ef46:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1ef4a:	3201      	adds	r2, #1
   1ef4c:	0852      	lsrs	r2, r2, #1
   1ef4e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   1ef52:	f102 0112 	add.w	r1, r2, #18
   1ef56:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1ef5a:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1ef5e:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   1ef62:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   1ef66:	f8dc c004 	ldr.w	ip, [ip, #4]
   1ef6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1ef6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ef72:	f8da a010 	ldr.w	sl, [sl, #16]
   1ef76:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1ef7a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1ef7e:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   1ef82:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1ef86:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1ef8a:	6849      	ldr	r1, [r1, #4]
   1ef8c:	692d      	ldr	r5, [r5, #16]
   1ef8e:	6924      	ldr	r4, [r4, #16]
   1ef90:	f8dc c004 	ldr.w	ip, [ip, #4]
   1ef94:	4550      	cmp	r0, sl
   1ef96:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   1ef9a:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1ef9e:	d915      	bls.n	1efcc <mem_alloc.constprop.5+0xbc>
   1efa0:	4288      	cmp	r0, r1
   1efa2:	d211      	bcs.n	1efc8 <mem_alloc.constprop.5+0xb8>
   1efa4:	42a8      	cmp	r0, r5
   1efa6:	d908      	bls.n	1efba <mem_alloc.constprop.5+0xaa>
   1efa8:	1c56      	adds	r6, r2, #1
   1efaa:	45b1      	cmp	r9, r6
   1efac:	f0c0 8087 	bcc.w	1f0be <mem_alloc.constprop.5+0x1ae>
   1efb0:	f102 0813 	add.w	r8, r2, #19
   1efb4:	e7c5      	b.n	1ef42 <mem_alloc.constprop.5+0x32>
   1efb6:	2000      	movs	r0, #0
   1efb8:	4770      	bx	lr
   1efba:	f102 39ff 	add.w	r9, r2, #4294967295
   1efbe:	454e      	cmp	r6, r9
   1efc0:	d87d      	bhi.n	1f0be <mem_alloc.constprop.5+0x1ae>
   1efc2:	f102 0e11 	add.w	lr, r2, #17
   1efc6:	e7bc      	b.n	1ef42 <mem_alloc.constprop.5+0x32>
   1efc8:	f109 0601 	add.w	r6, r9, #1
   1efcc:	45b3      	cmp	fp, r6
   1efce:	d007      	beq.n	1efe0 <mem_alloc.constprop.5+0xd0>
   1efd0:	2e10      	cmp	r6, #16
   1efd2:	d001      	beq.n	1efd8 <mem_alloc.constprop.5+0xc8>
   1efd4:	45b3      	cmp	fp, r6
   1efd6:	d808      	bhi.n	1efea <mem_alloc.constprop.5+0xda>
   1efd8:	2000      	movs	r0, #0
   1efda:	b003      	add	sp, #12
   1efdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efe0:	9a01      	ldr	r2, [sp, #4]
   1efe2:	2a10      	cmp	r2, #16
   1efe4:	bf18      	it	ne
   1efe6:	4616      	movne	r6, r2
   1efe8:	d0f6      	beq.n	1efd8 <mem_alloc.constprop.5+0xc8>
   1efea:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1f0d4 <mem_alloc.constprop.5+0x1c4>
   1efee:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1eff2:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   1eff6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1effa:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1effe:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1f002:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1f006:	691d      	ldr	r5, [r3, #16]
   1f008:	2c00      	cmp	r4, #0
   1f00a:	d056      	beq.n	1f0ba <mem_alloc.constprop.5+0x1aa>
   1f00c:	462a      	mov	r2, r5
   1f00e:	4670      	mov	r0, lr
   1f010:	00a4      	lsls	r4, r4, #2
   1f012:	eb05 0904 	add.w	r9, r5, r4
   1f016:	8851      	ldrh	r1, [r2, #2]
   1f018:	3204      	adds	r2, #4
   1f01a:	4591      	cmp	r9, r2
   1f01c:	4408      	add	r0, r1
   1f01e:	d1fa      	bne.n	1f016 <mem_alloc.constprop.5+0x106>
   1f020:	1929      	adds	r1, r5, r4
   1f022:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   1f026:	4482      	add	sl, r0
   1f028:	4582      	cmp	sl, r0
   1f02a:	d918      	bls.n	1f05e <mem_alloc.constprop.5+0x14e>
   1f02c:	0941      	lsrs	r1, r0, #5
   1f02e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1f032:	f000 041f 	and.w	r4, r0, #31
   1f036:	fa22 f904 	lsr.w	r9, r2, r4
   1f03a:	f019 0f01 	tst.w	r9, #1
   1f03e:	d007      	beq.n	1f050 <mem_alloc.constprop.5+0x140>
   1f040:	e013      	b.n	1f06a <mem_alloc.constprop.5+0x15a>
   1f042:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1f046:	fa22 f904 	lsr.w	r9, r2, r4
   1f04a:	f019 0f01 	tst.w	r9, #1
   1f04e:	d10c      	bne.n	1f06a <mem_alloc.constprop.5+0x15a>
   1f050:	3001      	adds	r0, #1
   1f052:	4582      	cmp	sl, r0
   1f054:	ea4f 1150 	mov.w	r1, r0, lsr #5
   1f058:	f000 041f 	and.w	r4, r0, #31
   1f05c:	d1f1      	bne.n	1f042 <mem_alloc.constprop.5+0x132>
   1f05e:	3601      	adds	r6, #1
   1f060:	455e      	cmp	r6, fp
   1f062:	f108 0808 	add.w	r8, r8, #8
   1f066:	d3c4      	bcc.n	1eff2 <mem_alloc.constprop.5+0xe2>
   1f068:	e7b6      	b.n	1efd8 <mem_alloc.constprop.5+0xc8>
   1f06a:	2601      	movs	r6, #1
   1f06c:	fa06 f404 	lsl.w	r4, r6, r4
   1f070:	899e      	ldrh	r6, [r3, #12]
   1f072:	ea22 0204 	bic.w	r2, r2, r4
   1f076:	eba0 000e 	sub.w	r0, r0, lr
   1f07a:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1f07e:	685c      	ldr	r4, [r3, #4]
   1f080:	2e00      	cmp	r6, #0
   1f082:	d0a9      	beq.n	1efd8 <mem_alloc.constprop.5+0xc8>
   1f084:	886a      	ldrh	r2, [r5, #2]
   1f086:	4282      	cmp	r2, r0
   1f088:	d811      	bhi.n	1f0ae <mem_alloc.constprop.5+0x19e>
   1f08a:	2100      	movs	r1, #0
   1f08c:	1d2b      	adds	r3, r5, #4
   1f08e:	e003      	b.n	1f098 <mem_alloc.constprop.5+0x188>
   1f090:	885a      	ldrh	r2, [r3, #2]
   1f092:	3304      	adds	r3, #4
   1f094:	4282      	cmp	r2, r0
   1f096:	d80a      	bhi.n	1f0ae <mem_alloc.constprop.5+0x19e>
   1f098:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1f09c:	3101      	adds	r1, #1
   1f09e:	428e      	cmp	r6, r1
   1f0a0:	fb02 4405 	mla	r4, r2, r5, r4
   1f0a4:	eba0 0002 	sub.w	r0, r0, r2
   1f0a8:	461d      	mov	r5, r3
   1f0aa:	d1f1      	bne.n	1f090 <mem_alloc.constprop.5+0x180>
   1f0ac:	e794      	b.n	1efd8 <mem_alloc.constprop.5+0xc8>
   1f0ae:	882b      	ldrh	r3, [r5, #0]
   1f0b0:	fb00 4003 	mla	r0, r0, r3, r4
   1f0b4:	b003      	add	sp, #12
   1f0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0ba:	4670      	mov	r0, lr
   1f0bc:	e7b0      	b.n	1f020 <mem_alloc.constprop.5+0x110>
   1f0be:	f1bb 0f10 	cmp.w	fp, #16
   1f0c2:	bf08      	it	eq
   1f0c4:	260f      	moveq	r6, #15
   1f0c6:	d090      	beq.n	1efea <mem_alloc.constprop.5+0xda>
   1f0c8:	e786      	b.n	1efd8 <mem_alloc.constprop.5+0xc8>
   1f0ca:	bf00      	nop
   1f0cc:	20022248 	.word	0x20022248
   1f0d0:	2002220c 	.word	0x2002220c
   1f0d4:	200221c8 	.word	0x200221c8

0001f0d8 <mem_alloc.constprop.4>:
   1f0d8:	2800      	cmp	r0, #0
   1f0da:	d04c      	beq.n	1f176 <mem_alloc.constprop.4+0x9e>
   1f0dc:	4b6b      	ldr	r3, [pc, #428]	; (1f28c <mem_alloc.constprop.4+0x1b4>)
   1f0de:	681a      	ldr	r2, [r3, #0]
   1f0e0:	4290      	cmp	r0, r2
   1f0e2:	d848      	bhi.n	1f176 <mem_alloc.constprop.4+0x9e>
   1f0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0e8:	685f      	ldr	r7, [r3, #4]
   1f0ea:	b083      	sub	sp, #12
   1f0ec:	9700      	str	r7, [sp, #0]
   1f0ee:	2f00      	cmp	r7, #0
   1f0f0:	d051      	beq.n	1f196 <mem_alloc.constprop.4+0xbe>
   1f0f2:	1e7a      	subs	r2, r7, #1
   1f0f4:	4696      	mov	lr, r2
   1f0f6:	2100      	movs	r1, #0
   1f0f8:	f04f 0c01 	mov.w	ip, #1
   1f0fc:	4c64      	ldr	r4, [pc, #400]	; (1f290 <mem_alloc.constprop.4+0x1b8>)
   1f0fe:	9201      	str	r2, [sp, #4]
   1f100:	eb01 020e 	add.w	r2, r1, lr
   1f104:	3201      	adds	r2, #1
   1f106:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   1f10a:	0852      	lsrs	r2, r2, #1
   1f10c:	f102 0801 	add.w	r8, r2, #1
   1f110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1f114:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   1f118:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   1f11c:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1f120:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   1f124:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   1f128:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1f12c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1f130:	f8da a010 	ldr.w	sl, [sl, #16]
   1f134:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   1f138:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1f13c:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   1f140:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   1f144:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   1f148:	6936      	ldr	r6, [r6, #16]
   1f14a:	f8db b004 	ldr.w	fp, [fp, #4]
   1f14e:	692d      	ldr	r5, [r5, #16]
   1f150:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1f154:	4550      	cmp	r0, sl
   1f156:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   1f15a:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1f15e:	d913      	bls.n	1f188 <mem_alloc.constprop.4+0xb0>
   1f160:	42a8      	cmp	r0, r5
   1f162:	d210      	bcs.n	1f186 <mem_alloc.constprop.4+0xae>
   1f164:	42b0      	cmp	r0, r6
   1f166:	d908      	bls.n	1f17a <mem_alloc.constprop.4+0xa2>
   1f168:	45c6      	cmp	lr, r8
   1f16a:	4641      	mov	r1, r8
   1f16c:	f0c0 8087 	bcc.w	1f27e <mem_alloc.constprop.4+0x1a6>
   1f170:	f108 0c01 	add.w	ip, r8, #1
   1f174:	e7c4      	b.n	1f100 <mem_alloc.constprop.4+0x28>
   1f176:	2000      	movs	r0, #0
   1f178:	4770      	bx	lr
   1f17a:	f102 3eff 	add.w	lr, r2, #4294967295
   1f17e:	4571      	cmp	r1, lr
   1f180:	d87d      	bhi.n	1f27e <mem_alloc.constprop.4+0x1a6>
   1f182:	4617      	mov	r7, r2
   1f184:	e7bc      	b.n	1f100 <mem_alloc.constprop.4+0x28>
   1f186:	4639      	mov	r1, r7
   1f188:	9a00      	ldr	r2, [sp, #0]
   1f18a:	428a      	cmp	r2, r1
   1f18c:	d007      	beq.n	1f19e <mem_alloc.constprop.4+0xc6>
   1f18e:	2910      	cmp	r1, #16
   1f190:	d001      	beq.n	1f196 <mem_alloc.constprop.4+0xbe>
   1f192:	428a      	cmp	r2, r1
   1f194:	d808      	bhi.n	1f1a8 <mem_alloc.constprop.4+0xd0>
   1f196:	2000      	movs	r0, #0
   1f198:	b003      	add	sp, #12
   1f19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f19e:	9a01      	ldr	r2, [sp, #4]
   1f1a0:	2a10      	cmp	r2, #16
   1f1a2:	bf18      	it	ne
   1f1a4:	4611      	movne	r1, r2
   1f1a6:	d0f6      	beq.n	1f196 <mem_alloc.constprop.4+0xbe>
   1f1a8:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1f294 <mem_alloc.constprop.4+0x1bc>
   1f1ac:	f8dd 9000 	ldr.w	r9, [sp]
   1f1b0:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   1f1b4:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   1f1b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1f1bc:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   1f1c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1f1c4:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1f1c8:	691f      	ldr	r7, [r3, #16]
   1f1ca:	2e00      	cmp	r6, #0
   1f1cc:	d055      	beq.n	1f27a <mem_alloc.constprop.4+0x1a2>
   1f1ce:	463a      	mov	r2, r7
   1f1d0:	4670      	mov	r0, lr
   1f1d2:	00b6      	lsls	r6, r6, #2
   1f1d4:	eb07 0a06 	add.w	sl, r7, r6
   1f1d8:	8855      	ldrh	r5, [r2, #2]
   1f1da:	3204      	adds	r2, #4
   1f1dc:	4592      	cmp	sl, r2
   1f1de:	4428      	add	r0, r5
   1f1e0:	d1fa      	bne.n	1f1d8 <mem_alloc.constprop.4+0x100>
   1f1e2:	19bd      	adds	r5, r7, r6
   1f1e4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   1f1e8:	4483      	add	fp, r0
   1f1ea:	4583      	cmp	fp, r0
   1f1ec:	d918      	bls.n	1f220 <mem_alloc.constprop.4+0x148>
   1f1ee:	0945      	lsrs	r5, r0, #5
   1f1f0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1f1f4:	f000 061f 	and.w	r6, r0, #31
   1f1f8:	fa22 fa06 	lsr.w	sl, r2, r6
   1f1fc:	f01a 0f01 	tst.w	sl, #1
   1f200:	d007      	beq.n	1f212 <mem_alloc.constprop.4+0x13a>
   1f202:	e013      	b.n	1f22c <mem_alloc.constprop.4+0x154>
   1f204:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1f208:	fa22 fa06 	lsr.w	sl, r2, r6
   1f20c:	f01a 0f01 	tst.w	sl, #1
   1f210:	d10c      	bne.n	1f22c <mem_alloc.constprop.4+0x154>
   1f212:	3001      	adds	r0, #1
   1f214:	4583      	cmp	fp, r0
   1f216:	ea4f 1550 	mov.w	r5, r0, lsr #5
   1f21a:	f000 061f 	and.w	r6, r0, #31
   1f21e:	d1f1      	bne.n	1f204 <mem_alloc.constprop.4+0x12c>
   1f220:	3101      	adds	r1, #1
   1f222:	4549      	cmp	r1, r9
   1f224:	f108 0808 	add.w	r8, r8, #8
   1f228:	d3c4      	bcc.n	1f1b4 <mem_alloc.constprop.4+0xdc>
   1f22a:	e7b4      	b.n	1f196 <mem_alloc.constprop.4+0xbe>
   1f22c:	2101      	movs	r1, #1
   1f22e:	40b1      	lsls	r1, r6
   1f230:	899e      	ldrh	r6, [r3, #12]
   1f232:	ea22 0201 	bic.w	r2, r2, r1
   1f236:	eba0 000e 	sub.w	r0, r0, lr
   1f23a:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1f23e:	685c      	ldr	r4, [r3, #4]
   1f240:	2e00      	cmp	r6, #0
   1f242:	d0a8      	beq.n	1f196 <mem_alloc.constprop.4+0xbe>
   1f244:	887a      	ldrh	r2, [r7, #2]
   1f246:	4282      	cmp	r2, r0
   1f248:	d811      	bhi.n	1f26e <mem_alloc.constprop.4+0x196>
   1f24a:	2100      	movs	r1, #0
   1f24c:	1d3b      	adds	r3, r7, #4
   1f24e:	e003      	b.n	1f258 <mem_alloc.constprop.4+0x180>
   1f250:	885a      	ldrh	r2, [r3, #2]
   1f252:	3304      	adds	r3, #4
   1f254:	4282      	cmp	r2, r0
   1f256:	d80a      	bhi.n	1f26e <mem_alloc.constprop.4+0x196>
   1f258:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1f25c:	3101      	adds	r1, #1
   1f25e:	428e      	cmp	r6, r1
   1f260:	eba0 0002 	sub.w	r0, r0, r2
   1f264:	fb02 4405 	mla	r4, r2, r5, r4
   1f268:	461f      	mov	r7, r3
   1f26a:	d1f1      	bne.n	1f250 <mem_alloc.constprop.4+0x178>
   1f26c:	e793      	b.n	1f196 <mem_alloc.constprop.4+0xbe>
   1f26e:	883b      	ldrh	r3, [r7, #0]
   1f270:	fb00 4003 	mla	r0, r0, r3, r4
   1f274:	b003      	add	sp, #12
   1f276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f27a:	4670      	mov	r0, lr
   1f27c:	e7b1      	b.n	1f1e2 <mem_alloc.constprop.4+0x10a>
   1f27e:	9a00      	ldr	r2, [sp, #0]
   1f280:	2a10      	cmp	r2, #16
   1f282:	bf08      	it	eq
   1f284:	210f      	moveq	r1, #15
   1f286:	d08f      	beq.n	1f1a8 <mem_alloc.constprop.4+0xd0>
   1f288:	e785      	b.n	1f196 <mem_alloc.constprop.4+0xbe>
   1f28a:	bf00      	nop
   1f28c:	20022248 	.word	0x20022248
   1f290:	2002220c 	.word	0x2002220c
   1f294:	200221c8 	.word	0x200221c8

0001f298 <nrf_mem_init>:
   1f298:	b570      	push	{r4, r5, r6, lr}
   1f29a:	2200      	movs	r2, #0
   1f29c:	2501      	movs	r5, #1
   1f29e:	4833      	ldr	r0, [pc, #204]	; (1f36c <nrf_mem_init+0xd4>)
   1f2a0:	0951      	lsrs	r1, r2, #5
   1f2a2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1f2a6:	f002 031f 	and.w	r3, r2, #31
   1f2aa:	fa05 f303 	lsl.w	r3, r5, r3
   1f2ae:	3201      	adds	r2, #1
   1f2b0:	4323      	orrs	r3, r4
   1f2b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1f2b6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   1f2ba:	d1f1      	bne.n	1f2a0 <nrf_mem_init+0x8>
   1f2bc:	2400      	movs	r4, #0
   1f2be:	4b2c      	ldr	r3, [pc, #176]	; (1f370 <nrf_mem_init+0xd8>)
   1f2c0:	4621      	mov	r1, r4
   1f2c2:	223c      	movs	r2, #60	; 0x3c
   1f2c4:	482b      	ldr	r0, [pc, #172]	; (1f374 <_flash_used>)
   1f2c6:	601c      	str	r4, [r3, #0]
   1f2c8:	f007 fbaa 	bl	26a20 <memset>
   1f2cc:	2110      	movs	r1, #16
   1f2ce:	2205      	movs	r2, #5
   1f2d0:	4b29      	ldr	r3, [pc, #164]	; (1f378 <_flash_used+0x4>)
   1f2d2:	4e2a      	ldr	r6, [pc, #168]	; (1f37c <_flash_used+0x8>)
   1f2d4:	e9c3 4400 	strd	r4, r4, [r3]
   1f2d8:	60d9      	str	r1, [r3, #12]
   1f2da:	6159      	str	r1, [r3, #20]
   1f2dc:	61d9      	str	r1, [r3, #28]
   1f2de:	6259      	str	r1, [r3, #36]	; 0x24
   1f2e0:	62d9      	str	r1, [r3, #44]	; 0x2c
   1f2e2:	6359      	str	r1, [r3, #52]	; 0x34
   1f2e4:	63d9      	str	r1, [r3, #60]	; 0x3c
   1f2e6:	6459      	str	r1, [r3, #68]	; 0x44
   1f2e8:	64d9      	str	r1, [r3, #76]	; 0x4c
   1f2ea:	6559      	str	r1, [r3, #84]	; 0x54
   1f2ec:	65d9      	str	r1, [r3, #92]	; 0x5c
   1f2ee:	6659      	str	r1, [r3, #100]	; 0x64
   1f2f0:	66d9      	str	r1, [r3, #108]	; 0x6c
   1f2f2:	6759      	str	r1, [r3, #116]	; 0x74
   1f2f4:	67d9      	str	r1, [r3, #124]	; 0x7c
   1f2f6:	609a      	str	r2, [r3, #8]
   1f2f8:	611a      	str	r2, [r3, #16]
   1f2fa:	619a      	str	r2, [r3, #24]
   1f2fc:	621a      	str	r2, [r3, #32]
   1f2fe:	629a      	str	r2, [r3, #40]	; 0x28
   1f300:	631a      	str	r2, [r3, #48]	; 0x30
   1f302:	639a      	str	r2, [r3, #56]	; 0x38
   1f304:	641a      	str	r2, [r3, #64]	; 0x40
   1f306:	649a      	str	r2, [r3, #72]	; 0x48
   1f308:	651a      	str	r2, [r3, #80]	; 0x50
   1f30a:	659a      	str	r2, [r3, #88]	; 0x58
   1f30c:	661a      	str	r2, [r3, #96]	; 0x60
   1f30e:	669a      	str	r2, [r3, #104]	; 0x68
   1f310:	671a      	str	r2, [r3, #112]	; 0x70
   1f312:	679a      	str	r2, [r3, #120]	; 0x78
   1f314:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   1f318:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   1f31c:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1f320:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   1f324:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   1f328:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   1f32c:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   1f330:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   1f334:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   1f338:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   1f33c:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   1f340:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   1f344:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   1f348:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   1f34c:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   1f350:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   1f354:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1f358:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f35c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   1f360:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1f364:	4620      	mov	r0, r4
   1f366:	7035      	strb	r5, [r6, #0]
   1f368:	bd70      	pop	{r4, r5, r6, pc}
   1f36a:	bf00      	nop
   1f36c:	200221c8 	.word	0x200221c8
   1f370:	20022208 	.word	0x20022208
   1f374:	2002220c 	.word	0x2002220c
   1f378:	20022248 	.word	0x20022248
   1f37c:	2002a091 	.word	0x2002a091

0001f380 <nrf_mem_register>:
   1f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f384:	4b87      	ldr	r3, [pc, #540]	; (1f5a4 <nrf_mem_register+0x224>)
   1f386:	b087      	sub	sp, #28
   1f388:	781b      	ldrb	r3, [r3, #0]
   1f38a:	2b00      	cmp	r3, #0
   1f38c:	f000 808c 	beq.w	1f4a8 <nrf_mem_register+0x128>
   1f390:	b328      	cbz	r0, 1f3de <nrf_mem_register+0x5e>
   1f392:	b321      	cbz	r1, 1f3de <nrf_mem_register+0x5e>
   1f394:	780b      	ldrb	r3, [r1, #0]
   1f396:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1f5b0 <nrf_mem_register+0x230>
   1f39a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1f39e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1f3a2:	685b      	ldr	r3, [r3, #4]
   1f3a4:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   1f3a8:	4463      	add	r3, ip
   1f3aa:	2b10      	cmp	r3, #16
   1f3ac:	d811      	bhi.n	1f3d2 <nrf_mem_register+0x52>
   1f3ae:	f04f 0a00 	mov.w	sl, #0
   1f3b2:	4689      	mov	r9, r1
   1f3b4:	4b7c      	ldr	r3, [pc, #496]	; (1f5a8 <nrf_mem_register+0x228>)
   1f3b6:	4f7d      	ldr	r7, [pc, #500]	; (1f5ac <nrf_mem_register+0x22c>)
   1f3b8:	681b      	ldr	r3, [r3, #0]
   1f3ba:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1f3be:	9300      	str	r3, [sp, #0]
   1f3c0:	68b9      	ldr	r1, [r7, #8]
   1f3c2:	b191      	cbz	r1, 1f3ea <nrf_mem_register+0x6a>
   1f3c4:	f10a 0a01 	add.w	sl, sl, #1
   1f3c8:	f1ba 0f05 	cmp.w	sl, #5
   1f3cc:	f107 070c 	add.w	r7, r7, #12
   1f3d0:	d1f6      	bne.n	1f3c0 <nrf_mem_register+0x40>
   1f3d2:	f248 1b07 	movw	fp, #33031	; 0x8107
   1f3d6:	4658      	mov	r0, fp
   1f3d8:	b007      	add	sp, #28
   1f3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3de:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1f3e2:	4658      	mov	r0, fp
   1f3e4:	b007      	add	sp, #28
   1f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3ea:	f1bc 0f00 	cmp.w	ip, #0
   1f3ee:	d061      	beq.n	1f4b4 <nrf_mem_register+0x134>
   1f3f0:	460d      	mov	r5, r1
   1f3f2:	460c      	mov	r4, r1
   1f3f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1f3f8:	eb0e 0b03 	add.w	fp, lr, r3
   1f3fc:	885a      	ldrh	r2, [r3, #2]
   1f3fe:	f833 6b04 	ldrh.w	r6, [r3], #4
   1f402:	4415      	add	r5, r2
   1f404:	459b      	cmp	fp, r3
   1f406:	fb02 4406 	mla	r4, r2, r6, r4
   1f40a:	d1f7      	bne.n	1f3fc <nrf_mem_register+0x7c>
   1f40c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1f410:	42a3      	cmp	r3, r4
   1f412:	d3d7      	bcc.n	1f3c4 <nrf_mem_register+0x44>
   1f414:	9b00      	ldr	r3, [sp, #0]
   1f416:	442b      	add	r3, r5
   1f418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1f41c:	d2d2      	bcs.n	1f3c4 <nrf_mem_register+0x44>
   1f41e:	4c63      	ldr	r4, [pc, #396]	; (1f5ac <nrf_mem_register+0x22c>)
   1f420:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   1f424:	0092      	lsls	r2, r2, #2
   1f426:	f8c0 a000 	str.w	sl, [r0]
   1f42a:	18a0      	adds	r0, r4, r2
   1f42c:	f844 9002 	str.w	r9, [r4, r2]
   1f430:	9a00      	ldr	r2, [sp, #0]
   1f432:	468b      	mov	fp, r1
   1f434:	e9c0 2501 	strd	r2, r5, [r0, #4]
   1f438:	f899 2001 	ldrb.w	r2, [r9, #1]
   1f43c:	485a      	ldr	r0, [pc, #360]	; (1f5a8 <nrf_mem_register+0x228>)
   1f43e:	2a01      	cmp	r2, #1
   1f440:	6003      	str	r3, [r0, #0]
   1f442:	d0c8      	beq.n	1f3d6 <nrf_mem_register+0x56>
   1f444:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   1f448:	2b00      	cmp	r3, #0
   1f44a:	d0c4      	beq.n	1f3d6 <nrf_mem_register+0x56>
   1f44c:	2500      	movs	r5, #0
   1f44e:	f8cd 9004 	str.w	r9, [sp, #4]
   1f452:	f8cd a00c 	str.w	sl, [sp, #12]
   1f456:	f8cd b014 	str.w	fp, [sp, #20]
   1f45a:	9b01      	ldr	r3, [sp, #4]
   1f45c:	781f      	ldrb	r7, [r3, #0]
   1f45e:	691a      	ldr	r2, [r3, #16]
   1f460:	013b      	lsls	r3, r7, #4
   1f462:	eb03 0907 	add.w	r9, r3, r7
   1f466:	9300      	str	r3, [sp, #0]
   1f468:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1f46c:	6859      	ldr	r1, [r3, #4]
   1f46e:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   1f472:	9102      	str	r1, [sp, #8]
   1f474:	bb39      	cbnz	r1, 1f4c6 <nrf_mem_register+0x146>
   1f476:	9a03      	ldr	r2, [sp, #12]
   1f478:	60dd      	str	r5, [r3, #12]
   1f47a:	609a      	str	r2, [r3, #8]
   1f47c:	9b00      	ldr	r3, [sp, #0]
   1f47e:	443b      	add	r3, r7
   1f480:	461f      	mov	r7, r3
   1f482:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1f486:	684b      	ldr	r3, [r1, #4]
   1f488:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   1f48c:	3301      	adds	r3, #1
   1f48e:	4294      	cmp	r4, r2
   1f490:	604b      	str	r3, [r1, #4]
   1f492:	d912      	bls.n	1f4ba <nrf_mem_register+0x13a>
   1f494:	9b01      	ldr	r3, [sp, #4]
   1f496:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   1f49a:	899b      	ldrh	r3, [r3, #12]
   1f49c:	3501      	adds	r5, #1
   1f49e:	429d      	cmp	r5, r3
   1f4a0:	d3db      	bcc.n	1f45a <nrf_mem_register+0xda>
   1f4a2:	f8dd b014 	ldr.w	fp, [sp, #20]
   1f4a6:	e796      	b.n	1f3d6 <nrf_mem_register+0x56>
   1f4a8:	f248 1b08 	movw	fp, #33032	; 0x8108
   1f4ac:	4658      	mov	r0, fp
   1f4ae:	b007      	add	sp, #28
   1f4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4b4:	9b00      	ldr	r3, [sp, #0]
   1f4b6:	4665      	mov	r5, ip
   1f4b8:	e7ae      	b.n	1f418 <nrf_mem_register+0x98>
   1f4ba:	9b01      	ldr	r3, [sp, #4]
   1f4bc:	3501      	adds	r5, #1
   1f4be:	899b      	ldrh	r3, [r3, #12]
   1f4c0:	42ab      	cmp	r3, r5
   1f4c2:	d8ca      	bhi.n	1f45a <nrf_mem_register+0xda>
   1f4c4:	e7ed      	b.n	1f4a2 <nrf_mem_register+0x122>
   1f4c6:	2600      	movs	r6, #0
   1f4c8:	f101 3aff 	add.w	sl, r1, #4294967295
   1f4cc:	9504      	str	r5, [sp, #16]
   1f4ce:	eb06 000a 	add.w	r0, r6, sl
   1f4d2:	eb09 0206 	add.w	r2, r9, r6
   1f4d6:	3201      	adds	r2, #1
   1f4d8:	3001      	adds	r0, #1
   1f4da:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   1f4de:	0840      	lsrs	r0, r0, #1
   1f4e0:	4d32      	ldr	r5, [pc, #200]	; (1f5ac <nrf_mem_register+0x22c>)
   1f4e2:	eb09 0100 	add.w	r1, r9, r0
   1f4e6:	eb09 030a 	add.w	r3, r9, sl
   1f4ea:	3101      	adds	r1, #1
   1f4ec:	3301      	adds	r3, #1
   1f4ee:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1f4f2:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   1f4f6:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   1f4fa:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   1f4fe:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   1f502:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1f506:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1f50a:	f8db b010 	ldr.w	fp, [fp, #16]
   1f50e:	6852      	ldr	r2, [r2, #4]
   1f510:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   1f514:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   1f518:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   1f51c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1f520:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   1f524:	f8de e010 	ldr.w	lr, [lr, #16]
   1f528:	6849      	ldr	r1, [r1, #4]
   1f52a:	f8dc c010 	ldr.w	ip, [ip, #16]
   1f52e:	685b      	ldr	r3, [r3, #4]
   1f530:	4294      	cmp	r4, r2
   1f532:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   1f536:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   1f53a:	d92d      	bls.n	1f598 <nrf_mem_register+0x218>
   1f53c:	429c      	cmp	r4, r3
   1f53e:	d22d      	bcs.n	1f59c <nrf_mem_register+0x21c>
   1f540:	428c      	cmp	r4, r1
   1f542:	d924      	bls.n	1f58e <nrf_mem_register+0x20e>
   1f544:	1c46      	adds	r6, r0, #1
   1f546:	45b2      	cmp	sl, r6
   1f548:	d2c1      	bcs.n	1f4ce <nrf_mem_register+0x14e>
   1f54a:	2610      	movs	r6, #16
   1f54c:	9d04      	ldr	r5, [sp, #16]
   1f54e:	9a02      	ldr	r2, [sp, #8]
   1f550:	42b2      	cmp	r2, r6
   1f552:	d911      	bls.n	1f578 <nrf_mem_register+0x1f8>
   1f554:	9b00      	ldr	r3, [sp, #0]
   1f556:	443b      	add	r3, r7
   1f558:	441a      	add	r2, r3
   1f55a:	4433      	add	r3, r6
   1f55c:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   1f560:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   1f564:	2208      	movs	r2, #8
   1f566:	4651      	mov	r1, sl
   1f568:	eb0a 0002 	add.w	r0, sl, r2
   1f56c:	f1aa 0a08 	sub.w	sl, sl, #8
   1f570:	f007 fa49 	bl	26a06 <memcpy>
   1f574:	45d1      	cmp	r9, sl
   1f576:	d1f5      	bne.n	1f564 <nrf_mem_register+0x1e4>
   1f578:	9b00      	ldr	r3, [sp, #0]
   1f57a:	9903      	ldr	r1, [sp, #12]
   1f57c:	443b      	add	r3, r7
   1f57e:	4433      	add	r3, r6
   1f580:	3301      	adds	r3, #1
   1f582:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1f586:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   1f58a:	6055      	str	r5, [r2, #4]
   1f58c:	e776      	b.n	1f47c <nrf_mem_register+0xfc>
   1f58e:	f100 3aff 	add.w	sl, r0, #4294967295
   1f592:	4556      	cmp	r6, sl
   1f594:	d99b      	bls.n	1f4ce <nrf_mem_register+0x14e>
   1f596:	e7d8      	b.n	1f54a <nrf_mem_register+0x1ca>
   1f598:	9d04      	ldr	r5, [sp, #16]
   1f59a:	e7d8      	b.n	1f54e <nrf_mem_register+0x1ce>
   1f59c:	9d04      	ldr	r5, [sp, #16]
   1f59e:	f10a 0601 	add.w	r6, sl, #1
   1f5a2:	e7d4      	b.n	1f54e <nrf_mem_register+0x1ce>
   1f5a4:	2002a091 	.word	0x2002a091
   1f5a8:	20022208 	.word	0x20022208
   1f5ac:	2002220c 	.word	0x2002220c
   1f5b0:	20022248 	.word	0x20022248

0001f5b4 <nrf_malloc>:
   1f5b4:	4b03      	ldr	r3, [pc, #12]	; (1f5c4 <nrf_malloc+0x10>)
   1f5b6:	781b      	ldrb	r3, [r3, #0]
   1f5b8:	b10b      	cbz	r3, 1f5be <nrf_malloc+0xa>
   1f5ba:	f7ff bd8d 	b.w	1f0d8 <mem_alloc.constprop.4>
   1f5be:	4618      	mov	r0, r3
   1f5c0:	4770      	bx	lr
   1f5c2:	bf00      	nop
   1f5c4:	2002a091 	.word	0x2002a091

0001f5c8 <nrf_free>:
   1f5c8:	4b04      	ldr	r3, [pc, #16]	; (1f5dc <nrf_free+0x14>)
   1f5ca:	781b      	ldrb	r3, [r3, #0]
   1f5cc:	b123      	cbz	r3, 1f5d8 <nrf_free+0x10>
   1f5ce:	b118      	cbz	r0, 1f5d8 <nrf_free+0x10>
   1f5d0:	4601      	mov	r1, r0
   1f5d2:	2000      	movs	r0, #0
   1f5d4:	f7ff bc30 	b.w	1ee38 <mem_free>
   1f5d8:	4770      	bx	lr
   1f5da:	bf00      	nop
   1f5dc:	2002a091 	.word	0x2002a091

0001f5e0 <nrf_shared_malloc>:
   1f5e0:	4b03      	ldr	r3, [pc, #12]	; (1f5f0 <nrf_shared_malloc+0x10>)
   1f5e2:	781b      	ldrb	r3, [r3, #0]
   1f5e4:	b10b      	cbz	r3, 1f5ea <nrf_shared_malloc+0xa>
   1f5e6:	f7ff bc93 	b.w	1ef10 <mem_alloc.constprop.5>
   1f5ea:	4618      	mov	r0, r3
   1f5ec:	4770      	bx	lr
   1f5ee:	bf00      	nop
   1f5f0:	2002a091 	.word	0x2002a091

0001f5f4 <nrf_shared_free>:
   1f5f4:	4b04      	ldr	r3, [pc, #16]	; (1f608 <nrf_shared_free+0x14>)
   1f5f6:	781b      	ldrb	r3, [r3, #0]
   1f5f8:	b123      	cbz	r3, 1f604 <nrf_shared_free+0x10>
   1f5fa:	b118      	cbz	r0, 1f604 <nrf_shared_free+0x10>
   1f5fc:	4601      	mov	r1, r0
   1f5fe:	2001      	movs	r0, #1
   1f600:	f7ff bc1a 	b.w	1ee38 <mem_free>
   1f604:	4770      	bx	lr
   1f606:	bf00      	nop
   1f608:	2002a091 	.word	0x2002a091

0001f60c <rpc_dfu_event_handler>:
   1f60c:	b508      	push	{r3, lr}
   1f60e:	4a08      	ldr	r2, [pc, #32]	; (1f630 <rpc_dfu_event_handler+0x24>)
   1f610:	68c1      	ldr	r1, [r0, #12]
   1f612:	8812      	ldrh	r2, [r2, #0]
   1f614:	4603      	mov	r3, r0
   1f616:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1f61a:	d005      	beq.n	1f628 <rpc_dfu_event_handler+0x1c>
   1f61c:	6800      	ldr	r0, [r0, #0]
   1f61e:	b110      	cbz	r0, 1f626 <rpc_dfu_event_handler+0x1a>
   1f620:	f7fd fa42 	bl	1caa8 <rpc_dfu_client_data_free>
   1f624:	2000      	movs	r0, #0
   1f626:	bd08      	pop	{r3, pc}
   1f628:	4a02      	ldr	r2, [pc, #8]	; (1f634 <rpc_dfu_event_handler+0x28>)
   1f62a:	2001      	movs	r0, #1
   1f62c:	6013      	str	r3, [r2, #0]
   1f62e:	bd08      	pop	{r3, pc}
   1f630:	20026ea4 	.word	0x20026ea4
   1f634:	20022364 	.word	0x20022364

0001f638 <mfu_interface_init>:
   1f638:	2300      	movs	r3, #0
   1f63a:	b510      	push	{r4, lr}
   1f63c:	4808      	ldr	r0, [pc, #32]	; (1f660 <mfu_interface_init+0x28>)
   1f63e:	4909      	ldr	r1, [pc, #36]	; (1f664 <mfu_interface_init+0x2c>)
   1f640:	4a09      	ldr	r2, [pc, #36]	; (1f668 <mfu_interface_init+0x30>)
   1f642:	4c0a      	ldr	r4, [pc, #40]	; (1f66c <mfu_interface_init+0x34>)
   1f644:	8003      	strh	r3, [r0, #0]
   1f646:	600b      	str	r3, [r1, #0]
   1f648:	6013      	str	r3, [r2, #0]
   1f64a:	6023      	str	r3, [r4, #0]
   1f64c:	f7fd f9f6 	bl	1ca3c <rpc_dfu_client_init>
   1f650:	b910      	cbnz	r0, 1f658 <mfu_interface_init+0x20>
   1f652:	2301      	movs	r3, #1
   1f654:	6023      	str	r3, [r4, #0]
   1f656:	bd10      	pop	{r4, pc}
   1f658:	f04f 30ff 	mov.w	r0, #4294967295
   1f65c:	bd10      	pop	{r4, pc}
   1f65e:	bf00      	nop
   1f660:	20026ea4 	.word	0x20026ea4
   1f664:	20022364 	.word	0x20022364
   1f668:	20022360 	.word	0x20022360
   1f66c:	20022358 	.word	0x20022358

0001f670 <mfu_interface_open>:
   1f670:	b508      	push	{r3, lr}
   1f672:	4b07      	ldr	r3, [pc, #28]	; (1f690 <mfu_interface_open+0x20>)
   1f674:	681a      	ldr	r2, [r3, #0]
   1f676:	2a01      	cmp	r2, #1
   1f678:	d103      	bne.n	1f682 <mfu_interface_open+0x12>
   1f67a:	2202      	movs	r2, #2
   1f67c:	601a      	str	r2, [r3, #0]
   1f67e:	4805      	ldr	r0, [pc, #20]	; (1f694 <mfu_interface_open+0x24>)
   1f680:	bd08      	pop	{r3, pc}
   1f682:	2001      	movs	r0, #1
   1f684:	f7f6 fac8 	bl	15c18 <bsd_os_errno_set>
   1f688:	f04f 30ff 	mov.w	r0, #4294967295
   1f68c:	bd08      	pop	{r3, pc}
   1f68e:	bf00      	nop
   1f690:	20022358 	.word	0x20022358
   1f694:	49765432 	.word	0x49765432

0001f698 <mfu_interface_close>:
   1f698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f69a:	4c32      	ldr	r4, [pc, #200]	; (1f764 <mfu_interface_close+0xcc>)
   1f69c:	b083      	sub	sp, #12
   1f69e:	6823      	ldr	r3, [r4, #0]
   1f6a0:	1e9a      	subs	r2, r3, #2
   1f6a2:	2a01      	cmp	r2, #1
   1f6a4:	d857      	bhi.n	1f756 <mfu_interface_close+0xbe>
   1f6a6:	2b03      	cmp	r3, #3
   1f6a8:	d004      	beq.n	1f6b4 <mfu_interface_close+0x1c>
   1f6aa:	2301      	movs	r3, #1
   1f6ac:	2000      	movs	r0, #0
   1f6ae:	6023      	str	r3, [r4, #0]
   1f6b0:	b003      	add	sp, #12
   1f6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f6b4:	2100      	movs	r1, #0
   1f6b6:	4668      	mov	r0, sp
   1f6b8:	f7fd f9c6 	bl	1ca48 <rpc_dfu_client_request_alloc>
   1f6bc:	4603      	mov	r3, r0
   1f6be:	2800      	cmp	r0, #0
   1f6c0:	d13d      	bne.n	1f73e <mfu_interface_close+0xa6>
   1f6c2:	2104      	movs	r1, #4
   1f6c4:	4e28      	ldr	r6, [pc, #160]	; (1f768 <mfu_interface_close+0xd0>)
   1f6c6:	9800      	ldr	r0, [sp, #0]
   1f6c8:	8832      	ldrh	r2, [r6, #0]
   1f6ca:	7201      	strb	r1, [r0, #8]
   1f6cc:	3201      	adds	r2, #1
   1f6ce:	b292      	uxth	r2, r2
   1f6d0:	0411      	lsls	r1, r2, #16
   1f6d2:	f041 0106 	orr.w	r1, r1, #6
   1f6d6:	4d25      	ldr	r5, [pc, #148]	; (1f76c <mfu_interface_close+0xd4>)
   1f6d8:	60c1      	str	r1, [r0, #12]
   1f6da:	7103      	strb	r3, [r0, #4]
   1f6dc:	7143      	strb	r3, [r0, #5]
   1f6de:	7183      	strb	r3, [r0, #6]
   1f6e0:	71c3      	strb	r3, [r0, #7]
   1f6e2:	7243      	strb	r3, [r0, #9]
   1f6e4:	7283      	strb	r3, [r0, #10]
   1f6e6:	72c3      	strb	r3, [r0, #11]
   1f6e8:	2106      	movs	r1, #6
   1f6ea:	8032      	strh	r2, [r6, #0]
   1f6ec:	602b      	str	r3, [r5, #0]
   1f6ee:	f7fd f9bf 	bl	1ca70 <rpc_dfu_client_request_send>
   1f6f2:	b9d8      	cbnz	r0, 1f72c <mfu_interface_close+0x94>
   1f6f4:	f04f 33ff 	mov.w	r3, #4294967295
   1f6f8:	ae02      	add	r6, sp, #8
   1f6fa:	4627      	mov	r7, r4
   1f6fc:	f846 3d04 	str.w	r3, [r6, #-4]!
   1f700:	e004      	b.n	1f70c <mfu_interface_close+0x74>
   1f702:	4631      	mov	r1, r6
   1f704:	4638      	mov	r0, r7
   1f706:	f7f6 f9d1 	bl	15aac <bsd_os_timedwait>
   1f70a:	b9f0      	cbnz	r0, 1f74a <mfu_interface_close+0xb2>
   1f70c:	6828      	ldr	r0, [r5, #0]
   1f70e:	2800      	cmp	r0, #0
   1f710:	d0f7      	beq.n	1f702 <mfu_interface_close+0x6a>
   1f712:	6905      	ldr	r5, [r0, #16]
   1f714:	f7fd f9c0 	bl	1ca98 <rpc_dfu_client_message_free>
   1f718:	2d00      	cmp	r5, #0
   1f71a:	d0c6      	beq.n	1f6aa <mfu_interface_close+0x12>
   1f71c:	4b14      	ldr	r3, [pc, #80]	; (1f770 <mfu_interface_close+0xd8>)
   1f71e:	2008      	movs	r0, #8
   1f720:	601d      	str	r5, [r3, #0]
   1f722:	f7f6 fa79 	bl	15c18 <bsd_os_errno_set>
   1f726:	f04f 30ff 	mov.w	r0, #4294967295
   1f72a:	e7c1      	b.n	1f6b0 <mfu_interface_close+0x18>
   1f72c:	9800      	ldr	r0, [sp, #0]
   1f72e:	6803      	ldr	r3, [r0, #0]
   1f730:	b11b      	cbz	r3, 1f73a <mfu_interface_close+0xa2>
   1f732:	4618      	mov	r0, r3
   1f734:	f7fd f9b8 	bl	1caa8 <rpc_dfu_client_data_free>
   1f738:	9800      	ldr	r0, [sp, #0]
   1f73a:	f7fd f9ad 	bl	1ca98 <rpc_dfu_client_message_free>
   1f73e:	200c      	movs	r0, #12
   1f740:	f7f6 fa6a 	bl	15c18 <bsd_os_errno_set>
   1f744:	f04f 30ff 	mov.w	r0, #4294967295
   1f748:	e7b2      	b.n	1f6b0 <mfu_interface_close+0x18>
   1f74a:	203c      	movs	r0, #60	; 0x3c
   1f74c:	f7f6 fa64 	bl	15c18 <bsd_os_errno_set>
   1f750:	f04f 30ff 	mov.w	r0, #4294967295
   1f754:	e7ac      	b.n	1f6b0 <mfu_interface_close+0x18>
   1f756:	2001      	movs	r0, #1
   1f758:	f7f6 fa5e 	bl	15c18 <bsd_os_errno_set>
   1f75c:	f04f 30ff 	mov.w	r0, #4294967295
   1f760:	e7a6      	b.n	1f6b0 <mfu_interface_close+0x18>
   1f762:	bf00      	nop
   1f764:	20022358 	.word	0x20022358
   1f768:	20026ea4 	.word	0x20026ea4
   1f76c:	20022364 	.word	0x20022364
   1f770:	2002235c 	.word	0x2002235c

0001f774 <mfu_interface_sendto>:
   1f774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f778:	4e64      	ldr	r6, [pc, #400]	; (1f90c <__kernel_ram_size+0x18c>)
   1f77a:	460f      	mov	r7, r1
   1f77c:	6831      	ldr	r1, [r6, #0]
   1f77e:	4615      	mov	r5, r2
   1f780:	1e8a      	subs	r2, r1, #2
   1f782:	2a01      	cmp	r2, #1
   1f784:	b082      	sub	sp, #8
   1f786:	f200 80b4 	bhi.w	1f8f2 <__kernel_ram_size+0x172>
   1f78a:	2f00      	cmp	r7, #0
   1f78c:	f000 80a5 	beq.w	1f8da <__kernel_ram_size+0x15a>
   1f790:	2d00      	cmp	r5, #0
   1f792:	f000 80a2 	beq.w	1f8da <__kernel_ram_size+0x15a>
   1f796:	2b00      	cmp	r3, #0
   1f798:	f040 80b1 	bne.w	1f8fe <__kernel_ram_size+0x17e>
   1f79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f79e:	2b00      	cmp	r3, #0
   1f7a0:	f040 80a1 	bne.w	1f8e6 <__kernel_ram_size+0x166>
   1f7a4:	2902      	cmp	r1, #2
   1f7a6:	d04f      	beq.n	1f848 <__kernel_ram_size+0xc8>
   1f7a8:	46e8      	mov	r8, sp
   1f7aa:	4640      	mov	r0, r8
   1f7ac:	4629      	mov	r1, r5
   1f7ae:	f7fd f94b 	bl	1ca48 <rpc_dfu_client_request_alloc>
   1f7b2:	4606      	mov	r6, r0
   1f7b4:	b140      	cbz	r0, 1f7c8 <__kernel_ram_size+0x48>
   1f7b6:	200c      	movs	r0, #12
   1f7b8:	f7f6 fa2e 	bl	15c18 <bsd_os_errno_set>
   1f7bc:	f04f 35ff 	mov.w	r5, #4294967295
   1f7c0:	4628      	mov	r0, r5
   1f7c2:	b002      	add	sp, #8
   1f7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f7c8:	9b00      	ldr	r3, [sp, #0]
   1f7ca:	4639      	mov	r1, r7
   1f7cc:	6818      	ldr	r0, [r3, #0]
   1f7ce:	462a      	mov	r2, r5
   1f7d0:	f007 f919 	bl	26a06 <memcpy>
   1f7d4:	2104      	movs	r1, #4
   1f7d6:	4c4e      	ldr	r4, [pc, #312]	; (1f910 <__kernel_ram_size+0x190>)
   1f7d8:	9800      	ldr	r0, [sp, #0]
   1f7da:	8823      	ldrh	r3, [r4, #0]
   1f7dc:	6045      	str	r5, [r0, #4]
   1f7de:	3301      	adds	r3, #1
   1f7e0:	b29b      	uxth	r3, r3
   1f7e2:	041a      	lsls	r2, r3, #16
   1f7e4:	8023      	strh	r3, [r4, #0]
   1f7e6:	430a      	orrs	r2, r1
   1f7e8:	4c4a      	ldr	r4, [pc, #296]	; (1f914 <__kernel_ram_size+0x194>)
   1f7ea:	60c2      	str	r2, [r0, #12]
   1f7ec:	7246      	strb	r6, [r0, #9]
   1f7ee:	7286      	strb	r6, [r0, #10]
   1f7f0:	72c6      	strb	r6, [r0, #11]
   1f7f2:	7201      	strb	r1, [r0, #8]
   1f7f4:	6026      	str	r6, [r4, #0]
   1f7f6:	f7fd f93b 	bl	1ca70 <rpc_dfu_client_request_send>
   1f7fa:	2800      	cmp	r0, #0
   1f7fc:	d163      	bne.n	1f8c6 <__kernel_ram_size+0x146>
   1f7fe:	f04f 33ff 	mov.w	r3, #4294967295
   1f802:	ae02      	add	r6, sp, #8
   1f804:	4f41      	ldr	r7, [pc, #260]	; (1f90c <__kernel_ram_size+0x18c>)
   1f806:	f846 3d04 	str.w	r3, [r6, #-4]!
   1f80a:	e004      	b.n	1f816 <__kernel_ram_size+0x96>
   1f80c:	4631      	mov	r1, r6
   1f80e:	4638      	mov	r0, r7
   1f810:	f7f6 f94c 	bl	15aac <bsd_os_timedwait>
   1f814:	b978      	cbnz	r0, 1f836 <__kernel_ram_size+0xb6>
   1f816:	6820      	ldr	r0, [r4, #0]
   1f818:	2800      	cmp	r0, #0
   1f81a:	d0f7      	beq.n	1f80c <__kernel_ram_size+0x8c>
   1f81c:	6904      	ldr	r4, [r0, #16]
   1f81e:	f7fd f93b 	bl	1ca98 <rpc_dfu_client_message_free>
   1f822:	2c00      	cmp	r4, #0
   1f824:	d0cc      	beq.n	1f7c0 <__kernel_ram_size+0x40>
   1f826:	4b3c      	ldr	r3, [pc, #240]	; (1f918 <__kernel_ram_size+0x198>)
   1f828:	2008      	movs	r0, #8
   1f82a:	601c      	str	r4, [r3, #0]
   1f82c:	f04f 35ff 	mov.w	r5, #4294967295
   1f830:	f7f6 f9f2 	bl	15c18 <bsd_os_errno_set>
   1f834:	e7c4      	b.n	1f7c0 <__kernel_ram_size+0x40>
   1f836:	f04f 35ff 	mov.w	r5, #4294967295
   1f83a:	203c      	movs	r0, #60	; 0x3c
   1f83c:	f7f6 f9ec 	bl	15c18 <bsd_os_errno_set>
   1f840:	4628      	mov	r0, r5
   1f842:	b002      	add	sp, #8
   1f844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f848:	46e8      	mov	r8, sp
   1f84a:	4619      	mov	r1, r3
   1f84c:	4640      	mov	r0, r8
   1f84e:	f7fd f8fb 	bl	1ca48 <rpc_dfu_client_request_alloc>
   1f852:	4602      	mov	r2, r0
   1f854:	2800      	cmp	r0, #0
   1f856:	d1ae      	bne.n	1f7b6 <__kernel_ram_size+0x36>
   1f858:	f04f 0c08 	mov.w	ip, #8
   1f85c:	492c      	ldr	r1, [pc, #176]	; (1f910 <__kernel_ram_size+0x190>)
   1f85e:	482f      	ldr	r0, [pc, #188]	; (1f91c <__kernel_ram_size+0x19c>)
   1f860:	880b      	ldrh	r3, [r1, #0]
   1f862:	6804      	ldr	r4, [r0, #0]
   1f864:	3301      	adds	r3, #1
   1f866:	9800      	ldr	r0, [sp, #0]
   1f868:	b29b      	uxth	r3, r3
   1f86a:	800b      	strh	r3, [r1, #0]
   1f86c:	041b      	lsls	r3, r3, #16
   1f86e:	f043 0303 	orr.w	r3, r3, #3
   1f872:	6104      	str	r4, [r0, #16]
   1f874:	4c27      	ldr	r4, [pc, #156]	; (1f914 <__kernel_ram_size+0x194>)
   1f876:	60c3      	str	r3, [r0, #12]
   1f878:	7102      	strb	r2, [r0, #4]
   1f87a:	7142      	strb	r2, [r0, #5]
   1f87c:	7182      	strb	r2, [r0, #6]
   1f87e:	71c2      	strb	r2, [r0, #7]
   1f880:	7242      	strb	r2, [r0, #9]
   1f882:	7282      	strb	r2, [r0, #10]
   1f884:	72c2      	strb	r2, [r0, #11]
   1f886:	f880 c008 	strb.w	ip, [r0, #8]
   1f88a:	2103      	movs	r1, #3
   1f88c:	6022      	str	r2, [r4, #0]
   1f88e:	f7fd f8ef 	bl	1ca70 <rpc_dfu_client_request_send>
   1f892:	b9c0      	cbnz	r0, 1f8c6 <__kernel_ram_size+0x146>
   1f894:	f04f 33ff 	mov.w	r3, #4294967295
   1f898:	f10d 0908 	add.w	r9, sp, #8
   1f89c:	f849 3d04 	str.w	r3, [r9, #-4]!
   1f8a0:	46b2      	mov	sl, r6
   1f8a2:	e005      	b.n	1f8b0 <__kernel_ram_size+0x130>
   1f8a4:	4649      	mov	r1, r9
   1f8a6:	4650      	mov	r0, sl
   1f8a8:	f7f6 f900 	bl	15aac <bsd_os_timedwait>
   1f8ac:	2800      	cmp	r0, #0
   1f8ae:	d1c2      	bne.n	1f836 <__kernel_ram_size+0xb6>
   1f8b0:	6820      	ldr	r0, [r4, #0]
   1f8b2:	2800      	cmp	r0, #0
   1f8b4:	d0f6      	beq.n	1f8a4 <__kernel_ram_size+0x124>
   1f8b6:	6904      	ldr	r4, [r0, #16]
   1f8b8:	f7fd f8ee 	bl	1ca98 <rpc_dfu_client_message_free>
   1f8bc:	2c00      	cmp	r4, #0
   1f8be:	d1b2      	bne.n	1f826 <__kernel_ram_size+0xa6>
   1f8c0:	2303      	movs	r3, #3
   1f8c2:	6033      	str	r3, [r6, #0]
   1f8c4:	e771      	b.n	1f7aa <__kernel_ram_size+0x2a>
   1f8c6:	9800      	ldr	r0, [sp, #0]
   1f8c8:	6803      	ldr	r3, [r0, #0]
   1f8ca:	b11b      	cbz	r3, 1f8d4 <__kernel_ram_size+0x154>
   1f8cc:	4618      	mov	r0, r3
   1f8ce:	f7fd f8eb 	bl	1caa8 <rpc_dfu_client_data_free>
   1f8d2:	9800      	ldr	r0, [sp, #0]
   1f8d4:	f7fd f8e0 	bl	1ca98 <rpc_dfu_client_message_free>
   1f8d8:	e76d      	b.n	1f7b6 <__kernel_ram_size+0x36>
   1f8da:	2016      	movs	r0, #22
   1f8dc:	f7f6 f99c 	bl	15c18 <bsd_os_errno_set>
   1f8e0:	f04f 35ff 	mov.w	r5, #4294967295
   1f8e4:	e76c      	b.n	1f7c0 <__kernel_ram_size+0x40>
   1f8e6:	2038      	movs	r0, #56	; 0x38
   1f8e8:	f7f6 f996 	bl	15c18 <bsd_os_errno_set>
   1f8ec:	f04f 35ff 	mov.w	r5, #4294967295
   1f8f0:	e766      	b.n	1f7c0 <__kernel_ram_size+0x40>
   1f8f2:	2001      	movs	r0, #1
   1f8f4:	f7f6 f990 	bl	15c18 <bsd_os_errno_set>
   1f8f8:	f04f 35ff 	mov.w	r5, #4294967295
   1f8fc:	e760      	b.n	1f7c0 <__kernel_ram_size+0x40>
   1f8fe:	202d      	movs	r0, #45	; 0x2d
   1f900:	f7f6 f98a 	bl	15c18 <bsd_os_errno_set>
   1f904:	f04f 35ff 	mov.w	r5, #4294967295
   1f908:	e75a      	b.n	1f7c0 <__kernel_ram_size+0x40>
   1f90a:	bf00      	nop
   1f90c:	20022358 	.word	0x20022358
   1f910:	20026ea4 	.word	0x20026ea4
   1f914:	20022364 	.word	0x20022364
   1f918:	2002235c 	.word	0x2002235c
   1f91c:	20022360 	.word	0x20022360

0001f920 <mfu_interface_setopt>:
   1f920:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f922:	4846      	ldr	r0, [pc, #280]	; (1fa3c <mfu_interface_setopt+0x11c>)
   1f924:	b083      	sub	sp, #12
   1f926:	6800      	ldr	r0, [r0, #0]
   1f928:	3802      	subs	r0, #2
   1f92a:	2801      	cmp	r0, #1
   1f92c:	d877      	bhi.n	1fa1e <mfu_interface_setopt+0xfe>
   1f92e:	f240 2003 	movw	r0, #515	; 0x203
   1f932:	4281      	cmp	r1, r0
   1f934:	d16d      	bne.n	1fa12 <mfu_interface_setopt+0xf2>
   1f936:	3a04      	subs	r2, #4
   1f938:	2a03      	cmp	r2, #3
   1f93a:	d85c      	bhi.n	1f9f6 <mfu_interface_setopt+0xd6>
   1f93c:	e8df f002 	tbb	[pc, r2]
   1f940:	514e024b 	.word	0x514e024b
   1f944:	2407      	movs	r4, #7
   1f946:	4625      	mov	r5, r4
   1f948:	2100      	movs	r1, #0
   1f94a:	4668      	mov	r0, sp
   1f94c:	f7fd f87c 	bl	1ca48 <rpc_dfu_client_request_alloc>
   1f950:	4603      	mov	r3, r0
   1f952:	2800      	cmp	r0, #0
   1f954:	d138      	bne.n	1f9c8 <mfu_interface_setopt+0xa8>
   1f956:	2704      	movs	r7, #4
   1f958:	4e39      	ldr	r6, [pc, #228]	; (1fa40 <mfu_interface_setopt+0x120>)
   1f95a:	9800      	ldr	r0, [sp, #0]
   1f95c:	8832      	ldrh	r2, [r6, #0]
   1f95e:	4629      	mov	r1, r5
   1f960:	3201      	adds	r2, #1
   1f962:	b292      	uxth	r2, r2
   1f964:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   1f968:	4c36      	ldr	r4, [pc, #216]	; (1fa44 <mfu_interface_setopt+0x124>)
   1f96a:	60c5      	str	r5, [r0, #12]
   1f96c:	7103      	strb	r3, [r0, #4]
   1f96e:	7143      	strb	r3, [r0, #5]
   1f970:	7183      	strb	r3, [r0, #6]
   1f972:	71c3      	strb	r3, [r0, #7]
   1f974:	7243      	strb	r3, [r0, #9]
   1f976:	7283      	strb	r3, [r0, #10]
   1f978:	72c3      	strb	r3, [r0, #11]
   1f97a:	7207      	strb	r7, [r0, #8]
   1f97c:	8032      	strh	r2, [r6, #0]
   1f97e:	6023      	str	r3, [r4, #0]
   1f980:	f7fd f876 	bl	1ca70 <rpc_dfu_client_request_send>
   1f984:	b9b8      	cbnz	r0, 1f9b6 <mfu_interface_setopt+0x96>
   1f986:	f04f 33ff 	mov.w	r3, #4294967295
   1f98a:	ad02      	add	r5, sp, #8
   1f98c:	4e2b      	ldr	r6, [pc, #172]	; (1fa3c <mfu_interface_setopt+0x11c>)
   1f98e:	f845 3d04 	str.w	r3, [r5, #-4]!
   1f992:	e005      	b.n	1f9a0 <mfu_interface_setopt+0x80>
   1f994:	4629      	mov	r1, r5
   1f996:	4630      	mov	r0, r6
   1f998:	f7f6 f888 	bl	15aac <bsd_os_timedwait>
   1f99c:	2800      	cmp	r0, #0
   1f99e:	d131      	bne.n	1fa04 <mfu_interface_setopt+0xe4>
   1f9a0:	6820      	ldr	r0, [r4, #0]
   1f9a2:	2800      	cmp	r0, #0
   1f9a4:	d0f6      	beq.n	1f994 <mfu_interface_setopt+0x74>
   1f9a6:	6904      	ldr	r4, [r0, #16]
   1f9a8:	f7fd f876 	bl	1ca98 <rpc_dfu_client_message_free>
   1f9ac:	2c00      	cmp	r4, #0
   1f9ae:	d13c      	bne.n	1fa2a <mfu_interface_setopt+0x10a>
   1f9b0:	4620      	mov	r0, r4
   1f9b2:	b003      	add	sp, #12
   1f9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f9b6:	9800      	ldr	r0, [sp, #0]
   1f9b8:	6803      	ldr	r3, [r0, #0]
   1f9ba:	b11b      	cbz	r3, 1f9c4 <mfu_interface_setopt+0xa4>
   1f9bc:	4618      	mov	r0, r3
   1f9be:	f7fd f873 	bl	1caa8 <rpc_dfu_client_data_free>
   1f9c2:	9800      	ldr	r0, [sp, #0]
   1f9c4:	f7fd f868 	bl	1ca98 <rpc_dfu_client_message_free>
   1f9c8:	200c      	movs	r0, #12
   1f9ca:	f7f6 f925 	bl	15c18 <bsd_os_errno_set>
   1f9ce:	f04f 30ff 	mov.w	r0, #4294967295
   1f9d2:	b003      	add	sp, #12
   1f9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f9d6:	2405      	movs	r4, #5
   1f9d8:	4625      	mov	r5, r4
   1f9da:	e7b5      	b.n	1f948 <mfu_interface_setopt+0x28>
   1f9dc:	2408      	movs	r4, #8
   1f9de:	4625      	mov	r5, r4
   1f9e0:	e7b2      	b.n	1f948 <mfu_interface_setopt+0x28>
   1f9e2:	b1b3      	cbz	r3, 1fa12 <mfu_interface_setopt+0xf2>
   1f9e4:	9a08      	ldr	r2, [sp, #32]
   1f9e6:	2a04      	cmp	r2, #4
   1f9e8:	d113      	bne.n	1fa12 <mfu_interface_setopt+0xf2>
   1f9ea:	2000      	movs	r0, #0
   1f9ec:	681a      	ldr	r2, [r3, #0]
   1f9ee:	4b16      	ldr	r3, [pc, #88]	; (1fa48 <mfu_interface_setopt+0x128>)
   1f9f0:	601a      	str	r2, [r3, #0]
   1f9f2:	b003      	add	sp, #12
   1f9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f9f6:	202a      	movs	r0, #42	; 0x2a
   1f9f8:	f7f6 f90e 	bl	15c18 <bsd_os_errno_set>
   1f9fc:	f04f 30ff 	mov.w	r0, #4294967295
   1fa00:	b003      	add	sp, #12
   1fa02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa04:	203c      	movs	r0, #60	; 0x3c
   1fa06:	f7f6 f907 	bl	15c18 <bsd_os_errno_set>
   1fa0a:	f04f 30ff 	mov.w	r0, #4294967295
   1fa0e:	b003      	add	sp, #12
   1fa10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa12:	2016      	movs	r0, #22
   1fa14:	f7f6 f900 	bl	15c18 <bsd_os_errno_set>
   1fa18:	f04f 30ff 	mov.w	r0, #4294967295
   1fa1c:	e7c9      	b.n	1f9b2 <mfu_interface_setopt+0x92>
   1fa1e:	2001      	movs	r0, #1
   1fa20:	f7f6 f8fa 	bl	15c18 <bsd_os_errno_set>
   1fa24:	f04f 30ff 	mov.w	r0, #4294967295
   1fa28:	e7c3      	b.n	1f9b2 <mfu_interface_setopt+0x92>
   1fa2a:	4b08      	ldr	r3, [pc, #32]	; (1fa4c <mfu_interface_setopt+0x12c>)
   1fa2c:	2008      	movs	r0, #8
   1fa2e:	601c      	str	r4, [r3, #0]
   1fa30:	f7f6 f8f2 	bl	15c18 <bsd_os_errno_set>
   1fa34:	f04f 30ff 	mov.w	r0, #4294967295
   1fa38:	e7bb      	b.n	1f9b2 <mfu_interface_setopt+0x92>
   1fa3a:	bf00      	nop
   1fa3c:	20022358 	.word	0x20022358
   1fa40:	20026ea4 	.word	0x20026ea4
   1fa44:	20022364 	.word	0x20022364
   1fa48:	20022360 	.word	0x20022360
   1fa4c:	2002235c 	.word	0x2002235c

0001fa50 <mfu_interface_getopt>:
   1fa50:	f240 2003 	movw	r0, #515	; 0x203
   1fa54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa58:	4281      	cmp	r1, r0
   1fa5a:	b082      	sub	sp, #8
   1fa5c:	9e08      	ldr	r6, [sp, #32]
   1fa5e:	f040 80ae 	bne.w	1fbbe <mfu_interface_getopt+0x16e>
   1fa62:	461d      	mov	r5, r3
   1fa64:	2b00      	cmp	r3, #0
   1fa66:	f000 80aa 	beq.w	1fbbe <mfu_interface_getopt+0x16e>
   1fa6a:	2e00      	cmp	r6, #0
   1fa6c:	f000 80a7 	beq.w	1fbbe <mfu_interface_getopt+0x16e>
   1fa70:	4b5e      	ldr	r3, [pc, #376]	; (1fbec <mfu_interface_getopt+0x19c>)
   1fa72:	681b      	ldr	r3, [r3, #0]
   1fa74:	3b02      	subs	r3, #2
   1fa76:	2b01      	cmp	r3, #1
   1fa78:	f200 80a7 	bhi.w	1fbca <mfu_interface_getopt+0x17a>
   1fa7c:	3a01      	subs	r2, #1
   1fa7e:	2a13      	cmp	r2, #19
   1fa80:	d879      	bhi.n	1fb76 <mfu_interface_getopt+0x126>
   1fa82:	e8df f002 	tbb	[pc, r2]
   1fa86:	5f17      	.short	0x5f17
   1fa88:	78787878 	.word	0x78787878
   1fa8c:	78787872 	.word	0x78787872
   1fa90:	78787878 	.word	0x78787878
   1fa94:	78787878 	.word	0x78787878
   1fa98:	0a78      	.short	0x0a78
   1fa9a:	6833      	ldr	r3, [r6, #0]
   1fa9c:	2b04      	cmp	r3, #4
   1fa9e:	f040 808e 	bne.w	1fbbe <mfu_interface_getopt+0x16e>
   1faa2:	2200      	movs	r2, #0
   1faa4:	4610      	mov	r0, r2
   1faa6:	4b52      	ldr	r3, [pc, #328]	; (1fbf0 <mfu_interface_getopt+0x1a0>)
   1faa8:	6819      	ldr	r1, [r3, #0]
   1faaa:	601a      	str	r2, [r3, #0]
   1faac:	6029      	str	r1, [r5, #0]
   1faae:	b002      	add	sp, #8
   1fab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fab4:	6833      	ldr	r3, [r6, #0]
   1fab6:	2b24      	cmp	r3, #36	; 0x24
   1fab8:	f040 8081 	bne.w	1fbbe <mfu_interface_getopt+0x16e>
   1fabc:	2401      	movs	r4, #1
   1fabe:	46a0      	mov	r8, r4
   1fac0:	2100      	movs	r1, #0
   1fac2:	4668      	mov	r0, sp
   1fac4:	f7fc ffc0 	bl	1ca48 <rpc_dfu_client_request_alloc>
   1fac8:	2800      	cmp	r0, #0
   1faca:	d146      	bne.n	1fb5a <mfu_interface_getopt+0x10a>
   1facc:	4949      	ldr	r1, [pc, #292]	; (1fbf4 <mfu_interface_getopt+0x1a4>)
   1face:	9b00      	ldr	r3, [sp, #0]
   1fad0:	880a      	ldrh	r2, [r1, #0]
   1fad2:	f1b8 0f03 	cmp.w	r8, #3
   1fad6:	f102 0201 	add.w	r2, r2, #1
   1fada:	b292      	uxth	r2, r2
   1fadc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1fae0:	7118      	strb	r0, [r3, #4]
   1fae2:	800a      	strh	r2, [r1, #0]
   1fae4:	60dc      	str	r4, [r3, #12]
   1fae6:	7158      	strb	r0, [r3, #5]
   1fae8:	7198      	strb	r0, [r3, #6]
   1faea:	71d8      	strb	r0, [r3, #7]
   1faec:	d04b      	beq.n	1fb86 <mfu_interface_getopt+0x136>
   1faee:	2104      	movs	r1, #4
   1faf0:	2200      	movs	r2, #0
   1faf2:	4f41      	ldr	r7, [pc, #260]	; (1fbf8 <mfu_interface_getopt+0x1a8>)
   1faf4:	6099      	str	r1, [r3, #8]
   1faf6:	4618      	mov	r0, r3
   1faf8:	4641      	mov	r1, r8
   1fafa:	603a      	str	r2, [r7, #0]
   1fafc:	f7fc ffb8 	bl	1ca70 <rpc_dfu_client_request_send>
   1fb00:	2800      	cmp	r0, #0
   1fb02:	d14d      	bne.n	1fba0 <mfu_interface_getopt+0x150>
   1fb04:	f04f 33ff 	mov.w	r3, #4294967295
   1fb08:	ac02      	add	r4, sp, #8
   1fb0a:	f844 3d04 	str.w	r3, [r4, #-4]!
   1fb0e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1fbec <mfu_interface_getopt+0x19c>
   1fb12:	e005      	b.n	1fb20 <mfu_interface_getopt+0xd0>
   1fb14:	4621      	mov	r1, r4
   1fb16:	4640      	mov	r0, r8
   1fb18:	f7f5 ffc8 	bl	15aac <bsd_os_timedwait>
   1fb1c:	2800      	cmp	r0, #0
   1fb1e:	d137      	bne.n	1fb90 <mfu_interface_getopt+0x140>
   1fb20:	6839      	ldr	r1, [r7, #0]
   1fb22:	2900      	cmp	r1, #0
   1fb24:	d0f6      	beq.n	1fb14 <mfu_interface_getopt+0xc4>
   1fb26:	690c      	ldr	r4, [r1, #16]
   1fb28:	2c00      	cmp	r4, #0
   1fb2a:	d154      	bne.n	1fbd6 <mfu_interface_getopt+0x186>
   1fb2c:	6832      	ldr	r2, [r6, #0]
   1fb2e:	3114      	adds	r1, #20
   1fb30:	4628      	mov	r0, r5
   1fb32:	f006 ff68 	bl	26a06 <memcpy>
   1fb36:	6838      	ldr	r0, [r7, #0]
   1fb38:	f7fc ffae 	bl	1ca98 <rpc_dfu_client_message_free>
   1fb3c:	4620      	mov	r0, r4
   1fb3e:	b002      	add	sp, #8
   1fb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb44:	6833      	ldr	r3, [r6, #0]
   1fb46:	2b04      	cmp	r3, #4
   1fb48:	d139      	bne.n	1fbbe <mfu_interface_getopt+0x16e>
   1fb4a:	2402      	movs	r4, #2
   1fb4c:	2100      	movs	r1, #0
   1fb4e:	4668      	mov	r0, sp
   1fb50:	46a0      	mov	r8, r4
   1fb52:	f7fc ff79 	bl	1ca48 <rpc_dfu_client_request_alloc>
   1fb56:	2800      	cmp	r0, #0
   1fb58:	d0b8      	beq.n	1facc <mfu_interface_getopt+0x7c>
   1fb5a:	200c      	movs	r0, #12
   1fb5c:	f7f6 f85c 	bl	15c18 <bsd_os_errno_set>
   1fb60:	f04f 30ff 	mov.w	r0, #4294967295
   1fb64:	b002      	add	sp, #8
   1fb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb6a:	6833      	ldr	r3, [r6, #0]
   1fb6c:	2b04      	cmp	r3, #4
   1fb6e:	d126      	bne.n	1fbbe <mfu_interface_getopt+0x16e>
   1fb70:	2409      	movs	r4, #9
   1fb72:	46a0      	mov	r8, r4
   1fb74:	e7a4      	b.n	1fac0 <mfu_interface_getopt+0x70>
   1fb76:	202a      	movs	r0, #42	; 0x2a
   1fb78:	f7f6 f84e 	bl	15c18 <bsd_os_errno_set>
   1fb7c:	f04f 30ff 	mov.w	r0, #4294967295
   1fb80:	b002      	add	sp, #8
   1fb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb86:	4a1d      	ldr	r2, [pc, #116]	; (1fbfc <mfu_interface_getopt+0x1ac>)
   1fb88:	2108      	movs	r1, #8
   1fb8a:	6812      	ldr	r2, [r2, #0]
   1fb8c:	611a      	str	r2, [r3, #16]
   1fb8e:	e7af      	b.n	1faf0 <mfu_interface_getopt+0xa0>
   1fb90:	203c      	movs	r0, #60	; 0x3c
   1fb92:	f7f6 f841 	bl	15c18 <bsd_os_errno_set>
   1fb96:	f04f 30ff 	mov.w	r0, #4294967295
   1fb9a:	b002      	add	sp, #8
   1fb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fba0:	9800      	ldr	r0, [sp, #0]
   1fba2:	6803      	ldr	r3, [r0, #0]
   1fba4:	b11b      	cbz	r3, 1fbae <mfu_interface_getopt+0x15e>
   1fba6:	4618      	mov	r0, r3
   1fba8:	f7fc ff7e 	bl	1caa8 <rpc_dfu_client_data_free>
   1fbac:	9800      	ldr	r0, [sp, #0]
   1fbae:	f7fc ff73 	bl	1ca98 <rpc_dfu_client_message_free>
   1fbb2:	200c      	movs	r0, #12
   1fbb4:	f7f6 f830 	bl	15c18 <bsd_os_errno_set>
   1fbb8:	f04f 30ff 	mov.w	r0, #4294967295
   1fbbc:	e7d2      	b.n	1fb64 <mfu_interface_getopt+0x114>
   1fbbe:	2016      	movs	r0, #22
   1fbc0:	f7f6 f82a 	bl	15c18 <bsd_os_errno_set>
   1fbc4:	f04f 30ff 	mov.w	r0, #4294967295
   1fbc8:	e771      	b.n	1faae <mfu_interface_getopt+0x5e>
   1fbca:	2001      	movs	r0, #1
   1fbcc:	f7f6 f824 	bl	15c18 <bsd_os_errno_set>
   1fbd0:	f04f 30ff 	mov.w	r0, #4294967295
   1fbd4:	e76b      	b.n	1faae <mfu_interface_getopt+0x5e>
   1fbd6:	4b06      	ldr	r3, [pc, #24]	; (1fbf0 <mfu_interface_getopt+0x1a0>)
   1fbd8:	2008      	movs	r0, #8
   1fbda:	601c      	str	r4, [r3, #0]
   1fbdc:	f7f6 f81c 	bl	15c18 <bsd_os_errno_set>
   1fbe0:	6838      	ldr	r0, [r7, #0]
   1fbe2:	f7fc ff59 	bl	1ca98 <rpc_dfu_client_message_free>
   1fbe6:	f04f 30ff 	mov.w	r0, #4294967295
   1fbea:	e760      	b.n	1faae <mfu_interface_getopt+0x5e>
   1fbec:	20022358 	.word	0x20022358
   1fbf0:	2002235c 	.word	0x2002235c
   1fbf4:	20026ea4 	.word	0x20026ea4
   1fbf8:	20022364 	.word	0x20022364
   1fbfc:	20022360 	.word	0x20022360

0001fc00 <interface_init>:
   1fc00:	b508      	push	{r3, lr}
   1fc02:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1fc06:	2100      	movs	r1, #0
   1fc08:	4802      	ldr	r0, [pc, #8]	; (1fc14 <interface_init+0x14>)
   1fc0a:	f006 ff09 	bl	26a20 <memset>
   1fc0e:	2000      	movs	r0, #0
   1fc10:	bd08      	pop	{r3, pc}
   1fc12:	bf00      	nop
   1fc14:	2002a094 	.word	0x2002a094

0001fc18 <interface_socket_allocate>:
   1fc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc1a:	4b30      	ldr	r3, [pc, #192]	; (1fcdc <interface_socket_allocate+0xc4>)
   1fc1c:	4606      	mov	r6, r0
   1fc1e:	681d      	ldr	r5, [r3, #0]
   1fc20:	4608      	mov	r0, r1
   1fc22:	b31d      	cbz	r5, 1fc6c <interface_socket_allocate+0x54>
   1fc24:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1fc26:	2c00      	cmp	r4, #0
   1fc28:	d04a      	beq.n	1fcc0 <interface_socket_allocate+0xa8>
   1fc2a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1fc2c:	2c00      	cmp	r4, #0
   1fc2e:	d049      	beq.n	1fcc4 <interface_socket_allocate+0xac>
   1fc30:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   1fc32:	2c00      	cmp	r4, #0
   1fc34:	d048      	beq.n	1fcc8 <interface_socket_allocate+0xb0>
   1fc36:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   1fc3a:	2900      	cmp	r1, #0
   1fc3c:	d046      	beq.n	1fccc <interface_socket_allocate+0xb4>
   1fc3e:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   1fc42:	b191      	cbz	r1, 1fc6a <interface_socket_allocate+0x52>
   1fc44:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   1fc48:	2900      	cmp	r1, #0
   1fc4a:	d043      	beq.n	1fcd4 <interface_socket_allocate+0xbc>
   1fc4c:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   1fc50:	2900      	cmp	r1, #0
   1fc52:	d041      	beq.n	1fcd8 <interface_socket_allocate+0xc0>
   1fc54:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   1fc58:	2900      	cmp	r1, #0
   1fc5a:	d039      	beq.n	1fcd0 <interface_socket_allocate+0xb8>
   1fc5c:	f04f 35ff 	mov.w	r5, #4294967295
   1fc60:	2069      	movs	r0, #105	; 0x69
   1fc62:	f7f5 ffd9 	bl	15c18 <bsd_os_errno_set>
   1fc66:	4628      	mov	r0, r5
   1fc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc6a:	2505      	movs	r5, #5
   1fc6c:	f04f 0c01 	mov.w	ip, #1
   1fc70:	f04f 37ff 	mov.w	r7, #4294967295
   1fc74:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1fc78:	00e4      	lsls	r4, r4, #3
   1fc7a:	f843 c004 	str.w	ip, [r3, r4]
   1fc7e:	441c      	add	r4, r3
   1fc80:	4611      	mov	r1, r2
   1fc82:	61a7      	str	r7, [r4, #24]
   1fc84:	4622      	mov	r2, r4
   1fc86:	f7fe ff9b 	bl	1ebc0 <packet_handler_create>
   1fc8a:	4603      	mov	r3, r0
   1fc8c:	61e0      	str	r0, [r4, #28]
   1fc8e:	b158      	cbz	r0, 1fca8 <interface_socket_allocate+0x90>
   1fc90:	681b      	ldr	r3, [r3, #0]
   1fc92:	681b      	ldr	r3, [r3, #0]
   1fc94:	4798      	blx	r3
   1fc96:	b910      	cbnz	r0, 1fc9e <interface_socket_allocate+0x86>
   1fc98:	6034      	str	r4, [r6, #0]
   1fc9a:	4628      	mov	r0, r5
   1fc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc9e:	69e0      	ldr	r0, [r4, #28]
   1fca0:	f7fe ffae 	bl	1ec00 <packet_handler_delete>
   1fca4:	2300      	movs	r3, #0
   1fca6:	61e3      	str	r3, [r4, #28]
   1fca8:	f04f 35ff 	mov.w	r5, #4294967295
   1fcac:	2228      	movs	r2, #40	; 0x28
   1fcae:	2100      	movs	r1, #0
   1fcb0:	4620      	mov	r0, r4
   1fcb2:	f006 feb5 	bl	26a20 <memset>
   1fcb6:	200c      	movs	r0, #12
   1fcb8:	f7f5 ffae 	bl	15c18 <bsd_os_errno_set>
   1fcbc:	4628      	mov	r0, r5
   1fcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fcc0:	2501      	movs	r5, #1
   1fcc2:	e7d3      	b.n	1fc6c <interface_socket_allocate+0x54>
   1fcc4:	2502      	movs	r5, #2
   1fcc6:	e7d1      	b.n	1fc6c <interface_socket_allocate+0x54>
   1fcc8:	2503      	movs	r5, #3
   1fcca:	e7cf      	b.n	1fc6c <interface_socket_allocate+0x54>
   1fccc:	2504      	movs	r5, #4
   1fcce:	e7cd      	b.n	1fc6c <interface_socket_allocate+0x54>
   1fcd0:	2508      	movs	r5, #8
   1fcd2:	e7cb      	b.n	1fc6c <interface_socket_allocate+0x54>
   1fcd4:	2506      	movs	r5, #6
   1fcd6:	e7c9      	b.n	1fc6c <interface_socket_allocate+0x54>
   1fcd8:	2507      	movs	r5, #7
   1fcda:	e7c7      	b.n	1fc6c <interface_socket_allocate+0x54>
   1fcdc:	2002a094 	.word	0x2002a094

0001fce0 <interface_socket_free>:
   1fce0:	2808      	cmp	r0, #8
   1fce2:	d900      	bls.n	1fce6 <interface_socket_free+0x6>
   1fce4:	4770      	bx	lr
   1fce6:	b510      	push	{r4, lr}
   1fce8:	4c07      	ldr	r4, [pc, #28]	; (1fd08 <interface_socket_free+0x28>)
   1fcea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1fcee:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   1fcf2:	69e0      	ldr	r0, [r4, #28]
   1fcf4:	b108      	cbz	r0, 1fcfa <interface_socket_free+0x1a>
   1fcf6:	f7fe ff83 	bl	1ec00 <packet_handler_delete>
   1fcfa:	4620      	mov	r0, r4
   1fcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fd00:	2228      	movs	r2, #40	; 0x28
   1fd02:	2100      	movs	r1, #0
   1fd04:	f006 be8c 	b.w	26a20 <memset>
   1fd08:	2002a094 	.word	0x2002a094

0001fd0c <interface_socket_packet_handler_update>:
   1fd0c:	2808      	cmp	r0, #8
   1fd0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fd12:	d81e      	bhi.n	1fd52 <interface_socket_packet_handler_update+0x46>
   1fd14:	ea4f 0880 	mov.w	r8, r0, lsl #2
   1fd18:	4e17      	ldr	r6, [pc, #92]	; (1fd78 <interface_socket_packet_handler_update+0x6c>)
   1fd1a:	eb08 0300 	add.w	r3, r8, r0
   1fd1e:	00db      	lsls	r3, r3, #3
   1fd20:	58f4      	ldr	r4, [r6, r3]
   1fd22:	18f5      	adds	r5, r6, r3
   1fd24:	b1ac      	cbz	r4, 1fd52 <interface_socket_packet_handler_update+0x46>
   1fd26:	460b      	mov	r3, r1
   1fd28:	4604      	mov	r4, r0
   1fd2a:	4611      	mov	r1, r2
   1fd2c:	4618      	mov	r0, r3
   1fd2e:	462a      	mov	r2, r5
   1fd30:	f8d5 901c 	ldr.w	r9, [r5, #28]
   1fd34:	f7fe ff44 	bl	1ebc0 <packet_handler_create>
   1fd38:	61e8      	str	r0, [r5, #28]
   1fd3a:	b1d0      	cbz	r0, 1fd72 <interface_socket_packet_handler_update+0x66>
   1fd3c:	6803      	ldr	r3, [r0, #0]
   1fd3e:	681b      	ldr	r3, [r3, #0]
   1fd40:	4798      	blx	r3
   1fd42:	4607      	mov	r7, r0
   1fd44:	b948      	cbnz	r0, 1fd5a <interface_socket_packet_handler_update+0x4e>
   1fd46:	4648      	mov	r0, r9
   1fd48:	f7fe ff5a 	bl	1ec00 <packet_handler_delete>
   1fd4c:	4638      	mov	r0, r7
   1fd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fd52:	2705      	movs	r7, #5
   1fd54:	4638      	mov	r0, r7
   1fd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fd5a:	69e8      	ldr	r0, [r5, #28]
   1fd5c:	f7fe ff50 	bl	1ec00 <packet_handler_delete>
   1fd60:	eb08 0004 	add.w	r0, r8, r4
   1fd64:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   1fd68:	f8c6 901c 	str.w	r9, [r6, #28]
   1fd6c:	4638      	mov	r0, r7
   1fd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fd72:	2704      	movs	r7, #4
   1fd74:	e7f4      	b.n	1fd60 <interface_socket_packet_handler_update+0x54>
   1fd76:	bf00      	nop
   1fd78:	2002a094 	.word	0x2002a094

0001fd7c <interface_socket_wait>:
   1fd7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd80:	4692      	mov	sl, r2
   1fd82:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1fd86:	4d13      	ldr	r5, [pc, #76]	; (1fdd4 <interface_socket_wait+0x58>)
   1fd88:	eb09 0400 	add.w	r4, r9, r0
   1fd8c:	00e4      	lsls	r4, r4, #3
   1fd8e:	592a      	ldr	r2, [r5, r4]
   1fd90:	4606      	mov	r6, r0
   1fd92:	ea02 020a 	and.w	r2, r2, sl
   1fd96:	428a      	cmp	r2, r1
   1fd98:	442c      	add	r4, r5
   1fd9a:	d013      	beq.n	1fdc4 <interface_socket_wait+0x48>
   1fd9c:	4698      	mov	r8, r3
   1fd9e:	6863      	ldr	r3, [r4, #4]
   1fda0:	b983      	cbnz	r3, 1fdc4 <interface_socket_wait+0x48>
   1fda2:	460f      	mov	r7, r1
   1fda4:	46a3      	mov	fp, r4
   1fda6:	e007      	b.n	1fdb8 <interface_socket_wait+0x3c>
   1fda8:	f8db 3004 	ldr.w	r3, [fp, #4]
   1fdac:	b953      	cbnz	r3, 1fdc4 <interface_socket_wait+0x48>
   1fdae:	4641      	mov	r1, r8
   1fdb0:	4620      	mov	r0, r4
   1fdb2:	f7f5 fe7b 	bl	15aac <bsd_os_timedwait>
   1fdb6:	b958      	cbnz	r0, 1fdd0 <interface_socket_wait+0x54>
   1fdb8:	f8db 3000 	ldr.w	r3, [fp]
   1fdbc:	ea03 030a 	and.w	r3, r3, sl
   1fdc0:	42bb      	cmp	r3, r7
   1fdc2:	d1f1      	bne.n	1fda8 <interface_socket_wait+0x2c>
   1fdc4:	444e      	add	r6, r9
   1fdc6:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   1fdca:	6868      	ldr	r0, [r5, #4]
   1fdcc:	b100      	cbz	r0, 1fdd0 <interface_socket_wait+0x54>
   1fdce:	6868      	ldr	r0, [r5, #4]
   1fdd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdd4:	2002a094 	.word	0x2002a094

0001fdd8 <interface_from_internal_id_search>:
   1fdd8:	4b27      	ldr	r3, [pc, #156]	; (1fe78 <interface_from_internal_id_search+0xa0>)
   1fdda:	681a      	ldr	r2, [r3, #0]
   1fddc:	b112      	cbz	r2, 1fde4 <interface_from_internal_id_search+0xc>
   1fdde:	699a      	ldr	r2, [r3, #24]
   1fde0:	4282      	cmp	r2, r0
   1fde2:	d039      	beq.n	1fe58 <interface_from_internal_id_search+0x80>
   1fde4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1fde6:	b112      	cbz	r2, 1fdee <interface_from_internal_id_search+0x16>
   1fde8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1fdea:	4282      	cmp	r2, r0
   1fdec:	d036      	beq.n	1fe5c <interface_from_internal_id_search+0x84>
   1fdee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1fdf0:	b112      	cbz	r2, 1fdf8 <interface_from_internal_id_search+0x20>
   1fdf2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1fdf4:	4282      	cmp	r2, r0
   1fdf6:	d033      	beq.n	1fe60 <interface_from_internal_id_search+0x88>
   1fdf8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   1fdfa:	b11a      	cbz	r2, 1fe04 <interface_from_internal_id_search+0x2c>
   1fdfc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1fe00:	4282      	cmp	r2, r0
   1fe02:	d02f      	beq.n	1fe64 <interface_from_internal_id_search+0x8c>
   1fe04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1fe08:	b11a      	cbz	r2, 1fe12 <interface_from_internal_id_search+0x3a>
   1fe0a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1fe0e:	4282      	cmp	r2, r0
   1fe10:	d02a      	beq.n	1fe68 <interface_from_internal_id_search+0x90>
   1fe12:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1fe16:	b11a      	cbz	r2, 1fe20 <interface_from_internal_id_search+0x48>
   1fe18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   1fe1c:	4282      	cmp	r2, r0
   1fe1e:	d025      	beq.n	1fe6c <interface_from_internal_id_search+0x94>
   1fe20:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1fe24:	b11a      	cbz	r2, 1fe2e <interface_from_internal_id_search+0x56>
   1fe26:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   1fe2a:	4282      	cmp	r2, r0
   1fe2c:	d020      	beq.n	1fe70 <interface_from_internal_id_search+0x98>
   1fe2e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1fe32:	b11a      	cbz	r2, 1fe3c <interface_from_internal_id_search+0x64>
   1fe34:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1fe38:	4282      	cmp	r2, r0
   1fe3a:	d01b      	beq.n	1fe74 <interface_from_internal_id_search+0x9c>
   1fe3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1fe40:	b13a      	cbz	r2, 1fe52 <interface_from_internal_id_search+0x7a>
   1fe42:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   1fe46:	4283      	cmp	r3, r0
   1fe48:	bf14      	ite	ne
   1fe4a:	f04f 30ff 	movne.w	r0, #4294967295
   1fe4e:	2008      	moveq	r0, #8
   1fe50:	4770      	bx	lr
   1fe52:	f04f 30ff 	mov.w	r0, #4294967295
   1fe56:	4770      	bx	lr
   1fe58:	2000      	movs	r0, #0
   1fe5a:	4770      	bx	lr
   1fe5c:	2001      	movs	r0, #1
   1fe5e:	4770      	bx	lr
   1fe60:	2002      	movs	r0, #2
   1fe62:	4770      	bx	lr
   1fe64:	2003      	movs	r0, #3
   1fe66:	4770      	bx	lr
   1fe68:	2004      	movs	r0, #4
   1fe6a:	4770      	bx	lr
   1fe6c:	2005      	movs	r0, #5
   1fe6e:	4770      	bx	lr
   1fe70:	2006      	movs	r0, #6
   1fe72:	4770      	bx	lr
   1fe74:	2007      	movs	r0, #7
   1fe76:	4770      	bx	lr
   1fe78:	2002a094 	.word	0x2002a094

0001fe7c <interface_socket_from_handle_get>:
   1fe7c:	2808      	cmp	r0, #8
   1fe7e:	d807      	bhi.n	1fe90 <interface_socket_from_handle_get+0x14>
   1fe80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1fe84:	4b03      	ldr	r3, [pc, #12]	; (1fe94 <interface_socket_from_handle_get+0x18>)
   1fe86:	00c0      	lsls	r0, r0, #3
   1fe88:	581a      	ldr	r2, [r3, r0]
   1fe8a:	b10a      	cbz	r2, 1fe90 <interface_socket_from_handle_get+0x14>
   1fe8c:	4418      	add	r0, r3
   1fe8e:	4770      	bx	lr
   1fe90:	2000      	movs	r0, #0
   1fe92:	4770      	bx	lr
   1fe94:	2002a094 	.word	0x2002a094

0001fe98 <interface_socket_event_get>:
   1fe98:	b119      	cbz	r1, 1fea2 <interface_socket_event_get+0xa>
   1fe9a:	2808      	cmp	r0, #8
   1fe9c:	d902      	bls.n	1fea4 <interface_socket_event_get+0xc>
   1fe9e:	2310      	movs	r3, #16
   1fea0:	600b      	str	r3, [r1, #0]
   1fea2:	4770      	bx	lr
   1fea4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1fea8:	4b07      	ldr	r3, [pc, #28]	; (1fec8 <interface_socket_event_get+0x30>)
   1feaa:	00c0      	lsls	r0, r0, #3
   1feac:	581a      	ldr	r2, [r3, r0]
   1feae:	2a00      	cmp	r2, #0
   1feb0:	d0f5      	beq.n	1fe9e <interface_socket_event_get+0x6>
   1feb2:	581b      	ldr	r3, [r3, r0]
   1feb4:	0c1b      	lsrs	r3, r3, #16
   1feb6:	f003 020a 	and.w	r2, r3, #10
   1feba:	2a0a      	cmp	r2, #10
   1febc:	bf14      	ite	ne
   1febe:	f003 030f 	andne.w	r3, r3, #15
   1fec2:	f003 030d 	andeq.w	r3, r3, #13
   1fec6:	e7eb      	b.n	1fea0 <interface_socket_event_get+0x8>
   1fec8:	2002a094 	.word	0x2002a094

0001fecc <interface_socket_setopt>:
   1fecc:	2808      	cmp	r0, #8
   1fece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fed0:	d82c      	bhi.n	1ff2c <interface_socket_setopt+0x60>
   1fed2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1fed6:	4e1e      	ldr	r6, [pc, #120]	; (1ff50 <interface_socket_setopt+0x84>)
   1fed8:	00c0      	lsls	r0, r0, #3
   1feda:	5834      	ldr	r4, [r6, r0]
   1fedc:	b334      	cbz	r4, 1ff2c <interface_socket_setopt+0x60>
   1fede:	2901      	cmp	r1, #1
   1fee0:	d11e      	bne.n	1ff20 <interface_socket_setopt+0x54>
   1fee2:	f1a2 0114 	sub.w	r1, r2, #20
   1fee6:	2901      	cmp	r1, #1
   1fee8:	d81a      	bhi.n	1ff20 <interface_socket_setopt+0x54>
   1feea:	9906      	ldr	r1, [sp, #24]
   1feec:	2908      	cmp	r1, #8
   1feee:	d123      	bne.n	1ff38 <interface_socket_setopt+0x6c>
   1fef0:	b313      	cbz	r3, 1ff38 <interface_socket_setopt+0x6c>
   1fef2:	6859      	ldr	r1, [r3, #4]
   1fef4:	4c17      	ldr	r4, [pc, #92]	; (1ff54 <interface_socket_setopt+0x88>)
   1fef6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1fefa:	fba4 4101 	umull	r4, r1, r4, r1
   1fefe:	0989      	lsrs	r1, r1, #6
   1ff00:	460c      	mov	r4, r1
   1ff02:	2500      	movs	r5, #0
   1ff04:	681b      	ldr	r3, [r3, #0]
   1ff06:	fbe7 4503 	umlal	r4, r5, r7, r3
   1ff0a:	2d01      	cmp	r5, #1
   1ff0c:	bf08      	it	eq
   1ff0e:	2c00      	cmpeq	r4, #0
   1ff10:	d218      	bcs.n	1ff44 <interface_socket_setopt+0x78>
   1ff12:	4430      	add	r0, r6
   1ff14:	2a14      	cmp	r2, #20
   1ff16:	bf0c      	ite	eq
   1ff18:	6204      	streq	r4, [r0, #32]
   1ff1a:	6244      	strne	r4, [r0, #36]	; 0x24
   1ff1c:	2000      	movs	r0, #0
   1ff1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff20:	202a      	movs	r0, #42	; 0x2a
   1ff22:	f7f5 fe79 	bl	15c18 <bsd_os_errno_set>
   1ff26:	f04f 30ff 	mov.w	r0, #4294967295
   1ff2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff2c:	2009      	movs	r0, #9
   1ff2e:	f7f5 fe73 	bl	15c18 <bsd_os_errno_set>
   1ff32:	f04f 30ff 	mov.w	r0, #4294967295
   1ff36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff38:	2016      	movs	r0, #22
   1ff3a:	f7f5 fe6d 	bl	15c18 <bsd_os_errno_set>
   1ff3e:	f04f 30ff 	mov.w	r0, #4294967295
   1ff42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff44:	2025      	movs	r0, #37	; 0x25
   1ff46:	f7f5 fe67 	bl	15c18 <bsd_os_errno_set>
   1ff4a:	f04f 30ff 	mov.w	r0, #4294967295
   1ff4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff50:	2002a094 	.word	0x2002a094
   1ff54:	10624dd3 	.word	0x10624dd3

0001ff58 <interface_socket_getopt>:
   1ff58:	b570      	push	{r4, r5, r6, lr}
   1ff5a:	2808      	cmp	r0, #8
   1ff5c:	9d04      	ldr	r5, [sp, #16]
   1ff5e:	d835      	bhi.n	1ffcc <interface_socket_getopt+0x74>
   1ff60:	4c20      	ldr	r4, [pc, #128]	; (1ffe4 <interface_socket_getopt+0x8c>)
   1ff62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ff66:	00c0      	lsls	r0, r0, #3
   1ff68:	5826      	ldr	r6, [r4, r0]
   1ff6a:	4404      	add	r4, r0
   1ff6c:	b376      	cbz	r6, 1ffcc <interface_socket_getopt+0x74>
   1ff6e:	2901      	cmp	r1, #1
   1ff70:	d132      	bne.n	1ffd8 <interface_socket_getopt+0x80>
   1ff72:	b32b      	cbz	r3, 1ffc0 <interface_socket_getopt+0x68>
   1ff74:	b325      	cbz	r5, 1ffc0 <interface_socket_getopt+0x68>
   1ff76:	2a04      	cmp	r2, #4
   1ff78:	d019      	beq.n	1ffae <interface_socket_getopt+0x56>
   1ff7a:	f1a2 0114 	sub.w	r1, r2, #20
   1ff7e:	2901      	cmp	r1, #1
   1ff80:	d82a      	bhi.n	1ffd8 <interface_socket_getopt+0x80>
   1ff82:	6829      	ldr	r1, [r5, #0]
   1ff84:	2908      	cmp	r1, #8
   1ff86:	d11b      	bne.n	1ffc0 <interface_socket_getopt+0x68>
   1ff88:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   1ff8c:	2a14      	cmp	r2, #20
   1ff8e:	bf18      	it	ne
   1ff90:	4601      	movne	r1, r0
   1ff92:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ff96:	4a14      	ldr	r2, [pc, #80]	; (1ffe8 <interface_socket_getopt+0x90>)
   1ff98:	2000      	movs	r0, #0
   1ff9a:	fba2 5201 	umull	r5, r2, r2, r1
   1ff9e:	0992      	lsrs	r2, r2, #6
   1ffa0:	fb04 1112 	mls	r1, r4, r2, r1
   1ffa4:	fb04 f101 	mul.w	r1, r4, r1
   1ffa8:	e9c3 2100 	strd	r2, r1, [r3]
   1ffac:	bd70      	pop	{r4, r5, r6, pc}
   1ffae:	682a      	ldr	r2, [r5, #0]
   1ffb0:	2a04      	cmp	r2, #4
   1ffb2:	d105      	bne.n	1ffc0 <interface_socket_getopt+0x68>
   1ffb4:	2200      	movs	r2, #0
   1ffb6:	6861      	ldr	r1, [r4, #4]
   1ffb8:	4610      	mov	r0, r2
   1ffba:	6019      	str	r1, [r3, #0]
   1ffbc:	6062      	str	r2, [r4, #4]
   1ffbe:	bd70      	pop	{r4, r5, r6, pc}
   1ffc0:	2016      	movs	r0, #22
   1ffc2:	f7f5 fe29 	bl	15c18 <bsd_os_errno_set>
   1ffc6:	f04f 30ff 	mov.w	r0, #4294967295
   1ffca:	bd70      	pop	{r4, r5, r6, pc}
   1ffcc:	2009      	movs	r0, #9
   1ffce:	f7f5 fe23 	bl	15c18 <bsd_os_errno_set>
   1ffd2:	f04f 30ff 	mov.w	r0, #4294967295
   1ffd6:	bd70      	pop	{r4, r5, r6, pc}
   1ffd8:	202a      	movs	r0, #42	; 0x2a
   1ffda:	f7f5 fe1d 	bl	15c18 <bsd_os_errno_set>
   1ffde:	f04f 30ff 	mov.w	r0, #4294967295
   1ffe2:	bd70      	pop	{r4, r5, r6, pc}
   1ffe4:	2002a094 	.word	0x2002a094
   1ffe8:	10624dd3 	.word	0x10624dd3

0001ffec <interface_shutdown>:
   1ffec:	4b18      	ldr	r3, [pc, #96]	; (20050 <interface_shutdown+0x64>)
   1ffee:	681a      	ldr	r2, [r3, #0]
   1fff0:	b10a      	cbz	r2, 1fff6 <interface_shutdown+0xa>
   1fff2:	2270      	movs	r2, #112	; 0x70
   1fff4:	605a      	str	r2, [r3, #4]
   1fff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1fff8:	b10a      	cbz	r2, 1fffe <interface_shutdown+0x12>
   1fffa:	2270      	movs	r2, #112	; 0x70
   1fffc:	62da      	str	r2, [r3, #44]	; 0x2c
   1fffe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   20000:	b10a      	cbz	r2, 20006 <interface_shutdown+0x1a>
   20002:	2270      	movs	r2, #112	; 0x70
   20004:	655a      	str	r2, [r3, #84]	; 0x54
   20006:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   20008:	b10a      	cbz	r2, 2000e <interface_shutdown+0x22>
   2000a:	2270      	movs	r2, #112	; 0x70
   2000c:	67da      	str	r2, [r3, #124]	; 0x7c
   2000e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   20012:	b112      	cbz	r2, 2001a <interface_shutdown+0x2e>
   20014:	2270      	movs	r2, #112	; 0x70
   20016:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   2001a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   2001e:	b112      	cbz	r2, 20026 <interface_shutdown+0x3a>
   20020:	2270      	movs	r2, #112	; 0x70
   20022:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   20026:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2002a:	b112      	cbz	r2, 20032 <interface_shutdown+0x46>
   2002c:	2270      	movs	r2, #112	; 0x70
   2002e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
   20032:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   20036:	b112      	cbz	r2, 2003e <interface_shutdown+0x52>
   20038:	2270      	movs	r2, #112	; 0x70
   2003a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   2003e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   20042:	b112      	cbz	r2, 2004a <interface_shutdown+0x5e>
   20044:	2270      	movs	r2, #112	; 0x70
   20046:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   2004a:	2000      	movs	r0, #0
   2004c:	4770      	bx	lr
   2004e:	bf00      	nop
   20050:	2002a094 	.word	0x2002a094

00020054 <interface_socket_fcntl>:
   20054:	2808      	cmp	r0, #8
   20056:	b510      	push	{r4, lr}
   20058:	d826      	bhi.n	200a8 <interface_socket_fcntl+0x54>
   2005a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2005e:	4c1b      	ldr	r4, [pc, #108]	; (200cc <interface_socket_fcntl+0x78>)
   20060:	00c3      	lsls	r3, r0, #3
   20062:	58e0      	ldr	r0, [r4, r3]
   20064:	b300      	cbz	r0, 200a8 <interface_socket_fcntl+0x54>
   20066:	2901      	cmp	r1, #1
   20068:	d005      	beq.n	20076 <interface_socket_fcntl+0x22>
   2006a:	2902      	cmp	r1, #2
   2006c:	d122      	bne.n	200b4 <interface_socket_fcntl+0x60>
   2006e:	58e0      	ldr	r0, [r4, r3]
   20070:	f3c0 7000 	ubfx	r0, r0, #28, #1
   20074:	bd10      	pop	{r4, pc}
   20076:	07d2      	lsls	r2, r2, #31
   20078:	d410      	bmi.n	2009c <interface_socket_fcntl+0x48>
   2007a:	58e0      	ldr	r0, [r4, r3]
   2007c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   20080:	d11e      	bne.n	200c0 <interface_socket_fcntl+0x6c>
   20082:	58e2      	ldr	r2, [r4, r3]
   20084:	b292      	uxth	r2, r2
   20086:	2a0a      	cmp	r2, #10
   20088:	d01a      	beq.n	200c0 <interface_socket_fcntl+0x6c>
   2008a:	58e2      	ldr	r2, [r4, r3]
   2008c:	b292      	uxth	r2, r2
   2008e:	2a0b      	cmp	r2, #11
   20090:	d016      	beq.n	200c0 <interface_socket_fcntl+0x6c>
   20092:	58e2      	ldr	r2, [r4, r3]
   20094:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   20098:	50e2      	str	r2, [r4, r3]
   2009a:	bd10      	pop	{r4, pc}
   2009c:	58e2      	ldr	r2, [r4, r3]
   2009e:	2000      	movs	r0, #0
   200a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   200a4:	50e2      	str	r2, [r4, r3]
   200a6:	bd10      	pop	{r4, pc}
   200a8:	2009      	movs	r0, #9
   200aa:	f7f5 fdb5 	bl	15c18 <bsd_os_errno_set>
   200ae:	f04f 30ff 	mov.w	r0, #4294967295
   200b2:	bd10      	pop	{r4, pc}
   200b4:	2016      	movs	r0, #22
   200b6:	f7f5 fdaf 	bl	15c18 <bsd_os_errno_set>
   200ba:	f04f 30ff 	mov.w	r0, #4294967295
   200be:	bd10      	pop	{r4, pc}
   200c0:	2023      	movs	r0, #35	; 0x23
   200c2:	f7f5 fda9 	bl	15c18 <bsd_os_errno_set>
   200c6:	f04f 30ff 	mov.w	r0, #4294967295
   200ca:	bd10      	pop	{r4, pc}
   200cc:	2002a094 	.word	0x2002a094

000200d0 <at_client_evt_handler>:
   200d0:	b120      	cbz	r0, 200dc <at_client_evt_handler+0xc>
   200d2:	f850 1b08 	ldr.w	r1, [r0], #8
   200d6:	0c09      	lsrs	r1, r1, #16
   200d8:	f7fc be82 	b.w	1cde0 <rpc_at_event_handler>
   200dc:	4770      	bx	lr
   200de:	bf00      	nop

000200e0 <rpc_at_client_init>:
   200e0:	4801      	ldr	r0, [pc, #4]	; (200e8 <rpc_at_client_init+0x8>)
   200e2:	f7fb bcab 	b.w	1ba3c <rpc_client_register>
   200e6:	bf00      	nop
   200e8:	00028508 	.word	0x00028508

000200ec <rpc_at_client_request_alloc>:
   200ec:	b180      	cbz	r0, 20110 <rpc_at_client_request_alloc+0x24>
   200ee:	2300      	movs	r3, #0
   200f0:	b510      	push	{r4, lr}
   200f2:	b082      	sub	sp, #8
   200f4:	aa02      	add	r2, sp, #8
   200f6:	4604      	mov	r4, r0
   200f8:	f842 3d04 	str.w	r3, [r2, #-4]!
   200fc:	2003      	movs	r0, #3
   200fe:	f7fb fd17 	bl	1bb30 <rpc_message_alloc>
   20102:	b918      	cbnz	r0, 2010c <rpc_at_client_request_alloc+0x20>
   20104:	9b01      	ldr	r3, [sp, #4]
   20106:	b10b      	cbz	r3, 2010c <rpc_at_client_request_alloc+0x20>
   20108:	3308      	adds	r3, #8
   2010a:	6023      	str	r3, [r4, #0]
   2010c:	b002      	add	sp, #8
   2010e:	bd10      	pop	{r4, pc}
   20110:	200e      	movs	r0, #14
   20112:	4770      	bx	lr

00020114 <rpc_at_client_request_send>:
   20114:	b150      	cbz	r0, 2012c <rpc_at_client_request_send+0x18>
   20116:	4603      	mov	r3, r0
   20118:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2011c:	2003      	movs	r0, #3
   2011e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   20122:	f843 1d08 	str.w	r1, [r3, #-8]!
   20126:	4619      	mov	r1, r3
   20128:	f7fb bcf2 	b.w	1bb10 <rpc_message_send>
   2012c:	200e      	movs	r0, #14
   2012e:	4770      	bx	lr

00020130 <rpc_at_client_message_free>:
   20130:	b120      	cbz	r0, 2013c <rpc_at_client_message_free+0xc>
   20132:	f1a0 0108 	sub.w	r1, r0, #8
   20136:	2003      	movs	r0, #3
   20138:	f7fb bd26 	b.w	1bb88 <rpc_message_free>
   2013c:	200e      	movs	r0, #14
   2013e:	4770      	bx	lr

00020140 <rpc_at_client_data_free>:
   20140:	b118      	cbz	r0, 2014a <rpc_at_client_data_free+0xa>
   20142:	4601      	mov	r1, r0
   20144:	2003      	movs	r0, #3
   20146:	f7fb bd2b 	b.w	1bba0 <rpc_message_data_free>
   2014a:	200e      	movs	r0, #14
   2014c:	4770      	bx	lr
   2014e:	bf00      	nop

00020150 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   20150:	4a07      	ldr	r2, [pc, #28]	; (20170 <SystemInit+0x20>)
   20152:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   20156:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   2015a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   2015e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20162:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   20166:	4b03      	ldr	r3, [pc, #12]	; (20174 <SystemInit+0x24>)
   20168:	4a03      	ldr	r2, [pc, #12]	; (20178 <SystemInit+0x28>)
   2016a:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   2016c:	4770      	bx	lr
   2016e:	bf00      	nop
   20170:	e000ed00 	.word	0xe000ed00
   20174:	200203d4 	.word	0x200203d4
   20178:	03d09000 	.word	0x03d09000

0002017c <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   2017c:	4a0b      	ldr	r2, [pc, #44]	; (201ac <nrfx_dppi_channel_alloc+0x30>)
{
   2017e:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   20180:	6816      	ldr	r6, [r2, #0]
   20182:	43f1      	mvns	r1, r6
   20184:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   20186:	b171      	cbz	r1, 201a6 <nrfx_dppi_channel_alloc+0x2a>
   20188:	2500      	movs	r5, #0
   2018a:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   2018c:	fa21 f304 	lsr.w	r3, r1, r4
   20190:	07db      	lsls	r3, r3, #31
   20192:	f105 0501 	add.w	r5, r5, #1
   20196:	d5f8      	bpl.n	2018a <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   20198:	2301      	movs	r3, #1
   2019a:	40a3      	lsls	r3, r4
   2019c:	4333      	orrs	r3, r6
    *p_channel = channel;
   2019e:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   201a0:	4803      	ldr	r0, [pc, #12]	; (201b0 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   201a2:	6013      	str	r3, [r2, #0]
}
   201a4:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   201a6:	4803      	ldr	r0, [pc, #12]	; (201b4 <nrfx_dppi_channel_alloc+0x38>)
   201a8:	e7fc      	b.n	201a4 <nrfx_dppi_channel_alloc+0x28>
   201aa:	bf00      	nop
   201ac:	20022368 	.word	0x20022368
   201b0:	0bad0000 	.word	0x0bad0000
   201b4:	0bad0002 	.word	0x0bad0002

000201b8 <nrfx_dppi_channel_enable>:
    return ((m_allocated_channels & DPPI_BIT_SET(channel)) != 0);
   201b8:	4b07      	ldr	r3, [pc, #28]	; (201d8 <nrfx_dppi_channel_enable+0x20>)
   201ba:	681b      	ldr	r3, [r3, #0]
   201bc:	40c3      	lsrs	r3, r0

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!channel_is_allocated(channel))
   201be:	07db      	lsls	r3, r3, #31
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   201c0:	bf41      	itttt	mi
   201c2:	2301      	movmi	r3, #1
   201c4:	fa03 f000 	lslmi.w	r0, r3, r0
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   201c8:	4b04      	ldrmi	r3, [pc, #16]	; (201dc <nrfx_dppi_channel_enable+0x24>)
   201ca:	f8c3 0504 	strmi.w	r0, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
   201ce:	bf4c      	ite	mi
   201d0:	4803      	ldrmi	r0, [pc, #12]	; (201e0 <nrfx_dppi_channel_enable+0x28>)
        err_code = NRFX_ERROR_INVALID_PARAM;
   201d2:	4804      	ldrpl	r0, [pc, #16]	; (201e4 <nrfx_dppi_channel_enable+0x2c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   201d4:	4770      	bx	lr
   201d6:	bf00      	nop
   201d8:	20022368 	.word	0x20022368
   201dc:	40017000 	.word	0x40017000
   201e0:	0bad0000 	.word	0x0bad0000
   201e4:	0bad0004 	.word	0x0bad0004

000201e8 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   201e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201ea:	460c      	mov	r4, r1
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(timer_event_handler);

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   201ec:	210c      	movs	r1, #12
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   201ee:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   201f0:	4e21      	ldr	r6, [pc, #132]	; (20278 <nrfx_timer_init+0x90>)
   201f2:	4379      	muls	r1, r7
{
   201f4:	4605      	mov	r5, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   201f6:	1870      	adds	r0, r6, r1
   201f8:	7a03      	ldrb	r3, [r0, #8]
   201fa:	2b00      	cmp	r3, #0
   201fc:	d139      	bne.n	20272 <nrfx_timer_init+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201fe:	469c      	mov	ip, r3

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));

    //lint -restore

    p_cb->handler = timer_event_handler;
   20200:	5072      	str	r2, [r6, r1]
    p_cb->context = p_config->p_context;
   20202:	6862      	ldr	r2, [r4, #4]
   20204:	6042      	str	r2, [r0, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   20206:	7969      	ldrb	r1, [r5, #5]
   20208:	6828      	ldr	r0, [r5, #0]
   2020a:	b2da      	uxtb	r2, r3
   2020c:	4291      	cmp	r1, r2
   2020e:	d829      	bhi.n	20264 <nrfx_timer_init+0x7c>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   20210:	f340 3007 	sbfx	r0, r0, #12, #8
   20214:	f7f3 fd94 	bl	13d40 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   20218:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   2021a:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   2021c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   20220:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   20224:	f021 0103 	bic.w	r1, r1, #3
   20228:	430a      	orrs	r2, r1
   2022a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   2022e:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   20232:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   20234:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   20238:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   2023c:	430a      	orrs	r2, r1
   2023e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   20242:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   20246:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   20248:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   2024c:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   20250:	430a      	orrs	r2, r1
   20252:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   20256:	230c      	movs	r3, #12
   20258:	fb03 6607 	mla	r6, r3, r7, r6
   2025c:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2025e:	4807      	ldr	r0, [pc, #28]	; (2027c <nrfx_timer_init+0x94>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   20260:	7233      	strb	r3, [r6, #8]
}
   20262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20264:	009a      	lsls	r2, r3, #2
   20266:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   2026a:	f840 c002 	str.w	ip, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   2026e:	3301      	adds	r3, #1
   20270:	e7cb      	b.n	2020a <nrfx_timer_init+0x22>
        return err_code;
   20272:	4803      	ldr	r0, [pc, #12]	; (20280 <nrfx_timer_init+0x98>)
   20274:	e7f5      	b.n	20262 <nrfx_timer_init+0x7a>
   20276:	bf00      	nop
   20278:	2002236c 	.word	0x2002236c
   2027c:	0bad0000 	.word	0x0bad0000
   20280:	0bad0005 	.word	0x0bad0005

00020284 <nrfx_timer_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20284:	2201      	movs	r2, #1

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   20286:	210c      	movs	r1, #12
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   20288:	6803      	ldr	r3, [r0, #0]
   2028a:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   2028c:	7903      	ldrb	r3, [r0, #4]
   2028e:	4a03      	ldr	r2, [pc, #12]	; (2029c <nrfx_timer_enable+0x18>)
   20290:	fb01 2303 	mla	r3, r1, r3, r2
   20294:	2202      	movs	r2, #2
   20296:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   20298:	4770      	bx	lr
   2029a:	bf00      	nop
   2029c:	2002236c 	.word	0x2002236c

000202a0 <nrfx_timer_disable>:
   202a0:	2201      	movs	r2, #1

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   202a2:	6803      	ldr	r3, [r0, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   202a4:	4903      	ldr	r1, [pc, #12]	; (202b4 <nrfx_timer_disable+0x14>)
   202a6:	611a      	str	r2, [r3, #16]
   202a8:	7903      	ldrb	r3, [r0, #4]
   202aa:	200c      	movs	r0, #12
   202ac:	fb00 1303 	mla	r3, r0, r3, r1
   202b0:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   202b2:	4770      	bx	lr
   202b4:	2002236c 	.word	0x2002236c

000202b8 <nrfx_timer_uninit>:
{
   202b8:	b538      	push	{r3, r4, r5, lr}
   202ba:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   202bc:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   202be:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   202c0:	f340 3007 	sbfx	r0, r0, #12, #8
   202c4:	f7f3 fd4c 	bl	13d60 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   202c8:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   202ca:	4620      	mov	r0, r4
   202cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   202d0:	f04f 32ff 	mov.w	r2, #4294967295
    p_reg->SHORTS &= ~(mask);
   202d4:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   202d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   202dc:	f7ff ffe0 	bl	202a0 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   202e0:	210c      	movs	r1, #12
   202e2:	7923      	ldrb	r3, [r4, #4]
   202e4:	4a02      	ldr	r2, [pc, #8]	; (202f0 <nrfx_timer_uninit+0x38>)
   202e6:	fb01 2303 	mla	r3, r1, r3, r2
   202ea:	721d      	strb	r5, [r3, #8]
}
   202ec:	bd38      	pop	{r3, r4, r5, pc}
   202ee:	bf00      	nop
   202f0:	2002236c 	.word	0x2002236c

000202f4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   202f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   202f6:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   202f8:	4b08      	ldr	r3, [pc, #32]	; (2031c <z_sys_init_run_level+0x28>)
   202fa:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   202fe:	3001      	adds	r0, #1
   20300:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   20304:	42a6      	cmp	r6, r4
   20306:	d800      	bhi.n	2030a <z_sys_init_run_level+0x16>
			}
		}
	}
}
   20308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   2030a:	e9d4 3500 	ldrd	r3, r5, [r4]
   2030e:	4628      	mov	r0, r5
   20310:	4798      	blx	r3
		if (retval != 0) {
   20312:	b108      	cbz	r0, 20318 <z_sys_init_run_level+0x24>
			if (dev) {
   20314:	b105      	cbz	r5, 20318 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   20316:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20318:	3408      	adds	r4, #8
   2031a:	e7f3      	b.n	20304 <z_sys_init_run_level+0x10>
   2031c:	00028518 	.word	0x00028518

00020320 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   20320:	4b0f      	ldr	r3, [pc, #60]	; (20360 <z_impl_device_get_binding+0x40>)
{
   20322:	b570      	push	{r4, r5, r6, lr}
   20324:	4605      	mov	r5, r0
   20326:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   20328:	4c0e      	ldr	r4, [pc, #56]	; (20364 <z_impl_device_get_binding+0x44>)
   2032a:	429c      	cmp	r4, r3
   2032c:	d104      	bne.n	20338 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   2032e:	4c0d      	ldr	r4, [pc, #52]	; (20364 <z_impl_device_get_binding+0x44>)
   20330:	42b4      	cmp	r4, r6
   20332:	d108      	bne.n	20346 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   20334:	2400      	movs	r4, #0
   20336:	e010      	b.n	2035a <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   20338:	68a2      	ldr	r2, [r4, #8]
   2033a:	b112      	cbz	r2, 20342 <z_impl_device_get_binding+0x22>
   2033c:	6822      	ldr	r2, [r4, #0]
   2033e:	42aa      	cmp	r2, r5
   20340:	d00b      	beq.n	2035a <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   20342:	3418      	adds	r4, #24
   20344:	e7f1      	b.n	2032a <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   20346:	68a3      	ldr	r3, [r4, #8]
   20348:	b90b      	cbnz	r3, 2034e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   2034a:	3418      	adds	r4, #24
   2034c:	e7f0      	b.n	20330 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   2034e:	4628      	mov	r0, r5
   20350:	6821      	ldr	r1, [r4, #0]
   20352:	f7ec fd83 	bl	ce5c <strcmp>
		if ((dev->driver_api != NULL) &&
   20356:	2800      	cmp	r0, #0
   20358:	d1f7      	bne.n	2034a <z_impl_device_get_binding+0x2a>
}
   2035a:	4620      	mov	r0, r4
   2035c:	bd70      	pop	{r4, r5, r6, pc}
   2035e:	bf00      	nop
   20360:	20020674 	.word	0x20020674
   20364:	200205b4 	.word	0x200205b4

00020368 <device_list_get>:
}

void device_list_get(struct device **device_list, int *device_count)
{

	*device_list = __device_start;
   20368:	4a04      	ldr	r2, [pc, #16]	; (2037c <device_list_get+0x14>)
	*device_count = __device_end - __device_start;
   2036a:	4b05      	ldr	r3, [pc, #20]	; (20380 <device_list_get+0x18>)
	*device_list = __device_start;
   2036c:	6002      	str	r2, [r0, #0]
	*device_count = __device_end - __device_start;
   2036e:	1a9b      	subs	r3, r3, r2
   20370:	4a04      	ldr	r2, [pc, #16]	; (20384 <device_list_get+0x1c>)
   20372:	10db      	asrs	r3, r3, #3
   20374:	4353      	muls	r3, r2
   20376:	600b      	str	r3, [r1, #0]
}
   20378:	4770      	bx	lr
   2037a:	bf00      	nop
   2037c:	200205b4 	.word	0x200205b4
   20380:	20020674 	.word	0x20020674
   20384:	aaaaaaab 	.word	0xaaaaaaab

00020388 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   20388:	4b01      	ldr	r3, [pc, #4]	; (20390 <z_impl_z_errno+0x8>)
   2038a:	6898      	ldr	r0, [r3, #8]
}
   2038c:	305c      	adds	r0, #92	; 0x5c
   2038e:	4770      	bx	lr
   20390:	20026d48 	.word	0x20026d48

00020394 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20394:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20398:	4605      	mov	r5, r0
   2039a:	460f      	mov	r7, r1
	__asm__ volatile(
   2039c:	f04f 0320 	mov.w	r3, #32
   203a0:	f3ef 8811 	mrs	r8, BASEPRI
   203a4:	f383 8811 	msr	BASEPRI, r3
   203a8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   203ac:	f000 fef2 	bl	21194 <z_impl_k_current_get>
   203b0:	4c22      	ldr	r4, [pc, #136]	; (2043c <z_fatal_error+0xa8>)
   203b2:	4b23      	ldr	r3, [pc, #140]	; (20440 <z_fatal_error+0xac>)
   203b4:	2d04      	cmp	r5, #4
   203b6:	eba4 0403 	sub.w	r4, r4, r3
   203ba:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   203be:	bf98      	it	ls
   203c0:	4a20      	ldrls	r2, [pc, #128]	; (20444 <z_fatal_error+0xb0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   203c2:	ea4f 1484 	mov.w	r4, r4, lsl #6
   203c6:	f044 0301 	orr.w	r3, r4, #1
   203ca:	4606      	mov	r6, r0
	switch (reason) {
   203cc:	bf94      	ite	ls
   203ce:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   203d2:	4a1d      	ldrhi	r2, [pc, #116]	; (20448 <z_fatal_error+0xb4>)
   203d4:	f8ad 3000 	strh.w	r3, [sp]
   203d8:	4629      	mov	r1, r5
   203da:	2300      	movs	r3, #0
   203dc:	481b      	ldr	r0, [pc, #108]	; (2044c <z_fatal_error+0xb8>)
   203de:	f003 fa19 	bl	23814 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   203e2:	b147      	cbz	r7, 203f6 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   203e4:	69fb      	ldr	r3, [r7, #28]
   203e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   203ea:	b123      	cbz	r3, 203f6 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   203ec:	4818      	ldr	r0, [pc, #96]	; (20450 <z_fatal_error+0xbc>)
   203ee:	f044 0101 	orr.w	r1, r4, #1
   203f2:	f003 f9d0 	bl	23796 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   203f6:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   203f8:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   203fc:	f006 f93a 	bl	26674 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   20400:	b1d0      	cbz	r0, 20438 <z_fatal_error+0xa4>
   20402:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   20404:	4b13      	ldr	r3, [pc, #76]	; (20454 <z_fatal_error+0xc0>)
   20406:	2a00      	cmp	r2, #0
   20408:	bf08      	it	eq
   2040a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   2040c:	f7f2 fbbc 	bl	12b88 <log_strdup>
   20410:	4623      	mov	r3, r4
   20412:	4602      	mov	r2, r0
   20414:	4631      	mov	r1, r6
   20416:	4810      	ldr	r0, [pc, #64]	; (20458 <z_fatal_error+0xc4>)
   20418:	f003 f9e3 	bl	237e2 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   2041c:	4639      	mov	r1, r7
   2041e:	4628      	mov	r0, r5
   20420:	f7f6 ffde 	bl	173e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   20424:	f388 8811 	msr	BASEPRI, r8
   20428:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2042c:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   2042e:	b002      	add	sp, #8
   20430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20434:	f7f4 b8b4 	b.w	145a0 <z_impl_k_thread_abort>
		thread_name = "unknown";
   20438:	4806      	ldr	r0, [pc, #24]	; (20454 <z_fatal_error+0xc0>)
   2043a:	e7e7      	b.n	2040c <z_fatal_error+0x78>
   2043c:	00027bb0 	.word	0x00027bb0
   20440:	00027b20 	.word	0x00027b20
   20444:	00028530 	.word	0x00028530
   20448:	0002a824 	.word	0x0002a824
   2044c:	0002a83a 	.word	0x0002a83a
   20450:	0002a862 	.word	0x0002a862
   20454:	0002a832 	.word	0x0002a832
   20458:	0002a883 	.word	0x0002a883

0002045c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2045c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2045e:	4d0b      	ldr	r5, [pc, #44]	; (2048c <idle+0x30>)
	__asm__ volatile(
   20460:	f04f 0220 	mov.w	r2, #32
   20464:	f3ef 8311 	mrs	r3, BASEPRI
   20468:	f382 8811 	msr	BASEPRI, r2
   2046c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   20470:	f006 f918 	bl	266a4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   20474:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   20476:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   20478:	2802      	cmp	r0, #2
   2047a:	bfd8      	it	le
   2047c:	4608      	movle	r0, r1
   2047e:	f006 f921 	bl	266c4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   20482:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   20484:	f7f3 fdf0 	bl	14068 <arch_cpu_idle>
}
   20488:	e7ea      	b.n	20460 <idle+0x4>
   2048a:	bf00      	nop
   2048c:	20026d48 	.word	0x20026d48

00020490 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   20490:	4802      	ldr	r0, [pc, #8]	; (2049c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   20492:	4a03      	ldr	r2, [pc, #12]	; (204a0 <z_bss_zero+0x10>)
   20494:	2100      	movs	r1, #0
   20496:	1a12      	subs	r2, r2, r0
   20498:	f006 bac2 	b.w	26a20 <memset>
   2049c:	20020880 	.word	0x20020880
   204a0:	2002a20c 	.word	0x2002a20c

000204a4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   204a4:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   204a6:	4806      	ldr	r0, [pc, #24]	; (204c0 <z_data_copy+0x1c>)
   204a8:	4a06      	ldr	r2, [pc, #24]	; (204c4 <z_data_copy+0x20>)
   204aa:	4907      	ldr	r1, [pc, #28]	; (204c8 <z_data_copy+0x24>)
   204ac:	1a12      	subs	r2, r2, r0
   204ae:	f006 faaa 	bl	26a06 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   204b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   204b6:	4a05      	ldr	r2, [pc, #20]	; (204cc <z_data_copy+0x28>)
   204b8:	4905      	ldr	r1, [pc, #20]	; (204d0 <z_data_copy+0x2c>)
   204ba:	4806      	ldr	r0, [pc, #24]	; (204d4 <z_data_copy+0x30>)
   204bc:	f006 baa3 	b.w	26a06 <memcpy>
   204c0:	20020000 	.word	0x20020000
   204c4:	2002087c 	.word	0x2002087c
   204c8:	0002aaf8 	.word	0x0002aaf8
   204cc:	00000000 	.word	0x00000000
   204d0:	0002aaf8 	.word	0x0002aaf8
   204d4:	20020000 	.word	0x20020000

000204d8 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   204d8:	2201      	movs	r2, #1
{
   204da:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   204dc:	4b0b      	ldr	r3, [pc, #44]	; (2050c <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   204de:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   204e0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   204e2:	f7ff ff07 	bl	202f4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   204e6:	4a0a      	ldr	r2, [pc, #40]	; (20510 <bg_thread_main+0x38>)
   204e8:	490a      	ldr	r1, [pc, #40]	; (20514 <bg_thread_main+0x3c>)
   204ea:	480b      	ldr	r0, [pc, #44]	; (20518 <bg_thread_main+0x40>)
   204ec:	f002 fe7d 	bl	231ea <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   204f0:	2003      	movs	r0, #3
   204f2:	f7ff feff 	bl	202f4 <z_sys_init_run_level>

	z_init_static_threads();
   204f6:	f000 ff6b 	bl	213d0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   204fa:	f7ed fbc5 	bl	dc88 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   204fe:	4a07      	ldr	r2, [pc, #28]	; (2051c <bg_thread_main+0x44>)
   20500:	7b13      	ldrb	r3, [r2, #12]
   20502:	f023 0301 	bic.w	r3, r3, #1
   20506:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20508:	bd08      	pop	{r3, pc}
   2050a:	bf00      	nop
   2050c:	2002a092 	.word	0x2002a092
   20510:	000295b2 	.word	0x000295b2
   20514:	0002a8e5 	.word	0x0002a8e5
   20518:	0002a8f5 	.word	0x0002a8f5
   2051c:	20022430 	.word	0x20022430

00020520 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   20520:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   20524:	b0b5      	sub	sp, #212	; 0xd4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   20526:	f7f2 fa83 	bl	12a30 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   2052a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 20618 <z_cstart+0xf8>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2052e:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20532:	2400      	movs	r4, #0
   20534:	23e0      	movs	r3, #224	; 0xe0
   20536:	4d31      	ldr	r5, [pc, #196]	; (205fc <z_cstart+0xdc>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   20538:	f04f 0b01 	mov.w	fp, #1
   2053c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20540:	77ec      	strb	r4, [r5, #31]
   20542:	762c      	strb	r4, [r5, #24]
   20544:	766c      	strb	r4, [r5, #25]
   20546:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20548:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   2054a:	4e2d      	ldr	r6, [pc, #180]	; (20600 <z_cstart+0xe0>)
   2054c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20550:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20552:	f7f3 ffff 	bl	14554 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20556:	f7f3 fd81 	bl	1405c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2055a:	f04f 33ff 	mov.w	r3, #4294967295
   2055e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20560:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   20562:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   20566:	4d27      	ldr	r5, [pc, #156]	; (20604 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   20568:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2056c:	ab06      	add	r3, sp, #24
   2056e:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20570:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   20572:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   20576:	f7ff febd 	bl	202f4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2057a:	2001      	movs	r0, #1
   2057c:	f7ff feba 	bl	202f4 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   20580:	f8df a098 	ldr.w	sl, [pc, #152]	; 2061c <z_cstart+0xfc>
	z_sched_init();
   20584:	f000 fd8c 	bl	210a0 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   20588:	f8df 8094 	ldr.w	r8, [pc, #148]	; 20620 <z_cstart+0x100>
   2058c:	4b1e      	ldr	r3, [pc, #120]	; (20608 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   2058e:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   20590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   20594:	4641      	mov	r1, r8
   20596:	4630      	mov	r0, r6
   20598:	9305      	str	r3, [sp, #20]
   2059a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   2059e:	4653      	mov	r3, sl
   205a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   205a4:	9400      	str	r4, [sp, #0]
   205a6:	f000 febd 	bl	21324 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   205aa:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   205ac:	4630      	mov	r0, r6
   205ae:	f023 0304 	bic.w	r3, r3, #4
   205b2:	7373      	strb	r3, [r6, #13]
   205b4:	f005 ff90 	bl	264d8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   205b8:	230f      	movs	r3, #15
   205ba:	4f14      	ldr	r7, [pc, #80]	; (2060c <z_cstart+0xec>)
   205bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   205c0:	4638      	mov	r0, r7
   205c2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   205c6:	4912      	ldr	r1, [pc, #72]	; (20610 <z_cstart+0xf0>)
   205c8:	4b12      	ldr	r3, [pc, #72]	; (20614 <z_cstart+0xf4>)
   205ca:	e9cd b404 	strd	fp, r4, [sp, #16]
   205ce:	e9cd 4400 	strd	r4, r4, [sp]
   205d2:	f000 fea7 	bl	21324 <z_setup_new_thread>
   205d6:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   205d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   205dc:	f023 0304 	bic.w	r3, r3, #4
   205e0:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   205e2:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   205e6:	e9c5 3306 	strd	r3, r3, [r5, #24]
   205ea:	4641      	mov	r1, r8
   205ec:	4653      	mov	r3, sl
   205ee:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   205f0:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   205f2:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   205f4:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   205f8:	f7f3 fc06 	bl	13e08 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   205fc:	e000ed00 	.word	0xe000ed00
   20600:	20022430 	.word	0x20022430
   20604:	20026d48 	.word	0x20026d48
   20608:	0002a91c 	.word	0x0002a91c
   2060c:	20022378 	.word	0x20022378
   20610:	2002db50 	.word	0x2002db50
   20614:	0002045d 	.word	0x0002045d
   20618:	2002e490 	.word	0x2002e490
   2061c:	000204d9 	.word	0x000204d9
   20620:	2002cb50 	.word	0x2002cb50

00020624 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   20624:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20626:	4c06      	ldr	r4, [pc, #24]	; (20640 <statics_init+0x1c>)
   20628:	4d06      	ldr	r5, [pc, #24]	; (20644 <statics_init+0x20>)
   2062a:	42ac      	cmp	r4, r5
   2062c:	d301      	bcc.n	20632 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   2062e:	2000      	movs	r0, #0
   20630:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20632:	4620      	mov	r0, r4
   20634:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20638:	f005 fd72 	bl	26120 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2063c:	3414      	adds	r4, #20
   2063e:	e7f4      	b.n	2062a <statics_init+0x6>
   20640:	200206f4 	.word	0x200206f4
   20644:	20020708 	.word	0x20020708

00020648 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   20648:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2064a:	4b0e      	ldr	r3, [pc, #56]	; (20684 <init_mem_slab_module+0x3c>)
   2064c:	4c0e      	ldr	r4, [pc, #56]	; (20688 <init_mem_slab_module+0x40>)
   2064e:	42a3      	cmp	r3, r4
   20650:	d301      	bcc.n	20656 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   20652:	2000      	movs	r0, #0
	return rc;
}
   20654:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20656:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   2065a:	ea41 0200 	orr.w	r2, r1, r0
   2065e:	f012 0203 	ands.w	r2, r2, #3
   20662:	d10b      	bne.n	2067c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   20664:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   20666:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20668:	42aa      	cmp	r2, r5
   2066a:	d101      	bne.n	20670 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2066c:	331c      	adds	r3, #28
   2066e:	e7ee      	b.n	2064e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   20670:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20672:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   20674:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   20676:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   20678:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   2067a:	e7f5      	b.n	20668 <init_mem_slab_module+0x20>
		return -EINVAL;
   2067c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   20680:	e7e8      	b.n	20654 <init_mem_slab_module+0xc>
   20682:	bf00      	nop
   20684:	200206d8 	.word	0x200206d8
   20688:	200206f4 	.word	0x200206f4

0002068c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2068c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2068e:	460c      	mov	r4, r1
   20690:	4616      	mov	r6, r2
   20692:	461f      	mov	r7, r3
   20694:	f04f 0320 	mov.w	r3, #32
   20698:	f3ef 8111 	mrs	r1, BASEPRI
   2069c:	f383 8811 	msr	BASEPRI, r3
   206a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   206a4:	6943      	ldr	r3, [r0, #20]
   206a6:	b15b      	cbz	r3, 206c0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   206a8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   206aa:	681b      	ldr	r3, [r3, #0]
   206ac:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   206ae:	6983      	ldr	r3, [r0, #24]
   206b0:	3301      	adds	r3, #1
   206b2:	6183      	str	r3, [r0, #24]
		result = 0;
   206b4:	2000      	movs	r0, #0
	__asm__ volatile(
   206b6:	f381 8811 	msr	BASEPRI, r1
   206ba:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   206be:	e011      	b.n	206e4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   206c0:	ea56 0207 	orrs.w	r2, r6, r7
   206c4:	d103      	bne.n	206ce <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   206c6:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   206ca:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   206cc:	e7f3      	b.n	206b6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   206ce:	4602      	mov	r2, r0
   206d0:	e9cd 6700 	strd	r6, r7, [sp]
   206d4:	4804      	ldr	r0, [pc, #16]	; (206e8 <k_mem_slab_alloc+0x5c>)
   206d6:	f000 fc8b 	bl	20ff0 <z_pend_curr>
		if (result == 0) {
   206da:	b918      	cbnz	r0, 206e4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   206dc:	4b03      	ldr	r3, [pc, #12]	; (206ec <k_mem_slab_alloc+0x60>)
   206de:	689b      	ldr	r3, [r3, #8]
   206e0:	695b      	ldr	r3, [r3, #20]
   206e2:	6023      	str	r3, [r4, #0]
}
   206e4:	b002      	add	sp, #8
   206e6:	bdd0      	pop	{r4, r6, r7, pc}
   206e8:	2002a093 	.word	0x2002a093
   206ec:	20026d48 	.word	0x20026d48

000206f0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   206f0:	b570      	push	{r4, r5, r6, lr}
   206f2:	4604      	mov	r4, r0
   206f4:	460d      	mov	r5, r1
	__asm__ volatile(
   206f6:	f04f 0320 	mov.w	r3, #32
   206fa:	f3ef 8611 	mrs	r6, BASEPRI
   206fe:	f383 8811 	msr	BASEPRI, r3
   20702:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20706:	f005 ff5d 	bl	265c4 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   2070a:	b158      	cbz	r0, 20724 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2070c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2070e:	682a      	ldr	r2, [r5, #0]
   20710:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20712:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   20714:	f005 fee0 	bl	264d8 <z_ready_thread>
		z_reschedule(&lock, key);
   20718:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   2071a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2071e:	4808      	ldr	r0, [pc, #32]	; (20740 <k_mem_slab_free+0x50>)
   20720:	f005 be92 	b.w	26448 <z_reschedule>
		**(char ***)mem = slab->free_list;
   20724:	682b      	ldr	r3, [r5, #0]
   20726:	6962      	ldr	r2, [r4, #20]
   20728:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2072a:	682b      	ldr	r3, [r5, #0]
   2072c:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   2072e:	69a3      	ldr	r3, [r4, #24]
   20730:	3b01      	subs	r3, #1
   20732:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   20734:	f386 8811 	msr	BASEPRI, r6
   20738:	f3bf 8f6f 	isb	sy
}
   2073c:	bd70      	pop	{r4, r5, r6, pc}
   2073e:	bf00      	nop
   20740:	2002a093 	.word	0x2002a093

00020744 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   20744:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   20746:	4801      	ldr	r0, [pc, #4]	; (2074c <k_malloc+0x8>)
   20748:	f005 bd8a 	b.w	26260 <k_mem_pool_malloc>
   2074c:	200203d8 	.word	0x200203d8

00020750 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   20750:	b507      	push	{r0, r1, r2, lr}
   20752:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   20754:	f005 ff83 	bl	2665e <k_is_in_isr>
   20758:	9901      	ldr	r1, [sp, #4]
   2075a:	b948      	cbnz	r0, 20770 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   2075c:	4b07      	ldr	r3, [pc, #28]	; (2077c <z_thread_malloc+0x2c>)
   2075e:	689b      	ldr	r3, [r3, #8]
   20760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
   20762:	b13b      	cbz	r3, 20774 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   20764:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   20766:	b003      	add	sp, #12
   20768:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   2076c:	f005 bd78 	b.w	26260 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   20770:	4b03      	ldr	r3, [pc, #12]	; (20780 <z_thread_malloc+0x30>)
   20772:	e7f7      	b.n	20764 <z_thread_malloc+0x14>
}
   20774:	b003      	add	sp, #12
   20776:	f85d fb04 	ldr.w	pc, [sp], #4
   2077a:	bf00      	nop
   2077c:	20026d48 	.word	0x20026d48
   20780:	200203d8 	.word	0x200203d8

00020784 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   20784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20788:	4604      	mov	r4, r0
   2078a:	4616      	mov	r6, r2
   2078c:	461f      	mov	r7, r3
   2078e:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   20790:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   20794:	f04f 0320 	mov.w	r3, #32
   20798:	f3ef 8811 	mrs	r8, BASEPRI
   2079c:	f383 8811 	msr	BASEPRI, r3
   207a0:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   207a4:	6a02      	ldr	r2, [r0, #32]
   207a6:	68c3      	ldr	r3, [r0, #12]
   207a8:	429a      	cmp	r2, r3
   207aa:	d22b      	bcs.n	20804 <z_impl_k_msgq_put+0x80>
   207ac:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   207ae:	f005 ff09 	bl	265c4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   207b2:	68a2      	ldr	r2, [r4, #8]
   207b4:	4605      	mov	r5, r0
   207b6:	9903      	ldr	r1, [sp, #12]
   207b8:	b178      	cbz	r0, 207da <z_impl_k_msgq_put+0x56>
   207ba:	2400      	movs	r4, #0
   207bc:	6940      	ldr	r0, [r0, #20]
   207be:	f006 f922 	bl	26a06 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   207c2:	4628      	mov	r0, r5
   207c4:	672c      	str	r4, [r5, #112]	; 0x70
   207c6:	f005 fe87 	bl	264d8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   207ca:	4648      	mov	r0, r9
   207cc:	4641      	mov	r1, r8
   207ce:	f005 fe3b 	bl	26448 <z_reschedule>
			return 0;
   207d2:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   207d4:	b005      	add	sp, #20
   207d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   207da:	69e0      	ldr	r0, [r4, #28]
   207dc:	f006 f913 	bl	26a06 <memcpy>
		result = 0;
   207e0:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   207e2:	69e3      	ldr	r3, [r4, #28]
   207e4:	68a2      	ldr	r2, [r4, #8]
   207e6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   207e8:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   207ea:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   207ec:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   207ee:	bf04      	itt	eq
   207f0:	6923      	ldreq	r3, [r4, #16]
   207f2:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   207f4:	6a23      	ldr	r3, [r4, #32]
   207f6:	3301      	adds	r3, #1
   207f8:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   207fa:	f388 8811 	msr	BASEPRI, r8
   207fe:	f3bf 8f6f 	isb	sy
	return result;
   20802:	e7e7      	b.n	207d4 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20804:	ea56 0307 	orrs.w	r3, r6, r7
   20808:	d00a      	beq.n	20820 <z_impl_k_msgq_put+0x9c>
		_current->base.swap_data = data;
   2080a:	4b07      	ldr	r3, [pc, #28]	; (20828 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2080c:	4602      	mov	r2, r0
		_current->base.swap_data = data;
   2080e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   20810:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   20812:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   20814:	4641      	mov	r1, r8
   20816:	e9cd 6700 	strd	r6, r7, [sp]
   2081a:	f000 fbe9 	bl	20ff0 <z_pend_curr>
   2081e:	e7d9      	b.n	207d4 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   20820:	f06f 0022 	mvn.w	r0, #34	; 0x22
   20824:	e7e9      	b.n	207fa <z_impl_k_msgq_put+0x76>
   20826:	bf00      	nop
   20828:	20026d48 	.word	0x20026d48

0002082c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   2082c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20830:	4604      	mov	r4, r0
   20832:	4616      	mov	r6, r2
   20834:	4608      	mov	r0, r1
   20836:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   20838:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   2083c:	f04f 0320 	mov.w	r3, #32
   20840:	f3ef 8811 	mrs	r8, BASEPRI
   20844:	f383 8811 	msr	BASEPRI, r3
   20848:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   2084c:	6a23      	ldr	r3, [r4, #32]
   2084e:	2b00      	cmp	r3, #0
   20850:	d032      	beq.n	208b8 <z_impl_k_msgq_get+0x8c>
   20852:	68a2      	ldr	r2, [r4, #8]
   20854:	69a1      	ldr	r1, [r4, #24]
   20856:	f006 f8d6 	bl	26a06 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   2085a:	69a3      	ldr	r3, [r4, #24]
   2085c:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2085e:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   20860:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   20862:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   20864:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   20866:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   20868:	bf04      	itt	eq
   2086a:	6923      	ldreq	r3, [r4, #16]
   2086c:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   2086e:	6a23      	ldr	r3, [r4, #32]
   20870:	3b01      	subs	r3, #1
   20872:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   20874:	f005 fea6 	bl	265c4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   20878:	4605      	mov	r5, r0
   2087a:	b368      	cbz	r0, 208d8 <z_impl_k_msgq_get+0xac>
   2087c:	6941      	ldr	r1, [r0, #20]
   2087e:	68a2      	ldr	r2, [r4, #8]
   20880:	69e0      	ldr	r0, [r4, #28]
   20882:	f006 f8c0 	bl	26a06 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   20886:	69e3      	ldr	r3, [r4, #28]
   20888:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2088a:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   2088c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2088e:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   20890:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   20892:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   20894:	bf04      	itt	eq
   20896:	6923      	ldreq	r3, [r4, #16]
   20898:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   2089a:	6a23      	ldr	r3, [r4, #32]
   2089c:	3301      	adds	r3, #1
   2089e:	6223      	str	r3, [r4, #32]
   208a0:	2400      	movs	r4, #0
   208a2:	672c      	str	r4, [r5, #112]	; 0x70
			z_ready_thread(pending_thread);
   208a4:	f005 fe18 	bl	264d8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   208a8:	4648      	mov	r0, r9
   208aa:	4641      	mov	r1, r8
   208ac:	f005 fdcc 	bl	26448 <z_reschedule>
			return 0;
   208b0:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   208b2:	b003      	add	sp, #12
   208b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   208b8:	ea56 0307 	orrs.w	r3, r6, r7
   208bc:	d00a      	beq.n	208d4 <z_impl_k_msgq_get+0xa8>
		_current->base.swap_data = data;
   208be:	4b09      	ldr	r3, [pc, #36]	; (208e4 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   208c0:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   208c2:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   208c4:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   208c6:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   208c8:	4641      	mov	r1, r8
   208ca:	e9cd 6700 	strd	r6, r7, [sp]
   208ce:	f000 fb8f 	bl	20ff0 <z_pend_curr>
   208d2:	e7ee      	b.n	208b2 <z_impl_k_msgq_get+0x86>
		result = -ENOMSG;
   208d4:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   208d8:	f388 8811 	msr	BASEPRI, r8
   208dc:	f3bf 8f6f 	isb	sy
	return result;
   208e0:	e7e7      	b.n	208b2 <z_impl_k_msgq_get+0x86>
   208e2:	bf00      	nop
   208e4:	20026d48 	.word	0x20026d48

000208e8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   208e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   208ec:	4604      	mov	r4, r0
   208ee:	4616      	mov	r6, r2
   208f0:	461f      	mov	r7, r3
	__asm__ volatile(
   208f2:	f04f 0320 	mov.w	r3, #32
   208f6:	f3ef 8811 	mrs	r8, BASEPRI
   208fa:	f383 8811 	msr	BASEPRI, r3
   208fe:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20902:	68c3      	ldr	r3, [r0, #12]
   20904:	4a32      	ldr	r2, [pc, #200]	; (209d0 <z_impl_k_mutex_lock+0xe8>)
   20906:	b16b      	cbz	r3, 20924 <z_impl_k_mutex_lock+0x3c>
   20908:	6880      	ldr	r0, [r0, #8]
   2090a:	6891      	ldr	r1, [r2, #8]
   2090c:	4288      	cmp	r0, r1
   2090e:	d019      	beq.n	20944 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   20910:	ea56 0307 	orrs.w	r3, r6, r7
   20914:	d118      	bne.n	20948 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   20916:	f388 8811 	msr	BASEPRI, r8
   2091a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   2091e:	f06f 000f 	mvn.w	r0, #15
   20922:	e00c      	b.n	2093e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   20924:	6891      	ldr	r1, [r2, #8]
   20926:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2092a:	3301      	adds	r3, #1
   2092c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2092e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   20930:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   20932:	60a3      	str	r3, [r4, #8]
   20934:	f388 8811 	msr	BASEPRI, r8
   20938:	f3bf 8f6f 	isb	sy
		return 0;
   2093c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2093e:	b002      	add	sp, #8
   20940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20944:	6921      	ldr	r1, [r4, #16]
   20946:	e7f0      	b.n	2092a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20948:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2094c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20950:	4299      	cmp	r1, r3
   20952:	bfa8      	it	ge
   20954:	4619      	movge	r1, r3
   20956:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2095a:	428b      	cmp	r3, r1
   2095c:	dd2c      	ble.n	209b8 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   2095e:	f000 fb5b 	bl	21018 <z_set_prio>
   20962:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20964:	4622      	mov	r2, r4
   20966:	4641      	mov	r1, r8
   20968:	e9cd 6700 	strd	r6, r7, [sp]
   2096c:	4819      	ldr	r0, [pc, #100]	; (209d4 <z_impl_k_mutex_lock+0xec>)
   2096e:	f000 fb3f 	bl	20ff0 <z_pend_curr>
	if (got_mutex == 0) {
   20972:	2800      	cmp	r0, #0
   20974:	d0e3      	beq.n	2093e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   20976:	f04f 0320 	mov.w	r3, #32
   2097a:	f3ef 8611 	mrs	r6, BASEPRI
   2097e:	f383 8811 	msr	BASEPRI, r3
   20982:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20986:	6823      	ldr	r3, [r4, #0]
   20988:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2098a:	429c      	cmp	r4, r3
   2098c:	d007      	beq.n	2099e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2098e:	b133      	cbz	r3, 2099e <z_impl_k_mutex_lock+0xb6>
   20990:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20994:	4299      	cmp	r1, r3
   20996:	bfa8      	it	ge
   20998:	4619      	movge	r1, r3
   2099a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2099e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   209a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   209a4:	4299      	cmp	r1, r3
   209a6:	d109      	bne.n	209bc <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   209a8:	b16d      	cbz	r5, 209c6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   209aa:	4631      	mov	r1, r6
   209ac:	4809      	ldr	r0, [pc, #36]	; (209d4 <z_impl_k_mutex_lock+0xec>)
   209ae:	f005 fd4b 	bl	26448 <z_reschedule>
	return -EAGAIN;
   209b2:	f06f 000a 	mvn.w	r0, #10
   209b6:	e7c2      	b.n	2093e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   209b8:	2500      	movs	r5, #0
   209ba:	e7d3      	b.n	20964 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   209bc:	f000 fb2c 	bl	21018 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   209c0:	2800      	cmp	r0, #0
   209c2:	d1f2      	bne.n	209aa <z_impl_k_mutex_lock+0xc2>
   209c4:	e7f0      	b.n	209a8 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   209c6:	f386 8811 	msr	BASEPRI, r6
   209ca:	f3bf 8f6f 	isb	sy
   209ce:	e7f0      	b.n	209b2 <z_impl_k_mutex_lock+0xca>
   209d0:	20026d48 	.word	0x20026d48
   209d4:	2002a093 	.word	0x2002a093

000209d8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   209d8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   209da:	6883      	ldr	r3, [r0, #8]
{
   209dc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   209de:	2b00      	cmp	r3, #0
   209e0:	d036      	beq.n	20a50 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   209e2:	4a1e      	ldr	r2, [pc, #120]	; (20a5c <z_impl_k_mutex_unlock+0x84>)
   209e4:	6892      	ldr	r2, [r2, #8]
   209e6:	4293      	cmp	r3, r2
   209e8:	d135      	bne.n	20a56 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   209ea:	7bda      	ldrb	r2, [r3, #15]
   209ec:	3a01      	subs	r2, #1
   209ee:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   209f0:	68c3      	ldr	r3, [r0, #12]
   209f2:	2b01      	cmp	r3, #1
   209f4:	d005      	beq.n	20a02 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   209f6:	3b01      	subs	r3, #1
   209f8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   209fa:	f000 f8f7 	bl	20bec <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   209fe:	2000      	movs	r0, #0
}
   20a00:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20a02:	f04f 0320 	mov.w	r3, #32
   20a06:	f3ef 8511 	mrs	r5, BASEPRI
   20a0a:	f383 8811 	msr	BASEPRI, r3
   20a0e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20a12:	6901      	ldr	r1, [r0, #16]
   20a14:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   20a16:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20a1a:	4299      	cmp	r1, r3
   20a1c:	d001      	beq.n	20a22 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   20a1e:	f000 fafb 	bl	21018 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20a22:	4620      	mov	r0, r4
   20a24:	f005 fdce 	bl	265c4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   20a28:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20a2a:	b158      	cbz	r0, 20a44 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   20a2c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20a30:	6122      	str	r2, [r4, #16]
   20a32:	2200      	movs	r2, #0
   20a34:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   20a36:	f005 fd4f 	bl	264d8 <z_ready_thread>
		z_reschedule(&lock, key);
   20a3a:	4629      	mov	r1, r5
   20a3c:	4808      	ldr	r0, [pc, #32]	; (20a60 <z_impl_k_mutex_unlock+0x88>)
   20a3e:	f005 fd03 	bl	26448 <z_reschedule>
   20a42:	e7da      	b.n	209fa <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   20a44:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   20a46:	f385 8811 	msr	BASEPRI, r5
   20a4a:	f3bf 8f6f 	isb	sy
   20a4e:	e7d4      	b.n	209fa <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   20a50:	f06f 0015 	mvn.w	r0, #21
   20a54:	e7d4      	b.n	20a00 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   20a56:	f04f 30ff 	mov.w	r0, #4294967295
   20a5a:	e7d1      	b.n	20a00 <z_impl_k_mutex_unlock+0x28>
   20a5c:	20026d48 	.word	0x20026d48
   20a60:	2002a093 	.word	0x2002a093

00020a64 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20a66:	4616      	mov	r6, r2
   20a68:	461f      	mov	r7, r3
	__asm__ volatile(
   20a6a:	f04f 0320 	mov.w	r3, #32
   20a6e:	f3ef 8511 	mrs	r5, BASEPRI
   20a72:	f383 8811 	msr	BASEPRI, r3
   20a76:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   20a7a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20a7c:	b19c      	cbz	r4, 20aa6 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20a7e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20a80:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20a82:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20a86:	4294      	cmp	r4, r2
	list->head = node;
   20a88:	6003      	str	r3, [r0, #0]
	list->tail = node;
   20a8a:	bf08      	it	eq
   20a8c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20a8e:	2101      	movs	r1, #1
   20a90:	4620      	mov	r0, r4
   20a92:	f005 fc80 	bl	26396 <z_queue_node_peek>
   20a96:	4604      	mov	r4, r0
	__asm__ volatile(
   20a98:	f385 8811 	msr	BASEPRI, r5
   20a9c:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   20aa0:	4620      	mov	r0, r4
   20aa2:	b003      	add	sp, #12
   20aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20aa6:	ea56 0307 	orrs.w	r3, r6, r7
   20aaa:	d0f5      	beq.n	20a98 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20aac:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20ab0:	4629      	mov	r1, r5
   20ab2:	4610      	mov	r0, r2
   20ab4:	e9cd 6700 	strd	r6, r7, [sp]
   20ab8:	f000 fa9a 	bl	20ff0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   20abc:	2800      	cmp	r0, #0
   20abe:	d1ef      	bne.n	20aa0 <z_impl_k_queue_get+0x3c>
   20ac0:	4b01      	ldr	r3, [pc, #4]	; (20ac8 <z_impl_k_queue_get+0x64>)
   20ac2:	689b      	ldr	r3, [r3, #8]
   20ac4:	695c      	ldr	r4, [r3, #20]
   20ac6:	e7eb      	b.n	20aa0 <z_impl_k_queue_get+0x3c>
   20ac8:	20026d48 	.word	0x20026d48

00020acc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   20acc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   20ace:	4c08      	ldr	r4, [pc, #32]	; (20af0 <z_reset_time_slice+0x24>)
   20ad0:	6823      	ldr	r3, [r4, #0]
   20ad2:	b15b      	cbz	r3, 20aec <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   20ad4:	f7f3 f82c 	bl	13b30 <z_clock_elapsed>
   20ad8:	6822      	ldr	r2, [r4, #0]
   20ada:	4906      	ldr	r1, [pc, #24]	; (20af4 <z_reset_time_slice+0x28>)
   20adc:	4410      	add	r0, r2
   20ade:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   20ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   20ae4:	2100      	movs	r1, #0
   20ae6:	4610      	mov	r0, r2
   20ae8:	f005 bdec 	b.w	266c4 <z_set_timeout_expiry>
}
   20aec:	bd10      	pop	{r4, pc}
   20aee:	bf00      	nop
   20af0:	20026d84 	.word	0x20026d84
   20af4:	20026d48 	.word	0x20026d48

00020af8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   20af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20afa:	460c      	mov	r4, r1
	__asm__ volatile(
   20afc:	f04f 0320 	mov.w	r3, #32
   20b00:	f3ef 8511 	mrs	r5, BASEPRI
   20b04:	f383 8811 	msr	BASEPRI, r3
   20b08:	f3bf 8f6f 	isb	sy
			return (u32_t)((t * to_hz + off) / from_hz);
   20b0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   20b10:	f240 36e7 	movw	r6, #999	; 0x3e7
   20b14:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   20b16:	2200      	movs	r2, #0
   20b18:	fbe1 6700 	umlal	r6, r7, r1, r0
   20b1c:	4b09      	ldr	r3, [pc, #36]	; (20b44 <k_sched_time_slice_set+0x4c>)
   20b1e:	4630      	mov	r0, r6
   20b20:	611a      	str	r2, [r3, #16]
   20b22:	4639      	mov	r1, r7
   20b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20b28:	2300      	movs	r3, #0
   20b2a:	f7eb fd45 	bl	c5b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   20b2e:	4b06      	ldr	r3, [pc, #24]	; (20b48 <k_sched_time_slice_set+0x50>)
   20b30:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   20b32:	4b06      	ldr	r3, [pc, #24]	; (20b4c <k_sched_time_slice_set+0x54>)
   20b34:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   20b36:	f7ff ffc9 	bl	20acc <z_reset_time_slice>
	__asm__ volatile(
   20b3a:	f385 8811 	msr	BASEPRI, r5
   20b3e:	f3bf 8f6f 	isb	sy
	}
}
   20b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20b44:	20026d48 	.word	0x20026d48
   20b48:	20026d84 	.word	0x20026d84
   20b4c:	20026d80 	.word	0x20026d80

00020b50 <k_sched_lock>:
	__asm__ volatile(
   20b50:	f04f 0320 	mov.w	r3, #32
   20b54:	f3ef 8111 	mrs	r1, BASEPRI
   20b58:	f383 8811 	msr	BASEPRI, r3
   20b5c:	f3bf 8f6f 	isb	sy
   20b60:	4b04      	ldr	r3, [pc, #16]	; (20b74 <k_sched_lock+0x24>)
   20b62:	689a      	ldr	r2, [r3, #8]
   20b64:	7bd3      	ldrb	r3, [r2, #15]
   20b66:	3b01      	subs	r3, #1
   20b68:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   20b6a:	f381 8811 	msr	BASEPRI, r1
   20b6e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   20b72:	4770      	bx	lr
   20b74:	20026d48 	.word	0x20026d48

00020b78 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   20b78:	4b09      	ldr	r3, [pc, #36]	; (20ba0 <z_priq_dumb_remove+0x28>)
   20b7a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   20b7e:	4282      	cmp	r2, r0
   20b80:	d105      	bne.n	20b8e <z_priq_dumb_remove+0x16>
   20b82:	689b      	ldr	r3, [r3, #8]
   20b84:	428b      	cmp	r3, r1
   20b86:	d102      	bne.n	20b8e <z_priq_dumb_remove+0x16>
   20b88:	7b4b      	ldrb	r3, [r1, #13]
   20b8a:	06db      	lsls	r3, r3, #27
   20b8c:	d106      	bne.n	20b9c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   20b8e:	e9d1 3200 	ldrd	r3, r2, [r1]
   20b92:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20b94:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20b96:	2300      	movs	r3, #0
	node->prev = NULL;
   20b98:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   20b9c:	4770      	bx	lr
   20b9e:	bf00      	nop
   20ba0:	20026d48 	.word	0x20026d48

00020ba4 <update_cache>:
{
   20ba4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   20ba6:	4c10      	ldr	r4, [pc, #64]	; (20be8 <update_cache+0x44>)
{
   20ba8:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   20baa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   20bae:	f005 fc89 	bl	264c4 <z_priq_dumb_best>
   20bb2:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20bb4:	68a3      	ldr	r3, [r4, #8]
   20bb6:	7b59      	ldrb	r1, [r3, #13]
   20bb8:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   20bba:	bf44      	itt	mi
   20bbc:	f041 0108 	orrmi.w	r1, r1, #8
   20bc0:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   20bc2:	b905      	cbnz	r5, 20bc6 <update_cache+0x22>
   20bc4:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   20bc6:	b94e      	cbnz	r6, 20bdc <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   20bc8:	7b5a      	ldrb	r2, [r3, #13]
   20bca:	06d2      	lsls	r2, r2, #27
   20bcc:	d106      	bne.n	20bdc <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20bce:	69aa      	ldr	r2, [r5, #24]
   20bd0:	b922      	cbnz	r2, 20bdc <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   20bd2:	89da      	ldrh	r2, [r3, #14]
   20bd4:	2a7f      	cmp	r2, #127	; 0x7f
   20bd6:	d901      	bls.n	20bdc <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   20bd8:	6263      	str	r3, [r4, #36]	; 0x24
}
   20bda:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   20bdc:	42ab      	cmp	r3, r5
   20bde:	d001      	beq.n	20be4 <update_cache+0x40>
			z_reset_time_slice();
   20be0:	f7ff ff74 	bl	20acc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   20be4:	6265      	str	r5, [r4, #36]	; 0x24
}
   20be6:	e7f8      	b.n	20bda <update_cache+0x36>
   20be8:	20026d48 	.word	0x20026d48

00020bec <k_sched_unlock>:
{
   20bec:	b510      	push	{r4, lr}
	__asm__ volatile(
   20bee:	f04f 0320 	mov.w	r3, #32
   20bf2:	f3ef 8411 	mrs	r4, BASEPRI
   20bf6:	f383 8811 	msr	BASEPRI, r3
   20bfa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   20bfe:	4b08      	ldr	r3, [pc, #32]	; (20c20 <k_sched_unlock+0x34>)
		update_cache(0);
   20c00:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   20c02:	689a      	ldr	r2, [r3, #8]
   20c04:	7bd3      	ldrb	r3, [r2, #15]
   20c06:	3301      	adds	r3, #1
   20c08:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20c0a:	f7ff ffcb 	bl	20ba4 <update_cache>
	__asm__ volatile(
   20c0e:	f384 8811 	msr	BASEPRI, r4
   20c12:	f3bf 8f6f 	isb	sy
}
   20c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   20c1a:	f005 bc2c 	b.w	26476 <z_reschedule_unlocked>
   20c1e:	bf00      	nop
   20c20:	20026d48 	.word	0x20026d48

00020c24 <ready_thread>:
{
   20c24:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20c26:	7b43      	ldrb	r3, [r0, #13]
   20c28:	06db      	lsls	r3, r3, #27
   20c2a:	d12a      	bne.n	20c82 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   20c2c:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   20c2e:	bb43      	cbnz	r3, 20c82 <ready_thread+0x5e>
	return list->head == list;
   20c30:	4a15      	ldr	r2, [pc, #84]	; (20c88 <ready_thread+0x64>)
   20c32:	4611      	mov	r1, r2
   20c34:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20c38:	428c      	cmp	r4, r1
   20c3a:	bf18      	it	ne
   20c3c:	4623      	movne	r3, r4
   20c3e:	2b00      	cmp	r3, #0
   20c40:	bf38      	it	cc
   20c42:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20c44:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20c46:	b1b3      	cbz	r3, 20c76 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   20c48:	f990 600e 	ldrsb.w	r6, [r0, #14]
   20c4c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   20c50:	42ae      	cmp	r6, r5
   20c52:	db03      	blt.n	20c5c <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   20c54:	42a3      	cmp	r3, r4
   20c56:	d00e      	beq.n	20c76 <ready_thread+0x52>
   20c58:	681b      	ldr	r3, [r3, #0]
   20c5a:	e7f4      	b.n	20c46 <ready_thread+0x22>
	node->prev = successor->prev;
   20c5c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20c5e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   20c62:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   20c64:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   20c66:	7b43      	ldrb	r3, [r0, #13]
   20c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20c6c:	7343      	strb	r3, [r0, #13]
}
   20c6e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   20c70:	2000      	movs	r0, #0
   20c72:	f7ff bf97 	b.w	20ba4 <update_cache>
	node->prev = list->tail;
   20c76:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   20c7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20c7c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   20c7e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   20c80:	e7f1      	b.n	20c66 <ready_thread+0x42>
}
   20c82:	bc70      	pop	{r4, r5, r6}
   20c84:	4770      	bx	lr
   20c86:	bf00      	nop
   20c88:	20026d48 	.word	0x20026d48

00020c8c <z_sched_start>:
{
   20c8c:	b510      	push	{r4, lr}
	__asm__ volatile(
   20c8e:	f04f 0220 	mov.w	r2, #32
   20c92:	f3ef 8411 	mrs	r4, BASEPRI
   20c96:	f382 8811 	msr	BASEPRI, r2
   20c9a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   20c9e:	7b42      	ldrb	r2, [r0, #13]
   20ca0:	0751      	lsls	r1, r2, #29
   20ca2:	d404      	bmi.n	20cae <z_sched_start+0x22>
	__asm__ volatile(
   20ca4:	f384 8811 	msr	BASEPRI, r4
   20ca8:	f3bf 8f6f 	isb	sy
}
   20cac:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20cae:	f022 0204 	bic.w	r2, r2, #4
   20cb2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   20cb4:	f7ff ffb6 	bl	20c24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20cb8:	4621      	mov	r1, r4
}
   20cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   20cbe:	4801      	ldr	r0, [pc, #4]	; (20cc4 <z_sched_start+0x38>)
   20cc0:	f005 bbc2 	b.w	26448 <z_reschedule>
   20cc4:	2002a093 	.word	0x2002a093

00020cc8 <z_impl_k_thread_resume>:
{
   20cc8:	b507      	push	{r0, r1, r2, lr}
	__asm__ volatile(
   20cca:	f04f 0220 	mov.w	r2, #32
   20cce:	f3ef 8111 	mrs	r1, BASEPRI
   20cd2:	f382 8811 	msr	BASEPRI, r2
   20cd6:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20cda:	7b42      	ldrb	r2, [r0, #13]
   20cdc:	9101      	str	r1, [sp, #4]
   20cde:	f022 0210 	bic.w	r2, r2, #16
   20ce2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   20ce4:	f7ff ff9e 	bl	20c24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20ce8:	9901      	ldr	r1, [sp, #4]
   20cea:	4803      	ldr	r0, [pc, #12]	; (20cf8 <z_impl_k_thread_resume+0x30>)
}
   20cec:	b003      	add	sp, #12
   20cee:	f85d eb04 	ldr.w	lr, [sp], #4
	z_reschedule(&sched_spinlock, key);
   20cf2:	f005 bba9 	b.w	26448 <z_reschedule>
   20cf6:	bf00      	nop
   20cf8:	2002a093 	.word	0x2002a093

00020cfc <z_move_thread_to_end_of_prio_q>:
{
   20cfc:	4601      	mov	r1, r0
   20cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d00:	f04f 0320 	mov.w	r3, #32
   20d04:	f3ef 8411 	mrs	r4, BASEPRI
   20d08:	f383 8811 	msr	BASEPRI, r3
   20d0c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20d10:	f990 300d 	ldrsb.w	r3, [r0, #13]
   20d14:	2b00      	cmp	r3, #0
   20d16:	da02      	bge.n	20d1e <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   20d18:	4819      	ldr	r0, [pc, #100]	; (20d80 <z_move_thread_to_end_of_prio_q+0x84>)
   20d1a:	f7ff ff2d 	bl	20b78 <z_priq_dumb_remove>
	return list->head == list;
   20d1e:	4a19      	ldr	r2, [pc, #100]	; (20d84 <z_move_thread_to_end_of_prio_q+0x88>)
   20d20:	4610      	mov	r0, r2
   20d22:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20d26:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20d28:	4283      	cmp	r3, r0
   20d2a:	bf08      	it	eq
   20d2c:	2300      	moveq	r3, #0
   20d2e:	2b00      	cmp	r3, #0
   20d30:	bf38      	it	cc
   20d32:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20d34:	b1eb      	cbz	r3, 20d72 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   20d36:	f991 700e 	ldrsb.w	r7, [r1, #14]
   20d3a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   20d3e:	42b7      	cmp	r7, r6
   20d40:	db03      	blt.n	20d4a <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   20d42:	429d      	cmp	r5, r3
   20d44:	d015      	beq.n	20d72 <z_move_thread_to_end_of_prio_q+0x76>
   20d46:	681b      	ldr	r3, [r3, #0]
   20d48:	e7f4      	b.n	20d34 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   20d4a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   20d4c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   20d50:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   20d52:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   20d54:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   20d56:	6890      	ldr	r0, [r2, #8]
   20d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20d5c:	734b      	strb	r3, [r1, #13]
   20d5e:	1a43      	subs	r3, r0, r1
   20d60:	4258      	negs	r0, r3
   20d62:	4158      	adcs	r0, r3
   20d64:	f7ff ff1e 	bl	20ba4 <update_cache>
	__asm__ volatile(
   20d68:	f384 8811 	msr	BASEPRI, r4
   20d6c:	f3bf 8f6f 	isb	sy
}
   20d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   20d72:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   20d76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20d78:	6019      	str	r1, [r3, #0]
	list->tail = node;
   20d7a:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   20d7c:	e7ea      	b.n	20d54 <z_move_thread_to_end_of_prio_q+0x58>
   20d7e:	bf00      	nop
   20d80:	20026d70 	.word	0x20026d70
   20d84:	20026d48 	.word	0x20026d48

00020d88 <z_time_slice>:
{
   20d88:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   20d8a:	4a15      	ldr	r2, [pc, #84]	; (20de0 <z_time_slice+0x58>)
   20d8c:	4b15      	ldr	r3, [pc, #84]	; (20de4 <z_time_slice+0x5c>)
   20d8e:	6814      	ldr	r4, [r2, #0]
{
   20d90:	4601      	mov	r1, r0
	if (pending_current == _current) {
   20d92:	6898      	ldr	r0, [r3, #8]
   20d94:	42a0      	cmp	r0, r4
   20d96:	461c      	mov	r4, r3
   20d98:	d103      	bne.n	20da2 <z_time_slice+0x1a>
}
   20d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   20d9e:	f7ff be95 	b.w	20acc <z_reset_time_slice>
	pending_current = NULL;
   20da2:	2500      	movs	r5, #0
   20da4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   20da6:	4a10      	ldr	r2, [pc, #64]	; (20de8 <z_time_slice+0x60>)
   20da8:	6812      	ldr	r2, [r2, #0]
   20daa:	b1b2      	cbz	r2, 20dda <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   20dac:	89c2      	ldrh	r2, [r0, #14]
   20dae:	2a7f      	cmp	r2, #127	; 0x7f
   20db0:	d813      	bhi.n	20dda <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   20db2:	4a0e      	ldr	r2, [pc, #56]	; (20dec <z_time_slice+0x64>)
   20db4:	f990 500e 	ldrsb.w	r5, [r0, #14]
   20db8:	6812      	ldr	r2, [r2, #0]
   20dba:	4295      	cmp	r5, r2
   20dbc:	db0d      	blt.n	20dda <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   20dbe:	4a0c      	ldr	r2, [pc, #48]	; (20df0 <z_time_slice+0x68>)
   20dc0:	4290      	cmp	r0, r2
   20dc2:	d00a      	beq.n	20dda <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   20dc4:	6982      	ldr	r2, [r0, #24]
   20dc6:	b942      	cbnz	r2, 20dda <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   20dc8:	691a      	ldr	r2, [r3, #16]
   20dca:	428a      	cmp	r2, r1
   20dcc:	dc02      	bgt.n	20dd4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   20dce:	f7ff ff95 	bl	20cfc <z_move_thread_to_end_of_prio_q>
   20dd2:	e7e2      	b.n	20d9a <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   20dd4:	1a52      	subs	r2, r2, r1
   20dd6:	611a      	str	r2, [r3, #16]
}
   20dd8:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   20dda:	2300      	movs	r3, #0
   20ddc:	6123      	str	r3, [r4, #16]
   20dde:	e7fb      	b.n	20dd8 <z_time_slice+0x50>
   20de0:	20026d7c 	.word	0x20026d7c
   20de4:	20026d48 	.word	0x20026d48
   20de8:	20026d84 	.word	0x20026d84
   20dec:	20026d80 	.word	0x20026d80
   20df0:	20022378 	.word	0x20022378

00020df4 <z_impl_k_thread_suspend>:
{
   20df4:	b570      	push	{r4, r5, r6, lr}
   20df6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   20df8:	3018      	adds	r0, #24
   20dfa:	f005 fc3d 	bl	26678 <z_abort_timeout>
	__asm__ volatile(
   20dfe:	f04f 0320 	mov.w	r3, #32
   20e02:	f3ef 8611 	mrs	r6, BASEPRI
   20e06:	f383 8811 	msr	BASEPRI, r3
   20e0a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20e0e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   20e12:	2b00      	cmp	r3, #0
   20e14:	da07      	bge.n	20e26 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   20e16:	4621      	mov	r1, r4
   20e18:	480e      	ldr	r0, [pc, #56]	; (20e54 <z_impl_k_thread_suspend+0x60>)
   20e1a:	f7ff fead 	bl	20b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20e1e:	7b63      	ldrb	r3, [r4, #13]
   20e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20e24:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   20e26:	4d0c      	ldr	r5, [pc, #48]	; (20e58 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20e28:	7b63      	ldrb	r3, [r4, #13]
   20e2a:	68a8      	ldr	r0, [r5, #8]
   20e2c:	f043 0310 	orr.w	r3, r3, #16
   20e30:	7363      	strb	r3, [r4, #13]
   20e32:	1b03      	subs	r3, r0, r4
   20e34:	4258      	negs	r0, r3
   20e36:	4158      	adcs	r0, r3
   20e38:	f7ff feb4 	bl	20ba4 <update_cache>
	__asm__ volatile(
   20e3c:	f386 8811 	msr	BASEPRI, r6
   20e40:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   20e44:	68ab      	ldr	r3, [r5, #8]
   20e46:	42a3      	cmp	r3, r4
   20e48:	d103      	bne.n	20e52 <z_impl_k_thread_suspend+0x5e>
}
   20e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   20e4e:	f005 bb12 	b.w	26476 <z_reschedule_unlocked>
}
   20e52:	bd70      	pop	{r4, r5, r6, pc}
   20e54:	20026d70 	.word	0x20026d70
   20e58:	20026d48 	.word	0x20026d48

00020e5c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   20e5c:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   20e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e62:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   20e64:	b103      	cbz	r3, 20e68 <z_thread_single_abort+0xc>
		thread->fn_abort();
   20e66:	4798      	blx	r3
   20e68:	f104 0018 	add.w	r0, r4, #24
   20e6c:	f005 fc04 	bl	26678 <z_abort_timeout>
	__asm__ volatile(
   20e70:	f04f 0320 	mov.w	r3, #32
   20e74:	f3ef 8611 	mrs	r6, BASEPRI
   20e78:	f383 8811 	msr	BASEPRI, r3
   20e7c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20e80:	7b63      	ldrb	r3, [r4, #13]
   20e82:	06d8      	lsls	r0, r3, #27
   20e84:	d123      	bne.n	20ece <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   20e86:	69a2      	ldr	r2, [r4, #24]
   20e88:	bb0a      	cbnz	r2, 20ece <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   20e8a:	0619      	lsls	r1, r3, #24
   20e8c:	d507      	bpl.n	20e9e <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   20e8e:	4621      	mov	r1, r4
   20e90:	481e      	ldr	r0, [pc, #120]	; (20f0c <z_thread_single_abort+0xb0>)
   20e92:	f7ff fe71 	bl	20b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20e96:	7b63      	ldrb	r3, [r4, #13]
   20e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20e9c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   20e9e:	4b1c      	ldr	r3, [pc, #112]	; (20f10 <z_thread_single_abort+0xb4>)
   20ea0:	6898      	ldr	r0, [r3, #8]
   20ea2:	1b02      	subs	r2, r0, r4
   20ea4:	4250      	negs	r0, r2
   20ea6:	4150      	adcs	r0, r2
   20ea8:	f7ff fe7c 	bl	20ba4 <update_cache>
			waiter->base.pended_on = NULL;
   20eac:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   20eae:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   20eb0:	f104 0828 	add.w	r8, r4, #40	; 0x28
   20eb4:	f043 0308 	orr.w	r3, r3, #8
   20eb8:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   20eba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ebc:	4545      	cmp	r5, r8
   20ebe:	d000      	beq.n	20ec2 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   20ec0:	b995      	cbnz	r5, 20ee8 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   20ec2:	f386 8811 	msr	BASEPRI, r6
   20ec6:	f3bf 8f6f 	isb	sy
}
   20eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   20ece:	079b      	lsls	r3, r3, #30
   20ed0:	d5ec      	bpl.n	20eac <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   20ed2:	4621      	mov	r1, r4
   20ed4:	68a0      	ldr	r0, [r4, #8]
   20ed6:	f7ff fe4f 	bl	20b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20eda:	7b63      	ldrb	r3, [r4, #13]
   20edc:	f023 0302 	bic.w	r3, r3, #2
   20ee0:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   20ee2:	2300      	movs	r3, #0
   20ee4:	60a3      	str	r3, [r4, #8]
   20ee6:	e7e1      	b.n	20eac <z_thread_single_abort+0x50>
   20ee8:	f105 0018 	add.w	r0, r5, #24
   20eec:	f005 fbc4 	bl	26678 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   20ef0:	68a8      	ldr	r0, [r5, #8]
   20ef2:	4629      	mov	r1, r5
   20ef4:	f7ff fe40 	bl	20b78 <z_priq_dumb_remove>
   20ef8:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   20efa:	4628      	mov	r0, r5
   20efc:	f023 0302 	bic.w	r3, r3, #2
   20f00:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   20f02:	60af      	str	r7, [r5, #8]
   20f04:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   20f06:	f7ff fe8d 	bl	20c24 <ready_thread>
   20f0a:	e7d6      	b.n	20eba <z_thread_single_abort+0x5e>
   20f0c:	20026d70 	.word	0x20026d70
   20f10:	20026d48 	.word	0x20026d48

00020f14 <unready_thread>:
{
   20f14:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   20f16:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   20f1a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   20f1c:	2b00      	cmp	r3, #0
   20f1e:	da06      	bge.n	20f2e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   20f20:	4807      	ldr	r0, [pc, #28]	; (20f40 <unready_thread+0x2c>)
   20f22:	f7ff fe29 	bl	20b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20f26:	7b4b      	ldrb	r3, [r1, #13]
   20f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20f2c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   20f2e:	4b05      	ldr	r3, [pc, #20]	; (20f44 <unready_thread+0x30>)
   20f30:	6898      	ldr	r0, [r3, #8]
   20f32:	1a43      	subs	r3, r0, r1
   20f34:	4258      	negs	r0, r3
   20f36:	4158      	adcs	r0, r3
}
   20f38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   20f3c:	f7ff be32 	b.w	20ba4 <update_cache>
   20f40:	20026d70 	.word	0x20026d70
   20f44:	20026d48 	.word	0x20026d48

00020f48 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   20f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f4a:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   20f4c:	f005 fbd5 	bl	266fa <z_tick_get_32>
   20f50:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   20f52:	f04f 0320 	mov.w	r3, #32
   20f56:	f3ef 8711 	mrs	r7, BASEPRI
   20f5a:	f383 8811 	msr	BASEPRI, r3
   20f5e:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   20f62:	4e0d      	ldr	r6, [pc, #52]	; (20f98 <z_tick_sleep.part.0+0x50>)
   20f64:	4b0d      	ldr	r3, [pc, #52]	; (20f9c <z_tick_sleep.part.0+0x54>)
   20f66:	68b0      	ldr	r0, [r6, #8]
   20f68:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   20f6a:	f005 faf0 	bl	2654e <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   20f6e:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   20f70:	490b      	ldr	r1, [pc, #44]	; (20fa0 <z_tick_sleep.part.0+0x58>)
   20f72:	462a      	mov	r2, r5
   20f74:	17eb      	asrs	r3, r5, #31
   20f76:	3018      	adds	r0, #24
   20f78:	f000 faee 	bl	21558 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   20f7c:	68b2      	ldr	r2, [r6, #8]
	return z_swap_irqlock(key.key);
   20f7e:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20f80:	7b53      	ldrb	r3, [r2, #13]
   20f82:	f043 0310 	orr.w	r3, r3, #16
   20f86:	7353      	strb	r3, [r2, #13]
   20f88:	f005 fa22 	bl	263d0 <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   20f8c:	f005 fbb5 	bl	266fa <z_tick_get_32>
   20f90:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   20f92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   20f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20f98:	20026d48 	.word	0x20026d48
   20f9c:	20026d7c 	.word	0x20026d7c
   20fa0:	000264f9 	.word	0x000264f9

00020fa4 <pend>:
{
   20fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20fa8:	4606      	mov	r6, r0
   20faa:	4614      	mov	r4, r2
   20fac:	461d      	mov	r5, r3
   20fae:	f04f 0320 	mov.w	r3, #32
   20fb2:	f3ef 8711 	mrs	r7, BASEPRI
   20fb6:	f383 8811 	msr	BASEPRI, r3
   20fba:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   20fbe:	f005 fad6 	bl	2656e <add_to_waitq_locked>
	__asm__ volatile(
   20fc2:	f387 8811 	msr	BASEPRI, r7
   20fc6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20fca:	1c6b      	adds	r3, r5, #1
   20fcc:	bf08      	it	eq
   20fce:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   20fd2:	d008      	beq.n	20fe6 <pend+0x42>
   20fd4:	4622      	mov	r2, r4
   20fd6:	462b      	mov	r3, r5
   20fd8:	f106 0018 	add.w	r0, r6, #24
   20fdc:	4903      	ldr	r1, [pc, #12]	; (20fec <pend+0x48>)
}
   20fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20fe2:	f000 bab9 	b.w	21558 <z_add_timeout>
   20fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20fea:	bf00      	nop
   20fec:	000264f9 	.word	0x000264f9

00020ff0 <z_pend_curr>:
{
   20ff0:	b510      	push	{r4, lr}
   20ff2:	460c      	mov	r4, r1
	pending_current = _current;
   20ff4:	4b06      	ldr	r3, [pc, #24]	; (21010 <z_pend_curr+0x20>)
{
   20ff6:	4611      	mov	r1, r2
	pending_current = _current;
   20ff8:	6898      	ldr	r0, [r3, #8]
   20ffa:	4b06      	ldr	r3, [pc, #24]	; (21014 <z_pend_curr+0x24>)
   20ffc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   20ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21002:	f7ff ffcf 	bl	20fa4 <pend>
   21006:	4620      	mov	r0, r4
}
   21008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2100c:	f005 b9e0 	b.w	263d0 <z_swap_irqlock>
   21010:	20026d48 	.word	0x20026d48
   21014:	20026d7c 	.word	0x20026d7c

00021018 <z_set_prio>:
{
   21018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2101c:	4604      	mov	r4, r0
	__asm__ volatile(
   2101e:	f04f 0320 	mov.w	r3, #32
   21022:	f3ef 8811 	mrs	r8, BASEPRI
   21026:	f383 8811 	msr	BASEPRI, r3
   2102a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2102e:	7b43      	ldrb	r3, [r0, #13]
   21030:	b24e      	sxtb	r6, r1
   21032:	06db      	lsls	r3, r3, #27
   21034:	d12e      	bne.n	21094 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   21036:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   21038:	bb65      	cbnz	r5, 21094 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   2103a:	4f18      	ldr	r7, [pc, #96]	; (2109c <z_set_prio+0x84>)
   2103c:	4621      	mov	r1, r4
   2103e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   21042:	f7ff fd99 	bl	20b78 <z_priq_dumb_remove>
	return list->head == list;
   21046:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2104a:	4283      	cmp	r3, r0
   2104c:	bf18      	it	ne
   2104e:	461d      	movne	r5, r3
   21050:	2d00      	cmp	r5, #0
   21052:	bf38      	it	cc
   21054:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   21056:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21058:	b1b5      	cbz	r5, 21088 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   2105a:	f995 100e 	ldrsb.w	r1, [r5, #14]
   2105e:	42b1      	cmp	r1, r6
   21060:	dc03      	bgt.n	2106a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   21062:	42aa      	cmp	r2, r5
   21064:	d010      	beq.n	21088 <z_set_prio+0x70>
   21066:	682d      	ldr	r5, [r5, #0]
   21068:	e7f6      	b.n	21058 <z_set_prio+0x40>
	node->prev = successor->prev;
   2106a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   2106c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   21070:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21072:	606c      	str	r4, [r5, #4]
			update_cache(1);
   21074:	2001      	movs	r0, #1
   21076:	f7ff fd95 	bl	20ba4 <update_cache>
   2107a:	2001      	movs	r0, #1
	__asm__ volatile(
   2107c:	f388 8811 	msr	BASEPRI, r8
   21080:	f3bf 8f6f 	isb	sy
}
   21084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   21088:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   2108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2108e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21090:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   21092:	e7ef      	b.n	21074 <z_set_prio+0x5c>
			thread->base.prio = prio;
   21094:	2000      	movs	r0, #0
   21096:	73a6      	strb	r6, [r4, #14]
   21098:	e7f0      	b.n	2107c <z_set_prio+0x64>
   2109a:	bf00      	nop
   2109c:	20026d48 	.word	0x20026d48

000210a0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   210a0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   210a2:	4b04      	ldr	r3, [pc, #16]	; (210b4 <z_sched_init+0x14>)
   210a4:	4608      	mov	r0, r1
   210a6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   210aa:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   210ae:	f7ff bd23 	b.w	20af8 <k_sched_time_slice_set>
   210b2:	bf00      	nop
   210b4:	20026d48 	.word	0x20026d48

000210b8 <z_impl_k_yield>:
{
   210b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   210ba:	4c24      	ldr	r4, [pc, #144]	; (2114c <z_impl_k_yield+0x94>)
   210bc:	4b24      	ldr	r3, [pc, #144]	; (21150 <z_impl_k_yield+0x98>)
   210be:	68a2      	ldr	r2, [r4, #8]
   210c0:	429a      	cmp	r2, r3
   210c2:	d030      	beq.n	21126 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   210c4:	f04f 0320 	mov.w	r3, #32
   210c8:	f3ef 8511 	mrs	r5, BASEPRI
   210cc:	f383 8811 	msr	BASEPRI, r3
   210d0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   210d4:	68a1      	ldr	r1, [r4, #8]
   210d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   210da:	f7ff fd4d 	bl	20b78 <z_priq_dumb_remove>
	return list->head == list;
   210de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   210e0:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   210e2:	4283      	cmp	r3, r0
   210e4:	bf08      	it	eq
   210e6:	2300      	moveq	r3, #0
   210e8:	2b00      	cmp	r3, #0
   210ea:	bf38      	it	cc
   210ec:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   210ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   210f0:	b32b      	cbz	r3, 2113e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   210f2:	f992 700e 	ldrsb.w	r7, [r2, #14]
   210f6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   210fa:	42b7      	cmp	r7, r6
   210fc:	db03      	blt.n	21106 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   210fe:	428b      	cmp	r3, r1
   21100:	d01d      	beq.n	2113e <z_impl_k_yield+0x86>
   21102:	681b      	ldr	r3, [r3, #0]
   21104:	e7f4      	b.n	210f0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   21106:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   21108:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   2110c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   2110e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   21110:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   21112:	2001      	movs	r0, #1
   21114:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21118:	7353      	strb	r3, [r2, #13]
   2111a:	f7ff fd43 	bl	20ba4 <update_cache>
	__asm__ volatile(
   2111e:	f385 8811 	msr	BASEPRI, r5
   21122:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21126:	f04f 0320 	mov.w	r3, #32
   2112a:	f3ef 8011 	mrs	r0, BASEPRI
   2112e:	f383 8811 	msr	BASEPRI, r3
   21132:	f3bf 8f6f 	isb	sy
}
   21136:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void) z_swap_irqlock(arch_irq_lock());
   2113a:	f005 b949 	b.w	263d0 <z_swap_irqlock>
	node->prev = list->tail;
   2113e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   21142:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21144:	601a      	str	r2, [r3, #0]
	list->tail = node;
   21146:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   21148:	e7e2      	b.n	21110 <z_impl_k_yield+0x58>
   2114a:	bf00      	nop
   2114c:	20026d48 	.word	0x20026d48
   21150:	20022378 	.word	0x20022378

00021154 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   21154:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21156:	3301      	adds	r3, #1
   21158:	bf08      	it	eq
   2115a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2115e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21160:	d106      	bne.n	21170 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   21162:	4b0b      	ldr	r3, [pc, #44]	; (21190 <z_impl_k_sleep+0x3c>)
   21164:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21166:	f7ff fe45 	bl	20df4 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   2116a:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   2116e:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   21170:	4604      	mov	r4, r0
	if (ticks == 0) {
   21172:	b948      	cbnz	r0, 21188 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   21174:	f7ff ffa0 	bl	210b8 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   21178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2117c:	fb84 3400 	smull	r3, r4, r4, r0
   21180:	0bd8      	lsrs	r0, r3, #15
   21182:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   21186:	e7f2      	b.n	2116e <z_impl_k_sleep+0x1a>
   21188:	f7ff fede 	bl	20f48 <z_tick_sleep.part.0>
   2118c:	4604      	mov	r4, r0
   2118e:	e7f3      	b.n	21178 <z_impl_k_sleep+0x24>
   21190:	20026d48 	.word	0x20026d48

00021194 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21194:	4b01      	ldr	r3, [pc, #4]	; (2119c <z_impl_k_current_get+0x8>)
   21196:	6898      	ldr	r0, [r3, #8]
   21198:	4770      	bx	lr
   2119a:	bf00      	nop
   2119c:	20026d48 	.word	0x20026d48

000211a0 <z_impl_k_thread_join>:
}

#endif /* CONFIG_SCHED_CPU_MASK */

int z_impl_k_thread_join(struct k_thread *thread, k_timeout_t timeout)
{
   211a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211a2:	4601      	mov	r1, r0
   211a4:	4614      	mov	r4, r2
   211a6:	461d      	mov	r5, r3
   211a8:	f04f 0320 	mov.w	r3, #32
   211ac:	f3ef 8611 	mrs	r6, BASEPRI
   211b0:	f383 8811 	msr	BASEPRI, r3
   211b4:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) ||
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	key = k_spin_lock(&sched_spinlock);

	if ((thread->base.pended_on == &_current->base.join_waiters) ||
   211b8:	4f18      	ldr	r7, [pc, #96]	; (2121c <z_impl_k_thread_join+0x7c>)
   211ba:	688a      	ldr	r2, [r1, #8]
   211bc:	68b8      	ldr	r0, [r7, #8]
   211be:	f100 0328 	add.w	r3, r0, #40	; 0x28
   211c2:	429a      	cmp	r2, r3
   211c4:	d01d      	beq.n	21202 <z_impl_k_thread_join+0x62>
   211c6:	4288      	cmp	r0, r1
   211c8:	d01b      	beq.n	21202 <z_impl_k_thread_join+0x62>
	    (thread == _current)) {
		ret = -EDEADLK;
		goto out;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0) {
   211ca:	7b4b      	ldrb	r3, [r1, #13]
   211cc:	071a      	lsls	r2, r3, #28
   211ce:	d41f      	bmi.n	21210 <z_impl_k_thread_join+0x70>
		ret = 0;
		goto out;
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   211d0:	ea54 0305 	orrs.w	r3, r4, r5
   211d4:	d01e      	beq.n	21214 <z_impl_k_thread_join+0x74>
		ret = -EBUSY;
		goto out;
	}

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   211d6:	4b12      	ldr	r3, [pc, #72]	; (21220 <z_impl_k_thread_join+0x80>)
#endif
	add_to_waitq_locked(_current, &thread->base.join_waiters);
   211d8:	3128      	adds	r1, #40	; 0x28
	pending_current = _current;
   211da:	6018      	str	r0, [r3, #0]
	add_to_waitq_locked(_current, &thread->base.join_waiters);
   211dc:	f005 f9c7 	bl	2656e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   211e0:	1c6b      	adds	r3, r5, #1
   211e2:	bf08      	it	eq
   211e4:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   211e8:	d006      	beq.n	211f8 <z_impl_k_thread_join+0x58>
	add_thread_timeout(_current, timeout);
   211ea:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   211ec:	4622      	mov	r2, r4
   211ee:	462b      	mov	r3, r5
   211f0:	490c      	ldr	r1, [pc, #48]	; (21224 <z_impl_k_thread_join+0x84>)
   211f2:	3018      	adds	r0, #24
   211f4:	f000 f9b0 	bl	21558 <z_add_timeout>
	return z_swap_irqlock(key.key);
   211f8:	4630      	mov	r0, r6

	return z_swap(&sched_spinlock, key);
out:
	k_spin_unlock(&sched_spinlock, key);
	return ret;
}
   211fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   211fe:	f005 b8e7 	b.w	263d0 <z_swap_irqlock>
		ret = -EDEADLK;
   21202:	f06f 002c 	mvn.w	r0, #44	; 0x2c
	__asm__ volatile(
   21206:	f386 8811 	msr	BASEPRI, r6
   2120a:	f3bf 8f6f 	isb	sy
}
   2120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = 0;
   21210:	2000      	movs	r0, #0
   21212:	e7f8      	b.n	21206 <z_impl_k_thread_join+0x66>
		ret = -EBUSY;
   21214:	f06f 000f 	mvn.w	r0, #15
   21218:	e7f5      	b.n	21206 <z_impl_k_thread_join+0x66>
   2121a:	bf00      	nop
   2121c:	20026d48 	.word	0x20026d48
   21220:	20026d7c 	.word	0x20026d7c
   21224:	000264f9 	.word	0x000264f9

00021228 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   21228:	b538      	push	{r3, r4, r5, lr}
   2122a:	4604      	mov	r4, r0
	__asm__ volatile(
   2122c:	f04f 0320 	mov.w	r3, #32
   21230:	f3ef 8511 	mrs	r5, BASEPRI
   21234:	f383 8811 	msr	BASEPRI, r3
   21238:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   2123c:	f005 f9c2 	bl	265c4 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   21240:	b148      	cbz	r0, 21256 <z_impl_k_sem_give+0x2e>
   21242:	2200      	movs	r2, #0
   21244:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21246:	f005 f947 	bl	264d8 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   2124a:	4629      	mov	r1, r5
}
   2124c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21250:	4807      	ldr	r0, [pc, #28]	; (21270 <z_impl_k_sem_give+0x48>)
   21252:	f005 b8f9 	b.w	26448 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21256:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2125a:	429a      	cmp	r2, r3
   2125c:	bf18      	it	ne
   2125e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21260:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21262:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21264:	f104 0010 	add.w	r0, r4, #16
   21268:	f005 fb9e 	bl	269a8 <z_handle_obj_poll_events>
}
   2126c:	e7ed      	b.n	2124a <z_impl_k_sem_give+0x22>
   2126e:	bf00      	nop
   21270:	2002a093 	.word	0x2002a093

00021274 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21274:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21276:	4614      	mov	r4, r2
   21278:	461d      	mov	r5, r3
   2127a:	f04f 0320 	mov.w	r3, #32
   2127e:	f3ef 8111 	mrs	r1, BASEPRI
   21282:	f383 8811 	msr	BASEPRI, r3
   21286:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   2128a:	6883      	ldr	r3, [r0, #8]
   2128c:	b143      	cbz	r3, 212a0 <z_impl_k_sem_take+0x2c>
		sem->count--;
   2128e:	3b01      	subs	r3, #1
   21290:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   21292:	f381 8811 	msr	BASEPRI, r1
   21296:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2129a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   2129c:	b003      	add	sp, #12
   2129e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   212a0:	ea54 0305 	orrs.w	r3, r4, r5
   212a4:	d106      	bne.n	212b4 <z_impl_k_sem_take+0x40>
   212a6:	f381 8811 	msr	BASEPRI, r1
   212aa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   212ae:	f06f 000f 	mvn.w	r0, #15
   212b2:	e7f3      	b.n	2129c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   212b4:	4602      	mov	r2, r0
   212b6:	e9cd 4500 	strd	r4, r5, [sp]
   212ba:	4802      	ldr	r0, [pc, #8]	; (212c4 <z_impl_k_sem_take+0x50>)
   212bc:	f7ff fe98 	bl	20ff0 <z_pend_curr>
	return ret;
   212c0:	e7ec      	b.n	2129c <z_impl_k_sem_take+0x28>
   212c2:	bf00      	nop
   212c4:	2002a093 	.word	0x2002a093

000212c8 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   212c8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   212ca:	4c08      	ldr	r4, [pc, #32]	; (212ec <k_sys_work_q_init+0x24>)
   212cc:	f04f 33ff 	mov.w	r3, #4294967295
   212d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   212d4:	4620      	mov	r0, r4
   212d6:	4906      	ldr	r1, [pc, #24]	; (212f0 <k_sys_work_q_init+0x28>)
   212d8:	f000 f8dc 	bl	21494 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   212dc:	4905      	ldr	r1, [pc, #20]	; (212f4 <k_sys_work_q_init+0x2c>)
   212de:	f104 0018 	add.w	r0, r4, #24
   212e2:	f005 f9c4 	bl	2666e <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   212e6:	2000      	movs	r0, #0
   212e8:	bd10      	pop	{r4, pc}
   212ea:	bf00      	nop
   212ec:	20026d88 	.word	0x20026d88
   212f0:	2002e490 	.word	0x2002e490
   212f4:	0002a924 	.word	0x0002a924

000212f8 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   212f8:	4b09      	ldr	r3, [pc, #36]	; (21320 <z_check_stack_sentinel+0x28>)
   212fa:	689b      	ldr	r3, [r3, #8]
   212fc:	7b5a      	ldrb	r2, [r3, #13]
   212fe:	07d2      	lsls	r2, r2, #31
   21300:	d40d      	bmi.n	2131e <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   21302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	if (*stack != STACK_SENTINEL) {
   21304:	681a      	ldr	r2, [r3, #0]
   21306:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   2130a:	d008      	beq.n	2131e <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   2130c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   21310:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   21312:	4040      	eors	r0, r0
   21314:	f380 8811 	msr	BASEPRI, r0
   21318:	f04f 0002 	mov.w	r0, #2
   2131c:	df02      	svc	2
	}
}
   2131e:	4770      	bx	lr
   21320:	20026d48 	.word	0x20026d48

00021324 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   21324:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   21326:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2132a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   2132e:	2504      	movs	r5, #4
   21330:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   21332:	2500      	movs	r5, #0
{
   21334:	b087      	sub	sp, #28
   21336:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2133a:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
   2133e:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21340:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   21342:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21344:	9602      	str	r6, [sp, #8]
   21346:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	node->prev = NULL;
   21348:	e9c0 5506 	strd	r5, r5, [r0, #24]
   2134c:	9601      	str	r6, [sp, #4]
   2134e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->user_options = (u8_t)options;
   21350:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
   21352:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21354:	9600      	str	r6, [sp, #0]
   21356:	f7f2 fd3b 	bl	13dd0 <arch_new_thread>
	*((u32_t *)new_thread->stack_info.start) = STACK_SENTINEL;
   2135a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   2135e:	6e23      	ldr	r3, [r4, #96]	; 0x60
	new_thread->fn_abort = NULL;
   21360:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	*((u32_t *)new_thread->stack_info.start) = STACK_SENTINEL;
   21364:	601a      	str	r2, [r3, #0]
	if (!_current) {
   21366:	4b03      	ldr	r3, [pc, #12]	; (21374 <z_setup_new_thread+0x50>)
   21368:	689b      	ldr	r3, [r3, #8]
   2136a:	b103      	cbz	r3, 2136e <z_setup_new_thread+0x4a>
	new_thread->resource_pool = _current->resource_pool;
   2136c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2136e:	66a3      	str	r3, [r4, #104]	; 0x68
}
   21370:	b007      	add	sp, #28
   21372:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21374:	20026d48 	.word	0x20026d48

00021378 <z_impl_k_thread_create>:
{
   21378:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2137a:	2500      	movs	r5, #0
{
   2137c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2137e:	9505      	str	r5, [sp, #20]
   21380:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   21382:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21386:	9504      	str	r5, [sp, #16]
   21388:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   2138a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2138c:	9503      	str	r5, [sp, #12]
   2138e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   21390:	9502      	str	r5, [sp, #8]
   21392:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   21394:	9501      	str	r5, [sp, #4]
   21396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   21398:	9500      	str	r5, [sp, #0]
   2139a:	f7ff ffc3 	bl	21324 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2139e:	1c7b      	adds	r3, r7, #1
   213a0:	bf08      	it	eq
   213a2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   213a6:	d005      	beq.n	213b4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   213a8:	ea56 0307 	orrs.w	r3, r6, r7
   213ac:	d105      	bne.n	213ba <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   213ae:	4620      	mov	r0, r4
   213b0:	f7ff fc6c 	bl	20c8c <z_sched_start>
}
   213b4:	4620      	mov	r0, r4
   213b6:	b007      	add	sp, #28
   213b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   213ba:	4632      	mov	r2, r6
   213bc:	463b      	mov	r3, r7
   213be:	4903      	ldr	r1, [pc, #12]	; (213cc <z_impl_k_thread_create+0x54>)
   213c0:	f104 0018 	add.w	r0, r4, #24
   213c4:	f000 f8c8 	bl	21558 <z_add_timeout>
   213c8:	e7f4      	b.n	213b4 <z_impl_k_thread_create+0x3c>
   213ca:	bf00      	nop
   213cc:	000264f9 	.word	0x000264f9

000213d0 <z_init_static_threads>:
{
   213d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   213d4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2148c <z_init_static_threads+0xbc>
   213d8:	4d2b      	ldr	r5, [pc, #172]	; (21488 <z_init_static_threads+0xb8>)
   213da:	46c8      	mov	r8, r9
{
   213dc:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   213de:	454d      	cmp	r5, r9
   213e0:	f105 0430 	add.w	r4, r5, #48	; 0x30
   213e4:	d30d      	bcc.n	21402 <z_init_static_threads+0x32>
	k_sched_lock();
   213e6:	f7ff fbb3 	bl	20b50 <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
   213ea:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
   213ee:	4c26      	ldr	r4, [pc, #152]	; (21488 <z_init_static_threads+0xb8>)
   213f0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 21490 <z_init_static_threads+0xc0>
   213f4:	4544      	cmp	r4, r8
   213f6:	d321      	bcc.n	2143c <z_init_static_threads+0x6c>
}
   213f8:	b007      	add	sp, #28
   213fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   213fe:	f7ff bbf5 	b.w	20bec <k_sched_unlock>
		z_setup_new_thread(
   21402:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21406:	9305      	str	r3, [sp, #20]
   21408:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2140c:	9304      	str	r3, [sp, #16]
   2140e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21412:	9303      	str	r3, [sp, #12]
   21414:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21418:	9302      	str	r3, [sp, #8]
   2141a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2141e:	9301      	str	r3, [sp, #4]
   21420:	f854 3c20 	ldr.w	r3, [r4, #-32]
   21424:	9300      	str	r3, [sp, #0]
   21426:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2142a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2142e:	f7ff ff79 	bl	21324 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21432:	f854 3c30 	ldr.w	r3, [r4, #-48]
   21436:	655d      	str	r5, [r3, #84]	; 0x54
   21438:	4625      	mov	r5, r4
   2143a:	e7d0      	b.n	213de <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2143c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2143e:	1c4b      	adds	r3, r1, #1
   21440:	d017      	beq.n	21472 <z_init_static_threads+0xa2>
   21442:	f240 3be7 	movw	fp, #999	; 0x3e7
   21446:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
   2144a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2144e:	fbc9 bc01 	smlal	fp, ip, r9, r1
   21452:	2300      	movs	r3, #0
   21454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21458:	4658      	mov	r0, fp
   2145a:	4661      	mov	r1, ip
   2145c:	f7eb f8ac 	bl	c5b8 <__aeabi_uldivmod>
   21460:	2700      	movs	r7, #0
   21462:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21464:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   21468:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2146a:	d104      	bne.n	21476 <z_init_static_threads+0xa6>
	z_sched_start(thread);
   2146c:	4628      	mov	r0, r5
   2146e:	f7ff fc0d 	bl	20c8c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   21472:	3430      	adds	r4, #48	; 0x30
   21474:	e7be      	b.n	213f4 <z_init_static_threads+0x24>
   21476:	4602      	mov	r2, r0
   21478:	463b      	mov	r3, r7
   2147a:	4651      	mov	r1, sl
   2147c:	f105 0018 	add.w	r0, r5, #24
   21480:	f000 f86a 	bl	21558 <z_add_timeout>
   21484:	e7f5      	b.n	21472 <z_init_static_threads+0xa2>
   21486:	bf00      	nop
   21488:	20020678 	.word	0x20020678
   2148c:	200206a8 	.word	0x200206a8
   21490:	000264f9 	.word	0x000264f9

00021494 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   21494:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   21498:	b08a      	sub	sp, #40	; 0x28
   2149a:	4604      	mov	r4, r0
   2149c:	461d      	mov	r5, r3
   2149e:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   214a2:	f004 ff84 	bl	263ae <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   214a6:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   214aa:	2000      	movs	r0, #0
   214ac:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   214b0:	f04f 0800 	mov.w	r8, #0
   214b4:	f04f 0900 	mov.w	r9, #0
   214b8:	e9cd 5003 	strd	r5, r0, [sp, #12]
   214bc:	e9cd 0001 	strd	r0, r0, [sp, #4]
   214c0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   214c4:	4630      	mov	r0, r6
   214c6:	4b05      	ldr	r3, [pc, #20]	; (214dc <k_work_q_start+0x48>)
   214c8:	9400      	str	r4, [sp, #0]
   214ca:	f7ff ff55 	bl	21378 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   214ce:	4630      	mov	r0, r6
   214d0:	4903      	ldr	r1, [pc, #12]	; (214e0 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   214d2:	b00a      	add	sp, #40	; 0x28
   214d4:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   214d8:	f005 b8c9 	b.w	2666e <z_impl_k_thread_name_set>
   214dc:	0002325b 	.word	0x0002325b
   214e0:	0002a92d 	.word	0x0002a92d

000214e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   214e4:	4b03      	ldr	r3, [pc, #12]	; (214f4 <elapsed+0x10>)
   214e6:	681b      	ldr	r3, [r3, #0]
   214e8:	b90b      	cbnz	r3, 214ee <elapsed+0xa>
   214ea:	f7f2 bb21 	b.w	13b30 <z_clock_elapsed>
}
   214ee:	2000      	movs	r0, #0
   214f0:	4770      	bx	lr
   214f2:	bf00      	nop
   214f4:	20026e58 	.word	0x20026e58

000214f8 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   214f8:	6803      	ldr	r3, [r0, #0]
   214fa:	b140      	cbz	r0, 2150e <remove_timeout+0x16>
   214fc:	4a07      	ldr	r2, [pc, #28]	; (2151c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   214fe:	6852      	ldr	r2, [r2, #4]
   21500:	4290      	cmp	r0, r2
   21502:	d004      	beq.n	2150e <remove_timeout+0x16>
	if (next(t) != NULL) {
   21504:	b11b      	cbz	r3, 2150e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   21506:	689a      	ldr	r2, [r3, #8]
   21508:	6881      	ldr	r1, [r0, #8]
   2150a:	440a      	add	r2, r1
   2150c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   2150e:	6842      	ldr	r2, [r0, #4]
   21510:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   21512:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21514:	2300      	movs	r3, #0
	node->prev = NULL;
   21516:	e9c0 3300 	strd	r3, r3, [r0]
}
   2151a:	4770      	bx	lr
   2151c:	200203dc 	.word	0x200203dc

00021520 <next_timeout>:
	return list->head == list;
   21520:	4b0b      	ldr	r3, [pc, #44]	; (21550 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   21522:	b510      	push	{r4, lr}
   21524:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21526:	429c      	cmp	r4, r3
   21528:	bf08      	it	eq
   2152a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   2152c:	f7ff ffda 	bl	214e4 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   21530:	b154      	cbz	r4, 21548 <next_timeout+0x28>
   21532:	68a3      	ldr	r3, [r4, #8]
   21534:	1a18      	subs	r0, r3, r0
   21536:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2153a:	4b06      	ldr	r3, [pc, #24]	; (21554 <next_timeout+0x34>)
   2153c:	691b      	ldr	r3, [r3, #16]
   2153e:	b113      	cbz	r3, 21546 <next_timeout+0x26>
   21540:	4298      	cmp	r0, r3
   21542:	bfa8      	it	ge
   21544:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   21546:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   21548:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2154c:	e7f5      	b.n	2153a <next_timeout+0x1a>
   2154e:	bf00      	nop
   21550:	200203dc 	.word	0x200203dc
   21554:	20026d48 	.word	0x20026d48

00021558 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   21558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2155c:	9101      	str	r1, [sp, #4]
   2155e:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21560:	1c4b      	adds	r3, r1, #1
   21562:	bf08      	it	eq
   21564:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   21568:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2156a:	d061      	beq.n	21630 <z_add_timeout+0xd8>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   2156c:	f06f 0301 	mvn.w	r3, #1
   21570:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   21574:	1c54      	adds	r4, r2, #1
   21576:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   2157a:	ebb3 0804 	subs.w	r8, r3, r4
   2157e:	eb6b 0905 	sbc.w	r9, fp, r5
   21582:	f1b8 0f00 	cmp.w	r8, #0
   21586:	f179 0300 	sbcs.w	r3, r9, #0
   2158a:	db0f      	blt.n	215ac <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   2158c:	f7ff ffaa 	bl	214e4 <elapsed>
   21590:	f06f 0301 	mvn.w	r3, #1
   21594:	4a2b      	ldr	r2, [pc, #172]	; (21644 <z_add_timeout+0xec>)
   21596:	e9d2 1c00 	ldrd	r1, ip, [r2]
   2159a:	1a5b      	subs	r3, r3, r1
   2159c:	eb6b 020c 	sbc.w	r2, fp, ip
   215a0:	1b1e      	subs	r6, r3, r4
   215a2:	eb62 0705 	sbc.w	r7, r2, r5
   215a6:	1a34      	subs	r4, r6, r0
   215a8:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   215ac:	9b01      	ldr	r3, [sp, #4]
   215ae:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
   215b2:	f04f 0320 	mov.w	r3, #32
   215b6:	f3ef 8611 	mrs	r6, BASEPRI
   215ba:	f383 8811 	msr	BASEPRI, r3
   215be:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   215c2:	f7ff ff8f 	bl	214e4 <elapsed>
	ticks = MAX(1, ticks);
   215c6:	2c01      	cmp	r4, #1
   215c8:	f175 0300 	sbcs.w	r3, r5, #0
   215cc:	bfb8      	it	lt
   215ce:	2401      	movlt	r4, #1
	return list->head == list;
   215d0:	4b1d      	ldr	r3, [pc, #116]	; (21648 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
   215d2:	4420      	add	r0, r4
   215d4:	681a      	ldr	r2, [r3, #0]
   215d6:	f8ca 0008 	str.w	r0, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   215da:	429a      	cmp	r2, r3
   215dc:	d001      	beq.n	215e2 <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   215de:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   215e0:	b952      	cbnz	r2, 215f8 <z_add_timeout+0xa0>
	node->prev = list->tail;
   215e2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   215e4:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   215e8:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   215ec:	685a      	ldr	r2, [r3, #4]
   215ee:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   215f2:	f8c3 a004 	str.w	sl, [r3, #4]
}
   215f6:	e00d      	b.n	21614 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   215f8:	6890      	ldr	r0, [r2, #8]
   215fa:	f8da 1008 	ldr.w	r1, [sl, #8]
   215fe:	4288      	cmp	r0, r1
   21600:	dd19      	ble.n	21636 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
   21602:	1a41      	subs	r1, r0, r1
   21604:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   21606:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   21608:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   2160c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   21610:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   21614:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21616:	429a      	cmp	r2, r3
   21618:	d006      	beq.n	21628 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2161a:	4592      	cmp	sl, r2
   2161c:	d104      	bne.n	21628 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
   2161e:	f7ff ff7f 	bl	21520 <next_timeout>
   21622:	2100      	movs	r1, #0
   21624:	f7f2 fa20 	bl	13a68 <z_clock_set_timeout>
	__asm__ volatile(
   21628:	f386 8811 	msr	BASEPRI, r6
   2162c:	f3bf 8f6f 	isb	sy
		}
	}
}
   21630:	b003      	add	sp, #12
   21632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   21636:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   21638:	4294      	cmp	r4, r2
   2163a:	f8ca 1008 	str.w	r1, [sl, #8]
   2163e:	d0d0      	beq.n	215e2 <z_add_timeout+0x8a>
   21640:	6812      	ldr	r2, [r2, #0]
   21642:	e7cd      	b.n	215e0 <z_add_timeout+0x88>
   21644:	200213c8 	.word	0x200213c8
   21648:	200203dc 	.word	0x200203dc

0002164c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   2164c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21650:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   21652:	f7ff fb99 	bl	20d88 <z_time_slice>
	__asm__ volatile(
   21656:	f04f 0320 	mov.w	r3, #32
   2165a:	f3ef 8411 	mrs	r4, BASEPRI
   2165e:	f383 8811 	msr	BASEPRI, r3
   21662:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   21666:	f8df 8084 	ldr.w	r8, [pc, #132]	; 216ec <z_clock_announce+0xa0>
   2166a:	4d1f      	ldr	r5, [pc, #124]	; (216e8 <z_clock_announce+0x9c>)
   2166c:	46c1      	mov	r9, r8
	return list->head == list;
   2166e:	f8df a080 	ldr.w	sl, [pc, #128]	; 216f0 <z_clock_announce+0xa4>
   21672:	602e      	str	r6, [r5, #0]
   21674:	f8da 0000 	ldr.w	r0, [sl]
   21678:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2167a:	4550      	cmp	r0, sl
   2167c:	e9d8 6700 	ldrd	r6, r7, [r8]
   21680:	d005      	beq.n	2168e <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   21682:	b120      	cbz	r0, 2168e <z_clock_announce+0x42>
   21684:	6883      	ldr	r3, [r0, #8]
   21686:	4293      	cmp	r3, r2
   21688:	dd13      	ble.n	216b2 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2168a:	1a9b      	subs	r3, r3, r2
   2168c:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   2168e:	18b6      	adds	r6, r6, r2
   21690:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   21694:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   21698:	2600      	movs	r6, #0
   2169a:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   2169c:	f7ff ff40 	bl	21520 <next_timeout>
   216a0:	4631      	mov	r1, r6
   216a2:	f7f2 f9e1 	bl	13a68 <z_clock_set_timeout>
	__asm__ volatile(
   216a6:	f384 8811 	msr	BASEPRI, r4
   216aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   216ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   216b2:	18f6      	adds	r6, r6, r3
   216b4:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   216b8:	1ad3      	subs	r3, r2, r3
   216ba:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   216bc:	2300      	movs	r3, #0
   216be:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   216c0:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   216c4:	f7ff ff18 	bl	214f8 <remove_timeout>
   216c8:	f384 8811 	msr	BASEPRI, r4
   216cc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   216d0:	68c3      	ldr	r3, [r0, #12]
   216d2:	4798      	blx	r3
	__asm__ volatile(
   216d4:	f04f 0320 	mov.w	r3, #32
   216d8:	f3ef 8411 	mrs	r4, BASEPRI
   216dc:	f383 8811 	msr	BASEPRI, r3
   216e0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   216e4:	e7c6      	b.n	21674 <z_clock_announce+0x28>
   216e6:	bf00      	nop
   216e8:	20026e58 	.word	0x20026e58
   216ec:	200213c8 	.word	0x200213c8
   216f0:	200203dc 	.word	0x200203dc

000216f4 <z_tick_get>:

s64_t z_tick_get(void)
{
   216f4:	b510      	push	{r4, lr}
   216f6:	f04f 0320 	mov.w	r3, #32
   216fa:	f3ef 8411 	mrs	r4, BASEPRI
   216fe:	f383 8811 	msr	BASEPRI, r3
   21702:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   21706:	f7f2 fa13 	bl	13b30 <z_clock_elapsed>
   2170a:	4b06      	ldr	r3, [pc, #24]	; (21724 <z_tick_get+0x30>)
   2170c:	e9d3 2300 	ldrd	r2, r3, [r3]
   21710:	1812      	adds	r2, r2, r0
   21712:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   21716:	f384 8811 	msr	BASEPRI, r4
   2171a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2171e:	4610      	mov	r0, r2
   21720:	4619      	mov	r1, r3
   21722:	bd10      	pop	{r4, pc}
   21724:	200213c8 	.word	0x200213c8

00021728 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   21728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2172a:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   2172e:	1c56      	adds	r6, r2, #1
   21730:	f143 0700 	adc.w	r7, r3, #0
   21734:	2f00      	cmp	r7, #0
   21736:	bf08      	it	eq
   21738:	2e02      	cmpeq	r6, #2
{
   2173a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2173c:	d302      	bcc.n	21744 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2173e:	490c      	ldr	r1, [pc, #48]	; (21770 <z_timer_expiration_handler+0x48>)
   21740:	f7ff ff0a 	bl	21558 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   21744:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21746:	3301      	adds	r3, #1
   21748:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2174a:	69a3      	ldr	r3, [r4, #24]
   2174c:	b10b      	cbz	r3, 21752 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2174e:	4620      	mov	r0, r4
   21750:	4798      	blx	r3
	return list->head == list;
   21752:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21756:	42a5      	cmp	r5, r4
   21758:	d008      	beq.n	2176c <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2175a:	b13d      	cbz	r5, 2176c <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2175c:	4628      	mov	r0, r5
   2175e:	f004 fe5a 	bl	26416 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   21762:	4628      	mov	r0, r5
   21764:	f004 feb8 	bl	264d8 <z_ready_thread>
   21768:	2300      	movs	r3, #0
   2176a:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
   2176c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2176e:	bf00      	nop
   21770:	00021729 	.word	0x00021729

00021774 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   21774:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
   21778:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   2177c:	ea54 0105 	orrs.w	r1, r4, r5
{
   21780:	4680      	mov	r8, r0
   21782:	4616      	mov	r6, r2
   21784:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   21786:	d016      	beq.n	217b6 <z_impl_k_timer_start+0x42>
   21788:	f06f 0101 	mvn.w	r1, #1
   2178c:	ebb1 0a04 	subs.w	sl, r1, r4
   21790:	f04f 31ff 	mov.w	r1, #4294967295
   21794:	eb61 0b05 	sbc.w	fp, r1, r5
   21798:	f1ba 0f00 	cmp.w	sl, #0
   2179c:	f17b 0100 	sbcs.w	r1, fp, #0
   217a0:	da09      	bge.n	217b6 <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
   217a2:	f114 34ff 	adds.w	r4, r4, #4294967295
   217a6:	f145 35ff 	adc.w	r5, r5, #4294967295
   217aa:	2c01      	cmp	r4, #1
   217ac:	f175 0100 	sbcs.w	r1, r5, #0
   217b0:	bfbc      	itt	lt
   217b2:	2401      	movlt	r4, #1
   217b4:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   217b6:	f06f 0101 	mvn.w	r1, #1
   217ba:	1a89      	subs	r1, r1, r2
   217bc:	9100      	str	r1, [sp, #0]
   217be:	f04f 31ff 	mov.w	r1, #4294967295
   217c2:	eb61 0103 	sbc.w	r1, r1, r3
   217c6:	9101      	str	r1, [sp, #4]
   217c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   217cc:	2800      	cmp	r0, #0
   217ce:	f171 0100 	sbcs.w	r1, r1, #0
   217d2:	da09      	bge.n	217e8 <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
   217d4:	f112 36ff 	adds.w	r6, r2, #4294967295
   217d8:	f143 37ff 	adc.w	r7, r3, #4294967295
   217dc:	2e00      	cmp	r6, #0
   217de:	f177 0300 	sbcs.w	r3, r7, #0
   217e2:	bfbc      	itt	lt
   217e4:	2600      	movlt	r6, #0
   217e6:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   217e8:	4640      	mov	r0, r8
   217ea:	f004 ff45 	bl	26678 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   217ee:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   217f0:	4632      	mov	r2, r6
	timer->status = 0U;
   217f2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   217f6:	4640      	mov	r0, r8
   217f8:	463b      	mov	r3, r7
   217fa:	4904      	ldr	r1, [pc, #16]	; (2180c <z_impl_k_timer_start+0x98>)
	timer->period = period;
   217fc:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
   21800:	b002      	add	sp, #8
   21802:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   21806:	f7ff bea7 	b.w	21558 <z_add_timeout>
   2180a:	bf00      	nop
   2180c:	00021729 	.word	0x00021729

00021810 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   21810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21814:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   21816:	2301      	movs	r3, #1
{
   21818:	b089      	sub	sp, #36	; 0x24
	struct _poller poller = { .is_polling = true,
   2181a:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   2181e:	4b29      	ldr	r3, [pc, #164]	; (218c4 <z_impl_k_poll+0xb4>)
{
   21820:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   21822:	689b      	ldr	r3, [r3, #8]
{
   21824:	4605      	mov	r5, r0
	struct _poller poller = { .is_polling = true,
   21826:	9306      	str	r3, [sp, #24]
   21828:	4b27      	ldr	r3, [pc, #156]	; (218c8 <z_impl_k_poll+0xb8>)
   2182a:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   2182c:	ea52 0307 	orrs.w	r3, r2, r7
   21830:	bf0c      	ite	eq
   21832:	2301      	moveq	r3, #1
   21834:	2300      	movne	r3, #0
   21836:	aa05      	add	r2, sp, #20
   21838:	f005 f855 	bl	268e6 <register_events>
   2183c:	4680      	mov	r8, r0
	__asm__ volatile(
   2183e:	f04f 0320 	mov.w	r3, #32
   21842:	f3ef 8911 	mrs	r9, BASEPRI
   21846:	f383 8811 	msr	BASEPRI, r3
   2184a:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   2184e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21852:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   21856:	b963      	cbnz	r3, 21872 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   21858:	4601      	mov	r1, r0
   2185a:	464a      	mov	r2, r9
   2185c:	4628      	mov	r0, r5
   2185e:	f004 ffa9 	bl	267b4 <clear_event_registrations>
	__asm__ volatile(
   21862:	f389 8811 	msr	BASEPRI, r9
   21866:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   2186a:	4620      	mov	r0, r4
   2186c:	b009      	add	sp, #36	; 0x24
   2186e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   21872:	2300      	movs	r3, #0
   21874:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21878:	ea56 0307 	orrs.w	r3, r6, r7
   2187c:	d106      	bne.n	2188c <z_impl_k_poll+0x7c>
   2187e:	f389 8811 	msr	BASEPRI, r9
   21882:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   21886:	f06f 040a 	mvn.w	r4, #10
   2188a:	e7ee      	b.n	2186a <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2188c:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2188e:	4649      	mov	r1, r9
   21890:	e9cd 6700 	strd	r6, r7, [sp]
   21894:	480d      	ldr	r0, [pc, #52]	; (218cc <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   21896:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2189a:	f7ff fba9 	bl	20ff0 <z_pend_curr>
   2189e:	4604      	mov	r4, r0
	__asm__ volatile(
   218a0:	f04f 0320 	mov.w	r3, #32
   218a4:	f3ef 8611 	mrs	r6, BASEPRI
   218a8:	f383 8811 	msr	BASEPRI, r3
   218ac:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   218b0:	4632      	mov	r2, r6
   218b2:	4641      	mov	r1, r8
   218b4:	4628      	mov	r0, r5
   218b6:	f004 ff7d 	bl	267b4 <clear_event_registrations>
	__asm__ volatile(
   218ba:	f386 8811 	msr	BASEPRI, r6
   218be:	f3bf 8f6f 	isb	sy
	return swap_rc;
   218c2:	e7d2      	b.n	2186a <z_impl_k_poll+0x5a>
   218c4:	20026d48 	.word	0x20026d48
   218c8:	00026841 	.word	0x00026841
   218cc:	2002a093 	.word	0x2002a093

000218d0 <__assert_func>:
   218d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   218d2:	4614      	mov	r4, r2
   218d4:	461a      	mov	r2, r3
   218d6:	4b09      	ldr	r3, [pc, #36]	; (218fc <__assert_func+0x2c>)
   218d8:	4605      	mov	r5, r0
   218da:	681b      	ldr	r3, [r3, #0]
   218dc:	68d8      	ldr	r0, [r3, #12]
   218de:	b14c      	cbz	r4, 218f4 <__assert_func+0x24>
   218e0:	4b07      	ldr	r3, [pc, #28]	; (21900 <__assert_func+0x30>)
   218e2:	9100      	str	r1, [sp, #0]
   218e4:	4907      	ldr	r1, [pc, #28]	; (21904 <__assert_func+0x34>)
   218e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
   218ea:	462b      	mov	r3, r5
   218ec:	f000 f80e 	bl	2190c <fiprintf>
   218f0:	f005 faba 	bl	26e68 <abort>
   218f4:	4b04      	ldr	r3, [pc, #16]	; (21908 <__assert_func+0x38>)
   218f6:	461c      	mov	r4, r3
   218f8:	e7f3      	b.n	218e2 <__assert_func+0x12>
   218fa:	bf00      	nop
   218fc:	200203e4 	.word	0x200203e4
   21900:	0002a937 	.word	0x0002a937
   21904:	0002a944 	.word	0x0002a944
   21908:	000295b2 	.word	0x000295b2

0002190c <fiprintf>:
   2190c:	b40e      	push	{r1, r2, r3}
   2190e:	b503      	push	{r0, r1, lr}
   21910:	ab03      	add	r3, sp, #12
   21912:	4601      	mov	r1, r0
   21914:	4805      	ldr	r0, [pc, #20]	; (2192c <fiprintf+0x20>)
   21916:	f853 2b04 	ldr.w	r2, [r3], #4
   2191a:	6800      	ldr	r0, [r0, #0]
   2191c:	9301      	str	r3, [sp, #4]
   2191e:	f000 f807 	bl	21930 <_vfiprintf_r>
   21922:	b002      	add	sp, #8
   21924:	f85d eb04 	ldr.w	lr, [sp], #4
   21928:	b003      	add	sp, #12
   2192a:	4770      	bx	lr
   2192c:	200203e4 	.word	0x200203e4

00021930 <_vfiprintf_r>:
   21930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21934:	460d      	mov	r5, r1
   21936:	b09d      	sub	sp, #116	; 0x74
   21938:	4614      	mov	r4, r2
   2193a:	4698      	mov	r8, r3
   2193c:	4606      	mov	r6, r0
   2193e:	b118      	cbz	r0, 21948 <_vfiprintf_r+0x18>
   21940:	6983      	ldr	r3, [r0, #24]
   21942:	b90b      	cbnz	r3, 21948 <_vfiprintf_r+0x18>
   21944:	f000 ffee 	bl	22924 <__sinit>
   21948:	4b89      	ldr	r3, [pc, #548]	; (21b70 <_vfiprintf_r+0x240>)
   2194a:	429d      	cmp	r5, r3
   2194c:	d11b      	bne.n	21986 <_vfiprintf_r+0x56>
   2194e:	6875      	ldr	r5, [r6, #4]
   21950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21952:	07d9      	lsls	r1, r3, #31
   21954:	d405      	bmi.n	21962 <_vfiprintf_r+0x32>
   21956:	89ab      	ldrh	r3, [r5, #12]
   21958:	059a      	lsls	r2, r3, #22
   2195a:	d402      	bmi.n	21962 <_vfiprintf_r+0x32>
   2195c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2195e:	f005 fb4f 	bl	27000 <__retarget_lock_acquire_recursive>
   21962:	89ab      	ldrh	r3, [r5, #12]
   21964:	071b      	lsls	r3, r3, #28
   21966:	d501      	bpl.n	2196c <_vfiprintf_r+0x3c>
   21968:	692b      	ldr	r3, [r5, #16]
   2196a:	b9eb      	cbnz	r3, 219a8 <_vfiprintf_r+0x78>
   2196c:	4629      	mov	r1, r5
   2196e:	4630      	mov	r0, r6
   21970:	f000 fe44 	bl	225fc <__swsetup_r>
   21974:	b1c0      	cbz	r0, 219a8 <_vfiprintf_r+0x78>
   21976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21978:	07dc      	lsls	r4, r3, #31
   2197a:	d50e      	bpl.n	2199a <_vfiprintf_r+0x6a>
   2197c:	f04f 30ff 	mov.w	r0, #4294967295
   21980:	b01d      	add	sp, #116	; 0x74
   21982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21986:	4b7b      	ldr	r3, [pc, #492]	; (21b74 <_vfiprintf_r+0x244>)
   21988:	429d      	cmp	r5, r3
   2198a:	d101      	bne.n	21990 <_vfiprintf_r+0x60>
   2198c:	68b5      	ldr	r5, [r6, #8]
   2198e:	e7df      	b.n	21950 <_vfiprintf_r+0x20>
   21990:	4b79      	ldr	r3, [pc, #484]	; (21b78 <_vfiprintf_r+0x248>)
   21992:	429d      	cmp	r5, r3
   21994:	bf08      	it	eq
   21996:	68f5      	ldreq	r5, [r6, #12]
   21998:	e7da      	b.n	21950 <_vfiprintf_r+0x20>
   2199a:	89ab      	ldrh	r3, [r5, #12]
   2199c:	0598      	lsls	r0, r3, #22
   2199e:	d4ed      	bmi.n	2197c <_vfiprintf_r+0x4c>
   219a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   219a2:	f005 fb2e 	bl	27002 <__retarget_lock_release_recursive>
   219a6:	e7e9      	b.n	2197c <_vfiprintf_r+0x4c>
   219a8:	2300      	movs	r3, #0
   219aa:	f8cd 800c 	str.w	r8, [sp, #12]
   219ae:	f04f 0901 	mov.w	r9, #1
   219b2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 21b7c <_vfiprintf_r+0x24c>
   219b6:	9309      	str	r3, [sp, #36]	; 0x24
   219b8:	2320      	movs	r3, #32
   219ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   219be:	2330      	movs	r3, #48	; 0x30
   219c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   219c4:	4623      	mov	r3, r4
   219c6:	469a      	mov	sl, r3
   219c8:	f813 2b01 	ldrb.w	r2, [r3], #1
   219cc:	b10a      	cbz	r2, 219d2 <_vfiprintf_r+0xa2>
   219ce:	2a25      	cmp	r2, #37	; 0x25
   219d0:	d1f9      	bne.n	219c6 <_vfiprintf_r+0x96>
   219d2:	ebba 0b04 	subs.w	fp, sl, r4
   219d6:	d00b      	beq.n	219f0 <_vfiprintf_r+0xc0>
   219d8:	465b      	mov	r3, fp
   219da:	4622      	mov	r2, r4
   219dc:	4629      	mov	r1, r5
   219de:	4630      	mov	r0, r6
   219e0:	f005 f846 	bl	26a70 <__sfputs_r>
   219e4:	3001      	adds	r0, #1
   219e6:	f000 80aa 	beq.w	21b3e <_vfiprintf_r+0x20e>
   219ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   219ec:	445a      	add	r2, fp
   219ee:	9209      	str	r2, [sp, #36]	; 0x24
   219f0:	f89a 3000 	ldrb.w	r3, [sl]
   219f4:	2b00      	cmp	r3, #0
   219f6:	f000 80a2 	beq.w	21b3e <_vfiprintf_r+0x20e>
   219fa:	2300      	movs	r3, #0
   219fc:	f04f 32ff 	mov.w	r2, #4294967295
   21a00:	f10a 0a01 	add.w	sl, sl, #1
   21a04:	9304      	str	r3, [sp, #16]
   21a06:	9307      	str	r3, [sp, #28]
   21a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   21a0c:	931a      	str	r3, [sp, #104]	; 0x68
   21a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   21a12:	4654      	mov	r4, sl
   21a14:	2205      	movs	r2, #5
   21a16:	4859      	ldr	r0, [pc, #356]	; (21b7c <_vfiprintf_r+0x24c>)
   21a18:	f814 1b01 	ldrb.w	r1, [r4], #1
   21a1c:	f004 ffd7 	bl	269ce <memchr>
   21a20:	9a04      	ldr	r2, [sp, #16]
   21a22:	b9d8      	cbnz	r0, 21a5c <_vfiprintf_r+0x12c>
   21a24:	06d1      	lsls	r1, r2, #27
   21a26:	bf44      	itt	mi
   21a28:	2320      	movmi	r3, #32
   21a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   21a2e:	0713      	lsls	r3, r2, #28
   21a30:	bf44      	itt	mi
   21a32:	232b      	movmi	r3, #43	; 0x2b
   21a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   21a38:	f89a 3000 	ldrb.w	r3, [sl]
   21a3c:	2b2a      	cmp	r3, #42	; 0x2a
   21a3e:	d015      	beq.n	21a6c <_vfiprintf_r+0x13c>
   21a40:	9a07      	ldr	r2, [sp, #28]
   21a42:	4654      	mov	r4, sl
   21a44:	2000      	movs	r0, #0
   21a46:	f04f 0c0a 	mov.w	ip, #10
   21a4a:	4621      	mov	r1, r4
   21a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
   21a50:	3b30      	subs	r3, #48	; 0x30
   21a52:	2b09      	cmp	r3, #9
   21a54:	d94e      	bls.n	21af4 <_vfiprintf_r+0x1c4>
   21a56:	b1b0      	cbz	r0, 21a86 <_vfiprintf_r+0x156>
   21a58:	9207      	str	r2, [sp, #28]
   21a5a:	e014      	b.n	21a86 <_vfiprintf_r+0x156>
   21a5c:	eba0 0308 	sub.w	r3, r0, r8
   21a60:	46a2      	mov	sl, r4
   21a62:	fa09 f303 	lsl.w	r3, r9, r3
   21a66:	4313      	orrs	r3, r2
   21a68:	9304      	str	r3, [sp, #16]
   21a6a:	e7d2      	b.n	21a12 <_vfiprintf_r+0xe2>
   21a6c:	9b03      	ldr	r3, [sp, #12]
   21a6e:	1d19      	adds	r1, r3, #4
   21a70:	681b      	ldr	r3, [r3, #0]
   21a72:	2b00      	cmp	r3, #0
   21a74:	9103      	str	r1, [sp, #12]
   21a76:	bfbb      	ittet	lt
   21a78:	425b      	neglt	r3, r3
   21a7a:	f042 0202 	orrlt.w	r2, r2, #2
   21a7e:	9307      	strge	r3, [sp, #28]
   21a80:	9307      	strlt	r3, [sp, #28]
   21a82:	bfb8      	it	lt
   21a84:	9204      	strlt	r2, [sp, #16]
   21a86:	7823      	ldrb	r3, [r4, #0]
   21a88:	2b2e      	cmp	r3, #46	; 0x2e
   21a8a:	d10c      	bne.n	21aa6 <_vfiprintf_r+0x176>
   21a8c:	7863      	ldrb	r3, [r4, #1]
   21a8e:	2b2a      	cmp	r3, #42	; 0x2a
   21a90:	d135      	bne.n	21afe <_vfiprintf_r+0x1ce>
   21a92:	9b03      	ldr	r3, [sp, #12]
   21a94:	3402      	adds	r4, #2
   21a96:	1d1a      	adds	r2, r3, #4
   21a98:	681b      	ldr	r3, [r3, #0]
   21a9a:	2b00      	cmp	r3, #0
   21a9c:	9203      	str	r2, [sp, #12]
   21a9e:	bfb8      	it	lt
   21aa0:	f04f 33ff 	movlt.w	r3, #4294967295
   21aa4:	9305      	str	r3, [sp, #20]
   21aa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 21b8c <_vfiprintf_r+0x25c>
   21aaa:	2203      	movs	r2, #3
   21aac:	7821      	ldrb	r1, [r4, #0]
   21aae:	4650      	mov	r0, sl
   21ab0:	f004 ff8d 	bl	269ce <memchr>
   21ab4:	b140      	cbz	r0, 21ac8 <_vfiprintf_r+0x198>
   21ab6:	2340      	movs	r3, #64	; 0x40
   21ab8:	eba0 000a 	sub.w	r0, r0, sl
   21abc:	3401      	adds	r4, #1
   21abe:	fa03 f000 	lsl.w	r0, r3, r0
   21ac2:	9b04      	ldr	r3, [sp, #16]
   21ac4:	4303      	orrs	r3, r0
   21ac6:	9304      	str	r3, [sp, #16]
   21ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
   21acc:	2206      	movs	r2, #6
   21ace:	482c      	ldr	r0, [pc, #176]	; (21b80 <_vfiprintf_r+0x250>)
   21ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   21ad4:	f004 ff7b 	bl	269ce <memchr>
   21ad8:	2800      	cmp	r0, #0
   21ada:	d03f      	beq.n	21b5c <_vfiprintf_r+0x22c>
   21adc:	4b29      	ldr	r3, [pc, #164]	; (21b84 <_vfiprintf_r+0x254>)
   21ade:	bb1b      	cbnz	r3, 21b28 <_vfiprintf_r+0x1f8>
   21ae0:	9b03      	ldr	r3, [sp, #12]
   21ae2:	3307      	adds	r3, #7
   21ae4:	f023 0307 	bic.w	r3, r3, #7
   21ae8:	3308      	adds	r3, #8
   21aea:	9303      	str	r3, [sp, #12]
   21aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21aee:	443b      	add	r3, r7
   21af0:	9309      	str	r3, [sp, #36]	; 0x24
   21af2:	e767      	b.n	219c4 <_vfiprintf_r+0x94>
   21af4:	fb0c 3202 	mla	r2, ip, r2, r3
   21af8:	460c      	mov	r4, r1
   21afa:	2001      	movs	r0, #1
   21afc:	e7a5      	b.n	21a4a <_vfiprintf_r+0x11a>
   21afe:	2300      	movs	r3, #0
   21b00:	3401      	adds	r4, #1
   21b02:	f04f 0c0a 	mov.w	ip, #10
   21b06:	4619      	mov	r1, r3
   21b08:	9305      	str	r3, [sp, #20]
   21b0a:	4620      	mov	r0, r4
   21b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
   21b10:	3a30      	subs	r2, #48	; 0x30
   21b12:	2a09      	cmp	r2, #9
   21b14:	d903      	bls.n	21b1e <_vfiprintf_r+0x1ee>
   21b16:	2b00      	cmp	r3, #0
   21b18:	d0c5      	beq.n	21aa6 <_vfiprintf_r+0x176>
   21b1a:	9105      	str	r1, [sp, #20]
   21b1c:	e7c3      	b.n	21aa6 <_vfiprintf_r+0x176>
   21b1e:	fb0c 2101 	mla	r1, ip, r1, r2
   21b22:	4604      	mov	r4, r0
   21b24:	2301      	movs	r3, #1
   21b26:	e7f0      	b.n	21b0a <_vfiprintf_r+0x1da>
   21b28:	ab03      	add	r3, sp, #12
   21b2a:	462a      	mov	r2, r5
   21b2c:	a904      	add	r1, sp, #16
   21b2e:	4630      	mov	r0, r6
   21b30:	9300      	str	r3, [sp, #0]
   21b32:	4b15      	ldr	r3, [pc, #84]	; (21b88 <_vfiprintf_r+0x258>)
   21b34:	f000 f82c 	bl	21b90 <_printf_float>
   21b38:	4607      	mov	r7, r0
   21b3a:	1c78      	adds	r0, r7, #1
   21b3c:	d1d6      	bne.n	21aec <_vfiprintf_r+0x1bc>
   21b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21b40:	07d9      	lsls	r1, r3, #31
   21b42:	d405      	bmi.n	21b50 <_vfiprintf_r+0x220>
   21b44:	89ab      	ldrh	r3, [r5, #12]
   21b46:	059a      	lsls	r2, r3, #22
   21b48:	d402      	bmi.n	21b50 <_vfiprintf_r+0x220>
   21b4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21b4c:	f005 fa59 	bl	27002 <__retarget_lock_release_recursive>
   21b50:	89ab      	ldrh	r3, [r5, #12]
   21b52:	065b      	lsls	r3, r3, #25
   21b54:	f53f af12 	bmi.w	2197c <_vfiprintf_r+0x4c>
   21b58:	9809      	ldr	r0, [sp, #36]	; 0x24
   21b5a:	e711      	b.n	21980 <_vfiprintf_r+0x50>
   21b5c:	ab03      	add	r3, sp, #12
   21b5e:	462a      	mov	r2, r5
   21b60:	a904      	add	r1, sp, #16
   21b62:	4630      	mov	r0, r6
   21b64:	9300      	str	r3, [sp, #0]
   21b66:	4b08      	ldr	r3, [pc, #32]	; (21b88 <_vfiprintf_r+0x258>)
   21b68:	f000 fa48 	bl	21ffc <_printf_i>
   21b6c:	e7e4      	b.n	21b38 <_vfiprintf_r+0x208>
   21b6e:	bf00      	nop
   21b70:	00028568 	.word	0x00028568
   21b74:	00028588 	.word	0x00028588
   21b78:	00028548 	.word	0x00028548
   21b7c:	0002aa74 	.word	0x0002aa74
   21b80:	0002aa7e 	.word	0x0002aa7e
   21b84:	00021b91 	.word	0x00021b91
   21b88:	00026a71 	.word	0x00026a71
   21b8c:	0002aa7a 	.word	0x0002aa7a

00021b90 <_printf_float>:
   21b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b94:	ed2d 8b02 	vpush	{d8}
   21b98:	b08d      	sub	sp, #52	; 0x34
   21b9a:	460c      	mov	r4, r1
   21b9c:	4616      	mov	r6, r2
   21b9e:	461f      	mov	r7, r3
   21ba0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   21ba4:	4605      	mov	r5, r0
   21ba6:	f000 ff3b 	bl	22a20 <_localeconv_r>
   21baa:	f8d0 a000 	ldr.w	sl, [r0]
   21bae:	4650      	mov	r0, sl
   21bb0:	f7eb f95e 	bl	ce70 <strlen>
   21bb4:	2300      	movs	r3, #0
   21bb6:	f894 b018 	ldrb.w	fp, [r4, #24]
   21bba:	ee08 0a10 	vmov	s16, r0
   21bbe:	930a      	str	r3, [sp, #40]	; 0x28
   21bc0:	6823      	ldr	r3, [r4, #0]
   21bc2:	9305      	str	r3, [sp, #20]
   21bc4:	f8d8 3000 	ldr.w	r3, [r8]
   21bc8:	3307      	adds	r3, #7
   21bca:	f023 0307 	bic.w	r3, r3, #7
   21bce:	f103 0208 	add.w	r2, r3, #8
   21bd2:	f8c8 2000 	str.w	r2, [r8]
   21bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   21bda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   21bde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   21be2:	f04f 32ff 	mov.w	r2, #4294967295
   21be6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   21bea:	f8cd 8018 	str.w	r8, [sp, #24]
   21bee:	9307      	str	r3, [sp, #28]
   21bf0:	4b9e      	ldr	r3, [pc, #632]	; (21e6c <_printf_float+0x2dc>)
   21bf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   21bf6:	f7eb f8f3 	bl	cde0 <__aeabi_dcmpun>
   21bfa:	bb88      	cbnz	r0, 21c60 <_printf_float+0xd0>
   21bfc:	f04f 32ff 	mov.w	r2, #4294967295
   21c00:	4b9a      	ldr	r3, [pc, #616]	; (21e6c <_printf_float+0x2dc>)
   21c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   21c06:	f7eb f8cd 	bl	cda4 <__aeabi_dcmple>
   21c0a:	bb48      	cbnz	r0, 21c60 <_printf_float+0xd0>
   21c0c:	2200      	movs	r2, #0
   21c0e:	2300      	movs	r3, #0
   21c10:	4640      	mov	r0, r8
   21c12:	4649      	mov	r1, r9
   21c14:	f7eb f8bc 	bl	cd90 <__aeabi_dcmplt>
   21c18:	b110      	cbz	r0, 21c20 <_printf_float+0x90>
   21c1a:	232d      	movs	r3, #45	; 0x2d
   21c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   21c20:	4b93      	ldr	r3, [pc, #588]	; (21e70 <_printf_float+0x2e0>)
   21c22:	4894      	ldr	r0, [pc, #592]	; (21e74 <_printf_float+0x2e4>)
   21c24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   21c28:	bf94      	ite	ls
   21c2a:	4698      	movls	r8, r3
   21c2c:	4680      	movhi	r8, r0
   21c2e:	2303      	movs	r3, #3
   21c30:	f04f 0900 	mov.w	r9, #0
   21c34:	6123      	str	r3, [r4, #16]
   21c36:	9b05      	ldr	r3, [sp, #20]
   21c38:	f023 0204 	bic.w	r2, r3, #4
   21c3c:	6022      	str	r2, [r4, #0]
   21c3e:	4633      	mov	r3, r6
   21c40:	aa0b      	add	r2, sp, #44	; 0x2c
   21c42:	4621      	mov	r1, r4
   21c44:	4628      	mov	r0, r5
   21c46:	9700      	str	r7, [sp, #0]
   21c48:	f004 ffc4 	bl	26bd4 <_printf_common>
   21c4c:	3001      	adds	r0, #1
   21c4e:	f040 8090 	bne.w	21d72 <_printf_float+0x1e2>
   21c52:	f04f 30ff 	mov.w	r0, #4294967295
   21c56:	b00d      	add	sp, #52	; 0x34
   21c58:	ecbd 8b02 	vpop	{d8}
   21c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c60:	4642      	mov	r2, r8
   21c62:	464b      	mov	r3, r9
   21c64:	4640      	mov	r0, r8
   21c66:	4649      	mov	r1, r9
   21c68:	f7eb f8ba 	bl	cde0 <__aeabi_dcmpun>
   21c6c:	b140      	cbz	r0, 21c80 <_printf_float+0xf0>
   21c6e:	464b      	mov	r3, r9
   21c70:	4881      	ldr	r0, [pc, #516]	; (21e78 <_printf_float+0x2e8>)
   21c72:	2b00      	cmp	r3, #0
   21c74:	bfbc      	itt	lt
   21c76:	232d      	movlt	r3, #45	; 0x2d
   21c78:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   21c7c:	4b7f      	ldr	r3, [pc, #508]	; (21e7c <_printf_float+0x2ec>)
   21c7e:	e7d1      	b.n	21c24 <_printf_float+0x94>
   21c80:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   21c84:	6863      	ldr	r3, [r4, #4]
   21c86:	9206      	str	r2, [sp, #24]
   21c88:	1c5a      	adds	r2, r3, #1
   21c8a:	d13f      	bne.n	21d0c <_printf_float+0x17c>
   21c8c:	2306      	movs	r3, #6
   21c8e:	6063      	str	r3, [r4, #4]
   21c90:	9b05      	ldr	r3, [sp, #20]
   21c92:	4628      	mov	r0, r5
   21c94:	6861      	ldr	r1, [r4, #4]
   21c96:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   21c9a:	2300      	movs	r3, #0
   21c9c:	9303      	str	r3, [sp, #12]
   21c9e:	ab0a      	add	r3, sp, #40	; 0x28
   21ca0:	6022      	str	r2, [r4, #0]
   21ca2:	e9cd b301 	strd	fp, r3, [sp, #4]
   21ca6:	ab09      	add	r3, sp, #36	; 0x24
   21ca8:	ec49 8b10 	vmov	d0, r8, r9
   21cac:	9300      	str	r3, [sp, #0]
   21cae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   21cb2:	f004 feef 	bl	26a94 <__cvt>
   21cb6:	9b06      	ldr	r3, [sp, #24]
   21cb8:	4680      	mov	r8, r0
   21cba:	9909      	ldr	r1, [sp, #36]	; 0x24
   21cbc:	2b47      	cmp	r3, #71	; 0x47
   21cbe:	d108      	bne.n	21cd2 <_printf_float+0x142>
   21cc0:	1cc8      	adds	r0, r1, #3
   21cc2:	db02      	blt.n	21cca <_printf_float+0x13a>
   21cc4:	6863      	ldr	r3, [r4, #4]
   21cc6:	4299      	cmp	r1, r3
   21cc8:	dd41      	ble.n	21d4e <_printf_float+0x1be>
   21cca:	f1ab 0b02 	sub.w	fp, fp, #2
   21cce:	fa5f fb8b 	uxtb.w	fp, fp
   21cd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   21cd6:	d820      	bhi.n	21d1a <_printf_float+0x18a>
   21cd8:	3901      	subs	r1, #1
   21cda:	465a      	mov	r2, fp
   21cdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   21ce0:	9109      	str	r1, [sp, #36]	; 0x24
   21ce2:	f004 ff39 	bl	26b58 <__exponent>
   21ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21ce8:	4681      	mov	r9, r0
   21cea:	1813      	adds	r3, r2, r0
   21cec:	2a01      	cmp	r2, #1
   21cee:	6123      	str	r3, [r4, #16]
   21cf0:	dc02      	bgt.n	21cf8 <_printf_float+0x168>
   21cf2:	6822      	ldr	r2, [r4, #0]
   21cf4:	07d2      	lsls	r2, r2, #31
   21cf6:	d501      	bpl.n	21cfc <_printf_float+0x16c>
   21cf8:	3301      	adds	r3, #1
   21cfa:	6123      	str	r3, [r4, #16]
   21cfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   21d00:	2b00      	cmp	r3, #0
   21d02:	d09c      	beq.n	21c3e <_printf_float+0xae>
   21d04:	232d      	movs	r3, #45	; 0x2d
   21d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   21d0a:	e798      	b.n	21c3e <_printf_float+0xae>
   21d0c:	9a06      	ldr	r2, [sp, #24]
   21d0e:	2a47      	cmp	r2, #71	; 0x47
   21d10:	d1be      	bne.n	21c90 <_printf_float+0x100>
   21d12:	2b00      	cmp	r3, #0
   21d14:	d1bc      	bne.n	21c90 <_printf_float+0x100>
   21d16:	2301      	movs	r3, #1
   21d18:	e7b9      	b.n	21c8e <_printf_float+0xfe>
   21d1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   21d1e:	d118      	bne.n	21d52 <_printf_float+0x1c2>
   21d20:	2900      	cmp	r1, #0
   21d22:	6863      	ldr	r3, [r4, #4]
   21d24:	dd0b      	ble.n	21d3e <_printf_float+0x1ae>
   21d26:	6121      	str	r1, [r4, #16]
   21d28:	b913      	cbnz	r3, 21d30 <_printf_float+0x1a0>
   21d2a:	6822      	ldr	r2, [r4, #0]
   21d2c:	07d0      	lsls	r0, r2, #31
   21d2e:	d502      	bpl.n	21d36 <_printf_float+0x1a6>
   21d30:	3301      	adds	r3, #1
   21d32:	440b      	add	r3, r1
   21d34:	6123      	str	r3, [r4, #16]
   21d36:	f04f 0900 	mov.w	r9, #0
   21d3a:	65a1      	str	r1, [r4, #88]	; 0x58
   21d3c:	e7de      	b.n	21cfc <_printf_float+0x16c>
   21d3e:	b913      	cbnz	r3, 21d46 <_printf_float+0x1b6>
   21d40:	6822      	ldr	r2, [r4, #0]
   21d42:	07d2      	lsls	r2, r2, #31
   21d44:	d501      	bpl.n	21d4a <_printf_float+0x1ba>
   21d46:	3302      	adds	r3, #2
   21d48:	e7f4      	b.n	21d34 <_printf_float+0x1a4>
   21d4a:	2301      	movs	r3, #1
   21d4c:	e7f2      	b.n	21d34 <_printf_float+0x1a4>
   21d4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
   21d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21d54:	4299      	cmp	r1, r3
   21d56:	db05      	blt.n	21d64 <_printf_float+0x1d4>
   21d58:	6823      	ldr	r3, [r4, #0]
   21d5a:	6121      	str	r1, [r4, #16]
   21d5c:	07d8      	lsls	r0, r3, #31
   21d5e:	d5ea      	bpl.n	21d36 <_printf_float+0x1a6>
   21d60:	1c4b      	adds	r3, r1, #1
   21d62:	e7e7      	b.n	21d34 <_printf_float+0x1a4>
   21d64:	2900      	cmp	r1, #0
   21d66:	bfd4      	ite	le
   21d68:	f1c1 0202 	rsble	r2, r1, #2
   21d6c:	2201      	movgt	r2, #1
   21d6e:	4413      	add	r3, r2
   21d70:	e7e0      	b.n	21d34 <_printf_float+0x1a4>
   21d72:	6823      	ldr	r3, [r4, #0]
   21d74:	055a      	lsls	r2, r3, #21
   21d76:	d407      	bmi.n	21d88 <_printf_float+0x1f8>
   21d78:	6923      	ldr	r3, [r4, #16]
   21d7a:	4642      	mov	r2, r8
   21d7c:	4631      	mov	r1, r6
   21d7e:	4628      	mov	r0, r5
   21d80:	47b8      	blx	r7
   21d82:	3001      	adds	r0, #1
   21d84:	d12c      	bne.n	21de0 <_printf_float+0x250>
   21d86:	e764      	b.n	21c52 <_printf_float+0xc2>
   21d88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   21d8c:	f240 80e0 	bls.w	21f50 <_printf_float+0x3c0>
   21d90:	2200      	movs	r2, #0
   21d92:	2300      	movs	r3, #0
   21d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   21d98:	f7ea fff0 	bl	cd7c <__aeabi_dcmpeq>
   21d9c:	2800      	cmp	r0, #0
   21d9e:	d034      	beq.n	21e0a <_printf_float+0x27a>
   21da0:	2301      	movs	r3, #1
   21da2:	4a37      	ldr	r2, [pc, #220]	; (21e80 <_printf_float+0x2f0>)
   21da4:	4631      	mov	r1, r6
   21da6:	4628      	mov	r0, r5
   21da8:	47b8      	blx	r7
   21daa:	3001      	adds	r0, #1
   21dac:	f43f af51 	beq.w	21c52 <_printf_float+0xc2>
   21db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   21db4:	429a      	cmp	r2, r3
   21db6:	db02      	blt.n	21dbe <_printf_float+0x22e>
   21db8:	6823      	ldr	r3, [r4, #0]
   21dba:	07d8      	lsls	r0, r3, #31
   21dbc:	d510      	bpl.n	21de0 <_printf_float+0x250>
   21dbe:	ee18 3a10 	vmov	r3, s16
   21dc2:	4652      	mov	r2, sl
   21dc4:	4631      	mov	r1, r6
   21dc6:	4628      	mov	r0, r5
   21dc8:	47b8      	blx	r7
   21dca:	3001      	adds	r0, #1
   21dcc:	f43f af41 	beq.w	21c52 <_printf_float+0xc2>
   21dd0:	f04f 0800 	mov.w	r8, #0
   21dd4:	f104 091a 	add.w	r9, r4, #26
   21dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21dda:	3b01      	subs	r3, #1
   21ddc:	4543      	cmp	r3, r8
   21dde:	dc09      	bgt.n	21df4 <_printf_float+0x264>
   21de0:	6823      	ldr	r3, [r4, #0]
   21de2:	079b      	lsls	r3, r3, #30
   21de4:	f100 8105 	bmi.w	21ff2 <_printf_float+0x462>
   21de8:	68e0      	ldr	r0, [r4, #12]
   21dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21dec:	4298      	cmp	r0, r3
   21dee:	bfb8      	it	lt
   21df0:	4618      	movlt	r0, r3
   21df2:	e730      	b.n	21c56 <_printf_float+0xc6>
   21df4:	2301      	movs	r3, #1
   21df6:	464a      	mov	r2, r9
   21df8:	4631      	mov	r1, r6
   21dfa:	4628      	mov	r0, r5
   21dfc:	47b8      	blx	r7
   21dfe:	3001      	adds	r0, #1
   21e00:	f43f af27 	beq.w	21c52 <_printf_float+0xc2>
   21e04:	f108 0801 	add.w	r8, r8, #1
   21e08:	e7e6      	b.n	21dd8 <_printf_float+0x248>
   21e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21e0c:	2b00      	cmp	r3, #0
   21e0e:	dc39      	bgt.n	21e84 <_printf_float+0x2f4>
   21e10:	2301      	movs	r3, #1
   21e12:	4a1b      	ldr	r2, [pc, #108]	; (21e80 <_printf_float+0x2f0>)
   21e14:	4631      	mov	r1, r6
   21e16:	4628      	mov	r0, r5
   21e18:	47b8      	blx	r7
   21e1a:	3001      	adds	r0, #1
   21e1c:	f43f af19 	beq.w	21c52 <_printf_float+0xc2>
   21e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   21e24:	4313      	orrs	r3, r2
   21e26:	d102      	bne.n	21e2e <_printf_float+0x29e>
   21e28:	6823      	ldr	r3, [r4, #0]
   21e2a:	07d9      	lsls	r1, r3, #31
   21e2c:	d5d8      	bpl.n	21de0 <_printf_float+0x250>
   21e2e:	ee18 3a10 	vmov	r3, s16
   21e32:	4652      	mov	r2, sl
   21e34:	4631      	mov	r1, r6
   21e36:	4628      	mov	r0, r5
   21e38:	47b8      	blx	r7
   21e3a:	3001      	adds	r0, #1
   21e3c:	f43f af09 	beq.w	21c52 <_printf_float+0xc2>
   21e40:	f04f 0900 	mov.w	r9, #0
   21e44:	f104 0a1a 	add.w	sl, r4, #26
   21e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21e4a:	425b      	negs	r3, r3
   21e4c:	454b      	cmp	r3, r9
   21e4e:	dc01      	bgt.n	21e54 <_printf_float+0x2c4>
   21e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e52:	e792      	b.n	21d7a <_printf_float+0x1ea>
   21e54:	2301      	movs	r3, #1
   21e56:	4652      	mov	r2, sl
   21e58:	4631      	mov	r1, r6
   21e5a:	4628      	mov	r0, r5
   21e5c:	47b8      	blx	r7
   21e5e:	3001      	adds	r0, #1
   21e60:	f43f aef7 	beq.w	21c52 <_printf_float+0xc2>
   21e64:	f109 0901 	add.w	r9, r9, #1
   21e68:	e7ee      	b.n	21e48 <_printf_float+0x2b8>
   21e6a:	bf00      	nop
   21e6c:	7fefffff 	.word	0x7fefffff
   21e70:	0002aa85 	.word	0x0002aa85
   21e74:	00029a5f 	.word	0x00029a5f
   21e78:	0002aa8d 	.word	0x0002aa8d
   21e7c:	0002aa89 	.word	0x0002aa89
   21e80:	00028d83 	.word	0x00028d83
   21e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21e86:	6da3      	ldr	r3, [r4, #88]	; 0x58
   21e88:	429a      	cmp	r2, r3
   21e8a:	bfa8      	it	ge
   21e8c:	461a      	movge	r2, r3
   21e8e:	2a00      	cmp	r2, #0
   21e90:	4691      	mov	r9, r2
   21e92:	dc37      	bgt.n	21f04 <_printf_float+0x374>
   21e94:	f04f 0b00 	mov.w	fp, #0
   21e98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   21e9c:	f104 021a 	add.w	r2, r4, #26
   21ea0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   21ea2:	9305      	str	r3, [sp, #20]
   21ea4:	eba3 0309 	sub.w	r3, r3, r9
   21ea8:	455b      	cmp	r3, fp
   21eaa:	dc33      	bgt.n	21f14 <_printf_float+0x384>
   21eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   21eb0:	429a      	cmp	r2, r3
   21eb2:	db3b      	blt.n	21f2c <_printf_float+0x39c>
   21eb4:	6823      	ldr	r3, [r4, #0]
   21eb6:	07da      	lsls	r2, r3, #31
   21eb8:	d438      	bmi.n	21f2c <_printf_float+0x39c>
   21eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21ebc:	9b05      	ldr	r3, [sp, #20]
   21ebe:	9909      	ldr	r1, [sp, #36]	; 0x24
   21ec0:	1ad3      	subs	r3, r2, r3
   21ec2:	eba2 0901 	sub.w	r9, r2, r1
   21ec6:	4599      	cmp	r9, r3
   21ec8:	bfa8      	it	ge
   21eca:	4699      	movge	r9, r3
   21ecc:	f1b9 0f00 	cmp.w	r9, #0
   21ed0:	dc35      	bgt.n	21f3e <_printf_float+0x3ae>
   21ed2:	f04f 0800 	mov.w	r8, #0
   21ed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   21eda:	f104 0a1a 	add.w	sl, r4, #26
   21ede:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   21ee2:	1a9b      	subs	r3, r3, r2
   21ee4:	eba3 0309 	sub.w	r3, r3, r9
   21ee8:	4543      	cmp	r3, r8
   21eea:	f77f af79 	ble.w	21de0 <_printf_float+0x250>
   21eee:	2301      	movs	r3, #1
   21ef0:	4652      	mov	r2, sl
   21ef2:	4631      	mov	r1, r6
   21ef4:	4628      	mov	r0, r5
   21ef6:	47b8      	blx	r7
   21ef8:	3001      	adds	r0, #1
   21efa:	f43f aeaa 	beq.w	21c52 <_printf_float+0xc2>
   21efe:	f108 0801 	add.w	r8, r8, #1
   21f02:	e7ec      	b.n	21ede <_printf_float+0x34e>
   21f04:	4613      	mov	r3, r2
   21f06:	4631      	mov	r1, r6
   21f08:	4642      	mov	r2, r8
   21f0a:	4628      	mov	r0, r5
   21f0c:	47b8      	blx	r7
   21f0e:	3001      	adds	r0, #1
   21f10:	d1c0      	bne.n	21e94 <_printf_float+0x304>
   21f12:	e69e      	b.n	21c52 <_printf_float+0xc2>
   21f14:	2301      	movs	r3, #1
   21f16:	4631      	mov	r1, r6
   21f18:	4628      	mov	r0, r5
   21f1a:	9205      	str	r2, [sp, #20]
   21f1c:	47b8      	blx	r7
   21f1e:	3001      	adds	r0, #1
   21f20:	f43f ae97 	beq.w	21c52 <_printf_float+0xc2>
   21f24:	f10b 0b01 	add.w	fp, fp, #1
   21f28:	9a05      	ldr	r2, [sp, #20]
   21f2a:	e7b9      	b.n	21ea0 <_printf_float+0x310>
   21f2c:	ee18 3a10 	vmov	r3, s16
   21f30:	4652      	mov	r2, sl
   21f32:	4631      	mov	r1, r6
   21f34:	4628      	mov	r0, r5
   21f36:	47b8      	blx	r7
   21f38:	3001      	adds	r0, #1
   21f3a:	d1be      	bne.n	21eba <_printf_float+0x32a>
   21f3c:	e689      	b.n	21c52 <_printf_float+0xc2>
   21f3e:	9a05      	ldr	r2, [sp, #20]
   21f40:	464b      	mov	r3, r9
   21f42:	4631      	mov	r1, r6
   21f44:	4628      	mov	r0, r5
   21f46:	4442      	add	r2, r8
   21f48:	47b8      	blx	r7
   21f4a:	3001      	adds	r0, #1
   21f4c:	d1c1      	bne.n	21ed2 <_printf_float+0x342>
   21f4e:	e680      	b.n	21c52 <_printf_float+0xc2>
   21f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21f52:	2a01      	cmp	r2, #1
   21f54:	dc01      	bgt.n	21f5a <_printf_float+0x3ca>
   21f56:	07db      	lsls	r3, r3, #31
   21f58:	d538      	bpl.n	21fcc <_printf_float+0x43c>
   21f5a:	2301      	movs	r3, #1
   21f5c:	4642      	mov	r2, r8
   21f5e:	4631      	mov	r1, r6
   21f60:	4628      	mov	r0, r5
   21f62:	47b8      	blx	r7
   21f64:	3001      	adds	r0, #1
   21f66:	f43f ae74 	beq.w	21c52 <_printf_float+0xc2>
   21f6a:	ee18 3a10 	vmov	r3, s16
   21f6e:	4652      	mov	r2, sl
   21f70:	4631      	mov	r1, r6
   21f72:	4628      	mov	r0, r5
   21f74:	47b8      	blx	r7
   21f76:	3001      	adds	r0, #1
   21f78:	f43f ae6b 	beq.w	21c52 <_printf_float+0xc2>
   21f7c:	2200      	movs	r2, #0
   21f7e:	2300      	movs	r3, #0
   21f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   21f84:	f7ea fefa 	bl	cd7c <__aeabi_dcmpeq>
   21f88:	b9d8      	cbnz	r0, 21fc2 <_printf_float+0x432>
   21f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f8c:	f108 0201 	add.w	r2, r8, #1
   21f90:	3b01      	subs	r3, #1
   21f92:	4631      	mov	r1, r6
   21f94:	4628      	mov	r0, r5
   21f96:	47b8      	blx	r7
   21f98:	3001      	adds	r0, #1
   21f9a:	d10e      	bne.n	21fba <_printf_float+0x42a>
   21f9c:	e659      	b.n	21c52 <_printf_float+0xc2>
   21f9e:	2301      	movs	r3, #1
   21fa0:	4652      	mov	r2, sl
   21fa2:	4631      	mov	r1, r6
   21fa4:	4628      	mov	r0, r5
   21fa6:	47b8      	blx	r7
   21fa8:	3001      	adds	r0, #1
   21faa:	f43f ae52 	beq.w	21c52 <_printf_float+0xc2>
   21fae:	f108 0801 	add.w	r8, r8, #1
   21fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21fb4:	3b01      	subs	r3, #1
   21fb6:	4543      	cmp	r3, r8
   21fb8:	dcf1      	bgt.n	21f9e <_printf_float+0x40e>
   21fba:	464b      	mov	r3, r9
   21fbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
   21fc0:	e6dc      	b.n	21d7c <_printf_float+0x1ec>
   21fc2:	f04f 0800 	mov.w	r8, #0
   21fc6:	f104 0a1a 	add.w	sl, r4, #26
   21fca:	e7f2      	b.n	21fb2 <_printf_float+0x422>
   21fcc:	2301      	movs	r3, #1
   21fce:	4642      	mov	r2, r8
   21fd0:	e7df      	b.n	21f92 <_printf_float+0x402>
   21fd2:	2301      	movs	r3, #1
   21fd4:	464a      	mov	r2, r9
   21fd6:	4631      	mov	r1, r6
   21fd8:	4628      	mov	r0, r5
   21fda:	47b8      	blx	r7
   21fdc:	3001      	adds	r0, #1
   21fde:	f43f ae38 	beq.w	21c52 <_printf_float+0xc2>
   21fe2:	f108 0801 	add.w	r8, r8, #1
   21fe6:	68e3      	ldr	r3, [r4, #12]
   21fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   21fea:	1a5b      	subs	r3, r3, r1
   21fec:	4543      	cmp	r3, r8
   21fee:	dcf0      	bgt.n	21fd2 <_printf_float+0x442>
   21ff0:	e6fa      	b.n	21de8 <_printf_float+0x258>
   21ff2:	f04f 0800 	mov.w	r8, #0
   21ff6:	f104 0919 	add.w	r9, r4, #25
   21ffa:	e7f4      	b.n	21fe6 <_printf_float+0x456>

00021ffc <_printf_i>:
   21ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   22000:	460c      	mov	r4, r1
   22002:	4691      	mov	r9, r2
   22004:	4680      	mov	r8, r0
   22006:	469a      	mov	sl, r3
   22008:	7e27      	ldrb	r7, [r4, #24]
   2200a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2200e:	990c      	ldr	r1, [sp, #48]	; 0x30
   22010:	2f78      	cmp	r7, #120	; 0x78
   22012:	d807      	bhi.n	22024 <_printf_i+0x28>
   22014:	2f62      	cmp	r7, #98	; 0x62
   22016:	d80a      	bhi.n	2202e <_printf_i+0x32>
   22018:	2f00      	cmp	r7, #0
   2201a:	f000 80d8 	beq.w	221ce <_printf_i+0x1d2>
   2201e:	2f58      	cmp	r7, #88	; 0x58
   22020:	f000 80a3 	beq.w	2216a <_printf_i+0x16e>
   22024:	f104 0642 	add.w	r6, r4, #66	; 0x42
   22028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2202c:	e03a      	b.n	220a4 <_printf_i+0xa8>
   2202e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   22032:	2b15      	cmp	r3, #21
   22034:	d8f6      	bhi.n	22024 <_printf_i+0x28>
   22036:	a001      	add	r0, pc, #4	; (adr r0, 2203c <_printf_i+0x40>)
   22038:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   2203c:	00022095 	.word	0x00022095
   22040:	000220a9 	.word	0x000220a9
   22044:	00022025 	.word	0x00022025
   22048:	00022025 	.word	0x00022025
   2204c:	00022025 	.word	0x00022025
   22050:	00022025 	.word	0x00022025
   22054:	000220a9 	.word	0x000220a9
   22058:	00022025 	.word	0x00022025
   2205c:	00022025 	.word	0x00022025
   22060:	00022025 	.word	0x00022025
   22064:	00022025 	.word	0x00022025
   22068:	000221b5 	.word	0x000221b5
   2206c:	000220d9 	.word	0x000220d9
   22070:	00022197 	.word	0x00022197
   22074:	00022025 	.word	0x00022025
   22078:	00022025 	.word	0x00022025
   2207c:	000221d7 	.word	0x000221d7
   22080:	00022025 	.word	0x00022025
   22084:	000220d9 	.word	0x000220d9
   22088:	00022025 	.word	0x00022025
   2208c:	00022025 	.word	0x00022025
   22090:	0002219f 	.word	0x0002219f
   22094:	680b      	ldr	r3, [r1, #0]
   22096:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2209a:	1d1a      	adds	r2, r3, #4
   2209c:	681b      	ldr	r3, [r3, #0]
   2209e:	600a      	str	r2, [r1, #0]
   220a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   220a4:	2301      	movs	r3, #1
   220a6:	e0a3      	b.n	221f0 <_printf_i+0x1f4>
   220a8:	6825      	ldr	r5, [r4, #0]
   220aa:	6808      	ldr	r0, [r1, #0]
   220ac:	062e      	lsls	r6, r5, #24
   220ae:	f100 0304 	add.w	r3, r0, #4
   220b2:	d50a      	bpl.n	220ca <_printf_i+0xce>
   220b4:	6805      	ldr	r5, [r0, #0]
   220b6:	600b      	str	r3, [r1, #0]
   220b8:	2d00      	cmp	r5, #0
   220ba:	da03      	bge.n	220c4 <_printf_i+0xc8>
   220bc:	232d      	movs	r3, #45	; 0x2d
   220be:	426d      	negs	r5, r5
   220c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   220c4:	485e      	ldr	r0, [pc, #376]	; (22240 <_printf_i+0x244>)
   220c6:	230a      	movs	r3, #10
   220c8:	e019      	b.n	220fe <_printf_i+0x102>
   220ca:	f015 0f40 	tst.w	r5, #64	; 0x40
   220ce:	6805      	ldr	r5, [r0, #0]
   220d0:	600b      	str	r3, [r1, #0]
   220d2:	bf18      	it	ne
   220d4:	b22d      	sxthne	r5, r5
   220d6:	e7ef      	b.n	220b8 <_printf_i+0xbc>
   220d8:	680b      	ldr	r3, [r1, #0]
   220da:	6825      	ldr	r5, [r4, #0]
   220dc:	1d18      	adds	r0, r3, #4
   220de:	6008      	str	r0, [r1, #0]
   220e0:	0628      	lsls	r0, r5, #24
   220e2:	d501      	bpl.n	220e8 <_printf_i+0xec>
   220e4:	681d      	ldr	r5, [r3, #0]
   220e6:	e002      	b.n	220ee <_printf_i+0xf2>
   220e8:	0669      	lsls	r1, r5, #25
   220ea:	d5fb      	bpl.n	220e4 <_printf_i+0xe8>
   220ec:	881d      	ldrh	r5, [r3, #0]
   220ee:	2f6f      	cmp	r7, #111	; 0x6f
   220f0:	4853      	ldr	r0, [pc, #332]	; (22240 <_printf_i+0x244>)
   220f2:	bf0c      	ite	eq
   220f4:	2308      	moveq	r3, #8
   220f6:	230a      	movne	r3, #10
   220f8:	2100      	movs	r1, #0
   220fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   220fe:	6866      	ldr	r6, [r4, #4]
   22100:	2e00      	cmp	r6, #0
   22102:	60a6      	str	r6, [r4, #8]
   22104:	bfa2      	ittt	ge
   22106:	6821      	ldrge	r1, [r4, #0]
   22108:	f021 0104 	bicge.w	r1, r1, #4
   2210c:	6021      	strge	r1, [r4, #0]
   2210e:	b90d      	cbnz	r5, 22114 <_printf_i+0x118>
   22110:	2e00      	cmp	r6, #0
   22112:	d04d      	beq.n	221b0 <_printf_i+0x1b4>
   22114:	4616      	mov	r6, r2
   22116:	fbb5 f1f3 	udiv	r1, r5, r3
   2211a:	fb03 5711 	mls	r7, r3, r1, r5
   2211e:	5dc7      	ldrb	r7, [r0, r7]
   22120:	f806 7d01 	strb.w	r7, [r6, #-1]!
   22124:	462f      	mov	r7, r5
   22126:	460d      	mov	r5, r1
   22128:	42bb      	cmp	r3, r7
   2212a:	d9f4      	bls.n	22116 <_printf_i+0x11a>
   2212c:	2b08      	cmp	r3, #8
   2212e:	d10b      	bne.n	22148 <_printf_i+0x14c>
   22130:	6823      	ldr	r3, [r4, #0]
   22132:	07df      	lsls	r7, r3, #31
   22134:	d508      	bpl.n	22148 <_printf_i+0x14c>
   22136:	6923      	ldr	r3, [r4, #16]
   22138:	6861      	ldr	r1, [r4, #4]
   2213a:	4299      	cmp	r1, r3
   2213c:	bfde      	ittt	le
   2213e:	2330      	movle	r3, #48	; 0x30
   22140:	f806 3c01 	strble.w	r3, [r6, #-1]
   22144:	f106 36ff 	addle.w	r6, r6, #4294967295
   22148:	1b92      	subs	r2, r2, r6
   2214a:	6122      	str	r2, [r4, #16]
   2214c:	464b      	mov	r3, r9
   2214e:	aa03      	add	r2, sp, #12
   22150:	4621      	mov	r1, r4
   22152:	4640      	mov	r0, r8
   22154:	f8cd a000 	str.w	sl, [sp]
   22158:	f004 fd3c 	bl	26bd4 <_printf_common>
   2215c:	3001      	adds	r0, #1
   2215e:	d14c      	bne.n	221fa <_printf_i+0x1fe>
   22160:	f04f 30ff 	mov.w	r0, #4294967295
   22164:	b004      	add	sp, #16
   22166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2216a:	4835      	ldr	r0, [pc, #212]	; (22240 <_printf_i+0x244>)
   2216c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   22170:	6823      	ldr	r3, [r4, #0]
   22172:	680e      	ldr	r6, [r1, #0]
   22174:	061f      	lsls	r7, r3, #24
   22176:	f856 5b04 	ldr.w	r5, [r6], #4
   2217a:	600e      	str	r6, [r1, #0]
   2217c:	d514      	bpl.n	221a8 <_printf_i+0x1ac>
   2217e:	07d9      	lsls	r1, r3, #31
   22180:	bf44      	itt	mi
   22182:	f043 0320 	orrmi.w	r3, r3, #32
   22186:	6023      	strmi	r3, [r4, #0]
   22188:	b91d      	cbnz	r5, 22192 <_printf_i+0x196>
   2218a:	6823      	ldr	r3, [r4, #0]
   2218c:	f023 0320 	bic.w	r3, r3, #32
   22190:	6023      	str	r3, [r4, #0]
   22192:	2310      	movs	r3, #16
   22194:	e7b0      	b.n	220f8 <_printf_i+0xfc>
   22196:	6823      	ldr	r3, [r4, #0]
   22198:	f043 0320 	orr.w	r3, r3, #32
   2219c:	6023      	str	r3, [r4, #0]
   2219e:	2378      	movs	r3, #120	; 0x78
   221a0:	4828      	ldr	r0, [pc, #160]	; (22244 <_printf_i+0x248>)
   221a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   221a6:	e7e3      	b.n	22170 <_printf_i+0x174>
   221a8:	065e      	lsls	r6, r3, #25
   221aa:	bf48      	it	mi
   221ac:	b2ad      	uxthmi	r5, r5
   221ae:	e7e6      	b.n	2217e <_printf_i+0x182>
   221b0:	4616      	mov	r6, r2
   221b2:	e7bb      	b.n	2212c <_printf_i+0x130>
   221b4:	680b      	ldr	r3, [r1, #0]
   221b6:	6826      	ldr	r6, [r4, #0]
   221b8:	1d1d      	adds	r5, r3, #4
   221ba:	6960      	ldr	r0, [r4, #20]
   221bc:	600d      	str	r5, [r1, #0]
   221be:	0635      	lsls	r5, r6, #24
   221c0:	681b      	ldr	r3, [r3, #0]
   221c2:	d501      	bpl.n	221c8 <_printf_i+0x1cc>
   221c4:	6018      	str	r0, [r3, #0]
   221c6:	e002      	b.n	221ce <_printf_i+0x1d2>
   221c8:	0671      	lsls	r1, r6, #25
   221ca:	d5fb      	bpl.n	221c4 <_printf_i+0x1c8>
   221cc:	8018      	strh	r0, [r3, #0]
   221ce:	2300      	movs	r3, #0
   221d0:	4616      	mov	r6, r2
   221d2:	6123      	str	r3, [r4, #16]
   221d4:	e7ba      	b.n	2214c <_printf_i+0x150>
   221d6:	680b      	ldr	r3, [r1, #0]
   221d8:	1d1a      	adds	r2, r3, #4
   221da:	600a      	str	r2, [r1, #0]
   221dc:	2100      	movs	r1, #0
   221de:	681e      	ldr	r6, [r3, #0]
   221e0:	6862      	ldr	r2, [r4, #4]
   221e2:	4630      	mov	r0, r6
   221e4:	f004 fbf3 	bl	269ce <memchr>
   221e8:	b108      	cbz	r0, 221ee <_printf_i+0x1f2>
   221ea:	1b80      	subs	r0, r0, r6
   221ec:	6060      	str	r0, [r4, #4]
   221ee:	6863      	ldr	r3, [r4, #4]
   221f0:	6123      	str	r3, [r4, #16]
   221f2:	2300      	movs	r3, #0
   221f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   221f8:	e7a8      	b.n	2214c <_printf_i+0x150>
   221fa:	6923      	ldr	r3, [r4, #16]
   221fc:	4632      	mov	r2, r6
   221fe:	4649      	mov	r1, r9
   22200:	4640      	mov	r0, r8
   22202:	47d0      	blx	sl
   22204:	3001      	adds	r0, #1
   22206:	d0ab      	beq.n	22160 <_printf_i+0x164>
   22208:	6823      	ldr	r3, [r4, #0]
   2220a:	079b      	lsls	r3, r3, #30
   2220c:	d413      	bmi.n	22236 <_printf_i+0x23a>
   2220e:	68e0      	ldr	r0, [r4, #12]
   22210:	9b03      	ldr	r3, [sp, #12]
   22212:	4298      	cmp	r0, r3
   22214:	bfb8      	it	lt
   22216:	4618      	movlt	r0, r3
   22218:	e7a4      	b.n	22164 <_printf_i+0x168>
   2221a:	2301      	movs	r3, #1
   2221c:	4632      	mov	r2, r6
   2221e:	4649      	mov	r1, r9
   22220:	4640      	mov	r0, r8
   22222:	47d0      	blx	sl
   22224:	3001      	adds	r0, #1
   22226:	d09b      	beq.n	22160 <_printf_i+0x164>
   22228:	3501      	adds	r5, #1
   2222a:	68e3      	ldr	r3, [r4, #12]
   2222c:	9903      	ldr	r1, [sp, #12]
   2222e:	1a5b      	subs	r3, r3, r1
   22230:	42ab      	cmp	r3, r5
   22232:	dcf2      	bgt.n	2221a <_printf_i+0x21e>
   22234:	e7eb      	b.n	2220e <_printf_i+0x212>
   22236:	2500      	movs	r5, #0
   22238:	f104 0619 	add.w	r6, r4, #25
   2223c:	e7f5      	b.n	2222a <_printf_i+0x22e>
   2223e:	bf00      	nop
   22240:	0002aa91 	.word	0x0002aa91
   22244:	0002aaa2 	.word	0x0002aaa2

00022248 <sniprintf>:
   22248:	b40c      	push	{r2, r3}
   2224a:	4b18      	ldr	r3, [pc, #96]	; (222ac <sniprintf+0x64>)
   2224c:	b530      	push	{r4, r5, lr}
   2224e:	1e0c      	subs	r4, r1, #0
   22250:	b09d      	sub	sp, #116	; 0x74
   22252:	681d      	ldr	r5, [r3, #0]
   22254:	da08      	bge.n	22268 <sniprintf+0x20>
   22256:	238b      	movs	r3, #139	; 0x8b
   22258:	f04f 30ff 	mov.w	r0, #4294967295
   2225c:	602b      	str	r3, [r5, #0]
   2225e:	b01d      	add	sp, #116	; 0x74
   22260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   22264:	b002      	add	sp, #8
   22266:	4770      	bx	lr
   22268:	f44f 7302 	mov.w	r3, #520	; 0x208
   2226c:	9002      	str	r0, [sp, #8]
   2226e:	9006      	str	r0, [sp, #24]
   22270:	a902      	add	r1, sp, #8
   22272:	f8ad 3014 	strh.w	r3, [sp, #20]
   22276:	bf14      	ite	ne
   22278:	f104 33ff 	addne.w	r3, r4, #4294967295
   2227c:	4623      	moveq	r3, r4
   2227e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   22280:	4628      	mov	r0, r5
   22282:	9304      	str	r3, [sp, #16]
   22284:	9307      	str	r3, [sp, #28]
   22286:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2228a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2228e:	ab21      	add	r3, sp, #132	; 0x84
   22290:	9301      	str	r3, [sp, #4]
   22292:	f000 fd09 	bl	22ca8 <_svfiprintf_r>
   22296:	1c43      	adds	r3, r0, #1
   22298:	bfbc      	itt	lt
   2229a:	238b      	movlt	r3, #139	; 0x8b
   2229c:	602b      	strlt	r3, [r5, #0]
   2229e:	2c00      	cmp	r4, #0
   222a0:	d0dd      	beq.n	2225e <sniprintf+0x16>
   222a2:	9b02      	ldr	r3, [sp, #8]
   222a4:	2200      	movs	r2, #0
   222a6:	701a      	strb	r2, [r3, #0]
   222a8:	e7d9      	b.n	2225e <sniprintf+0x16>
   222aa:	bf00      	nop
   222ac:	200203e4 	.word	0x200203e4

000222b0 <siprintf>:
   222b0:	b40e      	push	{r1, r2, r3}
   222b2:	b500      	push	{lr}
   222b4:	b09c      	sub	sp, #112	; 0x70
   222b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   222ba:	ab1d      	add	r3, sp, #116	; 0x74
   222bc:	9002      	str	r0, [sp, #8]
   222be:	9006      	str	r0, [sp, #24]
   222c0:	9107      	str	r1, [sp, #28]
   222c2:	9104      	str	r1, [sp, #16]
   222c4:	4808      	ldr	r0, [pc, #32]	; (222e8 <siprintf+0x38>)
   222c6:	4909      	ldr	r1, [pc, #36]	; (222ec <siprintf+0x3c>)
   222c8:	f853 2b04 	ldr.w	r2, [r3], #4
   222cc:	9105      	str	r1, [sp, #20]
   222ce:	a902      	add	r1, sp, #8
   222d0:	6800      	ldr	r0, [r0, #0]
   222d2:	9301      	str	r3, [sp, #4]
   222d4:	f000 fce8 	bl	22ca8 <_svfiprintf_r>
   222d8:	9b02      	ldr	r3, [sp, #8]
   222da:	2200      	movs	r2, #0
   222dc:	701a      	strb	r2, [r3, #0]
   222de:	b01c      	add	sp, #112	; 0x70
   222e0:	f85d eb04 	ldr.w	lr, [sp], #4
   222e4:	b003      	add	sp, #12
   222e6:	4770      	bx	lr
   222e8:	200203e4 	.word	0x200203e4
   222ec:	ffff0208 	.word	0xffff0208

000222f0 <_strtol_l.isra.0>:
   222f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   222f4:	468c      	mov	ip, r1
   222f6:	4686      	mov	lr, r0
   222f8:	4e38      	ldr	r6, [pc, #224]	; (223dc <_strtol_l.isra.0+0xec>)
   222fa:	4660      	mov	r0, ip
   222fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   22300:	5da5      	ldrb	r5, [r4, r6]
   22302:	f015 0508 	ands.w	r5, r5, #8
   22306:	d1f8      	bne.n	222fa <_strtol_l.isra.0+0xa>
   22308:	2c2d      	cmp	r4, #45	; 0x2d
   2230a:	d133      	bne.n	22374 <_strtol_l.isra.0+0x84>
   2230c:	f89c 4000 	ldrb.w	r4, [ip]
   22310:	f04f 0801 	mov.w	r8, #1
   22314:	f100 0c02 	add.w	ip, r0, #2
   22318:	2b00      	cmp	r3, #0
   2231a:	d05b      	beq.n	223d4 <_strtol_l.isra.0+0xe4>
   2231c:	2b10      	cmp	r3, #16
   2231e:	d10c      	bne.n	2233a <_strtol_l.isra.0+0x4a>
   22320:	2c30      	cmp	r4, #48	; 0x30
   22322:	d10a      	bne.n	2233a <_strtol_l.isra.0+0x4a>
   22324:	f89c 0000 	ldrb.w	r0, [ip]
   22328:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2232c:	2858      	cmp	r0, #88	; 0x58
   2232e:	d14c      	bne.n	223ca <_strtol_l.isra.0+0xda>
   22330:	f89c 4001 	ldrb.w	r4, [ip, #1]
   22334:	2310      	movs	r3, #16
   22336:	f10c 0c02 	add.w	ip, ip, #2
   2233a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   2233e:	2600      	movs	r6, #0
   22340:	3f01      	subs	r7, #1
   22342:	4630      	mov	r0, r6
   22344:	fbb7 f9f3 	udiv	r9, r7, r3
   22348:	fb03 7a19 	mls	sl, r3, r9, r7
   2234c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   22350:	2d09      	cmp	r5, #9
   22352:	d817      	bhi.n	22384 <_strtol_l.isra.0+0x94>
   22354:	462c      	mov	r4, r5
   22356:	42a3      	cmp	r3, r4
   22358:	dd23      	ble.n	223a2 <_strtol_l.isra.0+0xb2>
   2235a:	1c75      	adds	r5, r6, #1
   2235c:	d007      	beq.n	2236e <_strtol_l.isra.0+0x7e>
   2235e:	4581      	cmp	r9, r0
   22360:	d31c      	bcc.n	2239c <_strtol_l.isra.0+0xac>
   22362:	d101      	bne.n	22368 <_strtol_l.isra.0+0x78>
   22364:	45a2      	cmp	sl, r4
   22366:	db19      	blt.n	2239c <_strtol_l.isra.0+0xac>
   22368:	fb00 4003 	mla	r0, r0, r3, r4
   2236c:	2601      	movs	r6, #1
   2236e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   22372:	e7eb      	b.n	2234c <_strtol_l.isra.0+0x5c>
   22374:	2c2b      	cmp	r4, #43	; 0x2b
   22376:	46a8      	mov	r8, r5
   22378:	bf04      	itt	eq
   2237a:	f89c 4000 	ldrbeq.w	r4, [ip]
   2237e:	f100 0c02 	addeq.w	ip, r0, #2
   22382:	e7c9      	b.n	22318 <_strtol_l.isra.0+0x28>
   22384:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   22388:	2d19      	cmp	r5, #25
   2238a:	d801      	bhi.n	22390 <_strtol_l.isra.0+0xa0>
   2238c:	3c37      	subs	r4, #55	; 0x37
   2238e:	e7e2      	b.n	22356 <_strtol_l.isra.0+0x66>
   22390:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   22394:	2d19      	cmp	r5, #25
   22396:	d804      	bhi.n	223a2 <_strtol_l.isra.0+0xb2>
   22398:	3c57      	subs	r4, #87	; 0x57
   2239a:	e7dc      	b.n	22356 <_strtol_l.isra.0+0x66>
   2239c:	f04f 36ff 	mov.w	r6, #4294967295
   223a0:	e7e5      	b.n	2236e <_strtol_l.isra.0+0x7e>
   223a2:	1c73      	adds	r3, r6, #1
   223a4:	d106      	bne.n	223b4 <_strtol_l.isra.0+0xc4>
   223a6:	2322      	movs	r3, #34	; 0x22
   223a8:	4638      	mov	r0, r7
   223aa:	f8ce 3000 	str.w	r3, [lr]
   223ae:	b942      	cbnz	r2, 223c2 <_strtol_l.isra.0+0xd2>
   223b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   223b4:	f1b8 0f00 	cmp.w	r8, #0
   223b8:	d000      	beq.n	223bc <_strtol_l.isra.0+0xcc>
   223ba:	4240      	negs	r0, r0
   223bc:	2a00      	cmp	r2, #0
   223be:	d0f7      	beq.n	223b0 <_strtol_l.isra.0+0xc0>
   223c0:	b10e      	cbz	r6, 223c6 <_strtol_l.isra.0+0xd6>
   223c2:	f10c 31ff 	add.w	r1, ip, #4294967295
   223c6:	6011      	str	r1, [r2, #0]
   223c8:	e7f2      	b.n	223b0 <_strtol_l.isra.0+0xc0>
   223ca:	2430      	movs	r4, #48	; 0x30
   223cc:	2b00      	cmp	r3, #0
   223ce:	d1b4      	bne.n	2233a <_strtol_l.isra.0+0x4a>
   223d0:	2308      	movs	r3, #8
   223d2:	e7b2      	b.n	2233a <_strtol_l.isra.0+0x4a>
   223d4:	2c30      	cmp	r4, #48	; 0x30
   223d6:	d0a5      	beq.n	22324 <_strtol_l.isra.0+0x34>
   223d8:	230a      	movs	r3, #10
   223da:	e7ae      	b.n	2233a <_strtol_l.isra.0+0x4a>
   223dc:	0002a974 	.word	0x0002a974

000223e0 <strtol>:
   223e0:	4613      	mov	r3, r2
   223e2:	460a      	mov	r2, r1
   223e4:	4601      	mov	r1, r0
   223e6:	4802      	ldr	r0, [pc, #8]	; (223f0 <strtol+0x10>)
   223e8:	6800      	ldr	r0, [r0, #0]
   223ea:	f7ff bf81 	b.w	222f0 <_strtol_l.isra.0>
   223ee:	bf00      	nop
   223f0:	200203e4 	.word	0x200203e4

000223f4 <_strtoul_l.isra.0>:
   223f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   223f8:	468c      	mov	ip, r1
   223fa:	4686      	mov	lr, r0
   223fc:	4e39      	ldr	r6, [pc, #228]	; (224e4 <_strtoul_l.isra.0+0xf0>)
   223fe:	4660      	mov	r0, ip
   22400:	f81c 4b01 	ldrb.w	r4, [ip], #1
   22404:	5da5      	ldrb	r5, [r4, r6]
   22406:	f015 0508 	ands.w	r5, r5, #8
   2240a:	d1f8      	bne.n	223fe <_strtoul_l.isra.0+0xa>
   2240c:	2c2d      	cmp	r4, #45	; 0x2d
   2240e:	d134      	bne.n	2247a <_strtoul_l.isra.0+0x86>
   22410:	f89c 4000 	ldrb.w	r4, [ip]
   22414:	f04f 0801 	mov.w	r8, #1
   22418:	f100 0c02 	add.w	ip, r0, #2
   2241c:	2b00      	cmp	r3, #0
   2241e:	d05d      	beq.n	224dc <_strtoul_l.isra.0+0xe8>
   22420:	2b10      	cmp	r3, #16
   22422:	d10c      	bne.n	2243e <_strtoul_l.isra.0+0x4a>
   22424:	2c30      	cmp	r4, #48	; 0x30
   22426:	d10a      	bne.n	2243e <_strtoul_l.isra.0+0x4a>
   22428:	f89c 0000 	ldrb.w	r0, [ip]
   2242c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   22430:	2858      	cmp	r0, #88	; 0x58
   22432:	d14e      	bne.n	224d2 <_strtoul_l.isra.0+0xde>
   22434:	f89c 4001 	ldrb.w	r4, [ip, #1]
   22438:	2310      	movs	r3, #16
   2243a:	f10c 0c02 	add.w	ip, ip, #2
   2243e:	f04f 37ff 	mov.w	r7, #4294967295
   22442:	2500      	movs	r5, #0
   22444:	fbb7 f7f3 	udiv	r7, r7, r3
   22448:	fb03 f907 	mul.w	r9, r3, r7
   2244c:	4628      	mov	r0, r5
   2244e:	ea6f 0909 	mvn.w	r9, r9
   22452:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   22456:	2e09      	cmp	r6, #9
   22458:	d817      	bhi.n	2248a <_strtoul_l.isra.0+0x96>
   2245a:	4634      	mov	r4, r6
   2245c:	42a3      	cmp	r3, r4
   2245e:	dd23      	ble.n	224a8 <_strtoul_l.isra.0+0xb4>
   22460:	2d00      	cmp	r5, #0
   22462:	db1e      	blt.n	224a2 <_strtoul_l.isra.0+0xae>
   22464:	4287      	cmp	r7, r0
   22466:	d31c      	bcc.n	224a2 <_strtoul_l.isra.0+0xae>
   22468:	d101      	bne.n	2246e <_strtoul_l.isra.0+0x7a>
   2246a:	45a1      	cmp	r9, r4
   2246c:	db19      	blt.n	224a2 <_strtoul_l.isra.0+0xae>
   2246e:	fb00 4003 	mla	r0, r0, r3, r4
   22472:	2501      	movs	r5, #1
   22474:	f81c 4b01 	ldrb.w	r4, [ip], #1
   22478:	e7eb      	b.n	22452 <_strtoul_l.isra.0+0x5e>
   2247a:	2c2b      	cmp	r4, #43	; 0x2b
   2247c:	46a8      	mov	r8, r5
   2247e:	bf04      	itt	eq
   22480:	f89c 4000 	ldrbeq.w	r4, [ip]
   22484:	f100 0c02 	addeq.w	ip, r0, #2
   22488:	e7c8      	b.n	2241c <_strtoul_l.isra.0+0x28>
   2248a:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2248e:	2e19      	cmp	r6, #25
   22490:	d801      	bhi.n	22496 <_strtoul_l.isra.0+0xa2>
   22492:	3c37      	subs	r4, #55	; 0x37
   22494:	e7e2      	b.n	2245c <_strtoul_l.isra.0+0x68>
   22496:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2249a:	2e19      	cmp	r6, #25
   2249c:	d804      	bhi.n	224a8 <_strtoul_l.isra.0+0xb4>
   2249e:	3c57      	subs	r4, #87	; 0x57
   224a0:	e7dc      	b.n	2245c <_strtoul_l.isra.0+0x68>
   224a2:	f04f 35ff 	mov.w	r5, #4294967295
   224a6:	e7e5      	b.n	22474 <_strtoul_l.isra.0+0x80>
   224a8:	2d00      	cmp	r5, #0
   224aa:	da07      	bge.n	224bc <_strtoul_l.isra.0+0xc8>
   224ac:	2322      	movs	r3, #34	; 0x22
   224ae:	f04f 30ff 	mov.w	r0, #4294967295
   224b2:	f8ce 3000 	str.w	r3, [lr]
   224b6:	b942      	cbnz	r2, 224ca <_strtoul_l.isra.0+0xd6>
   224b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   224bc:	f1b8 0f00 	cmp.w	r8, #0
   224c0:	d000      	beq.n	224c4 <_strtoul_l.isra.0+0xd0>
   224c2:	4240      	negs	r0, r0
   224c4:	2a00      	cmp	r2, #0
   224c6:	d0f7      	beq.n	224b8 <_strtoul_l.isra.0+0xc4>
   224c8:	b10d      	cbz	r5, 224ce <_strtoul_l.isra.0+0xda>
   224ca:	f10c 31ff 	add.w	r1, ip, #4294967295
   224ce:	6011      	str	r1, [r2, #0]
   224d0:	e7f2      	b.n	224b8 <_strtoul_l.isra.0+0xc4>
   224d2:	2430      	movs	r4, #48	; 0x30
   224d4:	2b00      	cmp	r3, #0
   224d6:	d1b2      	bne.n	2243e <_strtoul_l.isra.0+0x4a>
   224d8:	2308      	movs	r3, #8
   224da:	e7b0      	b.n	2243e <_strtoul_l.isra.0+0x4a>
   224dc:	2c30      	cmp	r4, #48	; 0x30
   224de:	d0a3      	beq.n	22428 <_strtoul_l.isra.0+0x34>
   224e0:	230a      	movs	r3, #10
   224e2:	e7ac      	b.n	2243e <_strtoul_l.isra.0+0x4a>
   224e4:	0002a974 	.word	0x0002a974

000224e8 <strtoul>:
   224e8:	4613      	mov	r3, r2
   224ea:	460a      	mov	r2, r1
   224ec:	4601      	mov	r1, r0
   224ee:	4802      	ldr	r0, [pc, #8]	; (224f8 <strtoul+0x10>)
   224f0:	6800      	ldr	r0, [r0, #0]
   224f2:	f7ff bf7f 	b.w	223f4 <_strtoul_l.isra.0>
   224f6:	bf00      	nop
   224f8:	200203e4 	.word	0x200203e4

000224fc <vsniprintf>:
   224fc:	b507      	push	{r0, r1, r2, lr}
   224fe:	9300      	str	r3, [sp, #0]
   22500:	4613      	mov	r3, r2
   22502:	460a      	mov	r2, r1
   22504:	4601      	mov	r1, r0
   22506:	4803      	ldr	r0, [pc, #12]	; (22514 <vsniprintf+0x18>)
   22508:	6800      	ldr	r0, [r0, #0]
   2250a:	f004 fc81 	bl	26e10 <_vsniprintf_r>
   2250e:	b003      	add	sp, #12
   22510:	f85d fb04 	ldr.w	pc, [sp], #4
   22514:	200203e4 	.word	0x200203e4

00022518 <_vsiprintf_r>:
   22518:	b500      	push	{lr}
   2251a:	b09b      	sub	sp, #108	; 0x6c
   2251c:	9100      	str	r1, [sp, #0]
   2251e:	9104      	str	r1, [sp, #16]
   22520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   22524:	9105      	str	r1, [sp, #20]
   22526:	9102      	str	r1, [sp, #8]
   22528:	4905      	ldr	r1, [pc, #20]	; (22540 <_vsiprintf_r+0x28>)
   2252a:	9103      	str	r1, [sp, #12]
   2252c:	4669      	mov	r1, sp
   2252e:	f000 fbbb 	bl	22ca8 <_svfiprintf_r>
   22532:	9b00      	ldr	r3, [sp, #0]
   22534:	2200      	movs	r2, #0
   22536:	701a      	strb	r2, [r3, #0]
   22538:	b01b      	add	sp, #108	; 0x6c
   2253a:	f85d fb04 	ldr.w	pc, [sp], #4
   2253e:	bf00      	nop
   22540:	ffff0208 	.word	0xffff0208

00022544 <vsiprintf>:
   22544:	4613      	mov	r3, r2
   22546:	460a      	mov	r2, r1
   22548:	4601      	mov	r1, r0
   2254a:	4802      	ldr	r0, [pc, #8]	; (22554 <vsiprintf+0x10>)
   2254c:	6800      	ldr	r0, [r0, #0]
   2254e:	f7ff bfe3 	b.w	22518 <_vsiprintf_r>
   22552:	bf00      	nop
   22554:	200203e4 	.word	0x200203e4

00022558 <__swbuf_r>:
   22558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2255a:	460e      	mov	r6, r1
   2255c:	4614      	mov	r4, r2
   2255e:	4605      	mov	r5, r0
   22560:	b118      	cbz	r0, 2256a <__swbuf_r+0x12>
   22562:	6983      	ldr	r3, [r0, #24]
   22564:	b90b      	cbnz	r3, 2256a <__swbuf_r+0x12>
   22566:	f000 f9dd 	bl	22924 <__sinit>
   2256a:	4b21      	ldr	r3, [pc, #132]	; (225f0 <__swbuf_r+0x98>)
   2256c:	429c      	cmp	r4, r3
   2256e:	d12b      	bne.n	225c8 <__swbuf_r+0x70>
   22570:	686c      	ldr	r4, [r5, #4]
   22572:	69a3      	ldr	r3, [r4, #24]
   22574:	60a3      	str	r3, [r4, #8]
   22576:	89a3      	ldrh	r3, [r4, #12]
   22578:	071a      	lsls	r2, r3, #28
   2257a:	d52f      	bpl.n	225dc <__swbuf_r+0x84>
   2257c:	6923      	ldr	r3, [r4, #16]
   2257e:	b36b      	cbz	r3, 225dc <__swbuf_r+0x84>
   22580:	6923      	ldr	r3, [r4, #16]
   22582:	b2f6      	uxtb	r6, r6
   22584:	6820      	ldr	r0, [r4, #0]
   22586:	4637      	mov	r7, r6
   22588:	1ac0      	subs	r0, r0, r3
   2258a:	6963      	ldr	r3, [r4, #20]
   2258c:	4283      	cmp	r3, r0
   2258e:	dc04      	bgt.n	2259a <__swbuf_r+0x42>
   22590:	4621      	mov	r1, r4
   22592:	4628      	mov	r0, r5
   22594:	f000 f948 	bl	22828 <_fflush_r>
   22598:	bb30      	cbnz	r0, 225e8 <__swbuf_r+0x90>
   2259a:	68a3      	ldr	r3, [r4, #8]
   2259c:	3001      	adds	r0, #1
   2259e:	3b01      	subs	r3, #1
   225a0:	60a3      	str	r3, [r4, #8]
   225a2:	6823      	ldr	r3, [r4, #0]
   225a4:	1c5a      	adds	r2, r3, #1
   225a6:	6022      	str	r2, [r4, #0]
   225a8:	701e      	strb	r6, [r3, #0]
   225aa:	6963      	ldr	r3, [r4, #20]
   225ac:	4283      	cmp	r3, r0
   225ae:	d004      	beq.n	225ba <__swbuf_r+0x62>
   225b0:	89a3      	ldrh	r3, [r4, #12]
   225b2:	07db      	lsls	r3, r3, #31
   225b4:	d506      	bpl.n	225c4 <__swbuf_r+0x6c>
   225b6:	2e0a      	cmp	r6, #10
   225b8:	d104      	bne.n	225c4 <__swbuf_r+0x6c>
   225ba:	4621      	mov	r1, r4
   225bc:	4628      	mov	r0, r5
   225be:	f000 f933 	bl	22828 <_fflush_r>
   225c2:	b988      	cbnz	r0, 225e8 <__swbuf_r+0x90>
   225c4:	4638      	mov	r0, r7
   225c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   225c8:	4b0a      	ldr	r3, [pc, #40]	; (225f4 <__swbuf_r+0x9c>)
   225ca:	429c      	cmp	r4, r3
   225cc:	d101      	bne.n	225d2 <__swbuf_r+0x7a>
   225ce:	68ac      	ldr	r4, [r5, #8]
   225d0:	e7cf      	b.n	22572 <__swbuf_r+0x1a>
   225d2:	4b09      	ldr	r3, [pc, #36]	; (225f8 <__swbuf_r+0xa0>)
   225d4:	429c      	cmp	r4, r3
   225d6:	bf08      	it	eq
   225d8:	68ec      	ldreq	r4, [r5, #12]
   225da:	e7ca      	b.n	22572 <__swbuf_r+0x1a>
   225dc:	4621      	mov	r1, r4
   225de:	4628      	mov	r0, r5
   225e0:	f000 f80c 	bl	225fc <__swsetup_r>
   225e4:	2800      	cmp	r0, #0
   225e6:	d0cb      	beq.n	22580 <__swbuf_r+0x28>
   225e8:	f04f 37ff 	mov.w	r7, #4294967295
   225ec:	e7ea      	b.n	225c4 <__swbuf_r+0x6c>
   225ee:	bf00      	nop
   225f0:	00028568 	.word	0x00028568
   225f4:	00028588 	.word	0x00028588
   225f8:	00028548 	.word	0x00028548

000225fc <__swsetup_r>:
   225fc:	4b32      	ldr	r3, [pc, #200]	; (226c8 <__swsetup_r+0xcc>)
   225fe:	b570      	push	{r4, r5, r6, lr}
   22600:	681d      	ldr	r5, [r3, #0]
   22602:	4606      	mov	r6, r0
   22604:	460c      	mov	r4, r1
   22606:	b125      	cbz	r5, 22612 <__swsetup_r+0x16>
   22608:	69ab      	ldr	r3, [r5, #24]
   2260a:	b913      	cbnz	r3, 22612 <__swsetup_r+0x16>
   2260c:	4628      	mov	r0, r5
   2260e:	f000 f989 	bl	22924 <__sinit>
   22612:	4b2e      	ldr	r3, [pc, #184]	; (226cc <__swsetup_r+0xd0>)
   22614:	429c      	cmp	r4, r3
   22616:	d10f      	bne.n	22638 <__swsetup_r+0x3c>
   22618:	686c      	ldr	r4, [r5, #4]
   2261a:	89a3      	ldrh	r3, [r4, #12]
   2261c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   22620:	0719      	lsls	r1, r3, #28
   22622:	d42c      	bmi.n	2267e <__swsetup_r+0x82>
   22624:	06dd      	lsls	r5, r3, #27
   22626:	d411      	bmi.n	2264c <__swsetup_r+0x50>
   22628:	2309      	movs	r3, #9
   2262a:	6033      	str	r3, [r6, #0]
   2262c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   22630:	f04f 30ff 	mov.w	r0, #4294967295
   22634:	81a3      	strh	r3, [r4, #12]
   22636:	e03e      	b.n	226b6 <__swsetup_r+0xba>
   22638:	4b25      	ldr	r3, [pc, #148]	; (226d0 <__swsetup_r+0xd4>)
   2263a:	429c      	cmp	r4, r3
   2263c:	d101      	bne.n	22642 <__swsetup_r+0x46>
   2263e:	68ac      	ldr	r4, [r5, #8]
   22640:	e7eb      	b.n	2261a <__swsetup_r+0x1e>
   22642:	4b24      	ldr	r3, [pc, #144]	; (226d4 <__swsetup_r+0xd8>)
   22644:	429c      	cmp	r4, r3
   22646:	bf08      	it	eq
   22648:	68ec      	ldreq	r4, [r5, #12]
   2264a:	e7e6      	b.n	2261a <__swsetup_r+0x1e>
   2264c:	0758      	lsls	r0, r3, #29
   2264e:	d512      	bpl.n	22676 <__swsetup_r+0x7a>
   22650:	6b61      	ldr	r1, [r4, #52]	; 0x34
   22652:	b141      	cbz	r1, 22666 <__swsetup_r+0x6a>
   22654:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22658:	4299      	cmp	r1, r3
   2265a:	d002      	beq.n	22662 <__swsetup_r+0x66>
   2265c:	4630      	mov	r0, r6
   2265e:	f000 fa79 	bl	22b54 <_free_r>
   22662:	2300      	movs	r3, #0
   22664:	6363      	str	r3, [r4, #52]	; 0x34
   22666:	89a3      	ldrh	r3, [r4, #12]
   22668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2266c:	81a3      	strh	r3, [r4, #12]
   2266e:	2300      	movs	r3, #0
   22670:	6063      	str	r3, [r4, #4]
   22672:	6923      	ldr	r3, [r4, #16]
   22674:	6023      	str	r3, [r4, #0]
   22676:	89a3      	ldrh	r3, [r4, #12]
   22678:	f043 0308 	orr.w	r3, r3, #8
   2267c:	81a3      	strh	r3, [r4, #12]
   2267e:	6923      	ldr	r3, [r4, #16]
   22680:	b94b      	cbnz	r3, 22696 <__swsetup_r+0x9a>
   22682:	89a3      	ldrh	r3, [r4, #12]
   22684:	f403 7320 	and.w	r3, r3, #640	; 0x280
   22688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2268c:	d003      	beq.n	22696 <__swsetup_r+0x9a>
   2268e:	4621      	mov	r1, r4
   22690:	4630      	mov	r0, r6
   22692:	f000 f9c9 	bl	22a28 <__smakebuf_r>
   22696:	89a0      	ldrh	r0, [r4, #12]
   22698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2269c:	f010 0301 	ands.w	r3, r0, #1
   226a0:	d00a      	beq.n	226b8 <__swsetup_r+0xbc>
   226a2:	2300      	movs	r3, #0
   226a4:	60a3      	str	r3, [r4, #8]
   226a6:	6963      	ldr	r3, [r4, #20]
   226a8:	425b      	negs	r3, r3
   226aa:	61a3      	str	r3, [r4, #24]
   226ac:	6923      	ldr	r3, [r4, #16]
   226ae:	b943      	cbnz	r3, 226c2 <__swsetup_r+0xc6>
   226b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   226b4:	d1ba      	bne.n	2262c <__swsetup_r+0x30>
   226b6:	bd70      	pop	{r4, r5, r6, pc}
   226b8:	0781      	lsls	r1, r0, #30
   226ba:	bf58      	it	pl
   226bc:	6963      	ldrpl	r3, [r4, #20]
   226be:	60a3      	str	r3, [r4, #8]
   226c0:	e7f4      	b.n	226ac <__swsetup_r+0xb0>
   226c2:	2000      	movs	r0, #0
   226c4:	e7f7      	b.n	226b6 <__swsetup_r+0xba>
   226c6:	bf00      	nop
   226c8:	200203e4 	.word	0x200203e4
   226cc:	00028568 	.word	0x00028568
   226d0:	00028588 	.word	0x00028588
   226d4:	00028548 	.word	0x00028548

000226d8 <__chk_fail>:
   226d8:	b500      	push	{lr}
   226da:	b08d      	sub	sp, #52	; 0x34
   226dc:	4b0f      	ldr	r3, [pc, #60]	; (2271c <__chk_fail+0x44>)
   226de:	466a      	mov	r2, sp
   226e0:	f103 0628 	add.w	r6, r3, #40	; 0x28
   226e4:	4615      	mov	r5, r2
   226e6:	6818      	ldr	r0, [r3, #0]
   226e8:	3308      	adds	r3, #8
   226ea:	f853 1c04 	ldr.w	r1, [r3, #-4]
   226ee:	4614      	mov	r4, r2
   226f0:	42b3      	cmp	r3, r6
   226f2:	c403      	stmia	r4!, {r0, r1}
   226f4:	4622      	mov	r2, r4
   226f6:	d1f6      	bne.n	226e6 <__chk_fail+0xe>
   226f8:	6818      	ldr	r0, [r3, #0]
   226fa:	889b      	ldrh	r3, [r3, #4]
   226fc:	6020      	str	r0, [r4, #0]
   226fe:	4628      	mov	r0, r5
   22700:	80a3      	strh	r3, [r4, #4]
   22702:	f7ea fbb5 	bl	ce70 <strlen>
   22706:	4629      	mov	r1, r5
   22708:	4602      	mov	r2, r0
   2270a:	2002      	movs	r0, #2
   2270c:	f001 fe16 	bl	2433c <_write>
   22710:	2006      	movs	r0, #6
   22712:	f000 fbd9 	bl	22ec8 <raise>
   22716:	207f      	movs	r0, #127	; 0x7f
   22718:	f7f2 f94a 	bl	149b0 <_exit>
   2271c:	0002aab3 	.word	0x0002aab3

00022720 <__sflush_r>:
   22720:	898a      	ldrh	r2, [r1, #12]
   22722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22726:	4605      	mov	r5, r0
   22728:	0710      	lsls	r0, r2, #28
   2272a:	460c      	mov	r4, r1
   2272c:	d458      	bmi.n	227e0 <__sflush_r+0xc0>
   2272e:	684b      	ldr	r3, [r1, #4]
   22730:	2b00      	cmp	r3, #0
   22732:	dc05      	bgt.n	22740 <__sflush_r+0x20>
   22734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   22736:	2b00      	cmp	r3, #0
   22738:	dc02      	bgt.n	22740 <__sflush_r+0x20>
   2273a:	2000      	movs	r0, #0
   2273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   22742:	2e00      	cmp	r6, #0
   22744:	d0f9      	beq.n	2273a <__sflush_r+0x1a>
   22746:	2300      	movs	r3, #0
   22748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2274c:	682f      	ldr	r7, [r5, #0]
   2274e:	602b      	str	r3, [r5, #0]
   22750:	d032      	beq.n	227b8 <__sflush_r+0x98>
   22752:	6d60      	ldr	r0, [r4, #84]	; 0x54
   22754:	89a3      	ldrh	r3, [r4, #12]
   22756:	075a      	lsls	r2, r3, #29
   22758:	d505      	bpl.n	22766 <__sflush_r+0x46>
   2275a:	6863      	ldr	r3, [r4, #4]
   2275c:	1ac0      	subs	r0, r0, r3
   2275e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22760:	b10b      	cbz	r3, 22766 <__sflush_r+0x46>
   22762:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22764:	1ac0      	subs	r0, r0, r3
   22766:	2300      	movs	r3, #0
   22768:	4602      	mov	r2, r0
   2276a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2276c:	4628      	mov	r0, r5
   2276e:	6a21      	ldr	r1, [r4, #32]
   22770:	47b0      	blx	r6
   22772:	1c43      	adds	r3, r0, #1
   22774:	89a3      	ldrh	r3, [r4, #12]
   22776:	d106      	bne.n	22786 <__sflush_r+0x66>
   22778:	6829      	ldr	r1, [r5, #0]
   2277a:	291d      	cmp	r1, #29
   2277c:	d82c      	bhi.n	227d8 <__sflush_r+0xb8>
   2277e:	4a29      	ldr	r2, [pc, #164]	; (22824 <__sflush_r+0x104>)
   22780:	40ca      	lsrs	r2, r1
   22782:	07d6      	lsls	r6, r2, #31
   22784:	d528      	bpl.n	227d8 <__sflush_r+0xb8>
   22786:	2200      	movs	r2, #0
   22788:	04d9      	lsls	r1, r3, #19
   2278a:	6062      	str	r2, [r4, #4]
   2278c:	6922      	ldr	r2, [r4, #16]
   2278e:	6022      	str	r2, [r4, #0]
   22790:	d504      	bpl.n	2279c <__sflush_r+0x7c>
   22792:	1c42      	adds	r2, r0, #1
   22794:	d101      	bne.n	2279a <__sflush_r+0x7a>
   22796:	682b      	ldr	r3, [r5, #0]
   22798:	b903      	cbnz	r3, 2279c <__sflush_r+0x7c>
   2279a:	6560      	str	r0, [r4, #84]	; 0x54
   2279c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2279e:	602f      	str	r7, [r5, #0]
   227a0:	2900      	cmp	r1, #0
   227a2:	d0ca      	beq.n	2273a <__sflush_r+0x1a>
   227a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   227a8:	4299      	cmp	r1, r3
   227aa:	d002      	beq.n	227b2 <__sflush_r+0x92>
   227ac:	4628      	mov	r0, r5
   227ae:	f000 f9d1 	bl	22b54 <_free_r>
   227b2:	2000      	movs	r0, #0
   227b4:	6360      	str	r0, [r4, #52]	; 0x34
   227b6:	e7c1      	b.n	2273c <__sflush_r+0x1c>
   227b8:	6a21      	ldr	r1, [r4, #32]
   227ba:	2301      	movs	r3, #1
   227bc:	4628      	mov	r0, r5
   227be:	47b0      	blx	r6
   227c0:	1c41      	adds	r1, r0, #1
   227c2:	d1c7      	bne.n	22754 <__sflush_r+0x34>
   227c4:	682b      	ldr	r3, [r5, #0]
   227c6:	2b00      	cmp	r3, #0
   227c8:	d0c4      	beq.n	22754 <__sflush_r+0x34>
   227ca:	2b1d      	cmp	r3, #29
   227cc:	d001      	beq.n	227d2 <__sflush_r+0xb2>
   227ce:	2b16      	cmp	r3, #22
   227d0:	d101      	bne.n	227d6 <__sflush_r+0xb6>
   227d2:	602f      	str	r7, [r5, #0]
   227d4:	e7b1      	b.n	2273a <__sflush_r+0x1a>
   227d6:	89a3      	ldrh	r3, [r4, #12]
   227d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   227dc:	81a3      	strh	r3, [r4, #12]
   227de:	e7ad      	b.n	2273c <__sflush_r+0x1c>
   227e0:	690f      	ldr	r7, [r1, #16]
   227e2:	2f00      	cmp	r7, #0
   227e4:	d0a9      	beq.n	2273a <__sflush_r+0x1a>
   227e6:	0793      	lsls	r3, r2, #30
   227e8:	680e      	ldr	r6, [r1, #0]
   227ea:	600f      	str	r7, [r1, #0]
   227ec:	bf0c      	ite	eq
   227ee:	694b      	ldreq	r3, [r1, #20]
   227f0:	2300      	movne	r3, #0
   227f2:	eba6 0807 	sub.w	r8, r6, r7
   227f6:	608b      	str	r3, [r1, #8]
   227f8:	f1b8 0f00 	cmp.w	r8, #0
   227fc:	dd9d      	ble.n	2273a <__sflush_r+0x1a>
   227fe:	4643      	mov	r3, r8
   22800:	463a      	mov	r2, r7
   22802:	6a21      	ldr	r1, [r4, #32]
   22804:	4628      	mov	r0, r5
   22806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   22808:	47b0      	blx	r6
   2280a:	2800      	cmp	r0, #0
   2280c:	dc06      	bgt.n	2281c <__sflush_r+0xfc>
   2280e:	89a3      	ldrh	r3, [r4, #12]
   22810:	f04f 30ff 	mov.w	r0, #4294967295
   22814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22818:	81a3      	strh	r3, [r4, #12]
   2281a:	e78f      	b.n	2273c <__sflush_r+0x1c>
   2281c:	4407      	add	r7, r0
   2281e:	eba8 0800 	sub.w	r8, r8, r0
   22822:	e7e9      	b.n	227f8 <__sflush_r+0xd8>
   22824:	20400001 	.word	0x20400001

00022828 <_fflush_r>:
   22828:	b538      	push	{r3, r4, r5, lr}
   2282a:	690b      	ldr	r3, [r1, #16]
   2282c:	4605      	mov	r5, r0
   2282e:	460c      	mov	r4, r1
   22830:	b913      	cbnz	r3, 22838 <_fflush_r+0x10>
   22832:	2500      	movs	r5, #0
   22834:	4628      	mov	r0, r5
   22836:	bd38      	pop	{r3, r4, r5, pc}
   22838:	b118      	cbz	r0, 22842 <_fflush_r+0x1a>
   2283a:	6983      	ldr	r3, [r0, #24]
   2283c:	b90b      	cbnz	r3, 22842 <_fflush_r+0x1a>
   2283e:	f000 f871 	bl	22924 <__sinit>
   22842:	4b14      	ldr	r3, [pc, #80]	; (22894 <_fflush_r+0x6c>)
   22844:	429c      	cmp	r4, r3
   22846:	d11b      	bne.n	22880 <_fflush_r+0x58>
   22848:	686c      	ldr	r4, [r5, #4]
   2284a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2284e:	2b00      	cmp	r3, #0
   22850:	d0ef      	beq.n	22832 <_fflush_r+0xa>
   22852:	6e62      	ldr	r2, [r4, #100]	; 0x64
   22854:	07d0      	lsls	r0, r2, #31
   22856:	d404      	bmi.n	22862 <_fflush_r+0x3a>
   22858:	0599      	lsls	r1, r3, #22
   2285a:	d402      	bmi.n	22862 <_fflush_r+0x3a>
   2285c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2285e:	f004 fbcf 	bl	27000 <__retarget_lock_acquire_recursive>
   22862:	4628      	mov	r0, r5
   22864:	4621      	mov	r1, r4
   22866:	f7ff ff5b 	bl	22720 <__sflush_r>
   2286a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2286c:	4605      	mov	r5, r0
   2286e:	07da      	lsls	r2, r3, #31
   22870:	d4e0      	bmi.n	22834 <_fflush_r+0xc>
   22872:	89a3      	ldrh	r3, [r4, #12]
   22874:	059b      	lsls	r3, r3, #22
   22876:	d4dd      	bmi.n	22834 <_fflush_r+0xc>
   22878:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2287a:	f004 fbc2 	bl	27002 <__retarget_lock_release_recursive>
   2287e:	e7d9      	b.n	22834 <_fflush_r+0xc>
   22880:	4b05      	ldr	r3, [pc, #20]	; (22898 <_fflush_r+0x70>)
   22882:	429c      	cmp	r4, r3
   22884:	d101      	bne.n	2288a <_fflush_r+0x62>
   22886:	68ac      	ldr	r4, [r5, #8]
   22888:	e7df      	b.n	2284a <_fflush_r+0x22>
   2288a:	4b04      	ldr	r3, [pc, #16]	; (2289c <_fflush_r+0x74>)
   2288c:	429c      	cmp	r4, r3
   2288e:	bf08      	it	eq
   22890:	68ec      	ldreq	r4, [r5, #12]
   22892:	e7da      	b.n	2284a <_fflush_r+0x22>
   22894:	00028568 	.word	0x00028568
   22898:	00028588 	.word	0x00028588
   2289c:	00028548 	.word	0x00028548

000228a0 <std>:
   228a0:	2300      	movs	r3, #0
   228a2:	b510      	push	{r4, lr}
   228a4:	4604      	mov	r4, r0
   228a6:	6083      	str	r3, [r0, #8]
   228a8:	8181      	strh	r1, [r0, #12]
   228aa:	4619      	mov	r1, r3
   228ac:	6643      	str	r3, [r0, #100]	; 0x64
   228ae:	81c2      	strh	r2, [r0, #14]
   228b0:	2208      	movs	r2, #8
   228b2:	6183      	str	r3, [r0, #24]
   228b4:	e9c0 3300 	strd	r3, r3, [r0]
   228b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   228bc:	305c      	adds	r0, #92	; 0x5c
   228be:	f004 f8af 	bl	26a20 <memset>
   228c2:	4b05      	ldr	r3, [pc, #20]	; (228d8 <std+0x38>)
   228c4:	6224      	str	r4, [r4, #32]
   228c6:	6263      	str	r3, [r4, #36]	; 0x24
   228c8:	4b04      	ldr	r3, [pc, #16]	; (228dc <std+0x3c>)
   228ca:	62a3      	str	r3, [r4, #40]	; 0x28
   228cc:	4b04      	ldr	r3, [pc, #16]	; (228e0 <std+0x40>)
   228ce:	62e3      	str	r3, [r4, #44]	; 0x2c
   228d0:	4b04      	ldr	r3, [pc, #16]	; (228e4 <std+0x44>)
   228d2:	6323      	str	r3, [r4, #48]	; 0x30
   228d4:	bd10      	pop	{r4, pc}
   228d6:	bf00      	nop
   228d8:	00027781 	.word	0x00027781
   228dc:	000277a3 	.word	0x000277a3
   228e0:	000277db 	.word	0x000277db
   228e4:	000277ff 	.word	0x000277ff

000228e8 <_cleanup_r>:
   228e8:	4901      	ldr	r1, [pc, #4]	; (228f0 <_cleanup_r+0x8>)
   228ea:	f004 bb69 	b.w	26fc0 <_fwalk_reent>
   228ee:	bf00      	nop
   228f0:	00022829 	.word	0x00022829

000228f4 <__sfp_lock_acquire>:
   228f4:	4801      	ldr	r0, [pc, #4]	; (228fc <__sfp_lock_acquire+0x8>)
   228f6:	f004 bb83 	b.w	27000 <__retarget_lock_acquire_recursive>
   228fa:	bf00      	nop
   228fc:	2002a208 	.word	0x2002a208

00022900 <__sfp_lock_release>:
   22900:	4801      	ldr	r0, [pc, #4]	; (22908 <__sfp_lock_release+0x8>)
   22902:	f004 bb7e 	b.w	27002 <__retarget_lock_release_recursive>
   22906:	bf00      	nop
   22908:	2002a208 	.word	0x2002a208

0002290c <__sinit_lock_acquire>:
   2290c:	4801      	ldr	r0, [pc, #4]	; (22914 <__sinit_lock_acquire+0x8>)
   2290e:	f004 bb77 	b.w	27000 <__retarget_lock_acquire_recursive>
   22912:	bf00      	nop
   22914:	2002a203 	.word	0x2002a203

00022918 <__sinit_lock_release>:
   22918:	4801      	ldr	r0, [pc, #4]	; (22920 <__sinit_lock_release+0x8>)
   2291a:	f004 bb72 	b.w	27002 <__retarget_lock_release_recursive>
   2291e:	bf00      	nop
   22920:	2002a203 	.word	0x2002a203

00022924 <__sinit>:
   22924:	b510      	push	{r4, lr}
   22926:	4604      	mov	r4, r0
   22928:	f7ff fff0 	bl	2290c <__sinit_lock_acquire>
   2292c:	69a3      	ldr	r3, [r4, #24]
   2292e:	b11b      	cbz	r3, 22938 <__sinit+0x14>
   22930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22934:	f7ff bff0 	b.w	22918 <__sinit_lock_release>
   22938:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2293c:	6523      	str	r3, [r4, #80]	; 0x50
   2293e:	4620      	mov	r0, r4
   22940:	4b12      	ldr	r3, [pc, #72]	; (2298c <__sinit+0x68>)
   22942:	4a13      	ldr	r2, [pc, #76]	; (22990 <__sinit+0x6c>)
   22944:	681b      	ldr	r3, [r3, #0]
   22946:	62a2      	str	r2, [r4, #40]	; 0x28
   22948:	42a3      	cmp	r3, r4
   2294a:	bf04      	itt	eq
   2294c:	2301      	moveq	r3, #1
   2294e:	61a3      	streq	r3, [r4, #24]
   22950:	f000 f820 	bl	22994 <__sfp>
   22954:	6060      	str	r0, [r4, #4]
   22956:	4620      	mov	r0, r4
   22958:	f000 f81c 	bl	22994 <__sfp>
   2295c:	60a0      	str	r0, [r4, #8]
   2295e:	4620      	mov	r0, r4
   22960:	f000 f818 	bl	22994 <__sfp>
   22964:	2200      	movs	r2, #0
   22966:	2104      	movs	r1, #4
   22968:	60e0      	str	r0, [r4, #12]
   2296a:	6860      	ldr	r0, [r4, #4]
   2296c:	f7ff ff98 	bl	228a0 <std>
   22970:	2201      	movs	r2, #1
   22972:	2109      	movs	r1, #9
   22974:	68a0      	ldr	r0, [r4, #8]
   22976:	f7ff ff93 	bl	228a0 <std>
   2297a:	2202      	movs	r2, #2
   2297c:	2112      	movs	r1, #18
   2297e:	68e0      	ldr	r0, [r4, #12]
   22980:	f7ff ff8e 	bl	228a0 <std>
   22984:	2301      	movs	r3, #1
   22986:	61a3      	str	r3, [r4, #24]
   22988:	e7d2      	b.n	22930 <__sinit+0xc>
   2298a:	bf00      	nop
   2298c:	00028544 	.word	0x00028544
   22990:	000228e9 	.word	0x000228e9

00022994 <__sfp>:
   22994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22996:	4607      	mov	r7, r0
   22998:	f7ff ffac 	bl	228f4 <__sfp_lock_acquire>
   2299c:	4b1e      	ldr	r3, [pc, #120]	; (22a18 <__sfp+0x84>)
   2299e:	681e      	ldr	r6, [r3, #0]
   229a0:	69b3      	ldr	r3, [r6, #24]
   229a2:	b913      	cbnz	r3, 229aa <__sfp+0x16>
   229a4:	4630      	mov	r0, r6
   229a6:	f7ff ffbd 	bl	22924 <__sinit>
   229aa:	3648      	adds	r6, #72	; 0x48
   229ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   229b0:	3b01      	subs	r3, #1
   229b2:	d503      	bpl.n	229bc <__sfp+0x28>
   229b4:	6833      	ldr	r3, [r6, #0]
   229b6:	b30b      	cbz	r3, 229fc <__sfp+0x68>
   229b8:	6836      	ldr	r6, [r6, #0]
   229ba:	e7f7      	b.n	229ac <__sfp+0x18>
   229bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   229c0:	b9d5      	cbnz	r5, 229f8 <__sfp+0x64>
   229c2:	4b16      	ldr	r3, [pc, #88]	; (22a1c <__sfp+0x88>)
   229c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   229c8:	6665      	str	r5, [r4, #100]	; 0x64
   229ca:	60e3      	str	r3, [r4, #12]
   229cc:	f004 fb17 	bl	26ffe <__retarget_lock_init_recursive>
   229d0:	f7ff ff96 	bl	22900 <__sfp_lock_release>
   229d4:	2208      	movs	r2, #8
   229d6:	4629      	mov	r1, r5
   229d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   229dc:	6025      	str	r5, [r4, #0]
   229de:	61a5      	str	r5, [r4, #24]
   229e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   229e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
   229e8:	f004 f81a 	bl	26a20 <memset>
   229ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   229f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   229f4:	4620      	mov	r0, r4
   229f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   229f8:	3468      	adds	r4, #104	; 0x68
   229fa:	e7d9      	b.n	229b0 <__sfp+0x1c>
   229fc:	2104      	movs	r1, #4
   229fe:	4638      	mov	r0, r7
   22a00:	f004 fac8 	bl	26f94 <__sfmoreglue>
   22a04:	4604      	mov	r4, r0
   22a06:	6030      	str	r0, [r6, #0]
   22a08:	2800      	cmp	r0, #0
   22a0a:	d1d5      	bne.n	229b8 <__sfp+0x24>
   22a0c:	f7ff ff78 	bl	22900 <__sfp_lock_release>
   22a10:	230c      	movs	r3, #12
   22a12:	603b      	str	r3, [r7, #0]
   22a14:	e7ee      	b.n	229f4 <__sfp+0x60>
   22a16:	bf00      	nop
   22a18:	00028544 	.word	0x00028544
   22a1c:	ffff0001 	.word	0xffff0001

00022a20 <_localeconv_r>:
   22a20:	4800      	ldr	r0, [pc, #0]	; (22a24 <_localeconv_r+0x4>)
   22a22:	4770      	bx	lr
   22a24:	20020538 	.word	0x20020538

00022a28 <__smakebuf_r>:
   22a28:	898b      	ldrh	r3, [r1, #12]
   22a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22a2c:	079d      	lsls	r5, r3, #30
   22a2e:	4606      	mov	r6, r0
   22a30:	460c      	mov	r4, r1
   22a32:	d507      	bpl.n	22a44 <__smakebuf_r+0x1c>
   22a34:	f104 0347 	add.w	r3, r4, #71	; 0x47
   22a38:	6023      	str	r3, [r4, #0]
   22a3a:	6123      	str	r3, [r4, #16]
   22a3c:	2301      	movs	r3, #1
   22a3e:	6163      	str	r3, [r4, #20]
   22a40:	b002      	add	sp, #8
   22a42:	bd70      	pop	{r4, r5, r6, pc}
   22a44:	ab01      	add	r3, sp, #4
   22a46:	466a      	mov	r2, sp
   22a48:	f004 fadc 	bl	27004 <__swhatbuf_r>
   22a4c:	9900      	ldr	r1, [sp, #0]
   22a4e:	4605      	mov	r5, r0
   22a50:	4630      	mov	r0, r6
   22a52:	f000 f8cf 	bl	22bf4 <_malloc_r>
   22a56:	b948      	cbnz	r0, 22a6c <__smakebuf_r+0x44>
   22a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22a5c:	059a      	lsls	r2, r3, #22
   22a5e:	d4ef      	bmi.n	22a40 <__smakebuf_r+0x18>
   22a60:	f023 0303 	bic.w	r3, r3, #3
   22a64:	f043 0302 	orr.w	r3, r3, #2
   22a68:	81a3      	strh	r3, [r4, #12]
   22a6a:	e7e3      	b.n	22a34 <__smakebuf_r+0xc>
   22a6c:	4b0d      	ldr	r3, [pc, #52]	; (22aa4 <__smakebuf_r+0x7c>)
   22a6e:	62b3      	str	r3, [r6, #40]	; 0x28
   22a70:	89a3      	ldrh	r3, [r4, #12]
   22a72:	6020      	str	r0, [r4, #0]
   22a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22a78:	6120      	str	r0, [r4, #16]
   22a7a:	81a3      	strh	r3, [r4, #12]
   22a7c:	9b00      	ldr	r3, [sp, #0]
   22a7e:	6163      	str	r3, [r4, #20]
   22a80:	9b01      	ldr	r3, [sp, #4]
   22a82:	b15b      	cbz	r3, 22a9c <__smakebuf_r+0x74>
   22a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22a88:	4630      	mov	r0, r6
   22a8a:	f000 fa6b 	bl	22f64 <_isatty_r>
   22a8e:	b128      	cbz	r0, 22a9c <__smakebuf_r+0x74>
   22a90:	89a3      	ldrh	r3, [r4, #12]
   22a92:	f023 0303 	bic.w	r3, r3, #3
   22a96:	f043 0301 	orr.w	r3, r3, #1
   22a9a:	81a3      	strh	r3, [r4, #12]
   22a9c:	89a0      	ldrh	r0, [r4, #12]
   22a9e:	4305      	orrs	r5, r0
   22aa0:	81a5      	strh	r5, [r4, #12]
   22aa2:	e7cd      	b.n	22a40 <__smakebuf_r+0x18>
   22aa4:	000228e9 	.word	0x000228e9

00022aa8 <malloc>:
   22aa8:	4b02      	ldr	r3, [pc, #8]	; (22ab4 <malloc+0xc>)
   22aaa:	4601      	mov	r1, r0
   22aac:	6818      	ldr	r0, [r3, #0]
   22aae:	f000 b8a1 	b.w	22bf4 <_malloc_r>
   22ab2:	bf00      	nop
   22ab4:	200203e4 	.word	0x200203e4

00022ab8 <__pow5mult>:
   22ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22abc:	4615      	mov	r5, r2
   22abe:	f012 0203 	ands.w	r2, r2, #3
   22ac2:	4606      	mov	r6, r0
   22ac4:	460f      	mov	r7, r1
   22ac6:	d007      	beq.n	22ad8 <__pow5mult+0x20>
   22ac8:	3a01      	subs	r2, #1
   22aca:	4c21      	ldr	r4, [pc, #132]	; (22b50 <__pow5mult+0x98>)
   22acc:	2300      	movs	r3, #0
   22ace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   22ad2:	f004 fb20 	bl	27116 <__multadd>
   22ad6:	4607      	mov	r7, r0
   22ad8:	10ad      	asrs	r5, r5, #2
   22ada:	d035      	beq.n	22b48 <__pow5mult+0x90>
   22adc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   22ade:	b93c      	cbnz	r4, 22af0 <__pow5mult+0x38>
   22ae0:	2010      	movs	r0, #16
   22ae2:	f7ff ffe1 	bl	22aa8 <malloc>
   22ae6:	6270      	str	r0, [r6, #36]	; 0x24
   22ae8:	6004      	str	r4, [r0, #0]
   22aea:	60c4      	str	r4, [r0, #12]
   22aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
   22af0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   22af4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   22af8:	b94c      	cbnz	r4, 22b0e <__pow5mult+0x56>
   22afa:	f240 2171 	movw	r1, #625	; 0x271
   22afe:	4630      	mov	r0, r6
   22b00:	f004 fb98 	bl	27234 <__i2b>
   22b04:	2300      	movs	r3, #0
   22b06:	4604      	mov	r4, r0
   22b08:	f8c8 0008 	str.w	r0, [r8, #8]
   22b0c:	6003      	str	r3, [r0, #0]
   22b0e:	f04f 0900 	mov.w	r9, #0
   22b12:	07eb      	lsls	r3, r5, #31
   22b14:	d50a      	bpl.n	22b2c <__pow5mult+0x74>
   22b16:	4639      	mov	r1, r7
   22b18:	4622      	mov	r2, r4
   22b1a:	4630      	mov	r0, r6
   22b1c:	f004 fb93 	bl	27246 <__multiply>
   22b20:	4680      	mov	r8, r0
   22b22:	4639      	mov	r1, r7
   22b24:	4630      	mov	r0, r6
   22b26:	4647      	mov	r7, r8
   22b28:	f004 fade 	bl	270e8 <_Bfree>
   22b2c:	106d      	asrs	r5, r5, #1
   22b2e:	d00b      	beq.n	22b48 <__pow5mult+0x90>
   22b30:	6820      	ldr	r0, [r4, #0]
   22b32:	b938      	cbnz	r0, 22b44 <__pow5mult+0x8c>
   22b34:	4622      	mov	r2, r4
   22b36:	4621      	mov	r1, r4
   22b38:	4630      	mov	r0, r6
   22b3a:	f004 fb84 	bl	27246 <__multiply>
   22b3e:	6020      	str	r0, [r4, #0]
   22b40:	f8c0 9000 	str.w	r9, [r0]
   22b44:	4604      	mov	r4, r0
   22b46:	e7e4      	b.n	22b12 <__pow5mult+0x5a>
   22b48:	4638      	mov	r0, r7
   22b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22b4e:	bf00      	nop
   22b50:	000285a8 	.word	0x000285a8

00022b54 <_free_r>:
   22b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22b56:	2900      	cmp	r1, #0
   22b58:	d047      	beq.n	22bea <_free_r+0x96>
   22b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22b5e:	1f0c      	subs	r4, r1, #4
   22b60:	9001      	str	r0, [sp, #4]
   22b62:	2b00      	cmp	r3, #0
   22b64:	bfb8      	it	lt
   22b66:	18e4      	addlt	r4, r4, r3
   22b68:	f000 fa1e 	bl	22fa8 <__malloc_lock>
   22b6c:	4a20      	ldr	r2, [pc, #128]	; (22bf0 <_free_r+0x9c>)
   22b6e:	9801      	ldr	r0, [sp, #4]
   22b70:	6813      	ldr	r3, [r2, #0]
   22b72:	4615      	mov	r5, r2
   22b74:	b933      	cbnz	r3, 22b84 <_free_r+0x30>
   22b76:	6063      	str	r3, [r4, #4]
   22b78:	6014      	str	r4, [r2, #0]
   22b7a:	b003      	add	sp, #12
   22b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   22b80:	f000 ba18 	b.w	22fb4 <__malloc_unlock>
   22b84:	42a3      	cmp	r3, r4
   22b86:	d90b      	bls.n	22ba0 <_free_r+0x4c>
   22b88:	6821      	ldr	r1, [r4, #0]
   22b8a:	1862      	adds	r2, r4, r1
   22b8c:	4293      	cmp	r3, r2
   22b8e:	bf02      	ittt	eq
   22b90:	681a      	ldreq	r2, [r3, #0]
   22b92:	685b      	ldreq	r3, [r3, #4]
   22b94:	1852      	addeq	r2, r2, r1
   22b96:	6063      	str	r3, [r4, #4]
   22b98:	bf08      	it	eq
   22b9a:	6022      	streq	r2, [r4, #0]
   22b9c:	602c      	str	r4, [r5, #0]
   22b9e:	e7ec      	b.n	22b7a <_free_r+0x26>
   22ba0:	461a      	mov	r2, r3
   22ba2:	685b      	ldr	r3, [r3, #4]
   22ba4:	b10b      	cbz	r3, 22baa <_free_r+0x56>
   22ba6:	42a3      	cmp	r3, r4
   22ba8:	d9fa      	bls.n	22ba0 <_free_r+0x4c>
   22baa:	6811      	ldr	r1, [r2, #0]
   22bac:	1855      	adds	r5, r2, r1
   22bae:	42a5      	cmp	r5, r4
   22bb0:	d10b      	bne.n	22bca <_free_r+0x76>
   22bb2:	6824      	ldr	r4, [r4, #0]
   22bb4:	4421      	add	r1, r4
   22bb6:	1854      	adds	r4, r2, r1
   22bb8:	6011      	str	r1, [r2, #0]
   22bba:	42a3      	cmp	r3, r4
   22bbc:	d1dd      	bne.n	22b7a <_free_r+0x26>
   22bbe:	681c      	ldr	r4, [r3, #0]
   22bc0:	685b      	ldr	r3, [r3, #4]
   22bc2:	4421      	add	r1, r4
   22bc4:	6053      	str	r3, [r2, #4]
   22bc6:	6011      	str	r1, [r2, #0]
   22bc8:	e7d7      	b.n	22b7a <_free_r+0x26>
   22bca:	d902      	bls.n	22bd2 <_free_r+0x7e>
   22bcc:	230c      	movs	r3, #12
   22bce:	6003      	str	r3, [r0, #0]
   22bd0:	e7d3      	b.n	22b7a <_free_r+0x26>
   22bd2:	6825      	ldr	r5, [r4, #0]
   22bd4:	1961      	adds	r1, r4, r5
   22bd6:	428b      	cmp	r3, r1
   22bd8:	bf02      	ittt	eq
   22bda:	6819      	ldreq	r1, [r3, #0]
   22bdc:	685b      	ldreq	r3, [r3, #4]
   22bde:	1949      	addeq	r1, r1, r5
   22be0:	6063      	str	r3, [r4, #4]
   22be2:	bf08      	it	eq
   22be4:	6021      	streq	r1, [r4, #0]
   22be6:	6054      	str	r4, [r2, #4]
   22be8:	e7c7      	b.n	22b7a <_free_r+0x26>
   22bea:	b003      	add	sp, #12
   22bec:	bd30      	pop	{r4, r5, pc}
   22bee:	bf00      	nop
   22bf0:	20026e5c 	.word	0x20026e5c

00022bf4 <_malloc_r>:
   22bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22bf6:	1ccd      	adds	r5, r1, #3
   22bf8:	4606      	mov	r6, r0
   22bfa:	f025 0503 	bic.w	r5, r5, #3
   22bfe:	3508      	adds	r5, #8
   22c00:	2d0c      	cmp	r5, #12
   22c02:	bf38      	it	cc
   22c04:	250c      	movcc	r5, #12
   22c06:	2d00      	cmp	r5, #0
   22c08:	db01      	blt.n	22c0e <_malloc_r+0x1a>
   22c0a:	42a9      	cmp	r1, r5
   22c0c:	d903      	bls.n	22c16 <_malloc_r+0x22>
   22c0e:	230c      	movs	r3, #12
   22c10:	6033      	str	r3, [r6, #0]
   22c12:	2000      	movs	r0, #0
   22c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c16:	f000 f9c7 	bl	22fa8 <__malloc_lock>
   22c1a:	4921      	ldr	r1, [pc, #132]	; (22ca0 <_malloc_r+0xac>)
   22c1c:	680a      	ldr	r2, [r1, #0]
   22c1e:	4614      	mov	r4, r2
   22c20:	b99c      	cbnz	r4, 22c4a <_malloc_r+0x56>
   22c22:	4f20      	ldr	r7, [pc, #128]	; (22ca4 <_malloc_r+0xb0>)
   22c24:	683b      	ldr	r3, [r7, #0]
   22c26:	b923      	cbnz	r3, 22c32 <_malloc_r+0x3e>
   22c28:	4621      	mov	r1, r4
   22c2a:	4630      	mov	r0, r6
   22c2c:	f000 f93c 	bl	22ea8 <_sbrk_r>
   22c30:	6038      	str	r0, [r7, #0]
   22c32:	4629      	mov	r1, r5
   22c34:	4630      	mov	r0, r6
   22c36:	f000 f937 	bl	22ea8 <_sbrk_r>
   22c3a:	1c43      	adds	r3, r0, #1
   22c3c:	d123      	bne.n	22c86 <_malloc_r+0x92>
   22c3e:	230c      	movs	r3, #12
   22c40:	4630      	mov	r0, r6
   22c42:	6033      	str	r3, [r6, #0]
   22c44:	f000 f9b6 	bl	22fb4 <__malloc_unlock>
   22c48:	e7e3      	b.n	22c12 <_malloc_r+0x1e>
   22c4a:	6823      	ldr	r3, [r4, #0]
   22c4c:	1b5b      	subs	r3, r3, r5
   22c4e:	d417      	bmi.n	22c80 <_malloc_r+0x8c>
   22c50:	2b0b      	cmp	r3, #11
   22c52:	d903      	bls.n	22c5c <_malloc_r+0x68>
   22c54:	6023      	str	r3, [r4, #0]
   22c56:	441c      	add	r4, r3
   22c58:	6025      	str	r5, [r4, #0]
   22c5a:	e004      	b.n	22c66 <_malloc_r+0x72>
   22c5c:	6863      	ldr	r3, [r4, #4]
   22c5e:	42a2      	cmp	r2, r4
   22c60:	bf0c      	ite	eq
   22c62:	600b      	streq	r3, [r1, #0]
   22c64:	6053      	strne	r3, [r2, #4]
   22c66:	4630      	mov	r0, r6
   22c68:	f000 f9a4 	bl	22fb4 <__malloc_unlock>
   22c6c:	f104 000b 	add.w	r0, r4, #11
   22c70:	1d23      	adds	r3, r4, #4
   22c72:	f020 0007 	bic.w	r0, r0, #7
   22c76:	1ac2      	subs	r2, r0, r3
   22c78:	d0cc      	beq.n	22c14 <_malloc_r+0x20>
   22c7a:	1a1b      	subs	r3, r3, r0
   22c7c:	50a3      	str	r3, [r4, r2]
   22c7e:	e7c9      	b.n	22c14 <_malloc_r+0x20>
   22c80:	4622      	mov	r2, r4
   22c82:	6864      	ldr	r4, [r4, #4]
   22c84:	e7cc      	b.n	22c20 <_malloc_r+0x2c>
   22c86:	1cc4      	adds	r4, r0, #3
   22c88:	f024 0403 	bic.w	r4, r4, #3
   22c8c:	42a0      	cmp	r0, r4
   22c8e:	d0e3      	beq.n	22c58 <_malloc_r+0x64>
   22c90:	1a21      	subs	r1, r4, r0
   22c92:	4630      	mov	r0, r6
   22c94:	f000 f908 	bl	22ea8 <_sbrk_r>
   22c98:	3001      	adds	r0, #1
   22c9a:	d1dd      	bne.n	22c58 <_malloc_r+0x64>
   22c9c:	e7cf      	b.n	22c3e <_malloc_r+0x4a>
   22c9e:	bf00      	nop
   22ca0:	20026e5c 	.word	0x20026e5c
   22ca4:	20026e60 	.word	0x20026e60

00022ca8 <_svfiprintf_r>:
   22ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22cac:	4698      	mov	r8, r3
   22cae:	898b      	ldrh	r3, [r1, #12]
   22cb0:	b09d      	sub	sp, #116	; 0x74
   22cb2:	4607      	mov	r7, r0
   22cb4:	061b      	lsls	r3, r3, #24
   22cb6:	460d      	mov	r5, r1
   22cb8:	4614      	mov	r4, r2
   22cba:	d50e      	bpl.n	22cda <_svfiprintf_r+0x32>
   22cbc:	690b      	ldr	r3, [r1, #16]
   22cbe:	b963      	cbnz	r3, 22cda <_svfiprintf_r+0x32>
   22cc0:	2140      	movs	r1, #64	; 0x40
   22cc2:	f7ff ff97 	bl	22bf4 <_malloc_r>
   22cc6:	6028      	str	r0, [r5, #0]
   22cc8:	6128      	str	r0, [r5, #16]
   22cca:	b920      	cbnz	r0, 22cd6 <_svfiprintf_r+0x2e>
   22ccc:	230c      	movs	r3, #12
   22cce:	603b      	str	r3, [r7, #0]
   22cd0:	f04f 30ff 	mov.w	r0, #4294967295
   22cd4:	e0d1      	b.n	22e7a <_svfiprintf_r+0x1d2>
   22cd6:	2340      	movs	r3, #64	; 0x40
   22cd8:	616b      	str	r3, [r5, #20]
   22cda:	2300      	movs	r3, #0
   22cdc:	f8cd 800c 	str.w	r8, [sp, #12]
   22ce0:	f04f 0901 	mov.w	r9, #1
   22ce4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 22e94 <_svfiprintf_r+0x1ec>
   22ce8:	9309      	str	r3, [sp, #36]	; 0x24
   22cea:	2320      	movs	r3, #32
   22cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   22cf0:	2330      	movs	r3, #48	; 0x30
   22cf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   22cf6:	4623      	mov	r3, r4
   22cf8:	469a      	mov	sl, r3
   22cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
   22cfe:	b10a      	cbz	r2, 22d04 <_svfiprintf_r+0x5c>
   22d00:	2a25      	cmp	r2, #37	; 0x25
   22d02:	d1f9      	bne.n	22cf8 <_svfiprintf_r+0x50>
   22d04:	ebba 0b04 	subs.w	fp, sl, r4
   22d08:	d00b      	beq.n	22d22 <_svfiprintf_r+0x7a>
   22d0a:	465b      	mov	r3, fp
   22d0c:	4622      	mov	r2, r4
   22d0e:	4629      	mov	r1, r5
   22d10:	4638      	mov	r0, r7
   22d12:	f004 fcb0 	bl	27676 <__ssputs_r>
   22d16:	3001      	adds	r0, #1
   22d18:	f000 80aa 	beq.w	22e70 <_svfiprintf_r+0x1c8>
   22d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22d1e:	445a      	add	r2, fp
   22d20:	9209      	str	r2, [sp, #36]	; 0x24
   22d22:	f89a 3000 	ldrb.w	r3, [sl]
   22d26:	2b00      	cmp	r3, #0
   22d28:	f000 80a2 	beq.w	22e70 <_svfiprintf_r+0x1c8>
   22d2c:	2300      	movs	r3, #0
   22d2e:	f04f 32ff 	mov.w	r2, #4294967295
   22d32:	f10a 0a01 	add.w	sl, sl, #1
   22d36:	9304      	str	r3, [sp, #16]
   22d38:	9307      	str	r3, [sp, #28]
   22d3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   22d3e:	931a      	str	r3, [sp, #104]	; 0x68
   22d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
   22d44:	4654      	mov	r4, sl
   22d46:	2205      	movs	r2, #5
   22d48:	4852      	ldr	r0, [pc, #328]	; (22e94 <_svfiprintf_r+0x1ec>)
   22d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
   22d4e:	f003 fe3e 	bl	269ce <memchr>
   22d52:	9a04      	ldr	r2, [sp, #16]
   22d54:	b9d8      	cbnz	r0, 22d8e <_svfiprintf_r+0xe6>
   22d56:	06d0      	lsls	r0, r2, #27
   22d58:	bf44      	itt	mi
   22d5a:	2320      	movmi	r3, #32
   22d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   22d60:	0711      	lsls	r1, r2, #28
   22d62:	bf44      	itt	mi
   22d64:	232b      	movmi	r3, #43	; 0x2b
   22d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   22d6a:	f89a 3000 	ldrb.w	r3, [sl]
   22d6e:	2b2a      	cmp	r3, #42	; 0x2a
   22d70:	d015      	beq.n	22d9e <_svfiprintf_r+0xf6>
   22d72:	9a07      	ldr	r2, [sp, #28]
   22d74:	4654      	mov	r4, sl
   22d76:	2000      	movs	r0, #0
   22d78:	f04f 0c0a 	mov.w	ip, #10
   22d7c:	4621      	mov	r1, r4
   22d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
   22d82:	3b30      	subs	r3, #48	; 0x30
   22d84:	2b09      	cmp	r3, #9
   22d86:	d94e      	bls.n	22e26 <_svfiprintf_r+0x17e>
   22d88:	b1b0      	cbz	r0, 22db8 <_svfiprintf_r+0x110>
   22d8a:	9207      	str	r2, [sp, #28]
   22d8c:	e014      	b.n	22db8 <_svfiprintf_r+0x110>
   22d8e:	eba0 0308 	sub.w	r3, r0, r8
   22d92:	46a2      	mov	sl, r4
   22d94:	fa09 f303 	lsl.w	r3, r9, r3
   22d98:	4313      	orrs	r3, r2
   22d9a:	9304      	str	r3, [sp, #16]
   22d9c:	e7d2      	b.n	22d44 <_svfiprintf_r+0x9c>
   22d9e:	9b03      	ldr	r3, [sp, #12]
   22da0:	1d19      	adds	r1, r3, #4
   22da2:	681b      	ldr	r3, [r3, #0]
   22da4:	2b00      	cmp	r3, #0
   22da6:	9103      	str	r1, [sp, #12]
   22da8:	bfbb      	ittet	lt
   22daa:	425b      	neglt	r3, r3
   22dac:	f042 0202 	orrlt.w	r2, r2, #2
   22db0:	9307      	strge	r3, [sp, #28]
   22db2:	9307      	strlt	r3, [sp, #28]
   22db4:	bfb8      	it	lt
   22db6:	9204      	strlt	r2, [sp, #16]
   22db8:	7823      	ldrb	r3, [r4, #0]
   22dba:	2b2e      	cmp	r3, #46	; 0x2e
   22dbc:	d10c      	bne.n	22dd8 <_svfiprintf_r+0x130>
   22dbe:	7863      	ldrb	r3, [r4, #1]
   22dc0:	2b2a      	cmp	r3, #42	; 0x2a
   22dc2:	d135      	bne.n	22e30 <_svfiprintf_r+0x188>
   22dc4:	9b03      	ldr	r3, [sp, #12]
   22dc6:	3402      	adds	r4, #2
   22dc8:	1d1a      	adds	r2, r3, #4
   22dca:	681b      	ldr	r3, [r3, #0]
   22dcc:	2b00      	cmp	r3, #0
   22dce:	9203      	str	r2, [sp, #12]
   22dd0:	bfb8      	it	lt
   22dd2:	f04f 33ff 	movlt.w	r3, #4294967295
   22dd6:	9305      	str	r3, [sp, #20]
   22dd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 22ea4 <_svfiprintf_r+0x1fc>
   22ddc:	2203      	movs	r2, #3
   22dde:	7821      	ldrb	r1, [r4, #0]
   22de0:	4650      	mov	r0, sl
   22de2:	f003 fdf4 	bl	269ce <memchr>
   22de6:	b140      	cbz	r0, 22dfa <_svfiprintf_r+0x152>
   22de8:	2340      	movs	r3, #64	; 0x40
   22dea:	eba0 000a 	sub.w	r0, r0, sl
   22dee:	3401      	adds	r4, #1
   22df0:	fa03 f000 	lsl.w	r0, r3, r0
   22df4:	9b04      	ldr	r3, [sp, #16]
   22df6:	4303      	orrs	r3, r0
   22df8:	9304      	str	r3, [sp, #16]
   22dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
   22dfe:	2206      	movs	r2, #6
   22e00:	4825      	ldr	r0, [pc, #148]	; (22e98 <_svfiprintf_r+0x1f0>)
   22e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   22e06:	f003 fde2 	bl	269ce <memchr>
   22e0a:	2800      	cmp	r0, #0
   22e0c:	d038      	beq.n	22e80 <_svfiprintf_r+0x1d8>
   22e0e:	4b23      	ldr	r3, [pc, #140]	; (22e9c <_svfiprintf_r+0x1f4>)
   22e10:	bb1b      	cbnz	r3, 22e5a <_svfiprintf_r+0x1b2>
   22e12:	9b03      	ldr	r3, [sp, #12]
   22e14:	3307      	adds	r3, #7
   22e16:	f023 0307 	bic.w	r3, r3, #7
   22e1a:	3308      	adds	r3, #8
   22e1c:	9303      	str	r3, [sp, #12]
   22e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22e20:	4433      	add	r3, r6
   22e22:	9309      	str	r3, [sp, #36]	; 0x24
   22e24:	e767      	b.n	22cf6 <_svfiprintf_r+0x4e>
   22e26:	fb0c 3202 	mla	r2, ip, r2, r3
   22e2a:	460c      	mov	r4, r1
   22e2c:	2001      	movs	r0, #1
   22e2e:	e7a5      	b.n	22d7c <_svfiprintf_r+0xd4>
   22e30:	2300      	movs	r3, #0
   22e32:	3401      	adds	r4, #1
   22e34:	f04f 0c0a 	mov.w	ip, #10
   22e38:	4619      	mov	r1, r3
   22e3a:	9305      	str	r3, [sp, #20]
   22e3c:	4620      	mov	r0, r4
   22e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
   22e42:	3a30      	subs	r2, #48	; 0x30
   22e44:	2a09      	cmp	r2, #9
   22e46:	d903      	bls.n	22e50 <_svfiprintf_r+0x1a8>
   22e48:	2b00      	cmp	r3, #0
   22e4a:	d0c5      	beq.n	22dd8 <_svfiprintf_r+0x130>
   22e4c:	9105      	str	r1, [sp, #20]
   22e4e:	e7c3      	b.n	22dd8 <_svfiprintf_r+0x130>
   22e50:	fb0c 2101 	mla	r1, ip, r1, r2
   22e54:	4604      	mov	r4, r0
   22e56:	2301      	movs	r3, #1
   22e58:	e7f0      	b.n	22e3c <_svfiprintf_r+0x194>
   22e5a:	ab03      	add	r3, sp, #12
   22e5c:	462a      	mov	r2, r5
   22e5e:	a904      	add	r1, sp, #16
   22e60:	4638      	mov	r0, r7
   22e62:	9300      	str	r3, [sp, #0]
   22e64:	4b0e      	ldr	r3, [pc, #56]	; (22ea0 <_svfiprintf_r+0x1f8>)
   22e66:	f7fe fe93 	bl	21b90 <_printf_float>
   22e6a:	1c42      	adds	r2, r0, #1
   22e6c:	4606      	mov	r6, r0
   22e6e:	d1d6      	bne.n	22e1e <_svfiprintf_r+0x176>
   22e70:	89ab      	ldrh	r3, [r5, #12]
   22e72:	065b      	lsls	r3, r3, #25
   22e74:	f53f af2c 	bmi.w	22cd0 <_svfiprintf_r+0x28>
   22e78:	9809      	ldr	r0, [sp, #36]	; 0x24
   22e7a:	b01d      	add	sp, #116	; 0x74
   22e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e80:	ab03      	add	r3, sp, #12
   22e82:	462a      	mov	r2, r5
   22e84:	a904      	add	r1, sp, #16
   22e86:	4638      	mov	r0, r7
   22e88:	9300      	str	r3, [sp, #0]
   22e8a:	4b05      	ldr	r3, [pc, #20]	; (22ea0 <_svfiprintf_r+0x1f8>)
   22e8c:	f7ff f8b6 	bl	21ffc <_printf_i>
   22e90:	e7eb      	b.n	22e6a <_svfiprintf_r+0x1c2>
   22e92:	bf00      	nop
   22e94:	0002aa74 	.word	0x0002aa74
   22e98:	0002aa7e 	.word	0x0002aa7e
   22e9c:	00021b91 	.word	0x00021b91
   22ea0:	00027677 	.word	0x00027677
   22ea4:	0002aa7a 	.word	0x0002aa7a

00022ea8 <_sbrk_r>:
   22ea8:	b538      	push	{r3, r4, r5, lr}
   22eaa:	2300      	movs	r3, #0
   22eac:	4d05      	ldr	r5, [pc, #20]	; (22ec4 <_sbrk_r+0x1c>)
   22eae:	4604      	mov	r4, r0
   22eb0:	4608      	mov	r0, r1
   22eb2:	602b      	str	r3, [r5, #0]
   22eb4:	f7f1 fd84 	bl	149c0 <_sbrk>
   22eb8:	1c43      	adds	r3, r0, #1
   22eba:	d102      	bne.n	22ec2 <_sbrk_r+0x1a>
   22ebc:	682b      	ldr	r3, [r5, #0]
   22ebe:	b103      	cbz	r3, 22ec2 <_sbrk_r+0x1a>
   22ec0:	6023      	str	r3, [r4, #0]
   22ec2:	bd38      	pop	{r3, r4, r5, pc}
   22ec4:	2002a1fc 	.word	0x2002a1fc

00022ec8 <raise>:
   22ec8:	4b02      	ldr	r3, [pc, #8]	; (22ed4 <raise+0xc>)
   22eca:	4601      	mov	r1, r0
   22ecc:	6818      	ldr	r0, [r3, #0]
   22ece:	f004 bc2d 	b.w	2772c <_raise_r>
   22ed2:	bf00      	nop
   22ed4:	200203e4 	.word	0x200203e4

00022ed8 <_kill_r>:
   22ed8:	b538      	push	{r3, r4, r5, lr}
   22eda:	2300      	movs	r3, #0
   22edc:	4d06      	ldr	r5, [pc, #24]	; (22ef8 <_kill_r+0x20>)
   22ede:	4604      	mov	r4, r0
   22ee0:	4608      	mov	r0, r1
   22ee2:	4611      	mov	r1, r2
   22ee4:	602b      	str	r3, [r5, #0]
   22ee6:	f001 fa34 	bl	24352 <_kill>
   22eea:	1c43      	adds	r3, r0, #1
   22eec:	d102      	bne.n	22ef4 <_kill_r+0x1c>
   22eee:	682b      	ldr	r3, [r5, #0]
   22ef0:	b103      	cbz	r3, 22ef4 <_kill_r+0x1c>
   22ef2:	6023      	str	r3, [r4, #0]
   22ef4:	bd38      	pop	{r3, r4, r5, pc}
   22ef6:	bf00      	nop
   22ef8:	2002a1fc 	.word	0x2002a1fc

00022efc <_write_r>:
   22efc:	b538      	push	{r3, r4, r5, lr}
   22efe:	4604      	mov	r4, r0
   22f00:	4d06      	ldr	r5, [pc, #24]	; (22f1c <_write_r+0x20>)
   22f02:	4608      	mov	r0, r1
   22f04:	4611      	mov	r1, r2
   22f06:	2200      	movs	r2, #0
   22f08:	602a      	str	r2, [r5, #0]
   22f0a:	461a      	mov	r2, r3
   22f0c:	f001 fa16 	bl	2433c <_write>
   22f10:	1c43      	adds	r3, r0, #1
   22f12:	d102      	bne.n	22f1a <_write_r+0x1e>
   22f14:	682b      	ldr	r3, [r5, #0]
   22f16:	b103      	cbz	r3, 22f1a <_write_r+0x1e>
   22f18:	6023      	str	r3, [r4, #0]
   22f1a:	bd38      	pop	{r3, r4, r5, pc}
   22f1c:	2002a1fc 	.word	0x2002a1fc

00022f20 <_close_r>:
   22f20:	b538      	push	{r3, r4, r5, lr}
   22f22:	2300      	movs	r3, #0
   22f24:	4d05      	ldr	r5, [pc, #20]	; (22f3c <_close_r+0x1c>)
   22f26:	4604      	mov	r4, r0
   22f28:	4608      	mov	r0, r1
   22f2a:	602b      	str	r3, [r5, #0]
   22f2c:	f001 fa0a 	bl	24344 <_close>
   22f30:	1c43      	adds	r3, r0, #1
   22f32:	d102      	bne.n	22f3a <_close_r+0x1a>
   22f34:	682b      	ldr	r3, [r5, #0]
   22f36:	b103      	cbz	r3, 22f3a <_close_r+0x1a>
   22f38:	6023      	str	r3, [r4, #0]
   22f3a:	bd38      	pop	{r3, r4, r5, pc}
   22f3c:	2002a1fc 	.word	0x2002a1fc

00022f40 <_fstat_r>:
   22f40:	b538      	push	{r3, r4, r5, lr}
   22f42:	2300      	movs	r3, #0
   22f44:	4d06      	ldr	r5, [pc, #24]	; (22f60 <_fstat_r+0x20>)
   22f46:	4604      	mov	r4, r0
   22f48:	4608      	mov	r0, r1
   22f4a:	4611      	mov	r1, r2
   22f4c:	602b      	str	r3, [r5, #0]
   22f4e:	f001 fa04 	bl	2435a <_fstat>
   22f52:	1c43      	adds	r3, r0, #1
   22f54:	d102      	bne.n	22f5c <_fstat_r+0x1c>
   22f56:	682b      	ldr	r3, [r5, #0]
   22f58:	b103      	cbz	r3, 22f5c <_fstat_r+0x1c>
   22f5a:	6023      	str	r3, [r4, #0]
   22f5c:	bd38      	pop	{r3, r4, r5, pc}
   22f5e:	bf00      	nop
   22f60:	2002a1fc 	.word	0x2002a1fc

00022f64 <_isatty_r>:
   22f64:	b538      	push	{r3, r4, r5, lr}
   22f66:	2300      	movs	r3, #0
   22f68:	4d05      	ldr	r5, [pc, #20]	; (22f80 <_isatty_r+0x1c>)
   22f6a:	4604      	mov	r4, r0
   22f6c:	4608      	mov	r0, r1
   22f6e:	602b      	str	r3, [r5, #0]
   22f70:	f001 f9ed 	bl	2434e <_isatty>
   22f74:	1c43      	adds	r3, r0, #1
   22f76:	d102      	bne.n	22f7e <_isatty_r+0x1a>
   22f78:	682b      	ldr	r3, [r5, #0]
   22f7a:	b103      	cbz	r3, 22f7e <_isatty_r+0x1a>
   22f7c:	6023      	str	r3, [r4, #0]
   22f7e:	bd38      	pop	{r3, r4, r5, pc}
   22f80:	2002a1fc 	.word	0x2002a1fc

00022f84 <_lseek_r>:
   22f84:	b538      	push	{r3, r4, r5, lr}
   22f86:	4604      	mov	r4, r0
   22f88:	4d06      	ldr	r5, [pc, #24]	; (22fa4 <_lseek_r+0x20>)
   22f8a:	4608      	mov	r0, r1
   22f8c:	4611      	mov	r1, r2
   22f8e:	2200      	movs	r2, #0
   22f90:	602a      	str	r2, [r5, #0]
   22f92:	461a      	mov	r2, r3
   22f94:	f001 f9d9 	bl	2434a <_lseek>
   22f98:	1c43      	adds	r3, r0, #1
   22f9a:	d102      	bne.n	22fa2 <_lseek_r+0x1e>
   22f9c:	682b      	ldr	r3, [r5, #0]
   22f9e:	b103      	cbz	r3, 22fa2 <_lseek_r+0x1e>
   22fa0:	6023      	str	r3, [r4, #0]
   22fa2:	bd38      	pop	{r3, r4, r5, pc}
   22fa4:	2002a1fc 	.word	0x2002a1fc

00022fa8 <__malloc_lock>:
   22fa8:	4801      	ldr	r0, [pc, #4]	; (22fb0 <__malloc_lock+0x8>)
   22faa:	f004 b829 	b.w	27000 <__retarget_lock_acquire_recursive>
   22fae:	bf00      	nop
   22fb0:	2002a204 	.word	0x2002a204

00022fb4 <__malloc_unlock>:
   22fb4:	4801      	ldr	r0, [pc, #4]	; (22fbc <__malloc_unlock+0x8>)
   22fb6:	f004 b824 	b.w	27002 <__retarget_lock_release_recursive>
   22fba:	bf00      	nop
   22fbc:	2002a204 	.word	0x2002a204

00022fc0 <_read_r>:
   22fc0:	b538      	push	{r3, r4, r5, lr}
   22fc2:	4604      	mov	r4, r0
   22fc4:	4d06      	ldr	r5, [pc, #24]	; (22fe0 <_read_r+0x20>)
   22fc6:	4608      	mov	r0, r1
   22fc8:	4611      	mov	r1, r2
   22fca:	2200      	movs	r2, #0
   22fcc:	602a      	str	r2, [r5, #0]
   22fce:	461a      	mov	r2, r3
   22fd0:	f001 f9b0 	bl	24334 <_read>
   22fd4:	1c43      	adds	r3, r0, #1
   22fd6:	d102      	bne.n	22fde <_read_r+0x1e>
   22fd8:	682b      	ldr	r3, [r5, #0]
   22fda:	b103      	cbz	r3, 22fde <_read_r+0x1e>
   22fdc:	6023      	str	r3, [r4, #0]
   22fde:	bd38      	pop	{r3, r4, r5, pc}
   22fe0:	2002a1fc 	.word	0x2002a1fc

00022fe4 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22fe4:	0413      	lsls	r3, r2, #16
{
   22fe6:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   22fe8:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22fea:	d507      	bpl.n	22ffc <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   22fec:	2301      	movs	r3, #1
   22fee:	68c5      	ldr	r5, [r0, #12]
   22ff0:	408b      	lsls	r3, r1
   22ff2:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22ff4:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   22ff6:	bf18      	it	ne
   22ff8:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   22ffc:	69a4      	ldr	r4, [r4, #24]
   22ffe:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   23002:	46a4      	mov	ip, r4
}
   23004:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   23006:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   2300a:	4760      	bx	ip

0002300c <gpio_pin_configure>:
{
   2300c:	b538      	push	{r3, r4, r5, lr}
   2300e:	460c      	mov	r4, r1
	struct gpio_driver_data *data =
   23010:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
   23012:	6883      	ldr	r3, [r0, #8]
   23014:	681b      	ldr	r3, [r3, #0]
   23016:	4798      	blx	r3
	if (ret != 0) {
   23018:	b930      	cbnz	r0, 23028 <gpio_pin_configure+0x1c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2301a:	2201      	movs	r2, #1
   2301c:	682b      	ldr	r3, [r5, #0]
   2301e:	fa02 f104 	lsl.w	r1, r2, r4
   23022:	ea23 0301 	bic.w	r3, r3, r1
   23026:	602b      	str	r3, [r5, #0]
}
   23028:	bd38      	pop	{r3, r4, r5, pc}

0002302a <slm_util_hex_check>:
	for (int i = 0; i < data_len; i++) {
   2302a:	2300      	movs	r3, #0
{
   2302c:	b510      	push	{r4, lr}
	for (int i = 0; i < data_len; i++) {
   2302e:	4299      	cmp	r1, r3
   23030:	dc01      	bgt.n	23036 <slm_util_hex_check+0xc>
	return false;
   23032:	2000      	movs	r0, #0
}
   23034:	bd10      	pop	{r4, pc}
		char ch = *(data + i);
   23036:	5cc2      	ldrb	r2, [r0, r3]
		if (!PRINTABLE_ASCII(ch) && ch != '\r' && ch != '\n') {
   23038:	f1a2 0420 	sub.w	r4, r2, #32
   2303c:	2c5e      	cmp	r4, #94	; 0x5e
   2303e:	d903      	bls.n	23048 <slm_util_hex_check+0x1e>
   23040:	2a0d      	cmp	r2, #13
   23042:	d001      	beq.n	23048 <slm_util_hex_check+0x1e>
   23044:	2a0a      	cmp	r2, #10
   23046:	d101      	bne.n	2304c <slm_util_hex_check+0x22>
	for (int i = 0; i < data_len; i++) {
   23048:	3301      	adds	r3, #1
   2304a:	e7f0      	b.n	2302e <slm_util_hex_check+0x4>
			return true;
   2304c:	2001      	movs	r0, #1
   2304e:	e7f1      	b.n	23034 <slm_util_hex_check+0xa>

00023050 <slm_util_atoh>:
/**
 * @brief Decode hexdecimal string (ASCII text) to hex array
 */
int slm_util_atoh(const char *ascii, u16_t ascii_len,
		u8_t *hex, u16_t hex_len)
{
   23050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23052:	4607      	mov	r7, r0
   23054:	460c      	mov	r4, r1
	char hex_str[3];

	if (hex == NULL || ascii == NULL) {
   23056:	b1e2      	cbz	r2, 23092 <slm_util_atoh+0x42>
   23058:	b1d8      	cbz	r0, 23092 <slm_util_atoh+0x42>
		return -EINVAL;
	}
	if ((ascii_len % 2) > 0) {
   2305a:	f011 0501 	ands.w	r5, r1, #1
   2305e:	d118      	bne.n	23092 <slm_util_atoh+0x42>
		return -EINVAL;
	}
	if (ascii_len > (hex_len * 2)) {
   23060:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   23064:	dc15      	bgt.n	23092 <slm_util_atoh+0x42>
		return -EINVAL;
	}

	hex_str[2] = '\0';
   23066:	f88d 5006 	strb.w	r5, [sp, #6]
	for (int i = 0; (i * 2) < ascii_len; i++) {
   2306a:	1e56      	subs	r6, r2, #1
   2306c:	42ac      	cmp	r4, r5
   2306e:	dc02      	bgt.n	23076 <slm_util_atoh+0x26>
		strncpy(&hex_str[0], ascii + (i * 2), 2);
		*(hex + i) = (u8_t)strtoul(hex_str, NULL, 16);
	}

	return (ascii_len / 2);
   23070:	0860      	lsrs	r0, r4, #1
}
   23072:	b003      	add	sp, #12
   23074:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strncpy(&hex_str[0], ascii + (i * 2), 2);
   23076:	1979      	adds	r1, r7, r5
   23078:	2202      	movs	r2, #2
   2307a:	a801      	add	r0, sp, #4
   2307c:	f003 fe77 	bl	26d6e <strncpy>
		*(hex + i) = (u8_t)strtoul(hex_str, NULL, 16);
   23080:	2210      	movs	r2, #16
   23082:	2100      	movs	r1, #0
   23084:	a801      	add	r0, sp, #4
   23086:	f7ff fa2f 	bl	224e8 <strtoul>
   2308a:	3502      	adds	r5, #2
   2308c:	f806 0f01 	strb.w	r0, [r6, #1]!
	for (int i = 0; (i * 2) < ascii_len; i++) {
   23090:	e7ec      	b.n	2306c <slm_util_atoh+0x1c>
		return -EINVAL;
   23092:	f06f 0015 	mvn.w	r0, #21
   23096:	e7ec      	b.n	23072 <slm_util_atoh+0x22>

00023098 <check_for_ipv4>:
 */
bool check_for_ipv4(const char *address, u8_t length)
{
	int index;

	for (index = 0; index < length; index++) {
   23098:	2300      	movs	r3, #0
   2309a:	4299      	cmp	r1, r3
   2309c:	dc01      	bgt.n	230a2 <check_for_ipv4+0xa>
		} else {
			return false;
		}
	}

	return true;
   2309e:	2001      	movs	r0, #1
   230a0:	4770      	bx	lr
		char ch = *(address + index);
   230a2:	5cc2      	ldrb	r2, [r0, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
   230a4:	2a2e      	cmp	r2, #46	; 0x2e
   230a6:	d002      	beq.n	230ae <check_for_ipv4+0x16>
   230a8:	3a30      	subs	r2, #48	; 0x30
   230aa:	2a09      	cmp	r2, #9
   230ac:	d801      	bhi.n	230b2 <check_for_ipv4+0x1a>
	for (index = 0; index < length; index++) {
   230ae:	3301      	adds	r3, #1
   230b0:	e7f3      	b.n	2309a <check_for_ipv4+0x2>
			return false;
   230b2:	2000      	movs	r0, #0
}
   230b4:	4770      	bx	lr

000230b6 <uart_rx_disable>:
	return api->rx_disable(dev);
   230b6:	6883      	ldr	r3, [r0, #8]
   230b8:	695b      	ldr	r3, [r3, #20]
   230ba:	4718      	bx	r3

000230bc <response_handler>:
	int len = strlen(response);
   230bc:	4608      	mov	r0, r1
{
   230be:	b510      	push	{r4, lr}
   230c0:	460c      	mov	r4, r1
	int len = strlen(response);
   230c2:	f7e9 fed5 	bl	ce70 <strlen>
	if (len > 0) {
   230c6:	1e01      	subs	r1, r0, #0
   230c8:	dd04      	ble.n	230d4 <response_handler+0x18>
		rsp_send(response, len);
   230ca:	4620      	mov	r0, r4
}
   230cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rsp_send(response, len);
   230d0:	f7ea bf8c 	b.w	dfec <rsp_send>
}
   230d4:	bd10      	pop	{r4, pc}

000230d6 <slm_at_tcpip_uninit>:

/**@brief API to uninitialize TCP/IP AT commands handler
 */
int slm_at_tcpip_uninit(void)
{
	return do_socket_close(0);
   230d6:	2000      	movs	r0, #0
   230d8:	f7eb bd82 	b.w	ebe0 <do_socket_close>

000230dc <check_ics>:
	for (int i = len / 4; i > 0; i--) {
   230dc:	460a      	mov	r2, r1
   230de:	2900      	cmp	r1, #0
   230e0:	bfb8      	it	lt
   230e2:	1cca      	addlt	r2, r1, #3
   230e4:	1092      	asrs	r2, r2, #2
{
   230e6:	b570      	push	{r4, r5, r6, lr}
	u32_t hcs = 0;
   230e8:	2300      	movs	r3, #0
	for (int i = len / 4; i > 0; i--) {
   230ea:	4614      	mov	r4, r2
	const u32_t *ptr32 = (const u32_t *)buffer;
   230ec:	4606      	mov	r6, r0
	for (int i = len / 4; i > 0; i--) {
   230ee:	2c00      	cmp	r4, #0
   230f0:	dc14      	bgt.n	2311c <check_ics+0x40>
   230f2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (len & 2) {
   230f6:	078d      	lsls	r5, r1, #30
   230f8:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   230fc:	d505      	bpl.n	2310a <check_ics+0x2e>
		hcs += s;
   230fe:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
		u16_t s = *ptr16++;
   23102:	3402      	adds	r4, #2
		hcs += s;
   23104:	18c3      	adds	r3, r0, r3
			hcs++;
   23106:	bf28      	it	cs
   23108:	3301      	addcs	r3, #1
	if (len & 1) {
   2310a:	07ca      	lsls	r2, r1, #31
   2310c:	d510      	bpl.n	23130 <check_ics+0x54>
		hcs += s;
   2310e:	7820      	ldrb	r0, [r4, #0]
   23110:	18c3      	adds	r3, r0, r3
		if (hcs < s) {
   23112:	d30d      	bcc.n	23130 <check_ics+0x54>
			hcs++;
   23114:	3301      	adds	r3, #1
	return ~hcs;    /* One's complement */
   23116:	43d8      	mvns	r0, r3
}
   23118:	b280      	uxth	r0, r0
   2311a:	bd70      	pop	{r4, r5, r6, pc}
		hcs += s;
   2311c:	f856 5b04 	ldr.w	r5, [r6], #4
	for (int i = len / 4; i > 0; i--) {
   23120:	3c01      	subs	r4, #1
   23122:	195b      	adds	r3, r3, r5
			hcs++;
   23124:	bf28      	it	cs
   23126:	3301      	addcs	r3, #1
	for (int i = len / 4; i > 0; i--) {
   23128:	e7e1      	b.n	230ee <check_ics+0x12>
		hcs = (hcs & 0xFFFF) + (hcs >> 16);
   2312a:	0c1a      	lsrs	r2, r3, #16
   2312c:	fa12 f383 	uxtah	r3, r2, r3
	while (hcs > 0xFFFF) {
   23130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   23134:	d2f9      	bcs.n	2312a <check_ics+0x4e>
   23136:	e7ee      	b.n	23116 <check_ics+0x3a>

00023138 <slm_at_icmp_uninit>:
/**@brief API to uninitialize ICMP AT commands handler
 */
int slm_at_icmp_uninit(void)
{
	return 0;
}
   23138:	2000      	movs	r0, #0
   2313a:	4770      	bx	lr

0002313c <slm_at_mqtt_init>:
}
   2313c:	2000      	movs	r0, #0
   2313e:	4770      	bx	lr

00023140 <ftp_ctrl_callback>:
	rsp_send((u8_t *)msg, len);
   23140:	f7ea bf54 	b.w	dfec <rsp_send>

00023144 <do_ftp_pwd>:
{
   23144:	b508      	push	{r3, lr}
	int ret = ftp_pwd();
   23146:	f7f4 fd1f 	bl	17b88 <ftp_pwd>
}
   2314a:	f240 1301 	movw	r3, #257	; 0x101
   2314e:	1ac0      	subs	r0, r0, r3
   23150:	bf18      	it	ne
   23152:	f04f 30ff 	movne.w	r0, #4294967295
   23156:	bd08      	pop	{r3, pc}

00023158 <do_ftp_binary>:
{
   23158:	b508      	push	{r3, lr}
	int ret = ftp_type(FTP_TYPE_BINARY);
   2315a:	2001      	movs	r0, #1
   2315c:	f7f4 fcfa 	bl	17b54 <ftp_type>
}
   23160:	38c8      	subs	r0, #200	; 0xc8
   23162:	bf18      	it	ne
   23164:	f04f 30ff 	movne.w	r0, #4294967295
   23168:	bd08      	pop	{r3, pc}

0002316a <do_ftp_ascii>:
{
   2316a:	b508      	push	{r3, lr}
	int ret = ftp_type(FTP_TYPE_ASCII);
   2316c:	2000      	movs	r0, #0
   2316e:	f7f4 fcf1 	bl	17b54 <ftp_type>
}
   23172:	38c8      	subs	r0, #200	; 0xc8
   23174:	bf18      	it	ne
   23176:	f04f 30ff 	movne.w	r0, #4294967295
   2317a:	bd08      	pop	{r3, pc}

0002317c <do_ftp_status>:
{
   2317c:	b508      	push	{r3, lr}
	int ret = ftp_status();
   2317e:	f7f4 fcc5 	bl	17b0c <ftp_status>
}
   23182:	38d3      	subs	r0, #211	; 0xd3
   23184:	bf18      	it	ne
   23186:	f04f 30ff 	movne.w	r0, #4294967295
   2318a:	bd08      	pop	{r3, pc}

0002318c <do_ftp_close>:
{
   2318c:	b508      	push	{r3, lr}
	int ret = ftp_close();
   2318e:	f7f4 fc9d 	bl	17acc <ftp_close>
}
   23192:	38dd      	subs	r0, #221	; 0xdd
   23194:	bf18      	it	ne
   23196:	f04f 30ff 	movne.w	r0, #4294967295
   2319a:	bd08      	pop	{r3, pc}

0002319c <slm_at_ftp_uninit>:

/**@brief API to uninitialize FTP AT commands handler
 */
int slm_at_ftp_uninit(void)
{
	return ftp_uninit();
   2319c:	f002 bfa9 	b.w	260f2 <ftp_uninit>

000231a0 <close>:
	return z_impl_zsock_close(sock);
   231a0:	f000 be57 	b.w	23e52 <z_impl_zsock_close>

000231a4 <arch_printk_char_out>:
}
   231a4:	2000      	movs	r0, #0
   231a6:	4770      	bx	lr

000231a8 <print_err>:
{
   231a8:	b570      	push	{r4, r5, r6, lr}
   231aa:	460d      	mov	r5, r1
   231ac:	4604      	mov	r4, r0
	out('E', ctx);
   231ae:	2045      	movs	r0, #69	; 0x45
   231b0:	47a0      	blx	r4
	out('R', ctx);
   231b2:	4629      	mov	r1, r5
   231b4:	2052      	movs	r0, #82	; 0x52
   231b6:	47a0      	blx	r4
	out('R', ctx);
   231b8:	4629      	mov	r1, r5
   231ba:	4623      	mov	r3, r4
}
   231bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   231c0:	2052      	movs	r0, #82	; 0x52
   231c2:	4718      	bx	r3

000231c4 <str_out>:
{
   231c4:	b530      	push	{r4, r5, lr}
   231c6:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   231c8:	680c      	ldr	r4, [r1, #0]
   231ca:	1c55      	adds	r5, r2, #1
   231cc:	b114      	cbz	r4, 231d4 <str_out+0x10>
   231ce:	684b      	ldr	r3, [r1, #4]
   231d0:	4293      	cmp	r3, r2
   231d2:	dc01      	bgt.n	231d8 <str_out+0x14>
		ctx->count++;
   231d4:	608d      	str	r5, [r1, #8]
}
   231d6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   231d8:	3b01      	subs	r3, #1
   231da:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   231dc:	bf08      	it	eq
   231de:	2200      	moveq	r2, #0
   231e0:	608d      	str	r5, [r1, #8]
   231e2:	bf0c      	ite	eq
   231e4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   231e6:	54a0      	strbne	r0, [r4, r2]
   231e8:	e7f5      	b.n	231d6 <str_out+0x12>

000231ea <printk>:
{
   231ea:	b40f      	push	{r0, r1, r2, r3}
   231ec:	b507      	push	{r0, r1, r2, lr}
   231ee:	a904      	add	r1, sp, #16
   231f0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   231f4:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   231f6:	f000 fb37 	bl	23868 <log_printk>
}
   231fa:	b003      	add	sp, #12
   231fc:	f85d eb04 	ldr.w	lr, [sp], #4
   23200:	b004      	add	sp, #16
   23202:	4770      	bx	lr

00023204 <snprintk>:
{
   23204:	b40c      	push	{r2, r3}
   23206:	b507      	push	{r0, r1, r2, lr}
   23208:	ab04      	add	r3, sp, #16
   2320a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2320e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   23210:	f7ef fb84 	bl	1291c <vsnprintk>
}
   23214:	b003      	add	sp, #12
   23216:	f85d eb04 	ldr.w	lr, [sp], #4
   2321a:	b002      	add	sp, #8
   2321c:	4770      	bx	lr

0002321e <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2321e:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   23220:	f7fe f802 	bl	21228 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   23224:	2000      	movs	r0, #0
   23226:	bd08      	pop	{r3, pc}

00023228 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   23228:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2322a:	f7fe f823 	bl	21274 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2322e:	f110 0f0b 	cmn.w	r0, #11
   23232:	d005      	beq.n	23240 <sys_sem_take+0x18>
   23234:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   23238:	bf08      	it	eq
   2323a:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2323e:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   23240:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   23244:	e7fb      	b.n	2323e <sys_sem_take+0x16>

00023246 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   23246:	4604      	mov	r4, r0
   23248:	b508      	push	{r3, lr}
   2324a:	4608      	mov	r0, r1
   2324c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2324e:	461a      	mov	r2, r3
   23250:	47a0      	blx	r4
	return z_impl_k_current_get();
   23252:	f7fd ff9f 	bl	21194 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   23256:	f7f1 f9a3 	bl	145a0 <z_impl_k_thread_abort>

0002325a <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   2325a:	b510      	push	{r4, lr}
   2325c:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   2325e:	f04f 33ff 	mov.w	r3, #4294967295
   23262:	f04f 32ff 	mov.w	r2, #4294967295
   23266:	4620      	mov	r0, r4
   23268:	f7fd fbfc 	bl	20a64 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   2326c:	4603      	mov	r3, r0
   2326e:	2800      	cmp	r0, #0
   23270:	d0f5      	beq.n	2325e <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   23272:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23274:	3308      	adds	r3, #8
   23276:	e8d3 1fef 	ldaex	r1, [r3]
   2327a:	f021 0c01 	bic.w	ip, r1, #1
   2327e:	e8c3 cfee 	stlex	lr, ip, [r3]
   23282:	f1be 0f00 	cmp.w	lr, #0
   23286:	d1f6      	bne.n	23276 <z_work_q_main+0x1c>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   23288:	07cb      	lsls	r3, r1, #31
   2328a:	d500      	bpl.n	2328e <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2328c:	4790      	blx	r2
	z_impl_k_yield();
   2328e:	f7fd ff13 	bl	210b8 <z_impl_k_yield>
   23292:	e7e4      	b.n	2325e <z_work_q_main+0x4>

00023294 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   23294:	6803      	ldr	r3, [r0, #0]
   23296:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   2329a:	6883      	ldr	r3, [r0, #8]
   2329c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   232a0:	bf2c      	ite	cs
   232a2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   232a6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   232aa:	4770      	bx	lr

000232ac <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   232ac:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   232ae:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   232b0:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   232b2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   232b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   232ba:	bf2c      	ite	cs
   232bc:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   232c0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   232c4:	bd10      	pop	{r4, pc}

000232c6 <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   232c6:	b538      	push	{r3, r4, r5, lr}
   232c8:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   232ca:	2200      	movs	r2, #0
{
   232cc:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   232ce:	f7ff ffe1 	bl	23294 <chunk_field>
   232d2:	68eb      	ldr	r3, [r5, #12]
   232d4:	4018      	ands	r0, r3
	return c + size(h, c);
}
   232d6:	4420      	add	r0, r4
   232d8:	bd38      	pop	{r3, r4, r5, pc}

000232da <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   232da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   232de:	460d      	mov	r5, r1
	struct z_heap_bucket *b = &h->buckets[bidx];
   232e0:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   232e4:	4611      	mov	r1, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   232e6:	eb08 02c5 	add.w	r2, r8, r5, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   232ea:	6853      	ldr	r3, [r2, #4]
{
   232ec:	4604      	mov	r4, r0
	b->list_size--;
   232ee:	3b01      	subs	r3, #1
   232f0:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   232f2:	b95b      	cbnz	r3, 2330c <free_list_remove+0x32>
		h->avail_buckets &= ~(1 << bidx);
   232f4:	2201      	movs	r2, #1
   232f6:	fa02 f105 	lsl.w	r1, r2, r5
   232fa:	6942      	ldr	r2, [r0, #20]
   232fc:	ea22 0201 	bic.w	r2, r2, r1
   23300:	6142      	str	r2, [r0, #20]
		b->next = 0;
   23302:	f848 3035 	str.w	r3, [r8, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   23306:	b002      	add	sp, #8
   23308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2330c:	2202      	movs	r2, #2
   2330e:	9101      	str	r1, [sp, #4]
   23310:	f7ff ffc0 	bl	23294 <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   23314:	9901      	ldr	r1, [sp, #4]
	return chunk_field(h, c, FREE_PREV);
   23316:	4607      	mov	r7, r0
	return chunk_field(h, c, FREE_NEXT);
   23318:	2203      	movs	r2, #3
   2331a:	4620      	mov	r0, r4
   2331c:	f7ff ffba 	bl	23294 <chunk_field>
   23320:	4606      	mov	r6, r0
		chunk_set(h, first, FREE_NEXT, second);
   23322:	4603      	mov	r3, r0
   23324:	4639      	mov	r1, r7
		b->next = second;
   23326:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   2332a:	2203      	movs	r2, #3
   2332c:	4620      	mov	r0, r4
   2332e:	f7ff ffbd 	bl	232ac <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   23332:	463b      	mov	r3, r7
   23334:	2202      	movs	r2, #2
   23336:	4631      	mov	r1, r6
   23338:	4620      	mov	r0, r4
}
   2333a:	b002      	add	sp, #8
   2333c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   23340:	f7ff bfb4 	b.w	232ac <chunk_set>

00023344 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   23344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23348:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2334a:	2200      	movs	r2, #0
   2334c:	460d      	mov	r5, r1
   2334e:	f7ff ffa1 	bl	23294 <chunk_field>
   23352:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   23354:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   23356:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   23358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2335c:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   23360:	bf34      	ite	cc
   23362:	2000      	movcc	r0, #0
   23364:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   23366:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   23368:	f1c0 001f 	rsb	r0, r0, #31
   2336c:	1a80      	subs	r0, r0, r2
   2336e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   23372:	684a      	ldr	r2, [r1, #4]
   23374:	1c56      	adds	r6, r2, #1
   23376:	604e      	str	r6, [r1, #4]
   23378:	b9a2      	cbnz	r2, 233a4 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   2337a:	2201      	movs	r2, #1
   2337c:	fa02 f100 	lsl.w	r1, r2, r0
   23380:	6962      	ldr	r2, [r4, #20]
   23382:	430a      	orrs	r2, r1
   23384:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   23386:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   23388:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   2338c:	2202      	movs	r2, #2
   2338e:	462b      	mov	r3, r5
   23390:	4620      	mov	r0, r4
   23392:	f7ff ff8b 	bl	232ac <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   23396:	2203      	movs	r2, #3
   23398:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   2339a:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   2339c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   233a0:	f7ff bf84 	b.w	232ac <chunk_set>
		chunkid_t second = h->buckets[b].next;
   233a4:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   233a8:	2202      	movs	r2, #2
   233aa:	4639      	mov	r1, r7
   233ac:	4620      	mov	r0, r4
   233ae:	f7ff ff71 	bl	23294 <chunk_field>
   233b2:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   233b4:	4603      	mov	r3, r0
   233b6:	2202      	movs	r2, #2
   233b8:	4629      	mov	r1, r5
   233ba:	4620      	mov	r0, r4
   233bc:	f7ff ff76 	bl	232ac <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   233c0:	463b      	mov	r3, r7
   233c2:	2203      	movs	r2, #3
   233c4:	4629      	mov	r1, r5
   233c6:	4620      	mov	r0, r4
   233c8:	f7ff ff70 	bl	232ac <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   233cc:	2203      	movs	r2, #3
   233ce:	4631      	mov	r1, r6
   233d0:	462b      	mov	r3, r5
   233d2:	4620      	mov	r0, r4
   233d4:	f7ff ff6a 	bl	232ac <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   233d8:	2202      	movs	r2, #2
   233da:	4639      	mov	r1, r7
   233dc:	e7dd      	b.n	2339a <free_list_add+0x56>

000233de <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   233de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   233e2:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   233e4:	6843      	ldr	r3, [r0, #4]
{
   233e6:	4617      	mov	r7, r2
	chunkid_t c = h->buckets[bidx].next;
   233e8:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   233ec:	462a      	mov	r2, r5
   233ee:	f7ff ff74 	bl	232da <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   233f2:	2200      	movs	r2, #0
   233f4:	4629      	mov	r1, r5
   233f6:	4620      	mov	r0, r4
   233f8:	f7ff ff4c 	bl	23294 <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   233fc:	68a3      	ldr	r3, [r4, #8]
   233fe:	68e6      	ldr	r6, [r4, #12]
   23400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23404:	bf2c      	ite	cs
   23406:	2302      	movcs	r3, #2
   23408:	2301      	movcc	r3, #1
   2340a:	4030      	ands	r0, r6
	size_t rem = size(h, c) - sz;
   2340c:	1bc6      	subs	r6, r0, r7
	if (rem >= (big_heap(h) ? 2 : 1)) {
   2340e:	42b3      	cmp	r3, r6
   23410:	d82d      	bhi.n	2346e <split_alloc+0x90>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   23412:	4629      	mov	r1, r5
   23414:	4620      	mov	r0, r4
   23416:	f7ff ff56 	bl	232c6 <right_chunk>
		chunkid_t c2 = c + sz;
   2341a:	eb05 0807 	add.w	r8, r5, r7

		chunk_set(h, c, SIZE_AND_USED, sz);
   2341e:	463b      	mov	r3, r7
   23420:	2200      	movs	r2, #0
   23422:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   23424:	4681      	mov	r9, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   23426:	4620      	mov	r0, r4
   23428:	f7ff ff40 	bl	232ac <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   2342c:	4633      	mov	r3, r6
   2342e:	2200      	movs	r2, #0
   23430:	4641      	mov	r1, r8
   23432:	4620      	mov	r0, r4
   23434:	f7ff ff3a 	bl	232ac <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   23438:	463b      	mov	r3, r7
   2343a:	2201      	movs	r2, #1
   2343c:	4641      	mov	r1, r8
   2343e:	4620      	mov	r0, r4
   23440:	f7ff ff34 	bl	232ac <chunk_set>
   23444:	2200      	movs	r2, #0
   23446:	4641      	mov	r1, r8
   23448:	4620      	mov	r0, r4
   2344a:	f7ff ff23 	bl	23294 <chunk_field>
   2344e:	68e3      	ldr	r3, [r4, #12]
		if (!last_chunk(h, c2)) {
   23450:	68a2      	ldr	r2, [r4, #8]
   23452:	4003      	ands	r3, r0
	return (c + size(h, c)) == h->len;
   23454:	4443      	add	r3, r8
		if (!last_chunk(h, c2)) {
   23456:	4293      	cmp	r3, r2
   23458:	d005      	beq.n	23466 <split_alloc+0x88>
			chunk_set(h, c3, LEFT_SIZE, rem);
   2345a:	4633      	mov	r3, r6
   2345c:	2201      	movs	r2, #1
   2345e:	4649      	mov	r1, r9
   23460:	4620      	mov	r0, r4
   23462:	f7ff ff23 	bl	232ac <chunk_set>
		}
		free_list_add(h, c2);
   23466:	4641      	mov	r1, r8
   23468:	4620      	mov	r0, r4
   2346a:	f7ff ff6b 	bl	23344 <free_list_add>
   2346e:	4629      	mov	r1, r5
   23470:	2200      	movs	r2, #0
   23472:	4620      	mov	r0, r4
   23474:	f7ff ff0e 	bl	23294 <chunk_field>
   23478:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   2347a:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2347c:	4010      	ands	r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   2347e:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   23480:	ea40 0302 	orr.w	r3, r0, r2
   23484:	4620      	mov	r0, r4
   23486:	2200      	movs	r2, #0
   23488:	f7ff ff10 	bl	232ac <chunk_set>
	return big_heap(h) ? 8 : 4;
   2348c:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   2348e:	6820      	ldr	r0, [r4, #0]
   23490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23494:	bf2c      	ite	cs
   23496:	2308      	movcs	r3, #8
   23498:	2304      	movcc	r3, #4
   2349a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   2349e:	4428      	add	r0, r5
   234a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000234a4 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   234a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   234a8:	2900      	cmp	r1, #0
   234aa:	f000 80ae 	beq.w	2360a <sys_heap_free+0x166>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   234ae:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   234b0:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   234b2:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   234b4:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   234b6:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   234ba:	bf2c      	ite	cs
   234bc:	2508      	movcs	r5, #8
   234be:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   234c0:	1b49      	subs	r1, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   234c2:	6825      	ldr	r5, [r4, #0]
   234c4:	1b4d      	subs	r5, r1, r5
   234c6:	bf48      	it	mi
   234c8:	3507      	addmi	r5, #7
   234ca:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   234cc:	4629      	mov	r1, r5
   234ce:	f7ff fee1 	bl	23294 <chunk_field>
   234d2:	68e6      	ldr	r6, [r4, #12]
   234d4:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   234d8:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   234dc:	42bb      	cmp	r3, r7
   234de:	d036      	beq.n	2354e <sys_heap_free+0xaa>
   234e0:	4629      	mov	r1, r5
   234e2:	4620      	mov	r0, r4
   234e4:	f7ff feef 	bl	232c6 <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   234e8:	2200      	movs	r2, #0
   234ea:	4601      	mov	r1, r0
   234ec:	4682      	mov	sl, r0
   234ee:	4620      	mov	r0, r4
   234f0:	f7ff fed0 	bl	23294 <chunk_field>
   234f4:	ea30 0906 	bics.w	r9, r0, r6
   234f8:	d129      	bne.n	2354e <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   234fa:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   234fe:	bf34      	ite	cc
   23500:	2700      	movcc	r7, #0
   23502:	2701      	movcs	r7, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   23504:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   23506:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   23508:	fab6 f686 	clz	r6, r6
   2350c:	f1c7 071f 	rsb	r7, r7, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   23510:	4652      	mov	r2, sl
   23512:	4620      	mov	r0, r4
   23514:	1bb9      	subs	r1, r7, r6
   23516:	f7ff fee0 	bl	232da <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   2351a:	4643      	mov	r3, r8
   2351c:	464a      	mov	r2, r9
   2351e:	4629      	mov	r1, r5
   23520:	4620      	mov	r0, r4
   23522:	f7ff fec3 	bl	232ac <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   23526:	4629      	mov	r1, r5
   23528:	4620      	mov	r0, r4
   2352a:	f7ff feb3 	bl	23294 <chunk_field>
   2352e:	68e3      	ldr	r3, [r4, #12]
   23530:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   23532:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   23534:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   23536:	4283      	cmp	r3, r0
   23538:	d009      	beq.n	2354e <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   2353a:	4629      	mov	r1, r5
   2353c:	4620      	mov	r0, r4
   2353e:	f7ff fec2 	bl	232c6 <right_chunk>
   23542:	4643      	mov	r3, r8
   23544:	4601      	mov	r1, r0
   23546:	2201      	movs	r2, #1
   23548:	4620      	mov	r0, r4
   2354a:	f7ff feaf 	bl	232ac <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   2354e:	6923      	ldr	r3, [r4, #16]
   23550:	42ab      	cmp	r3, r5
   23552:	d047      	beq.n	235e4 <sys_heap_free+0x140>
	return chunk_field(h, c, LEFT_SIZE);
   23554:	2201      	movs	r2, #1
   23556:	4629      	mov	r1, r5
   23558:	4620      	mov	r0, r4
   2355a:	f7ff fe9b 	bl	23294 <chunk_field>
	return c - left_size(h, c);
   2355e:	1a2f      	subs	r7, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   23560:	2200      	movs	r2, #0
   23562:	4639      	mov	r1, r7
   23564:	4620      	mov	r0, r4
   23566:	f7ff fe95 	bl	23294 <chunk_field>
   2356a:	f8d4 800c 	ldr.w	r8, [r4, #12]
   2356e:	4606      	mov	r6, r0
   23570:	ea30 0908 	bics.w	r9, r0, r8
   23574:	d136      	bne.n	235e4 <sys_heap_free+0x140>
   23576:	464a      	mov	r2, r9
   23578:	4629      	mov	r1, r5
   2357a:	4620      	mov	r0, r4
   2357c:	f7ff fe8a 	bl	23294 <chunk_field>
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   23580:	4629      	mov	r1, r5
   23582:	4682      	mov	sl, r0
   23584:	4620      	mov	r0, r4
   23586:	f7ff fe9e 	bl	232c6 <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2358a:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2358c:	ea06 0608 	and.w	r6, r6, r8
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   23590:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   23594:	bf34      	ite	cc
   23596:	2100      	movcc	r1, #0
   23598:	2101      	movcs	r1, #1
   2359a:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2359c:	ea08 000a 	and.w	r0, r8, sl
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   235a0:	1983      	adds	r3, r0, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   235a2:	fab6 f686 	clz	r6, r6
   235a6:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   235aa:	463a      	mov	r2, r7
   235ac:	4620      	mov	r0, r4
   235ae:	1b89      	subs	r1, r1, r6
		size_t merged_sz = csz + size(h, lc);
   235b0:	9301      	str	r3, [sp, #4]
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   235b2:	f7ff fe92 	bl	232da <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   235b6:	464a      	mov	r2, r9
   235b8:	4639      	mov	r1, r7
   235ba:	4620      	mov	r0, r4
   235bc:	9b01      	ldr	r3, [sp, #4]
   235be:	f7ff fe75 	bl	232ac <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   235c2:	4639      	mov	r1, r7
   235c4:	4620      	mov	r0, r4
   235c6:	f7ff fe65 	bl	23294 <chunk_field>
   235ca:	68e2      	ldr	r2, [r4, #12]
   235cc:	4010      	ands	r0, r2
		if (!last_chunk(h, lc)) {
   235ce:	68a2      	ldr	r2, [r4, #8]
	return (c + size(h, c)) == h->len;
   235d0:	4438      	add	r0, r7
		if (!last_chunk(h, lc)) {
   235d2:	4290      	cmp	r0, r2
   235d4:	d005      	beq.n	235e2 <sys_heap_free+0x13e>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   235d6:	2201      	movs	r2, #1
   235d8:	4629      	mov	r1, r5
   235da:	4620      	mov	r0, r4
   235dc:	9b01      	ldr	r3, [sp, #4]
   235de:	f7ff fe65 	bl	232ac <chunk_set>
		}

		c = lc;
   235e2:	463d      	mov	r5, r7
   235e4:	4629      	mov	r1, r5
   235e6:	2200      	movs	r2, #0
   235e8:	4620      	mov	r0, r4
   235ea:	f7ff fe53 	bl	23294 <chunk_field>
   235ee:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   235f0:	4629      	mov	r1, r5
   235f2:	4003      	ands	r3, r0
   235f4:	2200      	movs	r2, #0
   235f6:	4620      	mov	r0, r4
   235f8:	f7ff fe58 	bl	232ac <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   235fc:	4629      	mov	r1, r5
   235fe:	4620      	mov	r0, r4
}
   23600:	b002      	add	sp, #8
   23602:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   23606:	f7ff be9d 	b.w	23344 <free_list_add>
}
   2360a:	b002      	add	sp, #8
   2360c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023610 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   23610:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   23614:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   23616:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   23618:	68a2      	ldr	r2, [r4, #8]
   2361a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   2361e:	bf2c      	ite	cs
   23620:	2308      	movcs	r3, #8
   23622:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   23624:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   23626:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2362a:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2362e:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   23632:	bf34      	ite	cc
   23634:	2300      	movcc	r3, #0
   23636:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   23638:	441e      	add	r6, r3
   2363a:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   2363e:	2900      	cmp	r1, #0
   23640:	d03b      	beq.n	236ba <sys_heap_alloc+0xaa>
   23642:	fab2 f282 	clz	r2, r2
   23646:	f1c3 031f 	rsb	r3, r3, #31
   2364a:	1a9b      	subs	r3, r3, r2
   2364c:	4598      	cmp	r8, r3
   2364e:	dc34      	bgt.n	236ba <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   23650:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   23652:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   23656:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   2365a:	687b      	ldr	r3, [r7, #4]
   2365c:	2b03      	cmp	r3, #3
   2365e:	bf28      	it	cs
   23660:	2303      	movcs	r3, #3
   23662:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   23664:	45ca      	cmp	sl, r9
   23666:	db0d      	blt.n	23684 <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   23668:	f04f 31ff 	mov.w	r1, #4294967295
   2366c:	6963      	ldr	r3, [r4, #20]
   2366e:	f1c6 0620 	rsb	r6, r6, #32
   23672:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   23674:	4019      	ands	r1, r3
   23676:	d020      	beq.n	236ba <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   23678:	fa91 f1a1 	rbit	r1, r1
   2367c:	462a      	mov	r2, r5
   2367e:	fab1 f181 	clz	r1, r1
   23682:	e00c      	b.n	2369e <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   23684:	6839      	ldr	r1, [r7, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   23686:	2200      	movs	r2, #0
   23688:	4620      	mov	r0, r4
   2368a:	9101      	str	r1, [sp, #4]
   2368c:	f7ff fe02 	bl	23294 <chunk_field>
   23690:	68e3      	ldr	r3, [r4, #12]
   23692:	9901      	ldr	r1, [sp, #4]
   23694:	4018      	ands	r0, r3
   23696:	42a8      	cmp	r0, r5
   23698:	d307      	bcc.n	236aa <sys_heap_alloc+0x9a>
			return split_alloc(h, bi, sz);
   2369a:	462a      	mov	r2, r5
   2369c:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   2369e:	4620      	mov	r0, r4
	}

	return NULL;
}
   236a0:	b002      	add	sp, #8
   236a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return split_alloc(h, minbucket, sz);
   236a6:	f7ff be9a 	b.w	233de <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   236aa:	2203      	movs	r2, #3
   236ac:	4620      	mov	r0, r4
   236ae:	f7ff fdf1 	bl	23294 <chunk_field>
	for (int i = 0; i < loops; i++) {
   236b2:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   236b6:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < loops; i++) {
   236b8:	e7d4      	b.n	23664 <sys_heap_alloc+0x54>
}
   236ba:	2000      	movs	r0, #0
   236bc:	b002      	add	sp, #8
   236be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000236c2 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   236c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   236c4:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   236c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   236ca:	1dcc      	adds	r4, r1, #7
   236cc:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   236d0:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   236d4:	1b1b      	subs	r3, r3, r4
   236d6:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   236d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   236dc:	bf2c      	ite	cs
   236de:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   236e2:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   236e4:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   236e6:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   236e8:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   236ea:	60e1      	str	r1, [r4, #12]
   236ec:	bf94      	ite	ls
   236ee:	2100      	movls	r1, #0
   236f0:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   236f2:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   236f6:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   236f8:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   236fa:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   236fe:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   23702:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   23704:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   23708:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   2370c:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   2370e:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   23710:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   23712:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   23714:	68a2      	ldr	r2, [r4, #8]
   23716:	42ba      	cmp	r2, r7
   23718:	bf94      	ite	ls
   2371a:	2200      	movls	r2, #0
   2371c:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2371e:	f1c2 021f 	rsb	r2, r2, #31
   23722:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   23724:	4290      	cmp	r0, r2
   23726:	dd0a      	ble.n	2373e <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   23728:	4620      	mov	r0, r4
   2372a:	1a5b      	subs	r3, r3, r1
   2372c:	2200      	movs	r2, #0
   2372e:	f7ff fdbd 	bl	232ac <chunk_set>
	free_list_add(h, h->chunk0);
   23732:	4620      	mov	r0, r4
   23734:	6921      	ldr	r1, [r4, #16]
}
   23736:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   2373a:	f7ff be03 	b.w	23344 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   2373e:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   23742:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   23744:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   23748:	e7e4      	b.n	23714 <sys_heap_init+0x52>

0002374a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_TCP_CONN_TIME, 60);
GEN_ABSOLUTE_SYM(CONFIG_SLM_UDP_PROXY, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   2374a:	4770      	bx	lr

0002374c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2374c:	f7fc bd00 	b.w	20150 <SystemInit>

00023750 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   23750:	2300      	movs	r3, #0
	list->head = NULL;
   23752:	e9c0 3300 	strd	r3, r3, [r0]
}
   23756:	4770      	bx	lr

00023758 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   23758:	6803      	ldr	r3, [r0, #0]
   2375a:	b923      	cbnz	r3, 23766 <log_list_add_tail+0xe>
		list->head = msg;
   2375c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   2375e:	2300      	movs	r3, #0
	list->tail = msg;
   23760:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   23762:	600b      	str	r3, [r1, #0]
}
   23764:	4770      	bx	lr
		list->tail->next = msg;
   23766:	6843      	ldr	r3, [r0, #4]
   23768:	6019      	str	r1, [r3, #0]
   2376a:	e7f8      	b.n	2375e <log_list_add_tail+0x6>

0002376c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2376c:	6800      	ldr	r0, [r0, #0]
   2376e:	4770      	bx	lr

00023770 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   23770:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   23772:	b10b      	cbz	r3, 23778 <log_list_head_get+0x8>
		list->head = list->head->next;
   23774:	681a      	ldr	r2, [r3, #0]
   23776:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   23778:	4618      	mov	r0, r3
   2377a:	4770      	bx	lr

0002377c <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   2377c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2377e:	f7ef fbd5 	bl	12f2c <log_msg_chunk_alloc>

	if (msg != NULL) {
   23782:	b118      	cbz	r0, 2378c <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   23784:	2301      	movs	r3, #1
   23786:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   23788:	2300      	movs	r3, #0
   2378a:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   2378c:	bd08      	pop	{r3, pc}

0002378e <k_cycle_get_32_wrapper>:
   2378e:	f7f0 b9e9 	b.w	13b64 <z_timer_cycle_get_32>

00023792 <dummy_timestamp>:
   23792:	2000      	movs	r0, #0
   23794:	4770      	bx	lr

00023796 <log_0>:
{
   23796:	b513      	push	{r0, r1, r4, lr}
   23798:	4604      	mov	r4, r0
   2379a:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   2379c:	f7ff ffee 	bl	2377c <z_log_msg_std_alloc>

	if (msg != NULL) {
   237a0:	b130      	cbz	r0, 237b0 <log_0+0x1a>
		msg_finalize(msg, src_level);
   237a2:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   237a4:	6104      	str	r4, [r0, #16]
}
   237a6:	b002      	add	sp, #8
   237a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   237ac:	f7ef bae0 	b.w	12d70 <msg_finalize>
}
   237b0:	b002      	add	sp, #8
   237b2:	bd10      	pop	{r4, pc}

000237b4 <log_1>:
{
   237b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   237b6:	460c      	mov	r4, r1
   237b8:	4611      	mov	r1, r2
   237ba:	4605      	mov	r5, r0
   237bc:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   237be:	f7ff ffdd 	bl	2377c <z_log_msg_std_alloc>

	if (msg != NULL) {
   237c2:	b160      	cbz	r0, 237de <log_1+0x2a>
		msg->str = str;
   237c4:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   237c6:	2501      	movs	r5, #1
   237c8:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   237ca:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   237cc:	f365 1207 	bfi	r2, r5, #4, #4
   237d0:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   237d2:	9901      	ldr	r1, [sp, #4]
}
   237d4:	b003      	add	sp, #12
   237d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   237da:	f7ef bac9 	b.w	12d70 <msg_finalize>
}
   237de:	b003      	add	sp, #12
   237e0:	bd30      	pop	{r4, r5, pc}

000237e2 <log_2>:
{
   237e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   237e4:	460e      	mov	r6, r1
   237e6:	4619      	mov	r1, r3
   237e8:	4607      	mov	r7, r0
   237ea:	4615      	mov	r5, r2
   237ec:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   237ee:	f7ff ffc5 	bl	2377c <z_log_msg_std_alloc>

	if (msg != NULL) {
   237f2:	b168      	cbz	r0, 23810 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   237f4:	2202      	movs	r2, #2
   237f6:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   237f8:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   237fc:	f362 1307 	bfi	r3, r2, #4, #4
   23800:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   23802:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   23804:	6107      	str	r7, [r0, #16]
}
   23806:	b003      	add	sp, #12
   23808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   2380c:	f7ef bab0 	b.w	12d70 <msg_finalize>
}
   23810:	b003      	add	sp, #12
   23812:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023814 <log_3>:
{
   23814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23818:	460f      	mov	r7, r1
   2381a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   2381e:	4680      	mov	r8, r0
   23820:	4616      	mov	r6, r2
   23822:	461d      	mov	r5, r3
   23824:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23826:	f7ff ffa9 	bl	2377c <z_log_msg_std_alloc>

	if (msg != NULL) {
   2382a:	b178      	cbz	r0, 2384c <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2382c:	2203      	movs	r2, #3
   2382e:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23830:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   23834:	f362 1307 	bfi	r3, r2, #4, #4
   23838:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2383a:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2383c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   23840:	61c5      	str	r5, [r0, #28]
}
   23842:	b002      	add	sp, #8
   23844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   23848:	f7ef ba92 	b.w	12d70 <msg_finalize>
}
   2384c:	b002      	add	sp, #8
   2384e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023852 <log_n>:
{
   23852:	b510      	push	{r4, lr}
   23854:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   23856:	f000 f8ae 	bl	239b6 <log_msg_create_n>
		if (msg == NULL) {
   2385a:	b120      	cbz	r0, 23866 <log_n+0x14>
		msg_finalize(msg, src_level);
   2385c:	4621      	mov	r1, r4
}
   2385e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   23862:	f7ef ba85 	b.w	12d70 <msg_finalize>
}
   23866:	bd10      	pop	{r4, pc}

00023868 <log_printk>:
{
   23868:	b500      	push	{lr}
   2386a:	b0a3      	sub	sp, #140	; 0x8c
   2386c:	4602      	mov	r2, r0
   2386e:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   23870:	a801      	add	r0, sp, #4
   23872:	2181      	movs	r1, #129	; 0x81
   23874:	f7ef f852 	bl	1291c <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   23878:	2881      	cmp	r0, #129	; 0x81
   2387a:	4602      	mov	r2, r0
   2387c:	a901      	add	r1, sp, #4
   2387e:	bf28      	it	cs
   23880:	2281      	movcs	r2, #129	; 0x81
   23882:	2000      	movs	r0, #0
   23884:	f000 f8eb 	bl	23a5e <log_msg_hexdump_create>
			if (msg == NULL) {
   23888:	b118      	cbz	r0, 23892 <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   2388a:	f04f 0100 	mov.w	r1, #0
   2388e:	f7ef fa6f 	bl	12d70 <msg_finalize>
}
   23892:	b023      	add	sp, #140	; 0x8c
   23894:	f85d fb04 	ldr.w	pc, [sp], #4

00023898 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   23898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2389c:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   2389e:	8903      	ldrh	r3, [r0, #8]
{
   238a0:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   238a2:	f3c3 038d 	ubfx	r3, r3, #2, #14
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   238a6:	42a3      	cmp	r3, r4
{
   238a8:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   238ac:	d803      	bhi.n	238b6 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   238ae:	2300      	movs	r3, #0
   238b0:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   238b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   238b6:	6811      	ldr	r1, [r2, #0]
   238b8:	4421      	add	r1, r4
   238ba:	4299      	cmp	r1, r3
		*length = available_len - offset;
   238bc:	bf84      	itt	hi
   238be:	1b19      	subhi	r1, r3, r4
   238c0:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   238c2:	2b0c      	cmp	r3, #12
	req_len = *length;
   238c4:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   238c8:	d928      	bls.n	2391c <log_msg_hexdump_data_op+0x84>
	if (offset < chunk_len) {
   238ca:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   238cc:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   238d0:	d82b      	bhi.n	2392a <log_msg_hexdump_data_op+0x92>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   238d2:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   238d4:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   238d6:	454b      	cmp	r3, r9
   238d8:	bf28      	it	cs
   238da:	464b      	movcs	r3, r9
   238dc:	4420      	add	r0, r4
   238de:	461d      	mov	r5, r3
   238e0:	461a      	mov	r2, r3
		if (put_op) {
   238e2:	b1ff      	cbz	r7, 23924 <log_msg_hexdump_data_op+0x8c>
   238e4:	4631      	mov	r1, r6
   238e6:	f003 f88e 	bl	26a06 <memcpy>
		req_len -= cpy_len;
   238ea:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   238ee:	442e      	add	r6, r5
	while (req_len > 0) {
   238f0:	f1b9 0f00 	cmp.w	r9, #0
   238f4:	d0dd      	beq.n	238b2 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   238f6:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   238fa:	454d      	cmp	r5, r9
   238fc:	bf28      	it	cs
   238fe:	464d      	movcs	r5, r9
		if (put_op) {
   23900:	1d20      	adds	r0, r4, #4
   23902:	462a      	mov	r2, r5
   23904:	4440      	add	r0, r8
   23906:	b1bf      	cbz	r7, 23938 <log_msg_hexdump_data_op+0xa0>
   23908:	4631      	mov	r1, r6
   2390a:	f003 f87c 	bl	26a06 <memcpy>
		offset = 0;
   2390e:	2400      	movs	r4, #0
		cont = cont->next;
   23910:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   23914:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   23918:	442e      	add	r6, r5
   2391a:	e7e9      	b.n	238f0 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   2391c:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   23920:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   23922:	e7d8      	b.n	238d6 <log_msg_hexdump_data_op+0x3e>
   23924:	4601      	mov	r1, r0
   23926:	4630      	mov	r0, r6
   23928:	e7dd      	b.n	238e6 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2392a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   2392c:	2c1b      	cmp	r4, #27
   2392e:	d9df      	bls.n	238f0 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   23930:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   23934:	3c1c      	subs	r4, #28
   23936:	e7f9      	b.n	2392c <log_msg_hexdump_data_op+0x94>
   23938:	4601      	mov	r1, r0
   2393a:	4630      	mov	r0, r6
   2393c:	e7e5      	b.n	2390a <log_msg_hexdump_data_op+0x72>

0002393e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2393e:	3004      	adds	r0, #4
   23940:	e8d0 3fef 	ldaex	r3, [r0]
   23944:	3301      	adds	r3, #1
   23946:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2394a:	2a00      	cmp	r2, #0
   2394c:	d1f8      	bne.n	23940 <log_msg_get+0x2>
}
   2394e:	4770      	bx	lr

00023950 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   23950:	7a40      	ldrb	r0, [r0, #9]
}
   23952:	0900      	lsrs	r0, r0, #4
   23954:	4770      	bx	lr

00023956 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   23956:	7a43      	ldrb	r3, [r0, #9]
   23958:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2395c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   23960:	d216      	bcs.n	23990 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   23962:	2a03      	cmp	r2, #3
   23964:	d803      	bhi.n	2396e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   23966:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2396a:	6948      	ldr	r0, [r1, #20]
   2396c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2396e:	2901      	cmp	r1, #1
   23970:	d803      	bhi.n	2397a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   23972:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   23976:	6988      	ldr	r0, [r1, #24]
   23978:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2397a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2397c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2397e:	2906      	cmp	r1, #6
   23980:	d803      	bhi.n	2398a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   23982:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   23986:	6848      	ldr	r0, [r1, #4]
   23988:	4770      	bx	lr
		cont = cont->next;
   2398a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2398c:	3907      	subs	r1, #7
		cont = cont->next;
   2398e:	e7f6      	b.n	2397e <log_msg_arg_get+0x28>
		return 0;
   23990:	2000      	movs	r0, #0
}
   23992:	4770      	bx	lr

00023994 <log_msg_put>:
{
   23994:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   23996:	1d02      	adds	r2, r0, #4
   23998:	e8d2 1fef 	ldaex	r1, [r2]
   2399c:	3901      	subs	r1, #1
   2399e:	e8c2 1fec 	stlex	ip, r1, [r2]
   239a2:	f1bc 0f00 	cmp.w	ip, #0
   239a6:	d1f7      	bne.n	23998 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   239a8:	685b      	ldr	r3, [r3, #4]
   239aa:	b90b      	cbnz	r3, 239b0 <log_msg_put+0x1c>
		msg_free(msg);
   239ac:	f7ef bad2 	b.w	12f54 <msg_free>
}
   239b0:	4770      	bx	lr

000239b2 <log_msg_str_get>:
}
   239b2:	6900      	ldr	r0, [r0, #16]
   239b4:	4770      	bx	lr

000239b6 <log_msg_create_n>:
{
   239b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239ba:	4681      	mov	r9, r0
   239bc:	4688      	mov	r8, r1
   239be:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   239c0:	f7ef fab4 	bl	12f2c <log_msg_chunk_alloc>
	if (msg != NULL) {
   239c4:	4604      	mov	r4, r0
   239c6:	b330      	cbz	r0, 23a16 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   239c8:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   239ca:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   239cc:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   239ce:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   239d0:	8107      	strh	r7, [r0, #8]
   239d2:	d909      	bls.n	239e8 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   239d4:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   239d6:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   239da:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   239dc:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   239e0:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   239e2:	f1ba 0f00 	cmp.w	sl, #0
   239e6:	dc0e      	bgt.n	23a06 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   239e8:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   239ea:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   239ec:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   239f0:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   239f4:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   239f6:	d818      	bhi.n	23a2a <log_msg_create_n+0x74>
   239f8:	4641      	mov	r1, r8
   239fa:	00aa      	lsls	r2, r5, #2
   239fc:	f104 0014 	add.w	r0, r4, #20
   23a00:	f003 f801 	bl	26a06 <memcpy>
	while (nargs != 0U) {
   23a04:	e007      	b.n	23a16 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   23a06:	f7ef fa91 	bl	12f2c <log_msg_chunk_alloc>
		if (cont == NULL) {
   23a0a:	4606      	mov	r6, r0
   23a0c:	b930      	cbnz	r0, 23a1c <log_msg_create_n+0x66>
			msg_free(msg);
   23a0e:	4620      	mov	r0, r4
   23a10:	f7ef faa0 	bl	12f54 <msg_free>
			return NULL;
   23a14:	4634      	mov	r4, r6
}
   23a16:	4620      	mov	r0, r4
   23a18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   23a1c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   23a20:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   23a24:	4683      	mov	fp, r0
		cont->next = NULL;
   23a26:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   23a28:	e7db      	b.n	239e2 <log_msg_create_n+0x2c>
   23a2a:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   23a2e:	6967      	ldr	r7, [r4, #20]
   23a30:	61a3      	str	r3, [r4, #24]
   23a32:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   23a36:	3d02      	subs	r5, #2
   23a38:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   23a3a:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   23a3e:	2d07      	cmp	r5, #7
   23a40:	462e      	mov	r6, r5
   23a42:	bf28      	it	cs
   23a44:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   23a46:	ea4f 0986 	mov.w	r9, r6, lsl #2
   23a4a:	4641      	mov	r1, r8
   23a4c:	1d38      	adds	r0, r7, #4
   23a4e:	464a      	mov	r2, r9
   23a50:	f002 ffd9 	bl	26a06 <memcpy>
	while (nargs != 0U) {
   23a54:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   23a56:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   23a58:	44c8      	add	r8, r9
	while (nargs != 0U) {
   23a5a:	d1f0      	bne.n	23a3e <log_msg_create_n+0x88>
   23a5c:	e7db      	b.n	23a16 <log_msg_create_n+0x60>

00023a5e <log_msg_hexdump_create>:
{
   23a5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   23a62:	f643 75ff 	movw	r5, #16383	; 0x3fff
   23a66:	4295      	cmp	r5, r2
{
   23a68:	4680      	mov	r8, r0
   23a6a:	460e      	mov	r6, r1
   23a6c:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   23a6e:	bf28      	it	cs
   23a70:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   23a72:	f7ef fa5b 	bl	12f2c <log_msg_chunk_alloc>
	if (msg == NULL) {
   23a76:	4604      	mov	r4, r0
   23a78:	b378      	cbz	r0, 23ada <log_msg_hexdump_create+0x7c>
	msg->hdr.ref_cnt = 1;
   23a7a:	2301      	movs	r3, #1
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   23a7c:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.ref_cnt = 1;
   23a7e:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   23a80:	00ab      	lsls	r3, r5, #2
   23a82:	f043 0301 	orr.w	r3, r3, #1
   23a86:	f002 0202 	and.w	r2, r2, #2
   23a8a:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23a8c:	2f0c      	cmp	r7, #12
	msg->str = str;
   23a8e:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   23a92:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23a94:	f100 0814 	add.w	r8, r0, #20
   23a98:	d916      	bls.n	23ac8 <log_msg_hexdump_create+0x6a>
   23a9a:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   23a9c:	7a02      	ldrb	r2, [r0, #8]
   23a9e:	6183      	str	r3, [r0, #24]
   23aa0:	6873      	ldr	r3, [r6, #4]
   23aa2:	f042 0202 	orr.w	r2, r2, #2
   23aa6:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   23aa8:	2300      	movs	r3, #0
   23aaa:	4699      	mov	r9, r3
   23aac:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   23aae:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   23ab0:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   23ab2:	3d08      	subs	r5, #8
	while (length > 0) {
   23ab4:	b18d      	cbz	r5, 23ada <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   23ab6:	f7ef fa39 	bl	12f2c <log_msg_chunk_alloc>
		if (cont == NULL) {
   23aba:	4607      	mov	r7, r0
   23abc:	b980      	cbnz	r0, 23ae0 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   23abe:	4620      	mov	r0, r4
   23ac0:	f7ef fa48 	bl	12f54 <msg_free>
			return NULL;
   23ac4:	463c      	mov	r4, r7
   23ac6:	e008      	b.n	23ada <log_msg_hexdump_create+0x7c>
   23ac8:	462a      	mov	r2, r5
   23aca:	4631      	mov	r1, r6
   23acc:	4640      	mov	r0, r8
   23ace:	f002 ff9a 	bl	26a06 <memcpy>
		msg->hdr.params.generic.ext = 0;
   23ad2:	7a23      	ldrb	r3, [r4, #8]
   23ad4:	f36f 0341 	bfc	r3, #1, #1
   23ad8:	7223      	strb	r3, [r4, #8]
}
   23ada:	4620      	mov	r0, r4
   23adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   23ae0:	2d1c      	cmp	r5, #28
   23ae2:	462f      	mov	r7, r5
   23ae4:	bf28      	it	cs
   23ae6:	271c      	movcs	r7, #28
		*prev_cont = cont;
   23ae8:	f8c8 0000 	str.w	r0, [r8]
   23aec:	4631      	mov	r1, r6
		cont->next = NULL;
   23aee:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   23af2:	4680      	mov	r8, r0
   23af4:	463a      	mov	r2, r7
   23af6:	3004      	adds	r0, #4
   23af8:	f002 ff85 	bl	26a06 <memcpy>
		data += chunk_length;
   23afc:	443e      	add	r6, r7
		length -= chunk_length;
   23afe:	1bed      	subs	r5, r5, r7
   23b00:	e7d8      	b.n	23ab4 <log_msg_hexdump_create+0x56>

00023b02 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   23b02:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   23b04:	2400      	movs	r4, #0
   23b06:	9400      	str	r4, [sp, #0]
   23b08:	f7ff fec6 	bl	23898 <log_msg_hexdump_data_op>
}
   23b0c:	b002      	add	sp, #8
   23b0e:	bd10      	pop	{r4, pc}

00023b10 <buffer_write>:
{
   23b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b12:	4606      	mov	r6, r0
   23b14:	460d      	mov	r5, r1
   23b16:	4614      	mov	r4, r2
   23b18:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   23b1a:	4621      	mov	r1, r4
   23b1c:	4628      	mov	r0, r5
   23b1e:	463a      	mov	r2, r7
   23b20:	47b0      	blx	r6
	} while (len != 0);
   23b22:	1a24      	subs	r4, r4, r0
		buf += processed;
   23b24:	4405      	add	r5, r0
	} while (len != 0);
   23b26:	d1f8      	bne.n	23b1a <buffer_write+0xa>
}
   23b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023b2a <std_print>:
{
   23b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23b2e:	b08e      	sub	sp, #56	; 0x38
   23b30:	af0e      	add	r7, sp, #56	; 0x38
   23b32:	4680      	mov	r8, r0
   23b34:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   23b36:	f7ff ff3c 	bl	239b2 <log_msg_str_get>
   23b3a:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   23b3c:	4640      	mov	r0, r8
   23b3e:	f7ff ff07 	bl	23950 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   23b42:	f04f 0900 	mov.w	r9, #0
	u32_t nargs = log_msg_nargs_get(msg);
   23b46:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   23b48:	0083      	lsls	r3, r0, #2
   23b4a:	3307      	adds	r3, #7
   23b4c:	f023 0307 	bic.w	r3, r3, #7
   23b50:	ebad 0d03 	sub.w	sp, sp, r3
   23b54:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   23b56:	45d1      	cmp	r9, sl
   23b58:	d116      	bne.n	23b88 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   23b5a:	4640      	mov	r0, r8
   23b5c:	f7ff fef8 	bl	23950 <log_msg_nargs_get>
   23b60:	280f      	cmp	r0, #15
   23b62:	d81e      	bhi.n	23ba2 <std_print+0x78>
   23b64:	e8df f010 	tbh	[pc, r0, lsl #1]
   23b68:	00200019 	.word	0x00200019
   23b6c:	002d0026 	.word	0x002d0026
   23b70:	00410036 	.word	0x00410036
   23b74:	005d004e 	.word	0x005d004e
   23b78:	0081006e 	.word	0x0081006e
   23b7c:	00ad0096 	.word	0x00ad0096
   23b80:	00e100c6 	.word	0x00e100c6
   23b84:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   23b88:	4649      	mov	r1, r9
   23b8a:	4640      	mov	r0, r8
   23b8c:	f7ff fee3 	bl	23956 <log_msg_arg_get>
   23b90:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   23b94:	f109 0901 	add.w	r9, r9, #1
   23b98:	e7dd      	b.n	23b56 <std_print+0x2c>
		print_formatted(log_output, str);
   23b9a:	4631      	mov	r1, r6
   23b9c:	4628      	mov	r0, r5
   23b9e:	f7ef fa17 	bl	12fd0 <print_formatted>
}
   23ba2:	46bd      	mov	sp, r7
   23ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   23ba8:	4631      	mov	r1, r6
   23baa:	4628      	mov	r0, r5
   23bac:	6822      	ldr	r2, [r4, #0]
   23bae:	f7ef fa0f 	bl	12fd0 <print_formatted>
		break;
   23bb2:	e7f6      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   23bb4:	4631      	mov	r1, r6
   23bb6:	e9d4 2300 	ldrd	r2, r3, [r4]
   23bba:	4628      	mov	r0, r5
   23bbc:	f7ef fa08 	bl	12fd0 <print_formatted>
		break;
   23bc0:	e7ef      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   23bc2:	68a3      	ldr	r3, [r4, #8]
   23bc4:	4631      	mov	r1, r6
   23bc6:	9300      	str	r3, [sp, #0]
   23bc8:	4628      	mov	r0, r5
   23bca:	e9d4 2300 	ldrd	r2, r3, [r4]
   23bce:	f7ef f9ff 	bl	12fd0 <print_formatted>
		break;
   23bd2:	e7e6      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23bd4:	68e3      	ldr	r3, [r4, #12]
   23bd6:	4631      	mov	r1, r6
   23bd8:	9301      	str	r3, [sp, #4]
   23bda:	68a3      	ldr	r3, [r4, #8]
   23bdc:	4628      	mov	r0, r5
   23bde:	9300      	str	r3, [sp, #0]
   23be0:	e9d4 2300 	ldrd	r2, r3, [r4]
   23be4:	f7ef f9f4 	bl	12fd0 <print_formatted>
		break;
   23be8:	e7db      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23bea:	6923      	ldr	r3, [r4, #16]
   23bec:	4631      	mov	r1, r6
   23bee:	9302      	str	r3, [sp, #8]
   23bf0:	68e3      	ldr	r3, [r4, #12]
   23bf2:	4628      	mov	r0, r5
   23bf4:	9301      	str	r3, [sp, #4]
   23bf6:	68a3      	ldr	r3, [r4, #8]
   23bf8:	9300      	str	r3, [sp, #0]
   23bfa:	e9d4 2300 	ldrd	r2, r3, [r4]
   23bfe:	f7ef f9e7 	bl	12fd0 <print_formatted>
		break;
   23c02:	e7ce      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23c04:	6963      	ldr	r3, [r4, #20]
   23c06:	4631      	mov	r1, r6
   23c08:	9303      	str	r3, [sp, #12]
   23c0a:	6923      	ldr	r3, [r4, #16]
   23c0c:	4628      	mov	r0, r5
   23c0e:	9302      	str	r3, [sp, #8]
   23c10:	68e3      	ldr	r3, [r4, #12]
   23c12:	9301      	str	r3, [sp, #4]
   23c14:	68a3      	ldr	r3, [r4, #8]
   23c16:	9300      	str	r3, [sp, #0]
   23c18:	e9d4 2300 	ldrd	r2, r3, [r4]
   23c1c:	f7ef f9d8 	bl	12fd0 <print_formatted>
		break;
   23c20:	e7bf      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23c22:	69a3      	ldr	r3, [r4, #24]
   23c24:	4631      	mov	r1, r6
   23c26:	9304      	str	r3, [sp, #16]
   23c28:	6963      	ldr	r3, [r4, #20]
   23c2a:	4628      	mov	r0, r5
   23c2c:	9303      	str	r3, [sp, #12]
   23c2e:	6923      	ldr	r3, [r4, #16]
   23c30:	9302      	str	r3, [sp, #8]
   23c32:	68e3      	ldr	r3, [r4, #12]
   23c34:	9301      	str	r3, [sp, #4]
   23c36:	68a3      	ldr	r3, [r4, #8]
   23c38:	9300      	str	r3, [sp, #0]
   23c3a:	e9d4 2300 	ldrd	r2, r3, [r4]
   23c3e:	f7ef f9c7 	bl	12fd0 <print_formatted>
		break;
   23c42:	e7ae      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23c44:	69e3      	ldr	r3, [r4, #28]
   23c46:	4631      	mov	r1, r6
   23c48:	9305      	str	r3, [sp, #20]
   23c4a:	69a3      	ldr	r3, [r4, #24]
   23c4c:	4628      	mov	r0, r5
   23c4e:	9304      	str	r3, [sp, #16]
   23c50:	6963      	ldr	r3, [r4, #20]
   23c52:	9303      	str	r3, [sp, #12]
   23c54:	6923      	ldr	r3, [r4, #16]
   23c56:	9302      	str	r3, [sp, #8]
   23c58:	68e3      	ldr	r3, [r4, #12]
   23c5a:	9301      	str	r3, [sp, #4]
   23c5c:	68a3      	ldr	r3, [r4, #8]
   23c5e:	9300      	str	r3, [sp, #0]
   23c60:	e9d4 2300 	ldrd	r2, r3, [r4]
   23c64:	f7ef f9b4 	bl	12fd0 <print_formatted>
		break;
   23c68:	e79b      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23c6a:	6a23      	ldr	r3, [r4, #32]
   23c6c:	4631      	mov	r1, r6
   23c6e:	9306      	str	r3, [sp, #24]
   23c70:	69e3      	ldr	r3, [r4, #28]
   23c72:	4628      	mov	r0, r5
   23c74:	9305      	str	r3, [sp, #20]
   23c76:	69a3      	ldr	r3, [r4, #24]
   23c78:	9304      	str	r3, [sp, #16]
   23c7a:	6963      	ldr	r3, [r4, #20]
   23c7c:	9303      	str	r3, [sp, #12]
   23c7e:	6923      	ldr	r3, [r4, #16]
   23c80:	9302      	str	r3, [sp, #8]
   23c82:	68e3      	ldr	r3, [r4, #12]
   23c84:	9301      	str	r3, [sp, #4]
   23c86:	68a3      	ldr	r3, [r4, #8]
   23c88:	9300      	str	r3, [sp, #0]
   23c8a:	e9d4 2300 	ldrd	r2, r3, [r4]
   23c8e:	f7ef f99f 	bl	12fd0 <print_formatted>
		break;
   23c92:	e786      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23c96:	4631      	mov	r1, r6
   23c98:	9307      	str	r3, [sp, #28]
   23c9a:	6a23      	ldr	r3, [r4, #32]
   23c9c:	4628      	mov	r0, r5
   23c9e:	9306      	str	r3, [sp, #24]
   23ca0:	69e3      	ldr	r3, [r4, #28]
   23ca2:	9305      	str	r3, [sp, #20]
   23ca4:	69a3      	ldr	r3, [r4, #24]
   23ca6:	9304      	str	r3, [sp, #16]
   23ca8:	6963      	ldr	r3, [r4, #20]
   23caa:	9303      	str	r3, [sp, #12]
   23cac:	6923      	ldr	r3, [r4, #16]
   23cae:	9302      	str	r3, [sp, #8]
   23cb0:	68e3      	ldr	r3, [r4, #12]
   23cb2:	9301      	str	r3, [sp, #4]
   23cb4:	68a3      	ldr	r3, [r4, #8]
   23cb6:	9300      	str	r3, [sp, #0]
   23cb8:	e9d4 2300 	ldrd	r2, r3, [r4]
   23cbc:	f7ef f988 	bl	12fd0 <print_formatted>
		break;
   23cc0:	e76f      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23cc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23cc4:	4631      	mov	r1, r6
   23cc6:	9308      	str	r3, [sp, #32]
   23cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23cca:	4628      	mov	r0, r5
   23ccc:	9307      	str	r3, [sp, #28]
   23cce:	6a23      	ldr	r3, [r4, #32]
   23cd0:	9306      	str	r3, [sp, #24]
   23cd2:	69e3      	ldr	r3, [r4, #28]
   23cd4:	9305      	str	r3, [sp, #20]
   23cd6:	69a3      	ldr	r3, [r4, #24]
   23cd8:	9304      	str	r3, [sp, #16]
   23cda:	6963      	ldr	r3, [r4, #20]
   23cdc:	9303      	str	r3, [sp, #12]
   23cde:	6923      	ldr	r3, [r4, #16]
   23ce0:	9302      	str	r3, [sp, #8]
   23ce2:	68e3      	ldr	r3, [r4, #12]
   23ce4:	9301      	str	r3, [sp, #4]
   23ce6:	68a3      	ldr	r3, [r4, #8]
   23ce8:	9300      	str	r3, [sp, #0]
   23cea:	e9d4 2300 	ldrd	r2, r3, [r4]
   23cee:	f7ef f96f 	bl	12fd0 <print_formatted>
		break;
   23cf2:	e756      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23cf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23cf6:	4631      	mov	r1, r6
   23cf8:	9309      	str	r3, [sp, #36]	; 0x24
   23cfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23cfc:	4628      	mov	r0, r5
   23cfe:	9308      	str	r3, [sp, #32]
   23d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23d02:	9307      	str	r3, [sp, #28]
   23d04:	6a23      	ldr	r3, [r4, #32]
   23d06:	9306      	str	r3, [sp, #24]
   23d08:	69e3      	ldr	r3, [r4, #28]
   23d0a:	9305      	str	r3, [sp, #20]
   23d0c:	69a3      	ldr	r3, [r4, #24]
   23d0e:	9304      	str	r3, [sp, #16]
   23d10:	6963      	ldr	r3, [r4, #20]
   23d12:	9303      	str	r3, [sp, #12]
   23d14:	6923      	ldr	r3, [r4, #16]
   23d16:	9302      	str	r3, [sp, #8]
   23d18:	68e3      	ldr	r3, [r4, #12]
   23d1a:	9301      	str	r3, [sp, #4]
   23d1c:	68a3      	ldr	r3, [r4, #8]
   23d1e:	9300      	str	r3, [sp, #0]
   23d20:	e9d4 2300 	ldrd	r2, r3, [r4]
   23d24:	f7ef f954 	bl	12fd0 <print_formatted>
		break;
   23d28:	e73b      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23d2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23d2c:	4631      	mov	r1, r6
   23d2e:	930a      	str	r3, [sp, #40]	; 0x28
   23d30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23d32:	4628      	mov	r0, r5
   23d34:	9309      	str	r3, [sp, #36]	; 0x24
   23d36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23d38:	9308      	str	r3, [sp, #32]
   23d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23d3c:	9307      	str	r3, [sp, #28]
   23d3e:	6a23      	ldr	r3, [r4, #32]
   23d40:	9306      	str	r3, [sp, #24]
   23d42:	69e3      	ldr	r3, [r4, #28]
   23d44:	9305      	str	r3, [sp, #20]
   23d46:	69a3      	ldr	r3, [r4, #24]
   23d48:	9304      	str	r3, [sp, #16]
   23d4a:	6963      	ldr	r3, [r4, #20]
   23d4c:	9303      	str	r3, [sp, #12]
   23d4e:	6923      	ldr	r3, [r4, #16]
   23d50:	9302      	str	r3, [sp, #8]
   23d52:	68e3      	ldr	r3, [r4, #12]
   23d54:	9301      	str	r3, [sp, #4]
   23d56:	68a3      	ldr	r3, [r4, #8]
   23d58:	9300      	str	r3, [sp, #0]
   23d5a:	e9d4 2300 	ldrd	r2, r3, [r4]
   23d5e:	f7ef f937 	bl	12fd0 <print_formatted>
		break;
   23d62:	e71e      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23d66:	4631      	mov	r1, r6
   23d68:	930b      	str	r3, [sp, #44]	; 0x2c
   23d6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23d6c:	4628      	mov	r0, r5
   23d6e:	930a      	str	r3, [sp, #40]	; 0x28
   23d70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23d72:	9309      	str	r3, [sp, #36]	; 0x24
   23d74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23d76:	9308      	str	r3, [sp, #32]
   23d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23d7a:	9307      	str	r3, [sp, #28]
   23d7c:	6a23      	ldr	r3, [r4, #32]
   23d7e:	9306      	str	r3, [sp, #24]
   23d80:	69e3      	ldr	r3, [r4, #28]
   23d82:	9305      	str	r3, [sp, #20]
   23d84:	69a3      	ldr	r3, [r4, #24]
   23d86:	9304      	str	r3, [sp, #16]
   23d88:	6963      	ldr	r3, [r4, #20]
   23d8a:	9303      	str	r3, [sp, #12]
   23d8c:	6923      	ldr	r3, [r4, #16]
   23d8e:	9302      	str	r3, [sp, #8]
   23d90:	68e3      	ldr	r3, [r4, #12]
   23d92:	9301      	str	r3, [sp, #4]
   23d94:	68a3      	ldr	r3, [r4, #8]
   23d96:	9300      	str	r3, [sp, #0]
   23d98:	e9d4 2300 	ldrd	r2, r3, [r4]
   23d9c:	f7ef f918 	bl	12fd0 <print_formatted>
		break;
   23da0:	e6ff      	b.n	23ba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23da2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   23da4:	4631      	mov	r1, r6
   23da6:	930c      	str	r3, [sp, #48]	; 0x30
   23da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23daa:	4628      	mov	r0, r5
   23dac:	930b      	str	r3, [sp, #44]	; 0x2c
   23dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23db0:	930a      	str	r3, [sp, #40]	; 0x28
   23db2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23db4:	9309      	str	r3, [sp, #36]	; 0x24
   23db6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23db8:	9308      	str	r3, [sp, #32]
   23dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23dbc:	9307      	str	r3, [sp, #28]
   23dbe:	6a23      	ldr	r3, [r4, #32]
   23dc0:	9306      	str	r3, [sp, #24]
   23dc2:	69e3      	ldr	r3, [r4, #28]
   23dc4:	9305      	str	r3, [sp, #20]
   23dc6:	69a3      	ldr	r3, [r4, #24]
   23dc8:	9304      	str	r3, [sp, #16]
   23dca:	6963      	ldr	r3, [r4, #20]
   23dcc:	9303      	str	r3, [sp, #12]
   23dce:	6923      	ldr	r3, [r4, #16]
   23dd0:	9302      	str	r3, [sp, #8]
   23dd2:	68e3      	ldr	r3, [r4, #12]
   23dd4:	9301      	str	r3, [sp, #4]
   23dd6:	68a3      	ldr	r3, [r4, #8]
   23dd8:	9300      	str	r3, [sp, #0]
   23dda:	e9d4 2300 	ldrd	r2, r3, [r4]
   23dde:	f7ef f8f7 	bl	12fd0 <print_formatted>
}
   23de2:	e6de      	b.n	23ba2 <std_print+0x78>

00023de4 <log_output_flush>:
		     log_output->control_block->offset,
   23de4:	6842      	ldr	r2, [r0, #4]
{
   23de6:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   23de8:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   23dec:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   23dee:	6881      	ldr	r1, [r0, #8]
   23df0:	6800      	ldr	r0, [r0, #0]
   23df2:	f7ff fe8d 	bl	23b10 <buffer_write>
	log_output->control_block->offset = 0;
   23df6:	2200      	movs	r2, #0
   23df8:	6863      	ldr	r3, [r4, #4]
   23dfa:	601a      	str	r2, [r3, #0]
}
   23dfc:	bd10      	pop	{r4, pc}

00023dfe <out_func>:
{
   23dfe:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   23e00:	684b      	ldr	r3, [r1, #4]
{
   23e02:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   23e04:	681a      	ldr	r2, [r3, #0]
   23e06:	68cb      	ldr	r3, [r1, #12]
{
   23e08:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   23e0a:	429a      	cmp	r2, r3
   23e0c:	d102      	bne.n	23e14 <out_func+0x16>
		log_output_flush(out_ctx);
   23e0e:	4608      	mov	r0, r1
   23e10:	f7ff ffe8 	bl	23de4 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23e14:	6863      	ldr	r3, [r4, #4]
   23e16:	e8d3 2fef 	ldaex	r2, [r3]
   23e1a:	1c51      	adds	r1, r2, #1
   23e1c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   23e20:	2800      	cmp	r0, #0
   23e22:	d1f8      	bne.n	23e16 <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
   23e24:	68a3      	ldr	r3, [r4, #8]
}
   23e26:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (u8_t)c;
   23e28:	549d      	strb	r5, [r3, r2]
}
   23e2a:	bd38      	pop	{r3, r4, r5, pc}

00023e2c <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   23e2c:	f7ef bc52 	b.w	136d4 <socket_offload_getaddrinfo>

00023e30 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   23e30:	f7ef bc5a 	b.w	136e8 <socket_offload_freeaddrinfo>

00023e34 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   23e34:	b40c      	push	{r2, r3}
   23e36:	4603      	mov	r3, r0
   23e38:	b507      	push	{r0, r1, r2, lr}
   23e3a:	aa04      	add	r2, sp, #16
   23e3c:	4608      	mov	r0, r1
   23e3e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   23e42:	689b      	ldr	r3, [r3, #8]
	va_start(args, request);
   23e44:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   23e46:	4798      	blx	r3
	va_end(args);

	return res;
}
   23e48:	b003      	add	sp, #12
   23e4a:	f85d eb04 	ldr.w	lr, [sp], #4
   23e4e:	b002      	add	sp, #8
   23e50:	4770      	bx	lr

00023e52 <z_impl_zsock_close>:
{
   23e52:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   23e54:	a901      	add	r1, sp, #4
{
   23e56:	4605      	mov	r5, r0
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   23e58:	f7ee fb28 	bl	124ac <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   23e5c:	4604      	mov	r4, r0
   23e5e:	b150      	cbz	r0, 23e76 <z_impl_zsock_close+0x24>
	z_free_fd(sock);
   23e60:	4628      	mov	r0, r5
   23e62:	f7ee fb65 	bl	12530 <z_free_fd>
	return z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_CLOSE);
   23e66:	f44f 7280 	mov.w	r2, #256	; 0x100
   23e6a:	4621      	mov	r1, r4
   23e6c:	9801      	ldr	r0, [sp, #4]
   23e6e:	f7ff ffe1 	bl	23e34 <z_fdtable_call_ioctl>
}
   23e72:	b003      	add	sp, #12
   23e74:	bd30      	pop	{r4, r5, pc}
		return -1;
   23e76:	f04f 30ff 	mov.w	r0, #4294967295
   23e7a:	e7fa      	b.n	23e72 <z_impl_zsock_close+0x20>

00023e7c <z_impl_zsock_bind>:
{
   23e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   23e7e:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   23e80:	a903      	add	r1, sp, #12
{
   23e82:	9201      	str	r2, [sp, #4]
	return z_get_fd_obj_and_vtable(sock,
   23e84:	f7ee fb12 	bl	124ac <z_get_fd_obj_and_vtable>
	VTABLE_CALL(bind, sock, addr, addrlen);
   23e88:	b138      	cbz	r0, 23e9a <z_impl_zsock_bind+0x1e>
   23e8a:	9b03      	ldr	r3, [sp, #12]
   23e8c:	68db      	ldr	r3, [r3, #12]
   23e8e:	b123      	cbz	r3, 23e9a <z_impl_zsock_bind+0x1e>
   23e90:	4621      	mov	r1, r4
   23e92:	9a01      	ldr	r2, [sp, #4]
   23e94:	4798      	blx	r3
}
   23e96:	b004      	add	sp, #16
   23e98:	bd10      	pop	{r4, pc}
	VTABLE_CALL(bind, sock, addr, addrlen);
   23e9a:	f04f 30ff 	mov.w	r0, #4294967295
   23e9e:	e7fa      	b.n	23e96 <z_impl_zsock_bind+0x1a>

00023ea0 <z_impl_zsock_connect>:
{
   23ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   23ea2:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   23ea4:	a903      	add	r1, sp, #12
{
   23ea6:	9201      	str	r2, [sp, #4]
	return z_get_fd_obj_and_vtable(sock,
   23ea8:	f7ee fb00 	bl	124ac <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   23eac:	b138      	cbz	r0, 23ebe <z_impl_zsock_connect+0x1e>
   23eae:	9b03      	ldr	r3, [sp, #12]
   23eb0:	691b      	ldr	r3, [r3, #16]
   23eb2:	b123      	cbz	r3, 23ebe <z_impl_zsock_connect+0x1e>
   23eb4:	4621      	mov	r1, r4
   23eb6:	9a01      	ldr	r2, [sp, #4]
   23eb8:	4798      	blx	r3
}
   23eba:	b004      	add	sp, #16
   23ebc:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   23ebe:	f04f 30ff 	mov.w	r0, #4294967295
   23ec2:	e7fa      	b.n	23eba <z_impl_zsock_connect+0x1a>

00023ec4 <z_impl_zsock_listen>:
{
   23ec4:	b513      	push	{r0, r1, r4, lr}
   23ec6:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   23ec8:	a901      	add	r1, sp, #4
   23eca:	f7ee faef 	bl	124ac <z_get_fd_obj_and_vtable>
	VTABLE_CALL(listen, sock, backlog);
   23ece:	b130      	cbz	r0, 23ede <z_impl_zsock_listen+0x1a>
   23ed0:	9b01      	ldr	r3, [sp, #4]
   23ed2:	695b      	ldr	r3, [r3, #20]
   23ed4:	b11b      	cbz	r3, 23ede <z_impl_zsock_listen+0x1a>
   23ed6:	4621      	mov	r1, r4
   23ed8:	4798      	blx	r3
}
   23eda:	b002      	add	sp, #8
   23edc:	bd10      	pop	{r4, pc}
	VTABLE_CALL(listen, sock, backlog);
   23ede:	f04f 30ff 	mov.w	r0, #4294967295
   23ee2:	e7fa      	b.n	23eda <z_impl_zsock_listen+0x16>

00023ee4 <z_impl_zsock_accept>:
{
   23ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   23ee6:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   23ee8:	a903      	add	r1, sp, #12
{
   23eea:	9201      	str	r2, [sp, #4]
	return z_get_fd_obj_and_vtable(sock,
   23eec:	f7ee fade 	bl	124ac <z_get_fd_obj_and_vtable>
	VTABLE_CALL(accept, sock, addr, addrlen);
   23ef0:	b138      	cbz	r0, 23f02 <z_impl_zsock_accept+0x1e>
   23ef2:	9b03      	ldr	r3, [sp, #12]
   23ef4:	699b      	ldr	r3, [r3, #24]
   23ef6:	b123      	cbz	r3, 23f02 <z_impl_zsock_accept+0x1e>
   23ef8:	4621      	mov	r1, r4
   23efa:	9a01      	ldr	r2, [sp, #4]
   23efc:	4798      	blx	r3
}
   23efe:	b004      	add	sp, #16
   23f00:	bd10      	pop	{r4, pc}
	VTABLE_CALL(accept, sock, addr, addrlen);
   23f02:	f04f 30ff 	mov.w	r0, #4294967295
   23f06:	e7fa      	b.n	23efe <z_impl_zsock_accept+0x1a>

00023f08 <z_impl_zsock_sendto>:
{
   23f08:	b530      	push	{r4, r5, lr}
   23f0a:	b087      	sub	sp, #28
   23f0c:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   23f0e:	a905      	add	r1, sp, #20
{
   23f10:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   23f14:	f7ee faca 	bl	124ac <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   23f18:	b160      	cbz	r0, 23f34 <z_impl_zsock_sendto+0x2c>
   23f1a:	9905      	ldr	r1, [sp, #20]
   23f1c:	69cd      	ldr	r5, [r1, #28]
   23f1e:	b14d      	cbz	r5, 23f34 <z_impl_zsock_sendto+0x2c>
   23f20:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   23f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23f26:	9101      	str	r1, [sp, #4]
   23f28:	990a      	ldr	r1, [sp, #40]	; 0x28
   23f2a:	9100      	str	r1, [sp, #0]
   23f2c:	4621      	mov	r1, r4
   23f2e:	47a8      	blx	r5
}
   23f30:	b007      	add	sp, #28
   23f32:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   23f34:	f04f 30ff 	mov.w	r0, #4294967295
   23f38:	e7fa      	b.n	23f30 <z_impl_zsock_sendto+0x28>

00023f3a <z_impl_zsock_sendmsg>:
{
   23f3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   23f3c:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   23f3e:	a903      	add	r1, sp, #12
{
   23f40:	9201      	str	r2, [sp, #4]
	return z_get_fd_obj_and_vtable(sock,
   23f42:	f7ee fab3 	bl	124ac <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   23f46:	b138      	cbz	r0, 23f58 <z_impl_zsock_sendmsg+0x1e>
   23f48:	9b03      	ldr	r3, [sp, #12]
   23f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23f4c:	b123      	cbz	r3, 23f58 <z_impl_zsock_sendmsg+0x1e>
   23f4e:	4621      	mov	r1, r4
   23f50:	9a01      	ldr	r2, [sp, #4]
   23f52:	4798      	blx	r3
}
   23f54:	b004      	add	sp, #16
   23f56:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   23f58:	f04f 30ff 	mov.w	r0, #4294967295
   23f5c:	e7fa      	b.n	23f54 <z_impl_zsock_sendmsg+0x1a>

00023f5e <z_impl_zsock_recvfrom>:
{
   23f5e:	b530      	push	{r4, r5, lr}
   23f60:	b087      	sub	sp, #28
   23f62:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   23f64:	a905      	add	r1, sp, #20
{
   23f66:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   23f6a:	f7ee fa9f 	bl	124ac <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   23f6e:	b160      	cbz	r0, 23f8a <z_impl_zsock_recvfrom+0x2c>
   23f70:	9905      	ldr	r1, [sp, #20]
   23f72:	6a0d      	ldr	r5, [r1, #32]
   23f74:	b14d      	cbz	r5, 23f8a <z_impl_zsock_recvfrom+0x2c>
   23f76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   23f7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23f7c:	9101      	str	r1, [sp, #4]
   23f7e:	990a      	ldr	r1, [sp, #40]	; 0x28
   23f80:	9100      	str	r1, [sp, #0]
   23f82:	4621      	mov	r1, r4
   23f84:	47a8      	blx	r5
}
   23f86:	b007      	add	sp, #28
   23f88:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   23f8a:	f04f 30ff 	mov.w	r0, #4294967295
   23f8e:	e7fa      	b.n	23f86 <z_impl_zsock_recvfrom+0x28>

00023f90 <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   23f90:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   23f92:	f000 fa52 	bl	2443a <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   23f96:	fab0 f080 	clz	r0, r0
   23f9a:	0940      	lsrs	r0, r0, #5
   23f9c:	bd08      	pop	{r3, pc}

00023f9e <z_impl_zsock_getsockopt>:
	return -1;
}

int z_impl_zsock_getsockopt(int sock, int level, int optname,
			    void *optval, socklen_t *optlen)
{
   23f9e:	b530      	push	{r4, r5, lr}
   23fa0:	b087      	sub	sp, #28
   23fa2:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   23fa4:	a905      	add	r1, sp, #20
{
   23fa6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   23faa:	f7ee fa7f 	bl	124ac <z_get_fd_obj_and_vtable>
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   23fae:	b150      	cbz	r0, 23fc6 <z_impl_zsock_getsockopt+0x28>
   23fb0:	9905      	ldr	r1, [sp, #20]
   23fb2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   23fb4:	b13d      	cbz	r5, 23fc6 <z_impl_zsock_getsockopt+0x28>
   23fb6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   23fba:	990a      	ldr	r1, [sp, #40]	; 0x28
   23fbc:	9100      	str	r1, [sp, #0]
   23fbe:	4621      	mov	r1, r4
   23fc0:	47a8      	blx	r5
}
   23fc2:	b007      	add	sp, #28
   23fc4:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   23fc6:	f04f 30ff 	mov.w	r0, #4294967295
   23fca:	e7fa      	b.n	23fc2 <z_impl_zsock_getsockopt+0x24>

00023fcc <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   23fcc:	b530      	push	{r4, r5, lr}
   23fce:	b087      	sub	sp, #28
   23fd0:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   23fd2:	a905      	add	r1, sp, #20
{
   23fd4:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   23fd8:	f7ee fa68 	bl	124ac <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   23fdc:	b150      	cbz	r0, 23ff4 <z_impl_zsock_setsockopt+0x28>
   23fde:	9905      	ldr	r1, [sp, #20]
   23fe0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   23fe2:	b13d      	cbz	r5, 23ff4 <z_impl_zsock_setsockopt+0x28>
   23fe4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   23fe8:	990a      	ldr	r1, [sp, #40]	; 0x28
   23fea:	9100      	str	r1, [sp, #0]
   23fec:	4621      	mov	r1, r4
   23fee:	47a8      	blx	r5
}
   23ff0:	b007      	add	sp, #28
   23ff2:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   23ff4:	f04f 30ff 	mov.w	r0, #4294967295
   23ff8:	e7fa      	b.n	23ff0 <z_impl_zsock_setsockopt+0x24>

00023ffa <ZSOCK_FD_ZERO>:
void ZSOCK_FD_ZERO(zsock_fd_set *set)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(set->bitset); i++) {
		set->bitset[i] = 0U;
   23ffa:	2300      	movs	r3, #0
   23ffc:	6003      	str	r3, [r0, #0]
	}
}
   23ffe:	4770      	bx	lr

00024000 <ZSOCK_FD_ISSET>:

int ZSOCK_FD_ISSET(int fd, zsock_fd_set *set)
{
	u32_t word_idx, bit_mask;

	if (fd < 0 || fd >= ZSOCK_FD_SETSIZE) {
   24000:	281f      	cmp	r0, #31
   24002:	d808      	bhi.n	24016 <ZSOCK_FD_ISSET+0x16>
		return 0;
	}

	FD_SET_CALC_OFFSETS(set, word_idx, bit_mask);
   24004:	2301      	movs	r3, #1
   24006:	fa03 f000 	lsl.w	r0, r3, r0

	return (set->bitset[word_idx] & bit_mask) != 0U;
   2400a:	680b      	ldr	r3, [r1, #0]
   2400c:	4218      	tst	r0, r3
   2400e:	bf14      	ite	ne
   24010:	2001      	movne	r0, #1
   24012:	2000      	moveq	r0, #0
   24014:	4770      	bx	lr
		return 0;
   24016:	2000      	movs	r0, #0
}
   24018:	4770      	bx	lr

0002401a <ZSOCK_FD_SET>:

void ZSOCK_FD_SET(int fd, zsock_fd_set *set)
{
	u32_t word_idx, bit_mask;

	if (fd < 0 || fd >= ZSOCK_FD_SETSIZE) {
   2401a:	281f      	cmp	r0, #31
   2401c:	d805      	bhi.n	2402a <ZSOCK_FD_SET+0x10>
		return;
	}

	FD_SET_CALC_OFFSETS(set, word_idx, bit_mask);
   2401e:	2301      	movs	r3, #1
   24020:	fa03 f000 	lsl.w	r0, r3, r0

	set->bitset[word_idx] |= bit_mask;
   24024:	680b      	ldr	r3, [r1, #0]
   24026:	4303      	orrs	r3, r0
   24028:	600b      	str	r3, [r1, #0]
}
   2402a:	4770      	bx	lr

0002402c <zsock_select>:

int zsock_select(int nfds, zsock_fd_set *readfds, zsock_fd_set *writefds,
		 zsock_fd_set *exceptfds, struct zsock_timeval *timeout)
{
   2402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24030:	b089      	sub	sp, #36	; 0x24
   24032:	4616      	mov	r6, r2
   24034:	461f      	mov	r7, r3
	for (i = 0; i < STRUCT_MEMBER_ARRAY_SIZE(zsock_fd_set, bitset); i++) {
		u32_t bit_mask = 1U;
		u32_t read_mask = 0U, write_mask = 0U, except_mask = 0U;
		u32_t ored_mask;

		if (readfds != NULL) {
   24036:	460d      	mov	r5, r1
{
   24038:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
		if (readfds != NULL) {
   2403c:	b1e1      	cbz	r1, 24078 <zsock_select+0x4c>
			read_mask = readfds->bitset[i];
   2403e:	f8d1 e000 	ldr.w	lr, [r1]
		}

		if (writefds != NULL) {
   24042:	b1de      	cbz	r6, 2407c <zsock_select+0x50>
			write_mask = writefds->bitset[i];
   24044:	f8d6 9000 	ldr.w	r9, [r6]
		}

		if (exceptfds != NULL) {
   24048:	b1d7      	cbz	r7, 24080 <zsock_select+0x54>
			except_mask = exceptfds->bitset[i];
   2404a:	683c      	ldr	r4, [r7, #0]
		}

		ored_mask = read_mask | write_mask | except_mask;
   2404c:	ea4e 0209 	orr.w	r2, lr, r9
		if (ored_mask == 0U) {
   24050:	4322      	orrs	r2, r4
   24052:	d059      	beq.n	24108 <zsock_select+0xdc>
   24054:	2100      	movs	r1, #0
		u32_t bit_mask = 1U;
   24056:	2301      	movs	r3, #1
   24058:	4688      	mov	r8, r1
			continue;
		}

		do {
			if (ored_mask & bit_mask) {
   2405a:	4213      	tst	r3, r2
   2405c:	d02a      	beq.n	240b4 <zsock_select+0x88>
				int events = 0;

				if (num_pfds >= ARRAY_SIZE(pfds)) {
   2405e:	f1b8 0f02 	cmp.w	r8, #2
   24062:	dd0f      	ble.n	24084 <zsock_select+0x58>
					errno = ENOMEM;
   24064:	f000 f97e 	bl	24364 <__errno>
   24068:	230c      	movs	r3, #12
		 * So, unlike poll(), a single invalid fd aborts the entire
		 * select().
		 */
		if (revents & ZSOCK_POLLNVAL) {
			errno = EBADF;
			return -1;
   2406a:	f04f 34ff 	mov.w	r4, #4294967295
			errno = EBADF;
   2406e:	6003      	str	r3, [r0, #0]

		res--;
	}

	return num_selects;
}
   24070:	4620      	mov	r0, r4
   24072:	b009      	add	sp, #36	; 0x24
   24074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u32_t read_mask = 0U, write_mask = 0U, except_mask = 0U;
   24078:	468e      	mov	lr, r1
   2407a:	e7e2      	b.n	24042 <zsock_select+0x16>
   2407c:	46b1      	mov	r9, r6
   2407e:	e7e3      	b.n	24048 <zsock_select+0x1c>
   24080:	463c      	mov	r4, r7
   24082:	e7e3      	b.n	2404c <zsock_select+0x20>
				if (read_mask & bit_mask) {
   24084:	ea13 0f0e 	tst.w	r3, lr
   24088:	bf14      	ite	ne
   2408a:	2001      	movne	r0, #1
   2408c:	2000      	moveq	r0, #0
				if (write_mask & bit_mask) {
   2408e:	ea13 0f09 	tst.w	r3, r9
					events |= ZSOCK_POLLOUT;
   24092:	bf18      	it	ne
   24094:	f040 0004 	orrne.w	r0, r0, #4
				pfds[num_pfds].fd = fd_no;
   24098:	f10d 0a20 	add.w	sl, sp, #32
				if (except_mask & bit_mask) {
   2409c:	4223      	tst	r3, r4
				pfds[num_pfds].fd = fd_no;
   2409e:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
					events |= ZSOCK_POLLPRI;
   240a2:	bf18      	it	ne
   240a4:	f040 0002 	orrne.w	r0, r0, #2
				pfds[num_pfds].fd = fd_no;
   240a8:	f84a 1c18 	str.w	r1, [sl, #-24]
				pfds[num_pfds++].events = events;
   240ac:	f82a 0c14 	strh.w	r0, [sl, #-20]
   240b0:	f108 0801 	add.w	r8, r8, #1
			fd_no++;
   240b4:	3101      	adds	r1, #1
		} while (bit_mask != 0U);
   240b6:	2920      	cmp	r1, #32
			bit_mask <<= 1;
   240b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
		} while (bit_mask != 0U);
   240bc:	d1cd      	bne.n	2405a <zsock_select+0x2e>
	if (timeout != NULL) {
   240be:	f1bc 0f00 	cmp.w	ip, #0
   240c2:	d023      	beq.n	2410c <zsock_select+0xe0>
		poll_timeout = timeout->tv_sec * 1000
   240c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
			       + timeout->tv_usec / 1000;
   240c8:	f8dc 3004 	ldr.w	r3, [ip, #4]
		poll_timeout = timeout->tv_sec * 1000
   240cc:	f8dc 2000 	ldr.w	r2, [ip]
			       + timeout->tv_usec / 1000;
   240d0:	fb93 f3f1 	sdiv	r3, r3, r1
		poll_timeout = timeout->tv_sec * 1000
   240d4:	fb01 3202 	mla	r2, r1, r2, r3
	return z_impl_zsock_poll(fds, nfds, timeout);
   240d8:	4641      	mov	r1, r8
   240da:	a802      	add	r0, sp, #8
   240dc:	f7ef fa14 	bl	13508 <z_impl_zsock_poll>
	if (res == -1) {
   240e0:	1c42      	adds	r2, r0, #1
   240e2:	4604      	mov	r4, r0
   240e4:	d0c4      	beq.n	24070 <zsock_select+0x44>
	if (readfds != NULL) {
   240e6:	b115      	cbz	r5, 240ee <zsock_select+0xc2>
		ZSOCK_FD_ZERO(readfds);
   240e8:	4628      	mov	r0, r5
   240ea:	f7ff ff86 	bl	23ffa <ZSOCK_FD_ZERO>
	if (writefds != NULL) {
   240ee:	b116      	cbz	r6, 240f6 <zsock_select+0xca>
		ZSOCK_FD_ZERO(writefds);
   240f0:	4630      	mov	r0, r6
   240f2:	f7ff ff82 	bl	23ffa <ZSOCK_FD_ZERO>
	if (exceptfds != NULL) {
   240f6:	b117      	cbz	r7, 240fe <zsock_select+0xd2>
		ZSOCK_FD_ZERO(exceptfds);
   240f8:	4638      	mov	r0, r7
   240fa:	f7ff ff7e 	bl	23ffa <ZSOCK_FD_ZERO>
	poll_timeout = -1;
   240fe:	46a1      	mov	r9, r4
   24100:	2400      	movs	r4, #0
   24102:	aa02      	add	r2, sp, #8
   24104:	46a2      	mov	sl, r4
   24106:	e026      	b.n	24156 <zsock_select+0x12a>
   24108:	4690      	mov	r8, r2
   2410a:	e7d8      	b.n	240be <zsock_select+0x92>
   2410c:	f04f 32ff 	mov.w	r2, #4294967295
   24110:	e7e2      	b.n	240d8 <zsock_select+0xac>
		if (revents & ZSOCK_POLLIN) {
   24112:	f01b 0f01 	tst.w	fp, #1
		int fd = pfds[i].fd;
   24116:	6810      	ldr	r0, [r2, #0]
		if (revents & ZSOCK_POLLIN) {
   24118:	d006      	beq.n	24128 <zsock_select+0xfc>
			if (readfds != NULL) {
   2411a:	b12d      	cbz	r5, 24128 <zsock_select+0xfc>
				ZSOCK_FD_SET(fd, readfds);
   2411c:	4629      	mov	r1, r5
   2411e:	9001      	str	r0, [sp, #4]
   24120:	f7ff ff7b 	bl	2401a <ZSOCK_FD_SET>
				num_selects++;
   24124:	9801      	ldr	r0, [sp, #4]
   24126:	3401      	adds	r4, #1
		if (revents & ZSOCK_POLLOUT) {
   24128:	f01b 0f04 	tst.w	fp, #4
   2412c:	d006      	beq.n	2413c <zsock_select+0x110>
			if (writefds != NULL) {
   2412e:	b12e      	cbz	r6, 2413c <zsock_select+0x110>
				ZSOCK_FD_SET(fd, writefds);
   24130:	4631      	mov	r1, r6
   24132:	9001      	str	r0, [sp, #4]
   24134:	f7ff ff71 	bl	2401a <ZSOCK_FD_SET>
				num_selects++;
   24138:	9801      	ldr	r0, [sp, #4]
   2413a:	3401      	adds	r4, #1
		if (revents & (ZSOCK_POLLPRI | ZSOCK_POLLHUP | ZSOCK_POLLERR)) {
   2413c:	f01b 0f1a 	tst.w	fp, #26
   24140:	d004      	beq.n	2414c <zsock_select+0x120>
			if (exceptfds != NULL) {
   24142:	b11f      	cbz	r7, 2414c <zsock_select+0x120>
				ZSOCK_FD_SET(fd, exceptfds);
   24144:	4639      	mov	r1, r7
   24146:	f7ff ff68 	bl	2401a <ZSOCK_FD_SET>
				num_selects++;
   2414a:	3401      	adds	r4, #1
		res--;
   2414c:	f109 39ff 	add.w	r9, r9, #4294967295
	for (i = 0; i < num_pfds && res > 0; i++) {
   24150:	f10a 0a01 	add.w	sl, sl, #1
   24154:	3208      	adds	r2, #8
   24156:	45c2      	cmp	sl, r8
   24158:	d08a      	beq.n	24070 <zsock_select+0x44>
   2415a:	f1b9 0f00 	cmp.w	r9, #0
   2415e:	dd87      	ble.n	24070 <zsock_select+0x44>
		short revents = pfds[i].revents;
   24160:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
		if (revents == 0) {
   24164:	2b00      	cmp	r3, #0
   24166:	d0f3      	beq.n	24150 <zsock_select+0x124>
		if (revents & ZSOCK_POLLNVAL) {
   24168:	fa1f fb83 	uxth.w	fp, r3
   2416c:	069b      	lsls	r3, r3, #26
   2416e:	d5d0      	bpl.n	24112 <zsock_select+0xe6>
			errno = EBADF;
   24170:	f000 f8f8 	bl	24364 <__errno>
   24174:	2309      	movs	r3, #9
   24176:	e778      	b.n	2406a <zsock_select+0x3e>

00024178 <sys_pm_init>:
	}
}

#if CONFIG_DEVICE_POWER_MANAGEMENT
static int sys_pm_init(struct device *dev)
{
   24178:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	sys_pm_create_device_list();
   2417a:	f7ef fabb 	bl	136f4 <sys_pm_create_device_list>
	return 0;
}
   2417e:	2000      	movs	r0, #0
   24180:	bd08      	pop	{r3, pc}

00024182 <get_status>:
	if (data->started) {
   24182:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   24184:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   24186:	b2c9      	uxtb	r1, r1
	if (data->started) {
   24188:	fb02 3101 	mla	r1, r2, r1, r3
   2418c:	7a4b      	ldrb	r3, [r1, #9]
   2418e:	b923      	cbnz	r3, 2419a <get_status+0x18>
	if (data->ref > 0) {
   24190:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   24192:	fab0 f080 	clz	r0, r0
   24196:	0940      	lsrs	r0, r0, #5
   24198:	4770      	bx	lr
   2419a:	2002      	movs	r0, #2
}
   2419c:	4770      	bx	lr

0002419e <clock_stop>:
{
   2419e:	b570      	push	{r4, r5, r6, lr}
   241a0:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   241a2:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   241a4:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   241a6:	f04f 0320 	mov.w	r3, #32
   241aa:	f3ef 8611 	mrs	r6, BASEPRI
   241ae:	f383 8811 	msr	BASEPRI, r3
   241b2:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   241b6:	230c      	movs	r3, #12
   241b8:	434b      	muls	r3, r1
   241ba:	18ea      	adds	r2, r5, r3
   241bc:	7a10      	ldrb	r0, [r2, #8]
   241be:	b1a0      	cbz	r0, 241ea <clock_stop+0x4c>
	data->ref--;
   241c0:	3801      	subs	r0, #1
   241c2:	b2c0      	uxtb	r0, r0
   241c4:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   241c6:	b998      	cbnz	r0, 241f0 <clock_stop+0x52>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   241c8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   241cc:	50e8      	str	r0, [r5, r3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   241ce:	78cb      	ldrb	r3, [r1, #3]
   241d0:	2101      	movs	r1, #1
   241d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   241d6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   241da:	6050      	str	r0, [r2, #4]
   241dc:	6019      	str	r1, [r3, #0]
		data->started = false;
   241de:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   241e0:	f386 8811 	msr	BASEPRI, r6
   241e4:	f3bf 8f6f 	isb	sy
}
   241e8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   241ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
   241ee:	e7f7      	b.n	241e0 <clock_stop+0x42>
	int err = 0;
   241f0:	2000      	movs	r0, #0
   241f2:	e7f5      	b.n	241e0 <clock_stop+0x42>

000241f4 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   241f4:	2200      	movs	r2, #0
   241f6:	f7ef bb07 	b.w	13808 <clock_async_start>

000241fa <z_clock_device_ctrl>:

int __weak z_clock_device_ctrl(struct device *device, u32_t ctrl_command,
			       void *context, device_pm_cb cb, void *arg)
{
	return 0;
}
   241fa:	2000      	movs	r0, #0
   241fc:	4770      	bx	lr

000241fe <z_clock_isr>:
}
   241fe:	4770      	bx	lr

00024200 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   24200:	4770      	bx	lr

00024202 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   24202:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   24204:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   24206:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   24208:	bf97      	itett	ls
   2420a:	6882      	ldrls	r2, [r0, #8]
    r = RdOff - WrOff - 1u;
   2420c:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   24210:	18d2      	addls	r2, r2, r3
   24212:	f102 32ff 	addls.w	r2, r2, #4294967295
   24216:	bf94      	ite	ls
   24218:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   2421a:	1a58      	subhi	r0, r3, r1
}
   2421c:	4770      	bx	lr

0002421e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2421e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   24222:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   24226:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   24228:	eba9 0804 	sub.w	r8, r9, r4
   2422c:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   2422e:	4590      	cmp	r8, r2
   24230:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   24232:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   24234:	4414      	add	r4, r2
   24236:	d904      	bls.n	24242 <_WriteNoCheck+0x24>
   24238:	f002 fbe5 	bl	26a06 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   2423c:	60ec      	str	r4, [r5, #12]
}
   2423e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24242:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   24244:	eba4 0409 	sub.w	r4, r4, r9
   24248:	f002 fbdd 	bl	26a06 <memcpy>
   2424c:	4622      	mov	r2, r4
   2424e:	6868      	ldr	r0, [r5, #4]
   24250:	eb07 0108 	add.w	r1, r7, r8
   24254:	e7f0      	b.n	24238 <_WriteNoCheck+0x1a>

00024256 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   24256:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2425a:	4606      	mov	r6, r0
   2425c:	4689      	mov	r9, r1
   2425e:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   24260:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   24264:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   24266:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   24268:	68b3      	ldr	r3, [r6, #8]
   2426a:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2426c:	bf28      	it	cs
   2426e:	18e4      	addcs	r4, r4, r3
   24270:	3c01      	subs	r4, #1
   24272:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   24274:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   24276:	42bc      	cmp	r4, r7
   24278:	bf28      	it	cs
   2427a:	463c      	movcs	r4, r7
   2427c:	4294      	cmp	r4, r2
   2427e:	bf28      	it	cs
   24280:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   24282:	6870      	ldr	r0, [r6, #4]
   24284:	4649      	mov	r1, r9
   24286:	4428      	add	r0, r5
   24288:	4622      	mov	r2, r4
   2428a:	f002 fbbc 	bl	26a06 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2428e:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   24290:	4425      	add	r5, r4
      WrOff = 0u;
   24292:	42ab      	cmp	r3, r5
   24294:	bf08      	it	eq
   24296:	2500      	moveq	r5, #0
  } while (NumBytes);
   24298:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   2429a:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   2429c:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   2429e:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   242a0:	d1e1      	bne.n	24266 <_WriteBlocking+0x10>
}
   242a2:	4640      	mov	r0, r8
   242a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000242a8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   242a8:	f7ef bc76 	b.w	13b98 <_DoInit>

000242ac <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   242ac:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   242ae:	f7ff fffb 	bl	242a8 <SEGGER_RTT_Init>

	return 0;
}
   242b2:	2000      	movs	r0, #0
   242b4:	bd08      	pop	{r3, pc}

000242b6 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   242b6:	2100      	movs	r1, #0
   242b8:	2001      	movs	r0, #1
   242ba:	f7ef bdcb 	b.w	13e54 <z_arm_fatal_error>

000242be <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   242be:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   242c0:	6800      	ldr	r0, [r0, #0]
   242c2:	f7ef bdc7 	b.w	13e54 <z_arm_fatal_error>

000242c6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   242c6:	b508      	push	{r3, lr}
	handler();
   242c8:	f7ef fedc 	bl	14084 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   242cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   242d0:	f7ef bf1e 	b.w	14110 <z_arm_exc_exit>

000242d4 <mpu_configure_region>:
{
   242d4:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   242d6:	890a      	ldrh	r2, [r1, #8]
   242d8:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   242da:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   242dc:	684c      	ldr	r4, [r1, #4]
   242de:	f002 021f 	and.w	r2, r2, #31
{
   242e2:	b085      	sub	sp, #20
   242e4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   242e8:	9300      	str	r3, [sp, #0]
   242ea:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   242ee:	f023 031f 	bic.w	r3, r3, #31
   242f2:	1e62      	subs	r2, r4, #1
   242f4:	4413      	add	r3, r2
   242f6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   242fa:	280f      	cmp	r0, #15
   242fc:	4604      	mov	r4, r0
   242fe:	9303      	str	r3, [sp, #12]
   24300:	d905      	bls.n	2430e <mpu_configure_region+0x3a>
   24302:	f7f0 f9b7 	bl	14674 <region_allocate_and_init.part.0>
   24306:	4604      	mov	r4, r0
}
   24308:	4620      	mov	r0, r4
   2430a:	b005      	add	sp, #20
   2430c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   2430e:	4669      	mov	r1, sp
   24310:	f7f0 f998 	bl	14644 <region_init>
	return region_allocate_and_init(index,
   24314:	e7f8      	b.n	24308 <mpu_configure_region+0x34>

00024316 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   24316:	e840 f000 	tt	r0, r0
   2431a:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2431c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   24320:	bf14      	ite	ne
   24322:	4618      	movne	r0, r3
   24324:	f06f 0015 	mvneq.w	r0, #21
   24328:	4770      	bx	lr

0002432a <_stdout_hook_default>:
}
   2432a:	f04f 30ff 	mov.w	r0, #4294967295
   2432e:	4770      	bx	lr

00024330 <_stdin_hook_default>:
}
   24330:	2000      	movs	r0, #0
   24332:	4770      	bx	lr

00024334 <_read>:
{
   24334:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   24336:	4611      	mov	r1, r2
   24338:	f7f0 bb0e 	b.w	14958 <z_impl_zephyr_read_stdin>

0002433c <_write>:
{
   2433c:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2433e:	4611      	mov	r1, r2
   24340:	f7f0 bb1e 	b.w	14980 <z_impl_zephyr_write_stdout>

00024344 <_close>:
   24344:	f04f 30ff 	mov.w	r0, #4294967295
   24348:	4770      	bx	lr

0002434a <_lseek>:
}
   2434a:	2000      	movs	r0, #0
   2434c:	4770      	bx	lr

0002434e <_isatty>:
}
   2434e:	2001      	movs	r0, #1
   24350:	4770      	bx	lr

00024352 <_kill>:
}
   24352:	2000      	movs	r0, #0
   24354:	4770      	bx	lr

00024356 <_getpid>:
}
   24356:	2000      	movs	r0, #0
   24358:	4770      	bx	lr

0002435a <_fstat>:
	st->st_mode = S_IFCHR;
   2435a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2435e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   24360:	604b      	str	r3, [r1, #4]
}
   24362:	4770      	bx	lr

00024364 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24364:	f7fc b810 	b.w	20388 <z_impl_z_errno>

00024368 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   24368:	b508      	push	{r3, lr}
	net_if_init();
   2436a:	f7f0 fb4b 	bl	14a04 <net_if_init>
	net_if_post_init();
   2436e:	f7f0 fb5d 	bl	14a2c <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   24372:	2000      	movs	r0, #0
   24374:	bd08      	pop	{r3, pc}

00024376 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   24376:	b110      	cbz	r0, 2437e <net_if_l2+0x8>
   24378:	6800      	ldr	r0, [r0, #0]
   2437a:	b100      	cbz	r0, 2437e <net_if_l2+0x8>
	return iface->if_dev->l2;
   2437c:	6840      	ldr	r0, [r0, #4]
}
   2437e:	4770      	bx	lr

00024380 <l2_flags_get>:
{
   24380:	b510      	push	{r4, lr}
   24382:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   24384:	f7ff fff7 	bl	24376 <net_if_l2>
   24388:	b128      	cbz	r0, 24396 <l2_flags_get+0x16>
   2438a:	68c2      	ldr	r2, [r0, #12]
   2438c:	b11a      	cbz	r2, 24396 <l2_flags_get+0x16>
}
   2438e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   24392:	4618      	mov	r0, r3
   24394:	4710      	bx	r2
}
   24396:	2000      	movs	r0, #0
   24398:	bd10      	pop	{r4, pc}

0002439a <net_if_up>:
{
   2439a:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2439c:	6803      	ldr	r3, [r0, #0]
   2439e:	4604      	mov	r4, r0
   243a0:	330c      	adds	r3, #12
   243a2:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   243a6:	f013 0301 	ands.w	r3, r3, #1
   243aa:	d10b      	bne.n	243c4 <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   243ac:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   243ae:	7e91      	ldrb	r1, [r2, #26]
   243b0:	b151      	cbz	r1, 243c8 <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   243b2:	320c      	adds	r2, #12
   243b4:	e8d2 1fef 	ldaex	r1, [r2]
   243b8:	f041 0101 	orr.w	r1, r1, #1
   243bc:	e8c2 1fe0 	stlex	r0, r1, [r2]
   243c0:	2800      	cmp	r0, #0
   243c2:	d1f7      	bne.n	243b4 <net_if_up+0x1a>
		return 0;
   243c4:	2000      	movs	r0, #0
   243c6:	e018      	b.n	243fa <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   243c8:	f7ff ffd5 	bl	24376 <net_if_l2>
   243cc:	b968      	cbnz	r0, 243ea <net_if_up+0x50>
   243ce:	6823      	ldr	r3, [r4, #0]
   243d0:	330c      	adds	r3, #12
   243d2:	e8d3 2fef 	ldaex	r2, [r3]
   243d6:	f042 0201 	orr.w	r2, r2, #1
   243da:	e8c3 2fe1 	stlex	r1, r2, [r3]
   243de:	2900      	cmp	r1, #0
   243e0:	d1f7      	bne.n	243d2 <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   243e2:	4620      	mov	r0, r4
   243e4:	f7ff ffcc 	bl	24380 <l2_flags_get>
   243e8:	e7ec      	b.n	243c4 <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   243ea:	6883      	ldr	r3, [r0, #8]
   243ec:	2b00      	cmp	r3, #0
   243ee:	d0ee      	beq.n	243ce <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   243f0:	2101      	movs	r1, #1
   243f2:	4620      	mov	r0, r4
   243f4:	4798      	blx	r3
	if (status < 0) {
   243f6:	2800      	cmp	r0, #0
   243f8:	dae9      	bge.n	243ce <net_if_up+0x34>
}
   243fa:	bd10      	pop	{r4, pc}

000243fc <net_byte_to_hex>:
{
   243fc:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   243fe:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   24400:	b1bb      	cbz	r3, 24432 <net_byte_to_hex+0x36>
		if (val < 10) {
   24402:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   24404:	b26b      	sxtb	r3, r5
   24406:	bf86      	itte	hi
   24408:	f1a2 050a 	subhi.w	r5, r2, #10
   2440c:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   2440e:	3330      	addls	r3, #48	; 0x30
   24410:	1c44      	adds	r4, r0, #1
   24412:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   24414:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   24418:	4619      	mov	r1, r3
   2441a:	2b09      	cmp	r3, #9
	*ptr = '\0';
   2441c:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   24420:	bf83      	ittte	hi
   24422:	3a0a      	subhi	r2, #10
   24424:	1889      	addhi	r1, r1, r2
   24426:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   24428:	3130      	addls	r1, #48	; 0x30
   2442a:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   2442c:	7063      	strb	r3, [r4, #1]
   2442e:	1c60      	adds	r0, r4, #1
}
   24430:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   24432:	2d00      	cmp	r5, #0
   24434:	d1e5      	bne.n	24402 <net_byte_to_hex+0x6>
   24436:	4604      	mov	r4, r0
   24438:	e7ec      	b.n	24414 <net_byte_to_hex+0x18>

0002443a <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   2443a:	2801      	cmp	r0, #1
{
   2443c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24440:	460c      	mov	r4, r1
   24442:	4616      	mov	r6, r2
	if (family == AF_INET) {
   24444:	d126      	bne.n	24494 <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   24446:	4608      	mov	r0, r1
   24448:	f7e8 fd12 	bl	ce70 <strlen>
		for (i = 0; i < len; i++) {
   2444c:	4623      	mov	r3, r4
   2444e:	4420      	add	r0, r4
   24450:	4298      	cmp	r0, r3
   24452:	d112      	bne.n	2447a <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   24454:	4635      	mov	r5, r6
   24456:	2300      	movs	r3, #0
   24458:	3603      	adds	r6, #3
   2445a:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   2445e:	4620      	mov	r0, r4
   24460:	220a      	movs	r2, #10
   24462:	a901      	add	r1, sp, #4
   24464:	f7fd ffbc 	bl	223e0 <strtol>

			src = ++endptr;
   24468:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   2446a:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   2446e:	42ae      	cmp	r6, r5
			src = ++endptr;
   24470:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   24474:	d1f3      	bne.n	2445e <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   24476:	2000      	movs	r0, #0
   24478:	e009      	b.n	2448e <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   2447a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2447e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   24482:	2909      	cmp	r1, #9
   24484:	d9e4      	bls.n	24450 <z_impl_net_addr_pton+0x16>
   24486:	2a2e      	cmp	r2, #46	; 0x2e
   24488:	d0e2      	beq.n	24450 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   2448a:	f06f 0015 	mvn.w	r0, #21
}
   2448e:	b003      	add	sp, #12
   24490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   24494:	2802      	cmp	r0, #2
   24496:	d1f8      	bne.n	2448a <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   24498:	212e      	movs	r1, #46	; 0x2e
   2449a:	4620      	mov	r0, r4
   2449c:	f002 fc24 	bl	26ce8 <strchr>
		if (*src == ':') {
   244a0:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   244a2:	2800      	cmp	r0, #0
   244a4:	bf14      	ite	ne
   244a6:	2706      	movne	r7, #6
   244a8:	2708      	moveq	r7, #8
		if (*src == ':') {
   244aa:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   244ac:	bf08      	it	eq
   244ae:	3401      	addeq	r4, #1
		len = strlen(src);
   244b0:	4620      	mov	r0, r4
   244b2:	f7e8 fcdd 	bl	ce70 <strlen>
		for (i = 0; i < len; i++) {
   244b6:	2300      	movs	r3, #0
   244b8:	4283      	cmp	r3, r0
   244ba:	db21      	blt.n	24500 <z_impl_net_addr_pton+0xc6>
		for (i = 0; i < expected_groups; i++) {
   244bc:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   244be:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   244c0:	2c00      	cmp	r4, #0
   244c2:	d0e2      	beq.n	2448a <z_impl_net_addr_pton+0x50>
   244c4:	7823      	ldrb	r3, [r4, #0]
   244c6:	2b00      	cmp	r3, #0
   244c8:	d0df      	beq.n	2448a <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   244ca:	2b3a      	cmp	r3, #58	; 0x3a
   244cc:	d02d      	beq.n	2452a <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   244ce:	2210      	movs	r2, #16
   244d0:	2100      	movs	r1, #0
   244d2:	4620      	mov	r0, r4
   244d4:	f7fd ff84 	bl	223e0 <strtol>
   244d8:	2210      	movs	r2, #16
   244da:	4681      	mov	r9, r0
   244dc:	2100      	movs	r1, #0
   244de:	4620      	mov	r0, r4
   244e0:	f7fd ff7e 	bl	223e0 <strtol>
   244e4:	f3c9 2907 	ubfx	r9, r9, #8, #8
   244e8:	ea49 2000 	orr.w	r0, r9, r0, lsl #8
   244ec:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
				src = strchr(src, ':');
   244f0:	213a      	movs	r1, #58	; 0x3a
   244f2:	4620      	mov	r0, r4
   244f4:	f002 fbf8 	bl	26ce8 <strchr>
				if (src) {
   244f8:	4604      	mov	r4, r0
   244fa:	b178      	cbz	r0, 2451c <z_impl_net_addr_pton+0xe2>
			src++;
   244fc:	3401      	adds	r4, #1
   244fe:	e010      	b.n	24522 <z_impl_net_addr_pton+0xe8>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   24500:	5ce2      	ldrb	r2, [r4, r3]
   24502:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   24506:	290a      	cmp	r1, #10
   24508:	d906      	bls.n	24518 <z_impl_net_addr_pton+0xde>
   2450a:	f022 0120 	bic.w	r1, r2, #32
   2450e:	3941      	subs	r1, #65	; 0x41
   24510:	2905      	cmp	r1, #5
   24512:	d901      	bls.n	24518 <z_impl_net_addr_pton+0xde>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   24514:	2a2e      	cmp	r2, #46	; 0x2e
   24516:	d1b8      	bne.n	2448a <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   24518:	3301      	adds	r3, #1
   2451a:	e7cd      	b.n	244b8 <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   2451c:	1e7b      	subs	r3, r7, #1
   2451e:	42ab      	cmp	r3, r5
   24520:	dcb3      	bgt.n	2448a <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   24522:	3501      	adds	r5, #1
   24524:	42af      	cmp	r7, r5
   24526:	dccb      	bgt.n	244c0 <z_impl_net_addr_pton+0x86>
   24528:	e013      	b.n	24552 <z_impl_net_addr_pton+0x118>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   2452a:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   2452e:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   24532:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   24536:	3501      	adds	r5, #1
   24538:	42af      	cmp	r7, r5
   2453a:	dcf6      	bgt.n	2452a <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   2453c:	213a      	movs	r1, #58	; 0x3a
   2453e:	4620      	mov	r0, r4
   24540:	f002 fc3b 	bl	26dba <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   24544:	42a0      	cmp	r0, r4
   24546:	d11f      	bne.n	24588 <z_impl_net_addr_pton+0x14e>
   24548:	2f06      	cmp	r7, #6
   2454a:	d001      	beq.n	24550 <z_impl_net_addr_pton+0x116>
   2454c:	7863      	ldrb	r3, [r4, #1]
   2454e:	bb63      	cbnz	r3, 245aa <z_impl_net_addr_pton+0x170>
				src++;
   24550:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   24552:	2f06      	cmp	r7, #6
   24554:	d18f      	bne.n	24476 <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   24556:	2500      	movs	r5, #0
   24558:	360c      	adds	r6, #12
				if (!src || !*src) {
   2455a:	2c00      	cmp	r4, #0
   2455c:	d095      	beq.n	2448a <z_impl_net_addr_pton+0x50>
   2455e:	7823      	ldrb	r3, [r4, #0]
   24560:	2b00      	cmp	r3, #0
   24562:	d092      	beq.n	2448a <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   24564:	220a      	movs	r2, #10
   24566:	2100      	movs	r1, #0
   24568:	4620      	mov	r0, r4
   2456a:	f7fd ff39 	bl	223e0 <strtol>
				src = strchr(src, '.');
   2456e:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   24570:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   24574:	4620      	mov	r0, r4
   24576:	f002 fbb7 	bl	26ce8 <strchr>
				if (src) {
   2457a:	4604      	mov	r4, r0
   2457c:	b1b8      	cbz	r0, 245ae <z_impl_net_addr_pton+0x174>
					src++;
   2457e:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   24580:	3501      	adds	r5, #1
   24582:	2d04      	cmp	r5, #4
   24584:	d1e9      	bne.n	2455a <z_impl_net_addr_pton+0x120>
   24586:	e776      	b.n	24476 <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   24588:	2f06      	cmp	r7, #6
   2458a:	d100      	bne.n	2458e <z_impl_net_addr_pton+0x154>
				tmp--;
   2458c:	3801      	subs	r0, #1
			i = expected_groups - 1;
   2458e:	1e7d      	subs	r5, r7, #1
   24590:	3001      	adds	r0, #1
				if (*tmp == ':') {
   24592:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   24596:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   24598:	bf08      	it	eq
   2459a:	f105 35ff 	addeq.w	r5, r5, #4294967295
				if (i < 0) {
   2459e:	2d00      	cmp	r5, #0
   245a0:	f6ff af73 	blt.w	2448a <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   245a4:	42a0      	cmp	r0, r4
   245a6:	d1f4      	bne.n	24592 <z_impl_net_addr_pton+0x158>
   245a8:	e7a8      	b.n	244fc <z_impl_net_addr_pton+0xc2>
   245aa:	4620      	mov	r0, r4
   245ac:	e7ef      	b.n	2458e <z_impl_net_addr_pton+0x154>
					if (i < 3) {
   245ae:	2d03      	cmp	r5, #3
   245b0:	f47f af6b 	bne.w	2448a <z_impl_net_addr_pton+0x50>
   245b4:	e7e4      	b.n	24580 <z_impl_net_addr_pton+0x146>

000245b6 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   245b6:	e9d0 2300 	ldrd	r2, r3, [r0]
   245ba:	1a9b      	subs	r3, r3, r2
   245bc:	2b01      	cmp	r3, #1
{
   245be:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   245c0:	d90c      	bls.n	245dc <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   245c2:	4614      	mov	r4, r2
   245c4:	1c53      	adds	r3, r2, #1
   245c6:	6003      	str	r3, [r0, #0]
   245c8:	f814 3b02 	ldrb.w	r3, [r4], #2
   245cc:	021b      	lsls	r3, r3, #8
   245ce:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   245d0:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   245d2:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   245d4:	7852      	ldrb	r2, [r2, #1]
   245d6:	4313      	orrs	r3, r2
   245d8:	800b      	strh	r3, [r1, #0]
}
   245da:	bd10      	pop	{r4, pc}
		return -EINVAL;
   245dc:	f06f 0015 	mvn.w	r0, #21
   245e0:	e7fb      	b.n	245da <unpack_uint16+0x24>

000245e2 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   245e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   245e4:	e9d0 3400 	ldrd	r3, r4, [r0]
   245e8:	429c      	cmp	r4, r3
   245ea:	d01f      	beq.n	2462c <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   245ec:	1c5c      	adds	r4, r3, #1
   245ee:	6004      	str	r4, [r0, #0]
   245f0:	781b      	ldrb	r3, [r3, #0]
   245f2:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   245f4:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   245f6:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   245f8:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   245fa:	6804      	ldr	r4, [r0, #0]
   245fc:	42bc      	cmp	r4, r7
   245fe:	d218      	bcs.n	24632 <fixed_header_decode+0x50>
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   24600:	4625      	mov	r5, r4
   24602:	f815 3b01 	ldrb.w	r3, [r5], #1
   24606:	6816      	ldr	r6, [r2, #0]
   24608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   2460c:	408b      	lsls	r3, r1
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2460e:	4433      	add	r3, r6
   24610:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   24612:	6005      	str	r5, [r0, #0]
   24614:	f994 4000 	ldrsb.w	r4, [r4]
   24618:	2c00      	cmp	r4, #0
   2461a:	db04      	blt.n	24626 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   2461c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   24620:	d204      	bcs.n	2462c <fixed_header_decode+0x4a>
	return 0;
   24622:	2000      	movs	r0, #0
   24624:	e004      	b.n	24630 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   24626:	3107      	adds	r1, #7
   24628:	291c      	cmp	r1, #28
   2462a:	d1e6      	bne.n	245fa <fixed_header_decode+0x18>
		return -EINVAL;
   2462c:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   24630:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   24632:	f06f 000a 	mvn.w	r0, #10
   24636:	e7fb      	b.n	24630 <fixed_header_decode+0x4e>

00024638 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   24638:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   2463a:	e9d1 3500 	ldrd	r3, r5, [r1]
   2463e:	429d      	cmp	r5, r3
   24640:	d102      	bne.n	24648 <connect_ack_decode+0x10>
		return -EINVAL;
   24642:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   24646:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   24648:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   2464a:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   2464c:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   2464e:	d0f8      	beq.n	24642 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   24650:	461d      	mov	r5, r3
   24652:	f815 4b02 	ldrb.w	r4, [r5], #2
   24656:	600d      	str	r5, [r1, #0]
   24658:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2465a:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
	return 0;
   2465e:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   24660:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   24662:	bf04      	itt	eq
   24664:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   24668:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   2466a:	7051      	strb	r1, [r2, #1]
	return 0;
   2466c:	e7eb      	b.n	24646 <connect_ack_decode+0xe>

0002466e <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   2466e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24672:	461c      	mov	r4, r3
   24674:	4617      	mov	r7, r2
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   24676:	7da2      	ldrb	r2, [r4, #22]
   24678:	0043      	lsls	r3, r0, #1
   2467a:	f022 0203 	bic.w	r2, r2, #3
   2467e:	f003 0302 	and.w	r3, r3, #2
   24682:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   24684:	f3c0 0041 	ubfx	r0, r0, #1, #2
   24688:	7220      	strb	r0, [r4, #8]
{
   2468a:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   2468c:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2468e:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   24690:	f10d 0106 	add.w	r1, sp, #6
   24694:	f7ff ff8f 	bl	245b6 <unpack_uint16>
	if (err_code != 0) {
   24698:	4606      	mov	r6, r0
   2469a:	b9c0      	cbnz	r0, 246ce <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   2469c:	683b      	ldr	r3, [r7, #0]
   2469e:	687a      	ldr	r2, [r7, #4]
   246a0:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   246a4:	1ad2      	subs	r2, r2, r3
   246a6:	42aa      	cmp	r2, r5
   246a8:	da02      	bge.n	246b0 <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   246aa:	f06f 0615 	mvn.w	r6, #21
   246ae:	e00e      	b.n	246ce <publish_decode+0x60>
	str->size = utf8_strlen;
   246b0:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   246b2:	b185      	cbz	r5, 246d6 <publish_decode+0x68>
		str->utf8 = buf->cur;
   246b4:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   246b6:	442b      	add	r3, r5
   246b8:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   246ba:	7a23      	ldrb	r3, [r4, #8]
   246bc:	b96b      	cbnz	r3, 246da <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   246be:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   246c0:	4545      	cmp	r5, r8
   246c2:	d8f2      	bhi.n	246aa <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   246c4:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   246c6:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   246ca:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   246cc:	6125      	str	r5, [r4, #16]

	return 0;
}
   246ce:	4630      	mov	r0, r6
   246d0:	b002      	add	sp, #8
   246d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   246d6:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   246d8:	e7ef      	b.n	246ba <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   246da:	4638      	mov	r0, r7
   246dc:	f104 0114 	add.w	r1, r4, #20
   246e0:	f7ff ff69 	bl	245b6 <unpack_uint16>
		if (err_code != 0) {
   246e4:	b908      	cbnz	r0, 246ea <publish_decode+0x7c>
		var_header_length += sizeof(u16_t);
   246e6:	3504      	adds	r5, #4
   246e8:	e7ea      	b.n	246c0 <publish_decode+0x52>
   246ea:	4606      	mov	r6, r0
   246ec:	e7ef      	b.n	246ce <publish_decode+0x60>

000246ee <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   246ee:	f7ff bf62 	b.w	245b6 <unpack_uint16>

000246f2 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   246f2:	f7ff bf60 	b.w	245b6 <unpack_uint16>

000246f6 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   246f6:	f7ff bf5e 	b.w	245b6 <unpack_uint16>

000246fa <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   246fa:	f7ff bf5c 	b.w	245b6 <unpack_uint16>

000246fe <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   246fe:	b538      	push	{r3, r4, r5, lr}
   24700:	4605      	mov	r5, r0
   24702:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   24704:	f7ff ff57 	bl	245b6 <unpack_uint16>
	if (err_code != 0) {
   24708:	b930      	cbnz	r0, 24718 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   2470a:	e9d5 2300 	ldrd	r2, r3, [r5]
   2470e:	1a99      	subs	r1, r3, r2
	str->len = length;
   24710:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   24712:	b111      	cbz	r1, 2471a <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   24714:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   24716:	602b      	str	r3, [r5, #0]
}
   24718:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   2471a:	6060      	str	r0, [r4, #4]
   2471c:	e7fc      	b.n	24718 <subscribe_ack_decode+0x1a>

0002471e <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2471e:	f7ff bf4a 	b.w	245b6 <unpack_uint16>

00024722 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   24722:	e9d1 3200 	ldrd	r3, r2, [r1]
   24726:	1ad2      	subs	r2, r2, r3
   24728:	2a01      	cmp	r2, #1
   2472a:	d909      	bls.n	24740 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   2472c:	1c5a      	adds	r2, r3, #1
   2472e:	600a      	str	r2, [r1, #0]
   24730:	0a02      	lsrs	r2, r0, #8
   24732:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   24734:	680b      	ldr	r3, [r1, #0]
   24736:	1c5a      	adds	r2, r3, #1
   24738:	600a      	str	r2, [r1, #0]
   2473a:	7018      	strb	r0, [r3, #0]
	return 0;
   2473c:	2000      	movs	r0, #0
   2473e:	4770      	bx	lr
		return -ENOMEM;
   24740:	f06f 000b 	mvn.w	r0, #11
}
   24744:	4770      	bx	lr

00024746 <pack_utf8_str>:
{
   24746:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   24748:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   2474c:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2474e:	6840      	ldr	r0, [r0, #4]
   24750:	1a9b      	subs	r3, r3, r2
   24752:	1c82      	adds	r2, r0, #2
   24754:	4293      	cmp	r3, r2
{
   24756:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   24758:	d30d      	bcc.n	24776 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   2475a:	b280      	uxth	r0, r0
   2475c:	f7ff ffe1 	bl	24722 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24760:	e9d5 1200 	ldrd	r1, r2, [r5]
   24764:	6820      	ldr	r0, [r4, #0]
   24766:	f002 f94e 	bl	26a06 <memcpy>
	return 0;
   2476a:	2000      	movs	r0, #0
	buf->cur += str->size;
   2476c:	6823      	ldr	r3, [r4, #0]
   2476e:	686a      	ldr	r2, [r5, #4]
   24770:	4413      	add	r3, r2
   24772:	6023      	str	r3, [r4, #0]
}
   24774:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   24776:	f06f 000b 	mvn.w	r0, #11
   2477a:	e7fb      	b.n	24774 <pack_utf8_str+0x2e>

0002477c <mqtt_encode_fixed_header>:
	u32_t length = buf->cur - start;
   2477c:	6813      	ldr	r3, [r2, #0]
{
   2477e:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   24780:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   24782:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   24786:	d227      	bcs.n	247d8 <mqtt_encode_fixed_header+0x5c>
   24788:	4625      	mov	r5, r4
   2478a:	2600      	movs	r6, #0
	} while (length > 0);
   2478c:	09ed      	lsrs	r5, r5, #7
   2478e:	b2f3      	uxtb	r3, r6
   24790:	f106 0601 	add.w	r6, r6, #1
   24794:	d1fa      	bne.n	2478c <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   24796:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   24798:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   2479a:	b2db      	uxtb	r3, r3
   2479c:	425d      	negs	r5, r3
   2479e:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   247a0:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   247a2:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   247a4:	bf1e      	ittt	ne
   247a6:	3301      	addne	r3, #1
   247a8:	6013      	strne	r3, [r2, #0]
   247aa:	5548      	strbne	r0, [r1, r5]
	return 0;
   247ac:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   247ae:	6813      	ldr	r3, [r2, #0]
   247b0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   247b4:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   247b6:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   247b8:	bf1f      	itttt	ne
   247ba:	6811      	ldrne	r1, [r2, #0]
   247bc:	780b      	ldrbne	r3, [r1, #0]
   247be:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   247c2:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   247c4:	6813      	ldr	r3, [r2, #0]
   247c6:	3301      	adds	r3, #1
   247c8:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   247ca:	2800      	cmp	r0, #0
   247cc:	d1ef      	bne.n	247ae <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   247ce:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   247d0:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   247d2:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   247d4:	6053      	str	r3, [r2, #4]
}
   247d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   247d8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   247dc:	e7fb      	b.n	247d6 <mqtt_encode_fixed_header+0x5a>

000247de <mqtt_message_id_only_enc>:
{
   247de:	b570      	push	{r4, r5, r6, lr}
   247e0:	4606      	mov	r6, r0
   247e2:	4614      	mov	r4, r2
	if (message_id == 0U) {
   247e4:	4608      	mov	r0, r1
   247e6:	b169      	cbz	r1, 24804 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   247e8:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   247ea:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   247ec:	3505      	adds	r5, #5
   247ee:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   247f0:	f7ff ff97 	bl	24722 <pack_uint16>
	if (err_code != 0) {
   247f4:	b940      	cbnz	r0, 24808 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   247f6:	4622      	mov	r2, r4
   247f8:	4629      	mov	r1, r5
   247fa:	4630      	mov	r0, r6
}
   247fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   24800:	f7ff bfbc 	b.w	2477c <mqtt_encode_fixed_header>
		return -EINVAL;
   24804:	f06f 0015 	mvn.w	r0, #21
}
   24808:	bd70      	pop	{r4, r5, r6, pc}

0002480a <publish_encode>:
{
   2480a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   2480e:	7d87      	ldrb	r7, [r0, #22]
   24810:	7a04      	ldrb	r4, [r0, #8]
   24812:	f007 0801 	and.w	r8, r7, #1
{
   24816:	4605      	mov	r5, r0
   24818:	4689      	mov	r9, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   2481a:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   2481e:	b10c      	cbz	r4, 24824 <publish_encode+0x1a>
   24820:	8a83      	ldrh	r3, [r0, #20]
   24822:	b383      	cbz	r3, 24886 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   24824:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   24828:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2482a:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2482c:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2482e:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   24832:	f7ff ff88 	bl	24746 <pack_utf8_str>
	if (err_code != 0) {
   24836:	b9b0      	cbnz	r0, 24866 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   24838:	7a2b      	ldrb	r3, [r5, #8]
   2483a:	b9b3      	cbnz	r3, 2486a <publish_encode+0x60>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   2483c:	0060      	lsls	r0, r4, #1
   2483e:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   24842:	692a      	ldr	r2, [r5, #16]
   24844:	f8d9 3000 	ldr.w	r3, [r9]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   24848:	4338      	orrs	r0, r7
   2484a:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   2484e:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   24850:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   24854:	464a      	mov	r2, r9
   24856:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   24858:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2485c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   24860:	f7ff ff8c 	bl	2477c <mqtt_encode_fixed_header>
	if (err_code != 0) {
   24864:	b140      	cbz	r0, 24878 <publish_encode+0x6e>
}
   24866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   2486a:	4649      	mov	r1, r9
   2486c:	8aa8      	ldrh	r0, [r5, #20]
   2486e:	f7ff ff58 	bl	24722 <pack_uint16>
		if (err_code != 0) {
   24872:	2800      	cmp	r0, #0
   24874:	d0e2      	beq.n	2483c <publish_encode+0x32>
   24876:	e7f6      	b.n	24866 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   24878:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2487c:	692a      	ldr	r2, [r5, #16]
   2487e:	1a9b      	subs	r3, r3, r2
   24880:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   24884:	e7ef      	b.n	24866 <publish_encode+0x5c>
		return -EINVAL;
   24886:	f06f 0015 	mvn.w	r0, #21
   2488a:	e7ec      	b.n	24866 <publish_encode+0x5c>

0002488c <publish_release_encode>:
{
   2488c:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   2488e:	8801      	ldrh	r1, [r0, #0]
   24890:	2062      	movs	r0, #98	; 0x62
   24892:	f7ff bfa4 	b.w	247de <mqtt_message_id_only_enc>

00024896 <publish_complete_encode>:
{
   24896:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   24898:	8801      	ldrh	r1, [r0, #0]
   2489a:	2070      	movs	r0, #112	; 0x70
   2489c:	f7ff bf9f 	b.w	247de <mqtt_message_id_only_enc>

000248a0 <subscribe_encode>:
{
   248a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   248a4:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   248a6:	88c0      	ldrh	r0, [r0, #6]
{
   248a8:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   248aa:	b330      	cbz	r0, 248fa <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   248ac:	680f      	ldr	r7, [r1, #0]
   248ae:	3705      	adds	r7, #5
   248b0:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   248b2:	f7ff ff36 	bl	24722 <pack_uint16>
	if (err_code != 0) {
   248b6:	4604      	mov	r4, r0
   248b8:	bb08      	cbnz	r0, 248fe <subscribe_encode+0x5e>
   248ba:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   248be:	88b3      	ldrh	r3, [r6, #4]
   248c0:	42a3      	cmp	r3, r4
   248c2:	dc06      	bgt.n	248d2 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   248c4:	462a      	mov	r2, r5
   248c6:	4639      	mov	r1, r7
}
   248c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   248cc:	2082      	movs	r0, #130	; 0x82
   248ce:	f7ff bf55 	b.w	2477c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   248d2:	fb08 f904 	mul.w	r9, r8, r4
   248d6:	6830      	ldr	r0, [r6, #0]
   248d8:	4629      	mov	r1, r5
   248da:	4448      	add	r0, r9
   248dc:	f7ff ff33 	bl	24746 <pack_utf8_str>
		if (err_code != 0) {
   248e0:	b980      	cbnz	r0, 24904 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   248e2:	6833      	ldr	r3, [r6, #0]
   248e4:	444b      	add	r3, r9
   248e6:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   248e8:	e9d5 3100 	ldrd	r3, r1, [r5]
   248ec:	4299      	cmp	r1, r3
   248ee:	d00b      	beq.n	24908 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   248f0:	1c59      	adds	r1, r3, #1
   248f2:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   248f4:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   248f6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   248f8:	e7e1      	b.n	248be <subscribe_encode+0x1e>
		return -EINVAL;
   248fa:	f06f 0415 	mvn.w	r4, #21
}
   248fe:	4620      	mov	r0, r4
   24900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   24904:	4604      	mov	r4, r0
   24906:	e7fa      	b.n	248fe <subscribe_encode+0x5e>
		return -ENOMEM;
   24908:	f06f 040b 	mvn.w	r4, #11
   2490c:	e7f7      	b.n	248fe <subscribe_encode+0x5e>

0002490e <unsubscribe_encode>:
{
   2490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   24912:	680f      	ldr	r7, [r1, #0]
{
   24914:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   24916:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   24918:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2491a:	600f      	str	r7, [r1, #0]
{
   2491c:	460d      	mov	r5, r1
	err_code = pack_uint16(param->message_id, buf);
   2491e:	f7ff ff00 	bl	24722 <pack_uint16>
	if (err_code != 0) {
   24922:	4604      	mov	r4, r0
   24924:	b9a8      	cbnz	r0, 24952 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   24926:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   2492a:	88b3      	ldrh	r3, [r6, #4]
   2492c:	42a3      	cmp	r3, r4
   2492e:	dc06      	bgt.n	2493e <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   24930:	462a      	mov	r2, r5
   24932:	4639      	mov	r1, r7
}
   24934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   24938:	20a2      	movs	r0, #162	; 0xa2
   2493a:	f7ff bf1f 	b.w	2477c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   2493e:	6830      	ldr	r0, [r6, #0]
   24940:	4629      	mov	r1, r5
   24942:	fb08 0004 	mla	r0, r8, r4, r0
   24946:	f7ff fefe 	bl	24746 <pack_utf8_str>
		if (err_code != 0) {
   2494a:	b908      	cbnz	r0, 24950 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   2494c:	3401      	adds	r4, #1
   2494e:	e7ec      	b.n	2492a <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   24950:	4604      	mov	r4, r0
}
   24952:	4620      	mov	r0, r4
   24954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024958 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   24958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2495a:	460d      	mov	r5, r1
	u32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   2495c:	e9d1 3100 	ldrd	r3, r1, [r1]
   24960:	1acb      	subs	r3, r1, r3
   24962:	4293      	cmp	r3, r2
{
   24964:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   24966:	d301      	bcc.n	2496c <mqtt_read_message_chunk+0x14>
		return 0;
   24968:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   2496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   2496c:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   2496e:	190f      	adds	r7, r1, r4
   24970:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   24974:	4413      	add	r3, r2
   24976:	429f      	cmp	r7, r3
   24978:	d813      	bhi.n	249a2 <mqtt_read_message_chunk+0x4a>
   2497a:	4297      	cmp	r7, r2
   2497c:	d311      	bcc.n	249a2 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   2497e:	2300      	movs	r3, #0
   24980:	4622      	mov	r2, r4
   24982:	f7f0 fa17 	bl	14db4 <mqtt_transport_read>
	if (len < 0) {
   24986:	2800      	cmp	r0, #0
   24988:	dbef      	blt.n	2496a <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   2498a:	d00d      	beq.n	249a8 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   2498c:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   2498e:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   24990:	4403      	add	r3, r0
   24992:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   24994:	686b      	ldr	r3, [r5, #4]
   24996:	4403      	add	r3, r0
   24998:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   2499a:	d2e5      	bcs.n	24968 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   2499c:	f06f 000a 	mvn.w	r0, #10
   249a0:	e7e3      	b.n	2496a <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   249a2:	f06f 000b 	mvn.w	r0, #11
   249a6:	e7e0      	b.n	2496a <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   249a8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   249ac:	e7dd      	b.n	2496a <mqtt_read_message_chunk+0x12>

000249ae <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   249ae:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   249b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   249b2:	69c2      	ldr	r2, [r0, #28]
{
   249b4:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   249b6:	9302      	str	r3, [sp, #8]
{
   249b8:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   249ba:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   249bc:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   249be:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   249c0:	4628      	mov	r0, r5
   249c2:	a902      	add	r1, sp, #8
   249c4:	f7ff ffc8 	bl	24958 <mqtt_read_message_chunk>
		if (err_code < 0) {
   249c8:	1e04      	subs	r4, r0, #0
   249ca:	db2d      	blt.n	24a28 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   249cc:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   249ce:	aa01      	add	r2, sp, #4
   249d0:	f10d 0103 	add.w	r1, sp, #3
   249d4:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   249d6:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   249d8:	f7ff fe03 	bl	245e2 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   249dc:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   249e0:	4604      	mov	r4, r0
		chunk_size = 1U;
   249e2:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   249e6:	d0eb      	beq.n	249c0 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   249e8:	2800      	cmp	r0, #0
   249ea:	db21      	blt.n	24a30 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   249ec:	f89d 6003 	ldrb.w	r6, [sp, #3]
   249f0:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   249f4:	2b30      	cmp	r3, #48	; 0x30
   249f6:	d11e      	bne.n	24a36 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   249f8:	2202      	movs	r2, #2
   249fa:	4628      	mov	r0, r5
   249fc:	a902      	add	r1, sp, #8
   249fe:	f7ff ffab 	bl	24958 <mqtt_read_message_chunk>
	if (err_code < 0) {
   24a02:	1e04      	subs	r4, r0, #0
   24a04:	db10      	blt.n	24a28 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   24a06:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   24a08:	f016 0f06 	tst.w	r6, #6
   24a0c:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   24a0e:	4628      	mov	r0, r5
   24a10:	ba52      	rev16	r2, r2
   24a12:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   24a14:	bf0c      	ite	eq
   24a16:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   24a18:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   24a1a:	a902      	add	r1, sp, #8
   24a1c:	f7ff ff9c 	bl	24958 <mqtt_read_message_chunk>
	if (err_code < 0) {
   24a20:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   24a24:	2c00      	cmp	r4, #0
   24a26:	da0d      	bge.n	24a44 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   24a28:	f114 0f0b 	cmn.w	r4, #11
   24a2c:	d100      	bne.n	24a30 <mqtt_handle_rx+0x82>
   24a2e:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   24a30:	4620      	mov	r0, r4
   24a32:	b00c      	add	sp, #48	; 0x30
   24a34:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   24a36:	4628      	mov	r0, r5
   24a38:	9a01      	ldr	r2, [sp, #4]
   24a3a:	a902      	add	r1, sp, #8
   24a3c:	f7ff ff8c 	bl	24958 <mqtt_read_message_chunk>
   24a40:	4604      	mov	r4, r0
   24a42:	e7ef      	b.n	24a24 <mqtt_handle_rx+0x76>
	evt.result = 0;
   24a44:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   24a46:	f89d 0003 	ldrb.w	r0, [sp, #3]
   24a4a:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   24a4c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   24a50:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   24a52:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   24a54:	d063      	beq.n	24b1e <mqtt_handle_rx+0x170>
   24a56:	d813      	bhi.n	24a80 <mqtt_handle_rx+0xd2>
   24a58:	2b40      	cmp	r3, #64	; 0x40
   24a5a:	d056      	beq.n	24b0a <mqtt_handle_rx+0x15c>
   24a5c:	d806      	bhi.n	24a6c <mqtt_handle_rx+0xbe>
   24a5e:	2b20      	cmp	r3, #32
   24a60:	d02f      	beq.n	24ac2 <mqtt_handle_rx+0x114>
   24a62:	2b30      	cmp	r3, #48	; 0x30
   24a64:	d045      	beq.n	24af2 <mqtt_handle_rx+0x144>
	client->internal.rx_buf_datalen = 0U;
   24a66:	2400      	movs	r4, #0
   24a68:	61ec      	str	r4, [r5, #28]
	return 0;
   24a6a:	e7e1      	b.n	24a30 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   24a6c:	2b50      	cmp	r3, #80	; 0x50
   24a6e:	d1fa      	bne.n	24a66 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   24a70:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   24a72:	a905      	add	r1, sp, #20
   24a74:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   24a76:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   24a7a:	f7ff fe3a 	bl	246f2 <publish_receive_decode>
   24a7e:	e04b      	b.n	24b18 <mqtt_handle_rx+0x16a>
	switch (type_and_flags & 0xF0) {
   24a80:	2bb0      	cmp	r3, #176	; 0xb0
   24a82:	d05c      	beq.n	24b3e <mqtt_handle_rx+0x190>
   24a84:	d80b      	bhi.n	24a9e <mqtt_handle_rx+0xf0>
   24a86:	2b70      	cmp	r3, #112	; 0x70
   24a88:	d051      	beq.n	24b2e <mqtt_handle_rx+0x180>
   24a8a:	2b90      	cmp	r3, #144	; 0x90
   24a8c:	d1eb      	bne.n	24a66 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   24a8e:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   24a90:	a905      	add	r1, sp, #20
   24a92:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   24a94:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   24a98:	f7ff fe31 	bl	246fe <subscribe_ack_decode>
   24a9c:	e03c      	b.n	24b18 <mqtt_handle_rx+0x16a>
	switch (type_and_flags & 0xF0) {
   24a9e:	2bd0      	cmp	r3, #208	; 0xd0
   24aa0:	d1e1      	bne.n	24a66 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   24aa2:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   24aa6:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   24aa8:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   24aaa:	bfc8      	it	gt
   24aac:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   24ab0:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   24ab4:	bfc8      	it	gt
   24ab6:	b252      	sxtbgt	r2, r2
   24ab8:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   24abc:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   24ac0:	e010      	b.n	24ae4 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   24ac2:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   24ac6:	4628      	mov	r0, r5
   24ac8:	aa05      	add	r2, sp, #20
   24aca:	a902      	add	r1, sp, #8
   24acc:	f7ff fdb4 	bl	24638 <connect_ack_decode>
		if (err_code == 0) {
   24ad0:	4604      	mov	r4, r0
   24ad2:	bb10      	cbnz	r0, 24b1a <mqtt_handle_rx+0x16c>
			if (evt.param.connack.return_code ==
   24ad4:	f89d 2015 	ldrb.w	r2, [sp, #21]
   24ad8:	b91a      	cbnz	r2, 24ae2 <mqtt_handle_rx+0x134>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   24ada:	69ab      	ldr	r3, [r5, #24]
   24adc:	f043 0304 	orr.w	r3, r3, #4
   24ae0:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   24ae2:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   24ae4:	4628      	mov	r0, r5
   24ae6:	a904      	add	r1, sp, #16
   24ae8:	f000 f8c0 	bl	24c6c <event_notify>
	if (err_code < 0) {
   24aec:	2c00      	cmp	r4, #0
   24aee:	daba      	bge.n	24a66 <mqtt_handle_rx+0xb8>
   24af0:	e79e      	b.n	24a30 <mqtt_handle_rx+0x82>
		evt.type = MQTT_EVT_PUBLISH;
   24af2:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   24af4:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   24af6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   24afa:	ab05      	add	r3, sp, #20
   24afc:	f7ff fdb7 	bl	2466e <publish_decode>
		client->internal.remaining_payload =
   24b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   24b02:	4604      	mov	r4, r0
		evt.result = err_code;
   24b04:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   24b06:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   24b08:	e7ec      	b.n	24ae4 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   24b0a:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   24b0c:	a905      	add	r1, sp, #20
   24b0e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   24b10:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   24b14:	f7ff fdeb 	bl	246ee <publish_ack_decode>
   24b18:	4604      	mov	r4, r0
		evt.result = err_code;
   24b1a:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   24b1c:	e7e2      	b.n	24ae4 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   24b1e:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   24b20:	a905      	add	r1, sp, #20
   24b22:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   24b24:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   24b28:	f7ff fde5 	bl	246f6 <publish_release_decode>
   24b2c:	e7f4      	b.n	24b18 <mqtt_handle_rx+0x16a>
		evt.type = MQTT_EVT_PUBCOMP;
   24b2e:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   24b30:	a905      	add	r1, sp, #20
   24b32:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   24b34:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   24b38:	f7ff fddf 	bl	246fa <publish_complete_decode>
   24b3c:	e7ec      	b.n	24b18 <mqtt_handle_rx+0x16a>
		evt.type = MQTT_EVT_UNSUBACK;
   24b3e:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   24b40:	a905      	add	r1, sp, #20
   24b42:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   24b46:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   24b4a:	f7ff fde8 	bl	2471e <unsubscribe_ack_decode>
   24b4e:	e7e3      	b.n	24b18 <mqtt_handle_rx+0x16a>

00024b50 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   24b50:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   24b52:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   24b54:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   24b56:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   24b58:	2206      	movs	r2, #6
   24b5a:	2101      	movs	r1, #1
   24b5c:	f7ee fcae 	bl	134bc <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   24b60:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   24b62:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   24b64:	da04      	bge.n	24b70 <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   24b66:	f7ff fbfd 	bl	24364 <__errno>
   24b6a:	6800      	ldr	r0, [r0, #0]
   24b6c:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   24b6e:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   24b70:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   24b72:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   24b74:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   24b76:	bf14      	ite	ne
   24b78:	2218      	movne	r2, #24
   24b7a:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   24b7c:	f7ff f990 	bl	23ea0 <z_impl_zsock_connect>
	if (ret < 0) {
   24b80:	2800      	cmp	r0, #0
   24b82:	da03      	bge.n	24b8c <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   24b84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   24b86:	f7ff f964 	bl	23e52 <z_impl_zsock_close>
   24b8a:	e7ec      	b.n	24b66 <mqtt_client_tcp_connect+0x16>
	return 0;
   24b8c:	2000      	movs	r0, #0
   24b8e:	e7ee      	b.n	24b6e <mqtt_client_tcp_connect+0x1e>

00024b90 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   24b90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0U;
   24b94:	2400      	movs	r4, #0
{
   24b96:	4606      	mov	r6, r0
   24b98:	460f      	mov	r7, r1
   24b9a:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   24b9c:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   24b9e:	42ac      	cmp	r4, r5
   24ba0:	d301      	bcc.n	24ba6 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   24ba2:	2000      	movs	r0, #0
   24ba4:	e00d      	b.n	24bc2 <mqtt_client_tcp_write+0x32>
		ret = send(client->transport.tcp.sock, data + offset,
   24ba6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   24ba8:	2300      	movs	r3, #0
   24baa:	e9cd 8800 	strd	r8, r8, [sp]
   24bae:	1b2a      	subs	r2, r5, r4
   24bb0:	1939      	adds	r1, r7, r4
   24bb2:	f7ff f9a9 	bl	23f08 <z_impl_zsock_sendto>
		if (ret < 0) {
   24bb6:	1e03      	subs	r3, r0, #0
   24bb8:	da06      	bge.n	24bc8 <mqtt_client_tcp_write+0x38>
			return -errno;
   24bba:	f7ff fbd3 	bl	24364 <__errno>
   24bbe:	6800      	ldr	r0, [r0, #0]
   24bc0:	4240      	negs	r0, r0
}
   24bc2:	b002      	add	sp, #8
   24bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   24bc8:	441c      	add	r4, r3
   24bca:	e7e8      	b.n	24b9e <mqtt_client_tcp_write+0xe>

00024bcc <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   24bcc:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   24bce:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   24bd0:	2200      	movs	r2, #0
   24bd2:	f7ff f9b2 	bl	23f3a <z_impl_zsock_sendmsg>
	if (ret < 0) {
   24bd6:	2800      	cmp	r0, #0
   24bd8:	da04      	bge.n	24be4 <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   24bda:	f7ff fbc3 	bl	24364 <__errno>
   24bde:	6800      	ldr	r0, [r0, #0]
   24be0:	4240      	negs	r0, r0
	}

	return 0;
}
   24be2:	bd08      	pop	{r3, pc}
	return 0;
   24be4:	2000      	movs	r0, #0
   24be6:	e7fc      	b.n	24be2 <mqtt_client_tcp_write_msg+0x16>

00024be8 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   24be8:	b513      	push	{r0, r1, r4, lr}
   24bea:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   24bec:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   24bee:	bf14      	ite	ne
   24bf0:	4623      	movne	r3, r4
   24bf2:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   24bf4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   24bf6:	e9cd 4400 	strd	r4, r4, [sp]
   24bfa:	f7ff f9b0 	bl	23f5e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   24bfe:	2800      	cmp	r0, #0
   24c00:	da03      	bge.n	24c0a <mqtt_client_tcp_read+0x22>
		return -errno;
   24c02:	f7ff fbaf 	bl	24364 <__errno>
   24c06:	6800      	ldr	r0, [r0, #0]
   24c08:	4240      	negs	r0, r0
	}

	return ret;
}
   24c0a:	b002      	add	sp, #8
   24c0c:	bd10      	pop	{r4, pc}

00024c0e <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   24c0e:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   24c10:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   24c12:	f7ff f91e 	bl	23e52 <z_impl_zsock_close>
	if (ret < 0) {
   24c16:	2800      	cmp	r0, #0
   24c18:	da04      	bge.n	24c24 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   24c1a:	f7ff fba3 	bl	24364 <__errno>
   24c1e:	6800      	ldr	r0, [r0, #0]
   24c20:	4240      	negs	r0, r0
	}

	return 0;
}
   24c22:	bd08      	pop	{r3, pc}
	return 0;
   24c24:	2000      	movs	r0, #0
   24c26:	e7fc      	b.n	24c22 <mqtt_client_tcp_disconnect+0x14>

00024c28 <k_uptime_get>:
{
   24c28:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   24c2a:	f001 fd6a 	bl	26702 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   24c2e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   24c32:	fba0 2304 	umull	r2, r3, r0, r4
   24c36:	fb04 3301 	mla	r3, r4, r1, r3
   24c3a:	0bd0      	lsrs	r0, r2, #15
}
   24c3c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   24c40:	0bd9      	lsrs	r1, r3, #15
   24c42:	bd10      	pop	{r4, pc}

00024c44 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   24c44:	b538      	push	{r3, r4, r5, lr}
   24c46:	4604      	mov	r4, r0
   24c48:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   24c4a:	6f42      	ldr	r2, [r0, #116]	; 0x74
   24c4c:	2100      	movs	r1, #0
   24c4e:	6f00      	ldr	r0, [r0, #112]	; 0x70
   24c50:	f001 fee6 	bl	26a20 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   24c54:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   24c56:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   24c58:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   24c5a:	4413      	add	r3, r2
   24c5c:	606b      	str	r3, [r5, #4]
}
   24c5e:	bd38      	pop	{r3, r4, r5, pc}

00024c60 <mqtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   24c60:	f04f 32ff 	mov.w	r2, #4294967295
   24c64:	f04f 33ff 	mov.w	r3, #4294967295
   24c68:	f7fb be3e 	b.w	208e8 <z_impl_k_mutex_lock>

00024c6c <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   24c6c:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   24c6e:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   24c70:	4604      	mov	r4, r0
   24c72:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   24c74:	b15b      	cbz	r3, 24c8e <event_notify+0x22>

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
	int ret = sys_mutex_unlock(&client->internal.mutex);
   24c76:	f7f0 f8b5 	bl	14de4 <sys_mutex_unlock>
		mqtt_mutex_unlock(client);

		client->evt_cb(client, evt);
   24c7a:	4620      	mov	r0, r4
   24c7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   24c7e:	9901      	ldr	r1, [sp, #4]
   24c80:	4798      	blx	r3

		mqtt_mutex_lock(client);
   24c82:	4620      	mov	r0, r4
	}
}
   24c84:	b002      	add	sp, #8
   24c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   24c8a:	f7ff bfe9 	b.w	24c60 <mqtt_mutex_lock>
}
   24c8e:	b002      	add	sp, #8
   24c90:	bd10      	pop	{r4, pc}

00024c92 <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   24c92:	b530      	push	{r4, r5, lr}
   24c94:	4604      	mov	r4, r0
   24c96:	b089      	sub	sp, #36	; 0x24
   24c98:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   24c9a:	f7f0 f899 	bl	14dd0 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   24c9e:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   24ca0:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   24ca2:	f013 0304 	ands.w	r3, r3, #4
		evt.type = MQTT_EVT_DISCONNECT;
   24ca6:	bf12      	itee	ne
   24ca8:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   24caa:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   24cae:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   24cb2:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   24cb4:	bf16      	itet	ne
   24cb6:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   24cba:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   24cbc:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   24cbe:	f7ff ffd5 	bl	24c6c <event_notify>
	MQTT_STATE_INIT(client);
   24cc2:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   24cc4:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   24cc8:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   24ccc:	b009      	add	sp, #36	; 0x24
   24cce:	bd30      	pop	{r4, r5, pc}

00024cd0 <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   24cd0:	b538      	push	{r3, r4, r5, lr}
   24cd2:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   24cd4:	f7f0 f854 	bl	14d80 <mqtt_transport_write>
	if (err_code < 0) {
   24cd8:	1e04      	subs	r4, r0, #0
   24cda:	da05      	bge.n	24ce8 <client_write+0x18>
		MQTT_TRC("Transport write failed, err_code = %d, "
			 "closing connection", err_code);
		client_disconnect(client, err_code);
   24cdc:	4621      	mov	r1, r4
   24cde:	4628      	mov	r0, r5
   24ce0:	f7ff ffd7 	bl	24c92 <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   24ce4:	4620      	mov	r0, r4
   24ce6:	bd38      	pop	{r3, r4, r5, pc}
	return (u32_t)k_uptime_get();
   24ce8:	f7ff ff9e 	bl	24c28 <k_uptime_get>
	return 0;
   24cec:	2400      	movs	r4, #0
   24cee:	6168      	str	r0, [r5, #20]
   24cf0:	e7f8      	b.n	24ce4 <client_write+0x14>

00024cf2 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   24cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24cf4:	4617      	mov	r7, r2
   24cf6:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   24cf8:	4605      	mov	r5, r0
{
   24cfa:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   24cfc:	b320      	cbz	r0, 24d48 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   24cfe:	f7ff ffaf 	bl	24c60 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   24d02:	6a2c      	ldr	r4, [r5, #32]
   24d04:	b1b4      	cbz	r4, 24d34 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   24d06:	42bc      	cmp	r4, r7
   24d08:	4622      	mov	r2, r4
   24d0a:	4633      	mov	r3, r6
   24d0c:	bf28      	it	cs
   24d0e:	463a      	movcs	r2, r7
   24d10:	4628      	mov	r0, r5
   24d12:	9901      	ldr	r1, [sp, #4]
   24d14:	f7f0 f84e 	bl	14db4 <mqtt_transport_read>
   24d18:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   24d1a:	b916      	cbnz	r6, 24d22 <read_publish_payload+0x30>
   24d1c:	f110 0f0b 	cmn.w	r0, #11
   24d20:	d008      	beq.n	24d34 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   24d22:	2c00      	cmp	r4, #0
   24d24:	dc0c      	bgt.n	24d40 <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   24d26:	bf08      	it	eq
   24d28:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret);
   24d2c:	4628      	mov	r0, r5
   24d2e:	4621      	mov	r1, r4
   24d30:	f7ff ffaf 	bl	24c92 <client_disconnect>
   24d34:	4628      	mov	r0, r5
   24d36:	f7f0 f855 	bl	14de4 <sys_mutex_unlock>

exit:
	mqtt_mutex_unlock(client);

	return ret;
}
   24d3a:	4620      	mov	r0, r4
   24d3c:	b003      	add	sp, #12
   24d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   24d40:	6a2b      	ldr	r3, [r5, #32]
   24d42:	1b1b      	subs	r3, r3, r4
   24d44:	622b      	str	r3, [r5, #32]
   24d46:	e7f5      	b.n	24d34 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   24d48:	f06f 0415 	mvn.w	r4, #21
   24d4c:	e7f5      	b.n	24d3a <read_publish_payload+0x48>

00024d4e <mqtt_client_init>:
{
   24d4e:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   24d50:	4604      	mov	r4, r0
   24d52:	b1a0      	cbz	r0, 24d7e <mqtt_client_init+0x30>
   24d54:	2280      	movs	r2, #128	; 0x80
   24d56:	2100      	movs	r1, #0
   24d58:	f001 fe62 	bl	26a20 <memset>
	MQTT_STATE_INIT(client);
   24d5c:	2300      	movs	r3, #0
   24d5e:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   24d60:	4620      	mov	r0, r4
   24d62:	f001 fab1 	bl	262c8 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   24d66:	2304      	movs	r3, #4
   24d68:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = 1U;
   24d6c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   24d70:	f043 0302 	orr.w	r3, r3, #2
   24d74:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   24d78:	233c      	movs	r3, #60	; 0x3c
   24d7a:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   24d7e:	bd10      	pop	{r4, pc}

00024d80 <mqtt_connect>:
{
   24d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   24d82:	4605      	mov	r5, r0
   24d84:	2800      	cmp	r0, #0
   24d86:	d03c      	beq.n	24e02 <mqtt_connect+0x82>
	NULL_PARAM_CHECK(client->client_id.utf8);
   24d88:	6c83      	ldr	r3, [r0, #72]	; 0x48
   24d8a:	2b00      	cmp	r3, #0
   24d8c:	d039      	beq.n	24e02 <mqtt_connect+0x82>
	mqtt_mutex_lock(client);
   24d8e:	f7ff ff67 	bl	24c60 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   24d92:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   24d94:	b393      	cbz	r3, 24dfc <mqtt_connect+0x7c>
   24d96:	6eab      	ldr	r3, [r5, #104]	; 0x68
   24d98:	b383      	cbz	r3, 24dfc <mqtt_connect+0x7c>
	err_code = mqtt_transport_connect(client);
   24d9a:	4628      	mov	r0, r5
   24d9c:	f7ef ffe6 	bl	14d6c <mqtt_transport_connect>
	if (err_code < 0) {
   24da0:	1e04      	subs	r4, r0, #0
   24da2:	db25      	blt.n	24df0 <mqtt_connect+0x70>
	tx_buf_init(client, &packet);
   24da4:	4669      	mov	r1, sp
   24da6:	4628      	mov	r0, r5
   24da8:	f7ff ff4c 	bl	24c44 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   24dac:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   24dae:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   24db0:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   24db4:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   24db6:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   24db8:	f7ef ff34 	bl	14c24 <connect_request_encode>
	if (err_code < 0) {
   24dbc:	1e04      	subs	r4, r0, #0
   24dbe:	db13      	blt.n	24de8 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   24dc0:	e9dd 1200 	ldrd	r1, r2, [sp]
   24dc4:	4628      	mov	r0, r5
   24dc6:	1a52      	subs	r2, r2, r1
   24dc8:	f7ef ffda 	bl	14d80 <mqtt_transport_write>
	if (err_code < 0) {
   24dcc:	1e04      	subs	r4, r0, #0
   24dce:	db0b      	blt.n	24de8 <mqtt_connect+0x68>
   24dd0:	f7ff ff2a 	bl	24c28 <k_uptime_get>
	client->unacked_ping = 0;
   24dd4:	2400      	movs	r4, #0
   24dd6:	6168      	str	r0, [r5, #20]
   24dd8:	f885 407b 	strb.w	r4, [r5, #123]	; 0x7b
   24ddc:	4628      	mov	r0, r5
   24dde:	f7f0 f801 	bl	14de4 <sys_mutex_unlock>
}
   24de2:	4620      	mov	r0, r4
   24de4:	b003      	add	sp, #12
   24de6:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   24de8:	4621      	mov	r1, r4
   24dea:	4628      	mov	r0, r5
   24dec:	f7ff ff51 	bl	24c92 <client_disconnect>
	MQTT_STATE_INIT(client);
   24df0:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   24df2:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   24df6:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   24dfa:	e7ef      	b.n	24ddc <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   24dfc:	f06f 040b 	mvn.w	r4, #11
   24e00:	e7f6      	b.n	24df0 <mqtt_connect+0x70>
	NULL_PARAM_CHECK(client);
   24e02:	f06f 0415 	mvn.w	r4, #21
   24e06:	e7ec      	b.n	24de2 <mqtt_connect+0x62>

00024e08 <mqtt_publish>:
{
   24e08:	b570      	push	{r4, r5, r6, lr}
   24e0a:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   24e0c:	4605      	mov	r5, r0
{
   24e0e:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   24e10:	2800      	cmp	r0, #0
   24e12:	d03b      	beq.n	24e8c <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   24e14:	2900      	cmp	r1, #0
   24e16:	d039      	beq.n	24e8c <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   24e18:	f7ff ff22 	bl	24c60 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   24e1c:	4628      	mov	r0, r5
   24e1e:	a901      	add	r1, sp, #4
   24e20:	f7ff ff10 	bl	24c44 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   24e24:	69ab      	ldr	r3, [r5, #24]
   24e26:	075b      	lsls	r3, r3, #29
   24e28:	d52d      	bpl.n	24e86 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   24e2a:	4630      	mov	r0, r6
   24e2c:	a901      	add	r1, sp, #4
   24e2e:	f7ff fcec 	bl	2480a <publish_encode>
	if (err_code < 0) {
   24e32:	1e04      	subs	r4, r0, #0
   24e34:	db1c      	blt.n	24e70 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   24e36:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   24e38:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   24e3a:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   24e3c:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   24e3e:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   24e40:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   24e42:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   24e44:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   24e46:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   24e48:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   24e4a:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   24e4e:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   24e50:	f001 fde6 	bl	26a20 <memset>
	msg.msg_iov = io_vector;
   24e54:	ab03      	add	r3, sp, #12
   24e56:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   24e58:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   24e5a:	4628      	mov	r0, r5
   24e5c:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   24e5e:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   24e60:	f7ef ff9a 	bl	14d98 <mqtt_transport_write_msg>
	if (err_code < 0) {
   24e64:	1e04      	subs	r4, r0, #0
   24e66:	da09      	bge.n	24e7c <mqtt_publish+0x74>
		client_disconnect(client, err_code);
   24e68:	4621      	mov	r1, r4
   24e6a:	4628      	mov	r0, r5
   24e6c:	f7ff ff11 	bl	24c92 <client_disconnect>
   24e70:	4628      	mov	r0, r5
   24e72:	f7ef ffb7 	bl	14de4 <sys_mutex_unlock>
}
   24e76:	4620      	mov	r0, r4
   24e78:	b00e      	add	sp, #56	; 0x38
   24e7a:	bd70      	pop	{r4, r5, r6, pc}
   24e7c:	f7ff fed4 	bl	24c28 <k_uptime_get>
	return 0;
   24e80:	2400      	movs	r4, #0
   24e82:	6168      	str	r0, [r5, #20]
   24e84:	e7f4      	b.n	24e70 <mqtt_publish+0x68>
		return -ENOTCONN;
   24e86:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   24e8a:	e7f1      	b.n	24e70 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   24e8c:	f06f 0415 	mvn.w	r4, #21
   24e90:	e7f1      	b.n	24e76 <mqtt_publish+0x6e>

00024e92 <mqtt_publish_qos2_release>:
{
   24e92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24e94:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   24e96:	4605      	mov	r5, r0
   24e98:	b1f8      	cbz	r0, 24eda <mqtt_publish_qos2_release+0x48>
	NULL_PARAM_CHECK(param);
   24e9a:	b1f1      	cbz	r1, 24eda <mqtt_publish_qos2_release+0x48>
	mqtt_mutex_lock(client);
   24e9c:	f7ff fee0 	bl	24c60 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   24ea0:	4669      	mov	r1, sp
   24ea2:	4628      	mov	r0, r5
   24ea4:	f7ff fece 	bl	24c44 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   24ea8:	69ab      	ldr	r3, [r5, #24]
   24eaa:	075b      	lsls	r3, r3, #29
   24eac:	d512      	bpl.n	24ed4 <mqtt_publish_qos2_release+0x42>
	err_code = publish_release_encode(param, &packet);
   24eae:	4620      	mov	r0, r4
   24eb0:	4669      	mov	r1, sp
   24eb2:	f7ff fceb 	bl	2488c <publish_release_encode>
	if (err_code < 0) {
   24eb6:	1e04      	subs	r4, r0, #0
   24eb8:	db06      	blt.n	24ec8 <mqtt_publish_qos2_release+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   24eba:	e9dd 1200 	ldrd	r1, r2, [sp]
   24ebe:	4628      	mov	r0, r5
   24ec0:	1a52      	subs	r2, r2, r1
   24ec2:	f7ff ff05 	bl	24cd0 <client_write>
   24ec6:	4604      	mov	r4, r0
   24ec8:	4628      	mov	r0, r5
   24eca:	f7ef ff8b 	bl	14de4 <sys_mutex_unlock>
}
   24ece:	4620      	mov	r0, r4
   24ed0:	b003      	add	sp, #12
   24ed2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   24ed4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   24ed8:	e7f6      	b.n	24ec8 <mqtt_publish_qos2_release+0x36>
	NULL_PARAM_CHECK(client);
   24eda:	f06f 0415 	mvn.w	r4, #21
   24ede:	e7f6      	b.n	24ece <mqtt_publish_qos2_release+0x3c>

00024ee0 <mqtt_publish_qos2_complete>:
{
   24ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24ee2:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   24ee4:	4605      	mov	r5, r0
   24ee6:	b1f8      	cbz	r0, 24f28 <mqtt_publish_qos2_complete+0x48>
	NULL_PARAM_CHECK(param);
   24ee8:	b1f1      	cbz	r1, 24f28 <mqtt_publish_qos2_complete+0x48>
	mqtt_mutex_lock(client);
   24eea:	f7ff feb9 	bl	24c60 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   24eee:	4669      	mov	r1, sp
   24ef0:	4628      	mov	r0, r5
   24ef2:	f7ff fea7 	bl	24c44 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   24ef6:	69ab      	ldr	r3, [r5, #24]
   24ef8:	075b      	lsls	r3, r3, #29
   24efa:	d512      	bpl.n	24f22 <mqtt_publish_qos2_complete+0x42>
	err_code = publish_complete_encode(param, &packet);
   24efc:	4620      	mov	r0, r4
   24efe:	4669      	mov	r1, sp
   24f00:	f7ff fcc9 	bl	24896 <publish_complete_encode>
	if (err_code < 0) {
   24f04:	1e04      	subs	r4, r0, #0
   24f06:	db06      	blt.n	24f16 <mqtt_publish_qos2_complete+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   24f08:	e9dd 1200 	ldrd	r1, r2, [sp]
   24f0c:	4628      	mov	r0, r5
   24f0e:	1a52      	subs	r2, r2, r1
   24f10:	f7ff fede 	bl	24cd0 <client_write>
   24f14:	4604      	mov	r4, r0
   24f16:	4628      	mov	r0, r5
   24f18:	f7ef ff64 	bl	14de4 <sys_mutex_unlock>
}
   24f1c:	4620      	mov	r0, r4
   24f1e:	b003      	add	sp, #12
   24f20:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   24f22:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   24f26:	e7f6      	b.n	24f16 <mqtt_publish_qos2_complete+0x36>
	NULL_PARAM_CHECK(client);
   24f28:	f06f 0415 	mvn.w	r4, #21
   24f2c:	e7f6      	b.n	24f1c <mqtt_publish_qos2_complete+0x3c>

00024f2e <mqtt_disconnect>:
{
   24f2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   24f30:	4605      	mov	r5, r0
   24f32:	b310      	cbz	r0, 24f7a <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   24f34:	f7ff fe94 	bl	24c60 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   24f38:	4669      	mov	r1, sp
   24f3a:	4628      	mov	r0, r5
   24f3c:	f7ff fe82 	bl	24c44 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   24f40:	69ab      	ldr	r3, [r5, #24]
   24f42:	075b      	lsls	r3, r3, #29
   24f44:	d516      	bpl.n	24f74 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   24f46:	4668      	mov	r0, sp
   24f48:	f7ef feec 	bl	14d24 <disconnect_encode>
	if (err_code < 0) {
   24f4c:	1e04      	subs	r4, r0, #0
   24f4e:	db0b      	blt.n	24f68 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   24f50:	e9dd 1200 	ldrd	r1, r2, [sp]
   24f54:	4628      	mov	r0, r5
   24f56:	1a52      	subs	r2, r2, r1
   24f58:	f7ff feba 	bl	24cd0 <client_write>
	if (err_code < 0) {
   24f5c:	1e04      	subs	r4, r0, #0
   24f5e:	db03      	blt.n	24f68 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0);
   24f60:	2100      	movs	r1, #0
   24f62:	4628      	mov	r0, r5
   24f64:	f7ff fe95 	bl	24c92 <client_disconnect>
   24f68:	4628      	mov	r0, r5
   24f6a:	f7ef ff3b 	bl	14de4 <sys_mutex_unlock>
}
   24f6e:	4620      	mov	r0, r4
   24f70:	b003      	add	sp, #12
   24f72:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   24f74:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   24f78:	e7f6      	b.n	24f68 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   24f7a:	f06f 0415 	mvn.w	r4, #21
   24f7e:	e7f6      	b.n	24f6e <mqtt_disconnect+0x40>

00024f80 <mqtt_subscribe>:
{
   24f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24f82:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   24f84:	4605      	mov	r5, r0
   24f86:	b1f8      	cbz	r0, 24fc8 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   24f88:	b1f1      	cbz	r1, 24fc8 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   24f8a:	f7ff fe69 	bl	24c60 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   24f8e:	4669      	mov	r1, sp
   24f90:	4628      	mov	r0, r5
   24f92:	f7ff fe57 	bl	24c44 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   24f96:	69ab      	ldr	r3, [r5, #24]
   24f98:	075b      	lsls	r3, r3, #29
   24f9a:	d512      	bpl.n	24fc2 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   24f9c:	4620      	mov	r0, r4
   24f9e:	4669      	mov	r1, sp
   24fa0:	f7ff fc7e 	bl	248a0 <subscribe_encode>
	if (err_code < 0) {
   24fa4:	1e04      	subs	r4, r0, #0
   24fa6:	db06      	blt.n	24fb6 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   24fa8:	e9dd 1200 	ldrd	r1, r2, [sp]
   24fac:	4628      	mov	r0, r5
   24fae:	1a52      	subs	r2, r2, r1
   24fb0:	f7ff fe8e 	bl	24cd0 <client_write>
   24fb4:	4604      	mov	r4, r0
   24fb6:	4628      	mov	r0, r5
   24fb8:	f7ef ff14 	bl	14de4 <sys_mutex_unlock>
}
   24fbc:	4620      	mov	r0, r4
   24fbe:	b003      	add	sp, #12
   24fc0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   24fc2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   24fc6:	e7f6      	b.n	24fb6 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   24fc8:	f06f 0415 	mvn.w	r4, #21
   24fcc:	e7f6      	b.n	24fbc <mqtt_subscribe+0x3c>

00024fce <mqtt_unsubscribe>:
{
   24fce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24fd0:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   24fd2:	4605      	mov	r5, r0
   24fd4:	b1f8      	cbz	r0, 25016 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   24fd6:	b1f1      	cbz	r1, 25016 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   24fd8:	f7ff fe42 	bl	24c60 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   24fdc:	4669      	mov	r1, sp
   24fde:	4628      	mov	r0, r5
   24fe0:	f7ff fe30 	bl	24c44 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   24fe4:	69ab      	ldr	r3, [r5, #24]
   24fe6:	075b      	lsls	r3, r3, #29
   24fe8:	d512      	bpl.n	25010 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   24fea:	4620      	mov	r0, r4
   24fec:	4669      	mov	r1, sp
   24fee:	f7ff fc8e 	bl	2490e <unsubscribe_encode>
	if (err_code < 0) {
   24ff2:	1e04      	subs	r4, r0, #0
   24ff4:	db06      	blt.n	25004 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   24ff6:	e9dd 1200 	ldrd	r1, r2, [sp]
   24ffa:	4628      	mov	r0, r5
   24ffc:	1a52      	subs	r2, r2, r1
   24ffe:	f7ff fe67 	bl	24cd0 <client_write>
   25002:	4604      	mov	r4, r0
   25004:	4628      	mov	r0, r5
   25006:	f7ef feed 	bl	14de4 <sys_mutex_unlock>
}
   2500a:	4620      	mov	r0, r4
   2500c:	b003      	add	sp, #12
   2500e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   25010:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   25014:	e7f6      	b.n	25004 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   25016:	f06f 0415 	mvn.w	r4, #21
   2501a:	e7f6      	b.n	2500a <mqtt_unsubscribe+0x3c>

0002501c <mqtt_ping>:
{
   2501c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2501e:	4605      	mov	r5, r0
   25020:	b320      	cbz	r0, 2506c <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   25022:	f7ff fe1d 	bl	24c60 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   25026:	4669      	mov	r1, sp
   25028:	4628      	mov	r0, r5
   2502a:	f7ff fe0b 	bl	24c44 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2502e:	69ab      	ldr	r3, [r5, #24]
   25030:	075b      	lsls	r3, r3, #29
   25032:	d518      	bpl.n	25066 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   25034:	4668      	mov	r0, sp
   25036:	f7ef fe87 	bl	14d48 <ping_request_encode>
	if (err_code < 0) {
   2503a:	1e04      	subs	r4, r0, #0
   2503c:	db0d      	blt.n	2505a <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2503e:	e9dd 1200 	ldrd	r1, r2, [sp]
   25042:	4628      	mov	r0, r5
   25044:	1a52      	subs	r2, r2, r1
   25046:	f7ff fe43 	bl	24cd0 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   2504a:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2504e:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   25050:	2b7f      	cmp	r3, #127	; 0x7f
   25052:	d002      	beq.n	2505a <mqtt_ping+0x3e>
		client->unacked_ping++;
   25054:	3301      	adds	r3, #1
   25056:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
   2505a:	4628      	mov	r0, r5
   2505c:	f7ef fec2 	bl	14de4 <sys_mutex_unlock>
}
   25060:	4620      	mov	r0, r4
   25062:	b003      	add	sp, #12
   25064:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   25066:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2506a:	e7f6      	b.n	2505a <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   2506c:	f06f 0415 	mvn.w	r4, #21
   25070:	e7f6      	b.n	25060 <mqtt_ping+0x44>

00025072 <mqtt_abort>:
{
   25072:	b510      	push	{r4, lr}
   25074:	4604      	mov	r4, r0
	mqtt_mutex_lock(client);
   25076:	f7ff fdf3 	bl	24c60 <mqtt_mutex_lock>
	NULL_PARAM_CHECK(client);
   2507a:	b15c      	cbz	r4, 25094 <mqtt_abort+0x22>
	if (client->internal.state != MQTT_STATE_IDLE) {
   2507c:	69a3      	ldr	r3, [r4, #24]
   2507e:	b123      	cbz	r3, 2508a <mqtt_abort+0x18>
		client_disconnect(client, -ECONNABORTED);
   25080:	f06f 0170 	mvn.w	r1, #112	; 0x70
   25084:	4620      	mov	r0, r4
   25086:	f7ff fe04 	bl	24c92 <client_disconnect>
   2508a:	4620      	mov	r0, r4
   2508c:	f7ef feaa 	bl	14de4 <sys_mutex_unlock>
	return 0;
   25090:	2000      	movs	r0, #0
}
   25092:	bd10      	pop	{r4, pc}
	NULL_PARAM_CHECK(client);
   25094:	f06f 0015 	mvn.w	r0, #21
   25098:	e7fb      	b.n	25092 <mqtt_abort+0x20>

0002509a <mqtt_live>:
{
   2509a:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   2509c:	4606      	mov	r6, r0
   2509e:	b300      	cbz	r0, 250e2 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   250a0:	f7ff fdde 	bl	24c60 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   250a4:	6974      	ldr	r4, [r6, #20]
   250a6:	f7ff fdbf 	bl	24c28 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   250aa:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   250ac:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   250b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   250b4:	b19c      	cbz	r4, 250de <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   250b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   250ba:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   250bc:	4284      	cmp	r4, r0
   250be:	d80d      	bhi.n	250dc <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   250c0:	4630      	mov	r0, r6
   250c2:	f7ff ffab 	bl	2501c <mqtt_ping>
		ping_sent = true;
   250c6:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   250c8:	4605      	mov	r5, r0
	int ret = sys_mutex_unlock(&client->internal.mutex);
   250ca:	4630      	mov	r0, r6
   250cc:	f7ef fe8a 	bl	14de4 <sys_mutex_unlock>
		return -EAGAIN;
   250d0:	2c00      	cmp	r4, #0
   250d2:	bf08      	it	eq
   250d4:	f06f 050a 	mvneq.w	r5, #10
}
   250d8:	4628      	mov	r0, r5
   250da:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   250dc:	2400      	movs	r4, #0
	int err_code = 0;
   250de:	4625      	mov	r5, r4
   250e0:	e7f3      	b.n	250ca <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   250e2:	f06f 0515 	mvn.w	r5, #21
   250e6:	e7f7      	b.n	250d8 <mqtt_live+0x3e>

000250e8 <mqtt_keepalive_time_left>:
{
   250e8:	b538      	push	{r3, r4, r5, lr}
   250ea:	4604      	mov	r4, r0
	u32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   250ec:	6945      	ldr	r5, [r0, #20]
   250ee:	f7ff fd9b 	bl	24c28 <k_uptime_get>
	u32_t keepalive_ms = 1000U * client->keepalive;
   250f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   250f6:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
	s32_t diff = k_uptime_get_32() - last_activity;
   250fa:	1b42      	subs	r2, r0, r5
   250fc:	434b      	muls	r3, r1
		return 0;
   250fe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   25102:	b119      	cbz	r1, 2510c <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   25104:	4293      	cmp	r3, r2
   25106:	d904      	bls.n	25112 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   25108:	1a98      	subs	r0, r3, r2
}
   2510a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   2510c:	f04f 30ff 	mov.w	r0, #4294967295
   25110:	e7fb      	b.n	2510a <mqtt_keepalive_time_left+0x22>
		return 0;
   25112:	2000      	movs	r0, #0
   25114:	e7f9      	b.n	2510a <mqtt_keepalive_time_left+0x22>

00025116 <mqtt_input>:
{
   25116:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   25118:	4605      	mov	r5, r0
   2511a:	b1d0      	cbz	r0, 25152 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   2511c:	f7ff fda0 	bl	24c60 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   25120:	69ab      	ldr	r3, [r5, #24]
   25122:	079b      	lsls	r3, r3, #30
   25124:	d50f      	bpl.n	25146 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   25126:	6a2b      	ldr	r3, [r5, #32]
   25128:	b983      	cbnz	r3, 2514c <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   2512a:	4628      	mov	r0, r5
   2512c:	f7ff fc3f 	bl	249ae <mqtt_handle_rx>
	if (err_code < 0) {
   25130:	1e04      	subs	r4, r0, #0
   25132:	da03      	bge.n	2513c <mqtt_input+0x26>
		client_disconnect(client, err_code);
   25134:	4621      	mov	r1, r4
   25136:	4628      	mov	r0, r5
   25138:	f7ff fdab 	bl	24c92 <client_disconnect>
	int ret = sys_mutex_unlock(&client->internal.mutex);
   2513c:	4628      	mov	r0, r5
   2513e:	f7ef fe51 	bl	14de4 <sys_mutex_unlock>
}
   25142:	4620      	mov	r0, r4
   25144:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   25146:	f06f 040c 	mvn.w	r4, #12
   2514a:	e7f7      	b.n	2513c <mqtt_input+0x26>
		return -EBUSY;
   2514c:	f06f 040f 	mvn.w	r4, #15
   25150:	e7f4      	b.n	2513c <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   25152:	f06f 0415 	mvn.w	r4, #21
   25156:	e7f4      	b.n	25142 <mqtt_input+0x2c>

00025158 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   25158:	2301      	movs	r3, #1
   2515a:	f7ff bdca 	b.w	24cf2 <read_publish_payload>

0002515e <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, u8_t *buffer,
				 size_t length)
{
   2515e:	b570      	push	{r4, r5, r6, lr}
   25160:	4606      	mov	r6, r0
   25162:	460c      	mov	r4, r1
	u8_t *end = buffer + length;
   25164:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   25166:	42ac      	cmp	r4, r5
   25168:	d301      	bcc.n	2516e <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   2516a:	2000      	movs	r0, #0
}
   2516c:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   2516e:	4621      	mov	r1, r4
   25170:	4630      	mov	r0, r6
   25172:	1b2a      	subs	r2, r5, r4
   25174:	f7ff fff0 	bl	25158 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   25178:	2800      	cmp	r0, #0
   2517a:	dbf7      	blt.n	2516c <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   2517c:	d001      	beq.n	25182 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   2517e:	4404      	add	r4, r0
   25180:	e7f1      	b.n	25166 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   25182:	f06f 0004 	mvn.w	r0, #4
   25186:	e7f1      	b.n	2516c <mqtt_readall_publish_payload+0xe>

00025188 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   25188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct sockaddr *broker = client->broker;
   2518a:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   2518c:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   2518e:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   25190:	f44f 7281 	mov.w	r2, #258	; 0x102
   25194:	2101      	movs	r1, #1
   25196:	f7ee f991 	bl	134bc <z_impl_zsock_socket>
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   2519a:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   2519c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   2519e:	da05      	bge.n	251ac <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   251a0:	f7ff f8e0 	bl	24364 <__errno>
   251a4:	6800      	ldr	r0, [r0, #0]
   251a6:	4240      	negs	r0, r0
}
   251a8:	b004      	add	sp, #16
   251aa:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   251ac:	2304      	movs	r3, #4
   251ae:	2205      	movs	r2, #5
   251b0:	9300      	str	r3, [sp, #0]
   251b2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   251b6:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   251ba:	f7fe ff07 	bl	23fcc <z_impl_zsock_setsockopt>
	if (ret < 0) {
   251be:	2800      	cmp	r0, #0
   251c0:	da03      	bge.n	251ca <mqtt_client_tls_connect+0x42>
	(void)close(client->transport.tls.sock);
   251c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   251c4:	f7fe fe45 	bl	23e52 <z_impl_zsock_close>
   251c8:	e7ea      	b.n	251a0 <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   251ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   251cc:	bb03      	cbnz	r3, 25210 <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   251ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   251d0:	bb63      	cbnz	r3, 2522c <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   251d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   251d4:	2b00      	cmp	r3, #0
   251d6:	d137      	bne.n	25248 <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   251d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   251da:	2b01      	cmp	r3, #1
   251dc:	d10b      	bne.n	251f6 <mqtt_client_tls_connect+0x6e>
   251de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   251e0:	2304      	movs	r3, #4
   251e2:	2207      	movs	r2, #7
   251e4:	9300      	str	r3, [sp, #0]
   251e6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   251ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
   251ee:	f7fe feed 	bl	23fcc <z_impl_zsock_setsockopt>
		if (ret < 0) {
   251f2:	2800      	cmp	r0, #0
   251f4:	dbe5      	blt.n	251c2 <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   251f6:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   251f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   251fa:	2b01      	cmp	r3, #1
   251fc:	bf0c      	ite	eq
   251fe:	2208      	moveq	r2, #8
   25200:	2218      	movne	r2, #24
	ret = connect(client->transport.tls.sock, client->broker,
   25202:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   25204:	f7fe fe4c 	bl	23ea0 <z_impl_zsock_connect>
	if (ret < 0) {
   25208:	2800      	cmp	r0, #0
   2520a:	dbda      	blt.n	251c2 <mqtt_client_tls_connect+0x3a>
	return 0;
   2520c:	2000      	movs	r0, #0
   2520e:	e7cb      	b.n	251a8 <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   25210:	6b22      	ldr	r2, [r4, #48]	; 0x30
   25212:	2a00      	cmp	r2, #0
   25214:	d0db      	beq.n	251ce <mqtt_client_tls_connect+0x46>
   25216:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   25218:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2521a:	9200      	str	r2, [sp, #0]
   2521c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   25220:	2203      	movs	r2, #3
   25222:	f7fe fed3 	bl	23fcc <z_impl_zsock_setsockopt>
		if (ret < 0) {
   25226:	2800      	cmp	r0, #0
   25228:	dad1      	bge.n	251ce <mqtt_client_tls_connect+0x46>
   2522a:	e7ca      	b.n	251c2 <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   2522c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2522e:	2a00      	cmp	r2, #0
   25230:	d0cf      	beq.n	251d2 <mqtt_client_tls_connect+0x4a>
   25232:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   25234:	0092      	lsls	r2, r2, #2
   25236:	9200      	str	r2, [sp, #0]
   25238:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2523c:	2201      	movs	r2, #1
   2523e:	f7fe fec5 	bl	23fcc <z_impl_zsock_setsockopt>
		if (ret < 0) {
   25242:	2800      	cmp	r0, #0
   25244:	dac5      	bge.n	251d2 <mqtt_client_tls_connect+0x4a>
   25246:	e7bc      	b.n	251c2 <mqtt_client_tls_connect+0x3a>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   25248:	4618      	mov	r0, r3
   2524a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2524c:	9303      	str	r3, [sp, #12]
   2524e:	f7e7 fe0f 	bl	ce70 <strlen>
   25252:	2202      	movs	r2, #2
   25254:	9000      	str	r0, [sp, #0]
   25256:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2525a:	4630      	mov	r0, r6
   2525c:	9b03      	ldr	r3, [sp, #12]
   2525e:	f7fe feb5 	bl	23fcc <z_impl_zsock_setsockopt>
		if (ret < 0) {
   25262:	2800      	cmp	r0, #0
   25264:	dab8      	bge.n	251d8 <mqtt_client_tls_connect+0x50>
   25266:	e7ac      	b.n	251c2 <mqtt_client_tls_connect+0x3a>

00025268 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   25268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0U;
   2526c:	2400      	movs	r4, #0
{
   2526e:	4606      	mov	r6, r0
   25270:	460f      	mov	r7, r1
   25272:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   25274:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   25276:	42ac      	cmp	r4, r5
   25278:	d301      	bcc.n	2527e <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   2527a:	2000      	movs	r0, #0
   2527c:	e00d      	b.n	2529a <mqtt_client_tls_write+0x32>
		ret = send(client->transport.tls.sock, data + offset,
   2527e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   25280:	2300      	movs	r3, #0
   25282:	e9cd 8800 	strd	r8, r8, [sp]
   25286:	1b2a      	subs	r2, r5, r4
   25288:	1939      	adds	r1, r7, r4
   2528a:	f7fe fe3d 	bl	23f08 <z_impl_zsock_sendto>
		if (ret < 0) {
   2528e:	1e03      	subs	r3, r0, #0
   25290:	da06      	bge.n	252a0 <mqtt_client_tls_write+0x38>
			return -errno;
   25292:	f7ff f867 	bl	24364 <__errno>
   25296:	6800      	ldr	r0, [r0, #0]
   25298:	4240      	negs	r0, r0
}
   2529a:	b002      	add	sp, #8
   2529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   252a0:	441c      	add	r4, r3
   252a2:	e7e8      	b.n	25276 <mqtt_client_tls_write+0xe>

000252a4 <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   252a4:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tls.sock, message, 0);
   252a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   252a8:	2200      	movs	r2, #0
   252aa:	f7fe fe46 	bl	23f3a <z_impl_zsock_sendmsg>
	if (ret < 0) {
   252ae:	2800      	cmp	r0, #0
   252b0:	da04      	bge.n	252bc <mqtt_client_tls_write_msg+0x18>
		return -errno;
   252b2:	f7ff f857 	bl	24364 <__errno>
   252b6:	6800      	ldr	r0, [r0, #0]
   252b8:	4240      	negs	r0, r0
	}

	return 0;
}
   252ba:	bd08      	pop	{r3, pc}
	return 0;
   252bc:	2000      	movs	r0, #0
   252be:	e7fc      	b.n	252ba <mqtt_client_tls_write_msg+0x16>

000252c0 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   252c0:	b513      	push	{r0, r1, r4, lr}
   252c2:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   252c4:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   252c6:	bf14      	ite	ne
   252c8:	4623      	movne	r3, r4
   252ca:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   252cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   252ce:	e9cd 4400 	strd	r4, r4, [sp]
   252d2:	f7fe fe44 	bl	23f5e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   252d6:	2800      	cmp	r0, #0
   252d8:	da03      	bge.n	252e2 <mqtt_client_tls_read+0x22>
		return -errno;
   252da:	f7ff f843 	bl	24364 <__errno>
   252de:	6800      	ldr	r0, [r0, #0]
   252e0:	4240      	negs	r0, r0
	}

	return ret;
}
   252e2:	b002      	add	sp, #8
   252e4:	bd10      	pop	{r4, pc}

000252e6 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   252e6:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   252e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   252ea:	f7fe fdb2 	bl	23e52 <z_impl_zsock_close>
	if (ret < 0) {
   252ee:	2800      	cmp	r0, #0
   252f0:	da04      	bge.n	252fc <mqtt_client_tls_disconnect+0x16>
		return -errno;
   252f2:	f7ff f837 	bl	24364 <__errno>
   252f6:	6800      	ldr	r0, [r0, #0]
   252f8:	4240      	negs	r0, r0
	}

	return 0;
}
   252fa:	bd08      	pop	{r3, pc}
	return 0;
   252fc:	2000      	movs	r0, #0
   252fe:	e7fc      	b.n	252fa <mqtt_client_tls_disconnect+0x14>

00025300 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25300:	6843      	ldr	r3, [r0, #4]
}
   25302:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25304:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   25306:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   25308:	600b      	str	r3, [r1, #0]
}
   2530a:	4770      	bx	lr

0002530c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2530c:	6843      	ldr	r3, [r0, #4]
   2530e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   25310:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   25312:	4042      	eors	r2, r0
   25314:	400a      	ands	r2, r1
   25316:	4042      	eors	r2, r0
    p_reg->OUT = value;
   25318:	605a      	str	r2, [r3, #4]
}
   2531a:	2000      	movs	r0, #0
   2531c:	4770      	bx	lr

0002531e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2531e:	6843      	ldr	r3, [r0, #4]
}
   25320:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25322:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   25324:	6099      	str	r1, [r3, #8]
}
   25326:	4770      	bx	lr

00025328 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25328:	6843      	ldr	r3, [r0, #4]
}
   2532a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2532c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2532e:	60d9      	str	r1, [r3, #12]
}
   25330:	4770      	bx	lr

00025332 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25332:	6843      	ldr	r3, [r0, #4]
}
   25334:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25336:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   25338:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   2533a:	4059      	eors	r1, r3
    p_reg->OUT = value;
   2533c:	6051      	str	r1, [r2, #4]
}
   2533e:	4770      	bx	lr

00025340 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25340:	68c3      	ldr	r3, [r0, #12]
{
   25342:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   25344:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   25346:	b158      	cbz	r0, 25360 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25348:	2400      	movs	r4, #0
   2534a:	4281      	cmp	r1, r0
   2534c:	d113      	bne.n	25376 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2534e:	6808      	ldr	r0, [r1, #0]
   25350:	b95c      	cbnz	r4, 2536a <gpio_nrfx_manage_callback+0x2a>
   25352:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   25354:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   25356:	42a1      	cmp	r1, r4
   25358:	d100      	bne.n	2535c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2535a:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2535c:	2000      	movs	r0, #0
   2535e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   25360:	b972      	cbnz	r2, 25380 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   25362:	2000      	movs	r0, #0
}
   25364:	bd30      	pop	{r4, r5, pc}
   25366:	4628      	mov	r0, r5
   25368:	e7ef      	b.n	2534a <gpio_nrfx_manage_callback+0xa>
   2536a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2536c:	6898      	ldr	r0, [r3, #8]
   2536e:	4281      	cmp	r1, r0
	list->tail = node;
   25370:	bf08      	it	eq
   25372:	609c      	streq	r4, [r3, #8]
}
   25374:	e7f2      	b.n	2535c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25376:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25378:	4604      	mov	r4, r0
   2537a:	2d00      	cmp	r5, #0
   2537c:	d1f3      	bne.n	25366 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2537e:	b13a      	cbz	r2, 25390 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   25380:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25382:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   25384:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   25386:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25388:	2800      	cmp	r0, #0
   2538a:	d1ea      	bne.n	25362 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2538c:	6099      	str	r1, [r3, #8]
}
   2538e:	e7e9      	b.n	25364 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   25390:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25394:	e7e6      	b.n	25364 <gpio_nrfx_manage_callback+0x24>

00025396 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   25396:	2201      	movs	r2, #1
{
   25398:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   2539a:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   2539c:	408a      	lsls	r2, r1
   2539e:	6923      	ldr	r3, [r4, #16]
   253a0:	ea23 0302 	bic.w	r3, r3, r2
   253a4:	6123      	str	r3, [r4, #16]
}
   253a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   253aa:	f7ef bdbd 	b.w	14f28 <gpiote_pin_int_cfg>

000253ae <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   253ae:	2201      	movs	r2, #1
{
   253b0:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   253b2:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   253b4:	408a      	lsls	r2, r1
   253b6:	6923      	ldr	r3, [r4, #16]
   253b8:	4313      	orrs	r3, r2
   253ba:	6123      	str	r3, [r4, #16]
}
   253bc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   253c0:	f7ef bdb2 	b.w	14f28 <gpiote_pin_int_cfg>

000253c4 <uarte_nrfx_config_get>:
{
   253c4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   253c6:	68c2      	ldr	r2, [r0, #12]
   253c8:	e892 0003 	ldmia.w	r2, {r0, r1}
   253cc:	e883 0003 	stmia.w	r3, {r0, r1}
}
   253d0:	2000      	movs	r0, #0
   253d2:	4770      	bx	lr

000253d4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   253d4:	6843      	ldr	r3, [r0, #4]
   253d6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   253d8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   253dc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   253e0:	4770      	bx	lr

000253e2 <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   253e2:	4770      	bx	lr

000253e4 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   253e4:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_next_buf == NULL) {
   253e6:	68c0      	ldr	r0, [r0, #12]
{
   253e8:	b510      	push	{r4, lr}
	if (data->async->rx_next_buf == NULL) {
   253ea:	6884      	ldr	r4, [r0, #8]
	return config->uarte_regs;
   253ec:	681b      	ldr	r3, [r3, #0]
	if (data->async->rx_next_buf == NULL) {
   253ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   253f0:	b960      	cbnz	r0, 2540c <uarte_nrfx_rx_buf_rsp+0x28>
		data->async->rx_next_buf_len = len;
   253f2:	e9c4 1213 	strd	r1, r2, [r4, #76]	; 0x4c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   253f6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   253fa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   253fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   25402:	f042 0220 	orr.w	r2, r2, #32
   25406:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   2540a:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2540c:	f06f 000f 	mvn.w	r0, #15
   25410:	e7fb      	b.n	2540a <uarte_nrfx_rx_buf_rsp+0x26>

00025412 <uarte_nrfx_callback_set>:
	data->async->user_callback = callback;
   25412:	68c3      	ldr	r3, [r0, #12]
}
   25414:	2000      	movs	r0, #0
	data->async->user_callback = callback;
   25416:	689b      	ldr	r3, [r3, #8]
	data->async->user_data = user_data;
   25418:	e9c3 1200 	strd	r1, r2, [r3]
}
   2541c:	4770      	bx	lr

0002541e <user_callback>:
{
   2541e:	4603      	mov	r3, r0
	if (data->async->user_callback) {
   25420:	68db      	ldr	r3, [r3, #12]
{
   25422:	4608      	mov	r0, r1
	if (data->async->user_callback) {
   25424:	689a      	ldr	r2, [r3, #8]
   25426:	6813      	ldr	r3, [r2, #0]
   25428:	b10b      	cbz	r3, 2542e <user_callback+0x10>
		data->async->user_callback(evt, data->async->user_data);
   2542a:	6851      	ldr	r1, [r2, #4]
   2542c:	4718      	bx	r3
}
   2542e:	4770      	bx	lr

00025430 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   25430:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   25432:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   25434:	6890      	ldr	r0, [r2, #8]
{
   25436:	b510      	push	{r4, lr}
	return config->uarte_regs;
   25438:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2543a:	b948      	cbnz	r0, 25450 <uarte_nrfx_poll_in+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2543c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   25440:	b14c      	cbz	r4, 25456 <uarte_nrfx_poll_in+0x26>
	*c = data->rx_data;
   25442:	7d12      	ldrb	r2, [r2, #20]
   25444:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25446:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25448:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2544c:	601a      	str	r2, [r3, #0]
}
   2544e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   25450:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25454:	e7fb      	b.n	2544e <uarte_nrfx_poll_in+0x1e>
		return -1;
   25456:	f04f 30ff 	mov.w	r0, #4294967295
   2545a:	e7f8      	b.n	2544e <uarte_nrfx_poll_in+0x1e>

0002545c <uarte_nrfx_pm_control>:
{
   2545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   25460:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   25464:	2901      	cmp	r1, #1
{
   25466:	461f      	mov	r7, r3
   25468:	4604      	mov	r4, r0
   2546a:	4616      	mov	r6, r2
   2546c:	f8d8 3010 	ldr.w	r3, [r8, #16]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
   25470:	d14f      	bne.n	25512 <uarte_nrfx_pm_control+0xb6>
		u32_t new_state = *((const u32_t *)context);
   25472:	f8d2 9000 	ldr.w	r9, [r2]
		if (new_state != data->pm_state) {
   25476:	4599      	cmp	r9, r3
   25478:	d01d      	beq.n	254b6 <uarte_nrfx_pm_control+0x5a>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2547a:	6842      	ldr	r2, [r0, #4]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
   2547c:	f1b9 0f01 	cmp.w	r9, #1
	return config->uarte_regs;
   25480:	6815      	ldr	r5, [r2, #0]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
   25482:	d121      	bne.n	254c8 <uarte_nrfx_pm_control+0x6c>
		uarte_nrfx_pins_enable(dev, true);
   25484:	f7ef ff94 	bl	153b0 <uarte_nrfx_pins_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   25488:	2308      	movs	r3, #8
   2548a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   2548e:	68e3      	ldr	r3, [r4, #12]
		return data->async->hw_rx_counting;
   25490:	689b      	ldr	r3, [r3, #8]
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   25492:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   25496:	b11b      	cbz	r3, 254a0 <uarte_nrfx_pm_control+0x44>
			nrfx_timer_enable(&get_dev_config(dev)->timer);
   25498:	6860      	ldr	r0, [r4, #4]
   2549a:	3008      	adds	r0, #8
   2549c:	f7fa fef2 	bl	20284 <nrfx_timer_enable>
		if (get_dev_data(dev)->async) {
   254a0:	68e3      	ldr	r3, [r4, #12]
   254a2:	689b      	ldr	r3, [r3, #8]
   254a4:	b92b      	cbnz	r3, 254b2 <uarte_nrfx_pm_control+0x56>
    return p_reg->PSEL.RXD;
   254a6:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
		if (nrf_uarte_rx_pin_get(uarte) !=
   254aa:	3301      	adds	r3, #1
   254ac:	d001      	beq.n	254b2 <uarte_nrfx_pm_control+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   254ae:	2301      	movs	r3, #1
   254b0:	602b      	str	r3, [r5, #0]
			data->pm_state = new_state;
   254b2:	f8c8 9010 	str.w	r9, [r8, #16]
	if (cb) {
   254b6:	b127      	cbz	r7, 254c2 <uarte_nrfx_pm_control+0x66>
		cb(dev, 0, context, arg);
   254b8:	4632      	mov	r2, r6
   254ba:	2100      	movs	r1, #0
   254bc:	4620      	mov	r0, r4
   254be:	9b08      	ldr	r3, [sp, #32]
   254c0:	47b8      	blx	r7
}
   254c2:	2000      	movs	r0, #0
   254c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
   254c8:	2b01      	cmp	r3, #1
   254ca:	d1f2      	bne.n	254b2 <uarte_nrfx_pm_control+0x56>
		return data->async->hw_rx_counting;
   254cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
		if (hw_rx_counting_enabled(get_dev_data(dev))) {
   254d0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   254d4:	b11b      	cbz	r3, 254de <uarte_nrfx_pm_control+0x82>
			nrfx_timer_disable(&get_dev_config(dev)->timer);
   254d6:	f102 0008 	add.w	r0, r2, #8
   254da:	f7fa fee1 	bl	202a0 <nrfx_timer_disable>
		if (get_dev_data(dev)->async) {
   254de:	68e3      	ldr	r3, [r4, #12]
   254e0:	689b      	ldr	r3, [r3, #8]
   254e2:	b133      	cbz	r3, 254f2 <uarte_nrfx_pm_control+0x96>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   254e4:	2100      	movs	r1, #0
		uarte_nrfx_pins_enable(dev, false);
   254e6:	4620      	mov	r0, r4
   254e8:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
   254ec:	f7ef ff60 	bl	153b0 <uarte_nrfx_pins_enable>
   254f0:	e7df      	b.n	254b2 <uarte_nrfx_pm_control+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   254f2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   254f6:	2b00      	cmp	r3, #0
   254f8:	d0f4      	beq.n	254e4 <uarte_nrfx_pm_control+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   254fa:	2301      	movs	r3, #1
   254fc:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   254fe:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
			while (!nrf_uarte_event_check(uarte,
   25502:	2b00      	cmp	r3, #0
   25504:	d0fb      	beq.n	254fe <uarte_nrfx_pm_control+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25506:	2300      	movs	r3, #0
   25508:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   2550c:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
}
   25510:	e7e8      	b.n	254e4 <uarte_nrfx_pm_control+0x88>
		*((u32_t *)context) = data->pm_state;
   25512:	6013      	str	r3, [r2, #0]
   25514:	e7cf      	b.n	254b6 <uarte_nrfx_pm_control+0x5a>

00025516 <uarte_nrfx_rx_enable>:
{
   25516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2551a:	68c4      	ldr	r4, [r0, #12]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   2551c:	6840      	ldr	r0, [r0, #4]
{
   2551e:	461d      	mov	r5, r3
	return config->uarte_regs;
   25520:	6806      	ldr	r6, [r0, #0]
{
   25522:	4688      	mov	r8, r1
    return p_reg->PSEL.RXD;
   25524:	f8d6 3514 	ldr.w	r3, [r6, #1300]	; 0x514
   25528:	4617      	mov	r7, r2
	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   2552a:	3301      	adds	r3, #1
   2552c:	d02b      	beq.n	25586 <uarte_nrfx_rx_enable+0x70>
	if (hw_rx_counting_enabled(data)) {
   2552e:	68a3      	ldr	r3, [r4, #8]
   25530:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   25534:	b322      	cbz	r2, 25580 <uarte_nrfx_rx_enable+0x6a>
		nrfx_timer_clear(&cfg->timer);
   25536:	3008      	adds	r0, #8
   25538:	f000 fddf 	bl	260fa <nrfx_timer_clear>
	data->async->rx_total_byte_cnt = 0;
   2553c:	2300      	movs	r3, #0
   2553e:	68a4      	ldr	r4, [r4, #8]
		MAX(timeout / RX_TIMEOUT_DIV,
   25540:	2d09      	cmp	r5, #9
	data->async->rx_total_user_byte_cnt = 0;
   25542:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		MAX(timeout / RX_TIMEOUT_DIV,
   25546:	bfc8      	it	gt
   25548:	2305      	movgt	r3, #5
	data->async->rx_timeout = timeout;
   2554a:	65e5      	str	r5, [r4, #92]	; 0x5c
	data->async->rx_offset = 0;
   2554c:	f04f 0000 	mov.w	r0, #0
		MAX(timeout / RX_TIMEOUT_DIV,
   25550:	bfcc      	ite	gt
   25552:	fb95 f5f3 	sdivgt	r5, r5, r3
   25556:	2501      	movle	r5, #1
	data->async->rx_enabled = true;
   25558:	2301      	movs	r3, #1
	data->async->rx_buf_len = len;
   2555a:	e9c4 8710 	strd	r8, r7, [r4, #64]	; 0x40
	data->async->rx_next_buf = NULL;
   2555e:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	data->async->rx_timeout_slab =
   25562:	6625      	str	r5, [r4, #96]	; 0x60
	data->async->rx_next_buf_len = 0;
   25564:	6520      	str	r0, [r4, #80]	; 0x50
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   25566:	f8c6 8534 	str.w	r8, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2556a:	f8c6 7538 	str.w	r7, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2556e:	f8c6 0110 	str.w	r0, [r6, #272]	; 0x110
   25572:	f8c6 014c 	str.w	r0, [r6, #332]	; 0x14c
	data->async->rx_enabled = true;
   25576:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2557a:	6033      	str	r3, [r6, #0]
}
   2557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->async->rx_cnt.cnt = 0;
   25580:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   25584:	e7da      	b.n	2553c <uarte_nrfx_rx_enable+0x26>
		return -ENOTSUP;
   25586:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2558a:	e7f7      	b.n	2557c <uarte_nrfx_rx_enable+0x66>

0002558c <rx_timeout>:
{
   2558c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25590:	b086      	sub	sp, #24
	return z_impl_k_timer_user_data_get(timer);
   25592:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   25594:	f8d6 800c 	ldr.w	r8, [r6, #12]
	if (data->async->is_in_irq) {
   25598:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2559c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   255a0:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   255a4:	bb72      	cbnz	r2, 25604 <rx_timeout+0x78>
    p_reg->INTENCLR = mask;
   255a6:	2110      	movs	r1, #16
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   255a8:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
   255aa:	6802      	ldr	r2, [r0, #0]
   255ac:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
   255b0:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   255b4:	b1e2      	cbz	r2, 255f0 <rx_timeout+0x64>
		read = nrfx_timer_capture(&cfg->timer, 0);
   255b6:	4639      	mov	r1, r7
   255b8:	3008      	adds	r0, #8
   255ba:	f000 fda2 	bl	26102 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   255be:	f8d8 4008 	ldr.w	r4, [r8, #8]
   255c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   255c4:	4283      	cmp	r3, r0
		data->async->rx_timeout_left = data->async->rx_timeout;
   255c6:	bf1c      	itt	ne
   255c8:	6de3      	ldrne	r3, [r4, #92]	; 0x5c
		data->async->rx_total_byte_cnt = read;
   255ca:	6560      	strne	r0, [r4, #84]	; 0x54
		    - data->async->rx_total_user_byte_cnt;
   255cc:	e9d4 5a15 	ldrd	r5, sl, [r4, #84]	; 0x54
   255d0:	eba5 050a 	sub.w	r5, r5, sl
		data->async->rx_timeout_left = data->async->rx_timeout;
   255d4:	bf18      	it	ne
   255d6:	6663      	strne	r3, [r4, #100]	; 0x64
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   255d8:	e9d4 3911 	ldrd	r3, r9, [r4, #68]	; 0x44
   255dc:	eb05 0209 	add.w	r2, r5, r9
   255e0:	429a      	cmp	r2, r3
   255e2:	d912      	bls.n	2560a <rx_timeout+0x7e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   255e4:	eba3 0509 	sub.w	r5, r3, r9
	if (len > 0) {
   255e8:	2d00      	cmp	r5, #0
   255ea:	dd06      	ble.n	255fa <rx_timeout+0x6e>
		clipped = true;
   255ec:	2701      	movs	r7, #1
   255ee:	e012      	b.n	25616 <rx_timeout+0x8a>
		read = data->async->rx_cnt.cnt;
   255f0:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
   255f4:	e7e3      	b.n	255be <rx_timeout+0x32>
			data->async->rx_timeout_left -=
   255f6:	1a9b      	subs	r3, r3, r2
   255f8:	6663      	str	r3, [r4, #100]	; 0x64
    p_reg->INTENSET = mask;
   255fa:	2210      	movs	r2, #16
	return config->uarte_regs;
   255fc:	6873      	ldr	r3, [r6, #4]
   255fe:	681b      	ldr	r3, [r3, #0]
   25600:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   25604:	b006      	add	sp, #24
   25606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len > 0) {
   2560a:	2d00      	cmp	r5, #0
   2560c:	ddf5      	ble.n	255fa <rx_timeout+0x6e>
				< data->async->rx_timeout_slab)) {
   2560e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
		if (clipped ||
   25612:	4293      	cmp	r3, r2
   25614:	daef      	bge.n	255f6 <rx_timeout+0x6a>
			struct uart_event evt = {
   25616:	2100      	movs	r1, #0
   25618:	2214      	movs	r2, #20
   2561a:	a801      	add	r0, sp, #4
   2561c:	f001 fa00 	bl	26a20 <memset>
   25620:	2302      	movs	r3, #2
   25622:	f88d 3004 	strb.w	r3, [sp, #4]
   25626:	6c23      	ldr	r3, [r4, #64]	; 0x40
   25628:	9504      	str	r5, [sp, #16]
   2562a:	e9cd 3902 	strd	r3, r9, [sp, #8]
			data->async->rx_offset += len;
   2562e:	eb09 0305 	add.w	r3, r9, r5
			data->async->rx_total_user_byte_cnt += len;
   25632:	4455      	add	r5, sl
			user_callback(dev, &evt);
   25634:	4630      	mov	r0, r6
			data->async->rx_offset += len;
   25636:	64a3      	str	r3, [r4, #72]	; 0x48
			data->async->rx_total_user_byte_cnt += len;
   25638:	65a5      	str	r5, [r4, #88]	; 0x58
			user_callback(dev, &evt);
   2563a:	a901      	add	r1, sp, #4
   2563c:	f7ff feef 	bl	2541e <user_callback>
		if (clipped) {
   25640:	2f00      	cmp	r7, #0
   25642:	d0da      	beq.n	255fa <rx_timeout+0x6e>
			k_timer_stop(&data->async->rx_timeout_timer);
   25644:	f8d8 0008 	ldr.w	r0, [r8, #8]
   25648:	3068      	adds	r0, #104	; 0x68
	z_impl_k_timer_stop(timer);
   2564a:	f001 f891 	bl	26770 <z_impl_k_timer_stop>
}
   2564e:	e7d4      	b.n	255fa <rx_timeout+0x6e>

00025650 <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   25650:	6843      	ldr	r3, [r0, #4]
{
   25652:	b510      	push	{r4, lr}
	return config->uarte_regs;
   25654:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   25656:	68c3      	ldr	r3, [r0, #12]
   25658:	6898      	ldr	r0, [r3, #8]
   2565a:	6883      	ldr	r3, [r0, #8]
   2565c:	b133      	cbz	r3, 2566c <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   2565e:	3010      	adds	r0, #16
   25660:	f001 f886 	bl	26770 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25664:	2301      	movs	r3, #1
	return 0;
   25666:	2000      	movs	r0, #0
   25668:	60e3      	str	r3, [r4, #12]
}
   2566a:	bd10      	pop	{r4, pc}
		return -EFAULT;
   2566c:	f06f 000d 	mvn.w	r0, #13
   25670:	e7fb      	b.n	2566a <uarte_nrfx_tx_abort+0x1a>

00025672 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(dev);
   25672:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   25674:	f7ff bfec 	b.w	25650 <uarte_nrfx_tx_abort>

00025678 <uarte_nrfx_rx_disable>:
{
   25678:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2567a:	68c5      	ldr	r5, [r0, #12]
	return config->uarte_regs;
   2567c:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   2567e:	68a8      	ldr	r0, [r5, #8]
	return config->uarte_regs;
   25680:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   25682:	6c03      	ldr	r3, [r0, #64]	; 0x40
   25684:	b1a3      	cbz	r3, 256b0 <uarte_nrfx_rx_disable+0x38>
	if (data->async->rx_next_buf != NULL) {
   25686:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   25688:	b143      	cbz	r3, 2569c <uarte_nrfx_rx_disable+0x24>
    p_reg->SHORTS &= ~(mask);
   2568a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2568e:	f023 0320 	bic.w	r3, r3, #32
   25692:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25696:	2300      	movs	r3, #0
   25698:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2569c:	3068      	adds	r0, #104	; 0x68
   2569e:	f001 f867 	bl	26770 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   256a2:	2000      	movs	r0, #0
   256a4:	68ab      	ldr	r3, [r5, #8]
   256a6:	f883 009c 	strb.w	r0, [r3, #156]	; 0x9c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   256aa:	2301      	movs	r3, #1
   256ac:	6063      	str	r3, [r4, #4]
}
   256ae:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   256b0:	f06f 000d 	mvn.w	r0, #13
   256b4:	e7fb      	b.n	256ae <uarte_nrfx_rx_disable+0x36>

000256b6 <uarte_nrfx_poll_out>:
{
   256b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   256b8:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   256ba:	68c4      	ldr	r4, [r0, #12]
{
   256bc:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   256c0:	681e      	ldr	r6, [r3, #0]
	if (data->async) {
   256c2:	68a3      	ldr	r3, [r4, #8]
{
   256c4:	4605      	mov	r5, r0
	if (data->async) {
   256c6:	b93b      	cbnz	r3, 256d8 <uarte_nrfx_poll_out+0x22>
		lock = &data->poll_out_lock;
   256c8:	340c      	adds	r4, #12
   256ca:	e00b      	b.n	256e4 <uarte_nrfx_poll_out+0x2e>
			if (k_is_in_isr()) {
   256cc:	f000 ffc7 	bl	2665e <k_is_in_isr>
   256d0:	b110      	cbz	r0, 256d8 <uarte_nrfx_poll_out+0x22>
				uarte_nrfx_isr_async(dev);
   256d2:	4628      	mov	r0, r5
   256d4:	f7f0 f82c 	bl	15730 <uarte_nrfx_isr_async>
		while (data->async->tx_buf) {
   256d8:	68a3      	ldr	r3, [r4, #8]
   256da:	689a      	ldr	r2, [r3, #8]
   256dc:	2a00      	cmp	r2, #0
   256de:	d1f5      	bne.n	256cc <uarte_nrfx_poll_out+0x16>
		lock = &data->async->tx_size;
   256e0:	f103 040c 	add.w	r4, r3, #12
	if (!k_is_in_isr()) {
   256e4:	f000 ffbb 	bl	2665e <k_is_in_isr>
   256e8:	b9a0      	cbnz	r0, 25714 <uarte_nrfx_poll_out+0x5e>
   256ea:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   256ec:	2701      	movs	r7, #1
   256ee:	e8d4 3fef 	ldaex	r3, [r4]
   256f2:	2b00      	cmp	r3, #0
   256f4:	d103      	bne.n	256fe <uarte_nrfx_poll_out+0x48>
   256f6:	e8c4 7fe2 	stlex	r2, r7, [r4]
   256fa:	2a00      	cmp	r2, #0
   256fc:	d1f7      	bne.n	256ee <uarte_nrfx_poll_out+0x38>
		while (atomic_cas((atomic_t *) lock,
   256fe:	d00b      	beq.n	25718 <uarte_nrfx_poll_out+0x62>
	return z_impl_k_sleep(timeout);
   25700:	2021      	movs	r0, #33	; 0x21
   25702:	2100      	movs	r1, #0
   25704:	3d01      	subs	r5, #1
   25706:	f7fb fd25 	bl	21154 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   2570a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   2570e:	d1ee      	bne.n	256ee <uarte_nrfx_poll_out+0x38>
}
   25710:	b003      	add	sp, #12
   25712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
   25714:	2301      	movs	r3, #1
   25716:	6023      	str	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25718:	2300      	movs	r3, #0
   2571a:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2571e:	f10d 0307 	add.w	r3, sp, #7
   25722:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   25726:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25728:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   2572c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25730:	60b3      	str	r3, [r6, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25732:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   25736:	b923      	cbnz	r3, 25742 <uarte_nrfx_poll_out+0x8c>
   25738:	2001      	movs	r0, #1
   2573a:	f000 fcdc 	bl	260f6 <nrfx_busy_wait>
   2573e:	3d01      	subs	r5, #1
   25740:	d1f7      	bne.n	25732 <uarte_nrfx_poll_out+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25742:	2301      	movs	r3, #1
   25744:	60f3      	str	r3, [r6, #12]
	*lock = 0;
   25746:	2300      	movs	r3, #0
   25748:	6023      	str	r3, [r4, #0]
   2574a:	e7e1      	b.n	25710 <uarte_nrfx_poll_out+0x5a>

0002574c <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2574c:	2000      	movs	r0, #0
   2574e:	4770      	bx	lr

00025750 <entropy_cc310_rng_get_entropy>:
{
   25750:	b513      	push	{r0, r1, r4, lr}
   25752:	4614      	mov	r4, r2
   25754:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   25756:	aa01      	add	r2, sp, #4
   25758:	4621      	mov	r1, r4
   2575a:	f7e2 fc49 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   2575e:	9b01      	ldr	r3, [sp, #4]
   25760:	429c      	cmp	r4, r3
}
   25762:	bf18      	it	ne
   25764:	f06f 0015 	mvnne.w	r0, #21
   25768:	b002      	add	sp, #8
   2576a:	bd10      	pop	{r4, pc}

0002576c <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2576c:	4668      	mov	r0, sp
   2576e:	f020 0107 	bic.w	r1, r0, #7
   25772:	468d      	mov	sp, r1
   25774:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   25776:	f7f3 f841 	bl	187fc <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2577a:	f7ee fb1b 	bl	13db4 <_arch_isr_direct_pm>
   2577e:	f7ee fcc7 	bl	14110 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   25782:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   25786:	4685      	mov	sp, r0
   25788:	4770      	bx	lr

0002578a <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2578a:	4668      	mov	r0, sp
   2578c:	f020 0107 	bic.w	r1, r0, #7
   25790:	468d      	mov	sp, r1
   25792:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   25794:	f7f3 fb5c 	bl	18e50 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   25798:	f7ee fb0c 	bl	13db4 <_arch_isr_direct_pm>
   2579c:	f7ee fcb8 	bl	14110 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   257a0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   257a4:	4685      	mov	sp, r0
   257a6:	4770      	bx	lr

000257a8 <trace_task_create>:
{
   257a8:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   257aa:	201d      	movs	r0, #29
   257ac:	2200      	movs	r2, #0
   257ae:	2106      	movs	r1, #6
   257b0:	f7ee faea 	bl	13d88 <z_arm_irq_priority_set>
}
   257b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   257b8:	201d      	movs	r0, #29
   257ba:	f7ee bac1 	b.w	13d40 <arch_irq_enable>

000257be <read_task_create>:
{
   257be:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   257c0:	201c      	movs	r0, #28
   257c2:	2200      	movs	r2, #0
   257c4:	2106      	movs	r1, #6
   257c6:	f7ee fadf 	bl	13d88 <z_arm_irq_priority_set>
}
   257ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   257ce:	201c      	movs	r0, #28
   257d0:	f7ee bab6 	b.w	13d40 <arch_irq_enable>

000257d4 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   257d4:	2000      	movs	r0, #0
   257d6:	4770      	bx	lr

000257d8 <z_to_nrf_flags>:
{
   257d8:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   257da:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   257de:	bf18      	it	ne
   257e0:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   257e2:	079b      	lsls	r3, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   257e4:	bf48      	it	mi
   257e6:	f040 0008 	orrmi.w	r0, r0, #8
}
   257ea:	4770      	bx	lr

000257ec <z_to_nrf_family>:
	switch (z_family) {
   257ec:	2806      	cmp	r0, #6
   257ee:	d80a      	bhi.n	25806 <z_to_nrf_family+0x1a>
   257f0:	b198      	cbz	r0, 2581a <z_to_nrf_family+0x2e>
   257f2:	3801      	subs	r0, #1
   257f4:	2805      	cmp	r0, #5
   257f6:	d810      	bhi.n	2581a <z_to_nrf_family+0x2e>
   257f8:	e8df f000 	tbb	[pc, r0]
   257fc:	0f0d0312 	.word	0x0f0d0312
   25800:	0b0f      	.short	0x0b0f
   25802:	200a      	movs	r0, #10
   25804:	4770      	bx	lr
   25806:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   25808:	bf14      	ite	ne
   2580a:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   2580e:	2066      	moveq	r0, #102	; 0x66
   25810:	4770      	bx	lr
		return NRF_AF_LOCAL;
   25812:	2001      	movs	r0, #1
   25814:	4770      	bx	lr
		return NRF_AF_PACKET;
   25816:	2005      	movs	r0, #5
   25818:	4770      	bx	lr
		return -EAFNOSUPPORT;
   2581a:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2581e:	4770      	bx	lr
		return NRF_AF_INET;
   25820:	2002      	movs	r0, #2
}
   25822:	4770      	bx	lr

00025824 <z_to_nrf_protocol>:
	switch (proto) {
   25824:	f240 1311 	movw	r3, #273	; 0x111
   25828:	4298      	cmp	r0, r3
   2582a:	d023      	beq.n	25874 <z_to_nrf_protocol+0x50>
   2582c:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   25830:	da11      	bge.n	25856 <z_to_nrf_protocol+0x32>
   25832:	2811      	cmp	r0, #17
   25834:	d021      	beq.n	2587a <z_to_nrf_protocol+0x56>
   25836:	dc06      	bgt.n	25846 <z_to_nrf_protocol+0x22>
   25838:	b300      	cbz	r0, 2587c <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   2583a:	2806      	cmp	r0, #6
   2583c:	bf14      	ite	ne
   2583e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   25842:	2001      	moveq	r0, #1
   25844:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   25846:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2584a:	bf14      	ite	ne
   2584c:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   25850:	f44f 7082 	moveq.w	r0, #260	; 0x104
   25854:	4770      	bx	lr
	switch (proto) {
   25856:	f240 2302 	movw	r3, #514	; 0x202
   2585a:	4298      	cmp	r0, r3
   2585c:	d00e      	beq.n	2587c <z_to_nrf_protocol+0x58>
   2585e:	f240 2303 	movw	r3, #515	; 0x203
   25862:	4298      	cmp	r0, r3
   25864:	d00a      	beq.n	2587c <z_to_nrf_protocol+0x58>
   25866:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   2586a:	4298      	cmp	r0, r3
   2586c:	bf18      	it	ne
   2586e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   25872:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   25874:	f44f 7087 	mov.w	r0, #270	; 0x10e
   25878:	4770      	bx	lr
	switch (proto) {
   2587a:	2002      	movs	r0, #2
}
   2587c:	4770      	bx	lr

0002587e <nrf91_socket_is_supported>:
}
   2587e:	2001      	movs	r0, #1
   25880:	4770      	bx	lr

00025882 <nrf91_bsdlib_socket_offload_init>:
}
   25882:	2000      	movs	r0, #0
   25884:	4770      	bx	lr

00025886 <nrf91_socket_offload_getsockopt>:
{
   25886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2588a:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   2588c:	2300      	movs	r3, #0
{
   2588e:	b086      	sub	sp, #24
   25890:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   25894:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   25898:	f8d8 3000 	ldr.w	r3, [r8]
{
   2589c:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2589e:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   258a0:	f240 2302 	movw	r3, #514	; 0x202
   258a4:	4299      	cmp	r1, r3
{
   258a6:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   258a8:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   258ac:	d005      	beq.n	258ba <nrf91_socket_offload_getsockopt+0x34>
   258ae:	dc2e      	bgt.n	2590e <nrf91_socket_offload_getsockopt+0x88>
   258b0:	2901      	cmp	r1, #1
   258b2:	d002      	beq.n	258ba <nrf91_socket_offload_getsockopt+0x34>
   258b4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   258b8:	d139      	bne.n	2592e <nrf91_socket_offload_getsockopt+0xa8>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   258ba:	4631      	mov	r1, r6
   258bc:	4620      	mov	r0, r4
   258be:	aa02      	add	r2, sp, #8
   258c0:	f7f0 fb50 	bl	15f64 <z_to_nrf_optname>
   258c4:	2800      	cmp	r0, #0
   258c6:	db32      	blt.n	2592e <nrf91_socket_offload_getsockopt+0xa8>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   258c8:	2c01      	cmp	r4, #1
   258ca:	d124      	bne.n	25916 <nrf91_socket_offload_getsockopt+0x90>
   258cc:	2e14      	cmp	r6, #20
   258ce:	d122      	bne.n	25916 <nrf91_socket_offload_getsockopt+0x90>
		nrf_optlen = sizeof(struct nrf_timeval);
   258d0:	2308      	movs	r3, #8
   258d2:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   258d4:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   258d6:	aa03      	add	r2, sp, #12
   258d8:	4638      	mov	r0, r7
   258da:	9200      	str	r2, [sp, #0]
   258dc:	4621      	mov	r1, r4
   258de:	9a02      	ldr	r2, [sp, #8]
   258e0:	f7f8 fee8 	bl	1e6b4 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   258e4:	4607      	mov	r7, r0
   258e6:	b970      	cbnz	r0, 25906 <nrf91_socket_offload_getsockopt+0x80>
   258e8:	b16d      	cbz	r5, 25906 <nrf91_socket_offload_getsockopt+0x80>
		*optlen = nrf_optlen;
   258ea:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   258ec:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   258ee:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   258f2:	d108      	bne.n	25906 <nrf91_socket_offload_getsockopt+0x80>
			if (optname == SO_ERROR) {
   258f4:	2e04      	cmp	r6, #4
   258f6:	d110      	bne.n	2591a <nrf91_socket_offload_getsockopt+0x94>
				bsd_os_errno_set(*(int *)optval);
   258f8:	6828      	ldr	r0, [r5, #0]
   258fa:	f7f0 f98d 	bl	15c18 <bsd_os_errno_set>
				*(int *)optval = errno;
   258fe:	f7fe fd31 	bl	24364 <__errno>
   25902:	6803      	ldr	r3, [r0, #0]
   25904:	602b      	str	r3, [r5, #0]
}
   25906:	4638      	mov	r0, r7
   25908:	b006      	add	sp, #24
   2590a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2590e:	f240 2303 	movw	r3, #515	; 0x203
   25912:	4299      	cmp	r1, r3
   25914:	e7d0      	b.n	258b8 <nrf91_socket_offload_getsockopt+0x32>
   25916:	462b      	mov	r3, r5
   25918:	e7dd      	b.n	258d6 <nrf91_socket_offload_getsockopt+0x50>
			} else if (optname == SO_RCVTIMEO) {
   2591a:	2e14      	cmp	r6, #20
   2591c:	d1f3      	bne.n	25906 <nrf91_socket_offload_getsockopt+0x80>
				((struct timeval *)optval)->tv_sec =
   2591e:	9b04      	ldr	r3, [sp, #16]
   25920:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   25922:	9b05      	ldr	r3, [sp, #20]
   25924:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   25926:	2308      	movs	r3, #8
   25928:	f8c8 3000 	str.w	r3, [r8]
   2592c:	e7eb      	b.n	25906 <nrf91_socket_offload_getsockopt+0x80>
	errno = ENOPROTOOPT;
   2592e:	f7fe fd19 	bl	24364 <__errno>
   25932:	236d      	movs	r3, #109	; 0x6d
	return retval;
   25934:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   25938:	6003      	str	r3, [r0, #0]
	return retval;
   2593a:	e7e4      	b.n	25906 <nrf91_socket_offload_getsockopt+0x80>

0002593c <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2593c:	3801      	subs	r0, #1
   2593e:	f7f8 be65 	b.w	1e60c <nrf_listen>

00025942 <nrf91_socket_offload_freeaddrinfo>:
{
   25942:	b538      	push	{r3, r4, r5, lr}
   25944:	4604      	mov	r4, r0
	while (next != NULL) {
   25946:	b904      	cbnz	r4, 2594a <nrf91_socket_offload_freeaddrinfo+0x8>
}
   25948:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2594a:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2594c:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2594e:	f000 fc9f 	bl	26290 <k_free>
		k_free(this);
   25952:	4620      	mov	r0, r4
   25954:	f000 fc9c 	bl	26290 <k_free>
		next = next->ai_next;
   25958:	462c      	mov	r4, r5
   2595a:	e7f4      	b.n	25946 <nrf91_socket_offload_freeaddrinfo+0x4>

0002595c <z_to_nrf_addrinfo_hints>:
{
   2595c:	b538      	push	{r3, r4, r5, lr}
   2595e:	460c      	mov	r4, r1
   25960:	4605      	mov	r5, r0
   25962:	221c      	movs	r2, #28
   25964:	2100      	movs	r1, #0
   25966:	1d20      	adds	r0, r4, #4
   25968:	f001 f85a 	bl	26a20 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   2596c:	2300      	movs	r3, #0
   2596e:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   25970:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   25972:	2b03      	cmp	r3, #3
   25974:	d003      	beq.n	2597e <z_to_nrf_addrinfo_hints+0x22>
   25976:	2b04      	cmp	r3, #4
   25978:	bf08      	it	eq
   2597a:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   2597e:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   25980:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   25982:	f7ff ff33 	bl	257ec <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   25986:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   2598a:	d00b      	beq.n	259a4 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   2598c:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2598e:	6928      	ldr	r0, [r5, #16]
   25990:	f7ff ff48 	bl	25824 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   25994:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25998:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2599a:	d003      	beq.n	259a4 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   2599c:	69e8      	ldr	r0, [r5, #28]
   2599e:	b108      	cbz	r0, 259a4 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   259a0:	61a0      	str	r0, [r4, #24]
	return 0;
   259a2:	2000      	movs	r0, #0
}
   259a4:	bd38      	pop	{r3, r4, r5, pc}

000259a6 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   259a6:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   259a8:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   259aa:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   259ac:	4603      	mov	r3, r0
{
   259ae:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   259b0:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   259b4:	f101 0420 	add.w	r4, r1, #32
   259b8:	f101 0210 	add.w	r2, r1, #16
   259bc:	f852 5b04 	ldr.w	r5, [r2], #4
   259c0:	42a2      	cmp	r2, r4
   259c2:	f843 5b04 	str.w	r5, [r3], #4
   259c6:	d1f9      	bne.n	259bc <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   259c8:	6a0b      	ldr	r3, [r1, #32]
   259ca:	7503      	strb	r3, [r0, #20]
}
   259cc:	bd30      	pop	{r4, r5, pc}

000259ce <nrf91_socket_offload_recvfrom>:
{
   259ce:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   259d0:	1e45      	subs	r5, r0, #1
{
   259d2:	b08d      	sub	sp, #52	; 0x34
   259d4:	4618      	mov	r0, r3
   259d6:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   259da:	f7ff fefd 	bl	257d8 <z_to_nrf_flags>
   259de:	4603      	mov	r3, r0
	if (from == NULL) {
   259e0:	b944      	cbnz	r4, 259f4 <nrf91_socket_offload_recvfrom+0x26>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   259e2:	4628      	mov	r0, r5
   259e4:	e9cd 4400 	strd	r4, r4, [sp]
   259e8:	f7f8 fdc8 	bl	1e57c <nrf_recvfrom>
   259ec:	4605      	mov	r5, r0
}
   259ee:	4628      	mov	r0, r5
   259f0:	b00d      	add	sp, #52	; 0x34
   259f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   259f4:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   259f6:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   259f8:	9002      	str	r0, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   259fa:	a802      	add	r0, sp, #8
   259fc:	9001      	str	r0, [sp, #4]
   259fe:	9700      	str	r7, [sp, #0]
   25a00:	4628      	mov	r0, r5
   25a02:	f7f8 fdbb 	bl	1e57c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   25a06:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   25a08:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   25a0a:	2b02      	cmp	r3, #2
   25a0c:	d109      	bne.n	25a22 <nrf91_socket_offload_recvfrom+0x54>
	ptr->sin_port = nrf_in->sin_port;
   25a0e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   25a12:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   25a14:	2301      	movs	r3, #1
   25a16:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25a18:	9b06      	ldr	r3, [sp, #24]
   25a1a:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   25a1c:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   25a1e:	6033      	str	r3, [r6, #0]
	return retval;
   25a20:	e7e5      	b.n	259ee <nrf91_socket_offload_recvfrom+0x20>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   25a22:	2b0a      	cmp	r3, #10
   25a24:	d1e3      	bne.n	259ee <nrf91_socket_offload_recvfrom+0x20>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   25a26:	4639      	mov	r1, r7
   25a28:	4620      	mov	r0, r4
   25a2a:	f7ff ffbc 	bl	259a6 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   25a2e:	2318      	movs	r3, #24
   25a30:	e7f5      	b.n	25a1e <nrf91_socket_offload_recvfrom+0x50>

00025a32 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   25a32:	2300      	movs	r3, #0
{
   25a34:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   25a36:	e9cd 3300 	strd	r3, r3, [sp]
   25a3a:	f7ff ffc8 	bl	259ce <nrf91_socket_offload_recvfrom>
}
   25a3e:	b003      	add	sp, #12
   25a40:	f85d fb04 	ldr.w	pc, [sp], #4

00025a44 <nrf91_socket_offload_getaddrinfo>:
{
   25a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25a48:	4614      	mov	r4, r2
   25a4a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   25a4c:	2100      	movs	r1, #0
{
   25a4e:	b093      	sub	sp, #76	; 0x4c
   25a50:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25a52:	2220      	movs	r2, #32
   25a54:	a802      	add	r0, sp, #8
{
   25a56:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   25a58:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25a5a:	f000 ffe1 	bl	26a20 <memset>
	if (hints != NULL) {
   25a5e:	b194      	cbz	r4, 25a86 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   25a60:	4620      	mov	r0, r4
   25a62:	a902      	add	r1, sp, #8
   25a64:	f7ff ff7a 	bl	2595c <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   25a68:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   25a6c:	f000 80c7 	beq.w	25bfe <nrf91_socket_offload_getaddrinfo+0x1ba>
		} else if (error == -EAFNOSUPPORT) {
   25a70:	306a      	adds	r0, #106	; 0x6a
   25a72:	f000 80c7 	beq.w	25c04 <nrf91_socket_offload_getaddrinfo+0x1c0>
		if (hints->ai_next != NULL) {
   25a76:	6820      	ldr	r0, [r4, #0]
   25a78:	b120      	cbz	r0, 25a84 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   25a7a:	ac0a      	add	r4, sp, #40	; 0x28
   25a7c:	4621      	mov	r1, r4
   25a7e:	f7ff ff6d 	bl	2595c <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   25a82:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   25a84:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   25a86:	4628      	mov	r0, r5
   25a88:	4622      	mov	r2, r4
   25a8a:	4631      	mov	r1, r6
   25a8c:	ab01      	add	r3, sp, #4
   25a8e:	f7f8 fe2d 	bl	1e6ec <nrf_getaddrinfo>
	if (retval != 0) {
   25a92:	4605      	mov	r5, r0
   25a94:	b1b8      	cbz	r0, 25ac6 <nrf91_socket_offload_getaddrinfo+0x82>
	switch (nrf_error) {
   25a96:	282f      	cmp	r0, #47	; 0x2f
   25a98:	f000 80b7 	beq.w	25c0a <nrf91_socket_offload_getaddrinfo+0x1c6>
   25a9c:	dc0c      	bgt.n	25ab8 <nrf91_socket_offload_getaddrinfo+0x74>
   25a9e:	280c      	cmp	r0, #12
   25aa0:	f000 80b6 	beq.w	25c10 <nrf91_socket_offload_getaddrinfo+0x1cc>
   25aa4:	2823      	cmp	r0, #35	; 0x23
   25aa6:	bf14      	ite	ne
   25aa8:	f06f 050a 	mvnne.w	r5, #10
   25aac:	f06f 0502 	mvneq.w	r5, #2
}
   25ab0:	4628      	mov	r0, r5
   25ab2:	b013      	add	sp, #76	; 0x4c
   25ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return DNS_EAI_INPROGRESS;
   25ab8:	2873      	cmp	r0, #115	; 0x73
   25aba:	bf14      	ite	ne
   25abc:	f06f 050a 	mvnne.w	r5, #10
   25ac0:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   25ac4:	e7f4      	b.n	25ab0 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   25ac6:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   25ac8:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   25aca:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   25acc:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   25ace:	b91e      	cbnz	r6, 25ad8 <nrf91_socket_offload_getaddrinfo+0x94>
	nrf_freeaddrinfo(nrf_res);
   25ad0:	9801      	ldr	r0, [sp, #4]
   25ad2:	f7f8 fe0d 	bl	1e6f0 <nrf_freeaddrinfo>
	return retval;
   25ad6:	e7eb      	b.n	25ab0 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   25ad8:	2050      	movs	r0, #80	; 0x50
   25ada:	f7fa fe33 	bl	20744 <k_malloc>
		if (next_z_res == NULL) {
   25ade:	4604      	mov	r4, r0
   25ae0:	2800      	cmp	r0, #0
   25ae2:	f000 8081 	beq.w	25be8 <nrf91_socket_offload_getaddrinfo+0x1a4>
	family = nrf_to_z_family(nrf_in->ai_family);
   25ae6:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25ae8:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   25aea:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   25aec:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   25af0:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   25af4:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25af8:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   25afa:	dc23      	bgt.n	25b44 <nrf91_socket_offload_getaddrinfo+0x100>
   25afc:	2900      	cmp	r1, #0
   25afe:	dd23      	ble.n	25b48 <nrf91_socket_offload_getaddrinfo+0x104>
   25b00:	1e4b      	subs	r3, r1, #1
   25b02:	2b09      	cmp	r3, #9
   25b04:	d820      	bhi.n	25b48 <nrf91_socket_offload_getaddrinfo+0x104>
   25b06:	e8df f003 	tbb	[pc, r3]
   25b0a:	2905      	.short	0x2905
   25b0c:	1f251f1f 	.word	0x1f251f1f
   25b10:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   25b14:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25b16:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   25b18:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   25b1a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   25b1e:	d04b      	beq.n	25bb8 <nrf91_socket_offload_getaddrinfo+0x174>
   25b20:	dc26      	bgt.n	25b70 <nrf91_socket_offload_getaddrinfo+0x12c>
   25b22:	2a02      	cmp	r2, #2
   25b24:	d04c      	beq.n	25bc0 <nrf91_socket_offload_getaddrinfo+0x17c>
   25b26:	dc1d      	bgt.n	25b64 <nrf91_socket_offload_getaddrinfo+0x120>
   25b28:	b372      	cbz	r2, 25b88 <nrf91_socket_offload_getaddrinfo+0x144>
   25b2a:	2a01      	cmp	r2, #1
   25b2c:	d04a      	beq.n	25bc4 <nrf91_socket_offload_getaddrinfo+0x180>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25b2e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   25b32:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   25b34:	2300      	movs	r3, #0
   25b36:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   25b38:	4620      	mov	r0, r4
   25b3a:	f000 fba9 	bl	26290 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   25b3e:	f06f 0506 	mvn.w	r5, #6
   25b42:	e053      	b.n	25bec <nrf91_socket_offload_getaddrinfo+0x1a8>
	switch (nrf_family) {
   25b44:	2966      	cmp	r1, #102	; 0x66
   25b46:	d00b      	beq.n	25b60 <nrf91_socket_offload_getaddrinfo+0x11c>
			k_free(next_z_res);
   25b48:	4620      	mov	r0, r4
   25b4a:	f000 fba1 	bl	26290 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   25b4e:	f06f 0508 	mvn.w	r5, #8
   25b52:	e04b      	b.n	25bec <nrf91_socket_offload_getaddrinfo+0x1a8>
		return AF_PACKET;
   25b54:	2303      	movs	r3, #3
   25b56:	e7de      	b.n	25b16 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_INET6;
   25b58:	2302      	movs	r3, #2
   25b5a:	e7dc      	b.n	25b16 <nrf91_socket_offload_getaddrinfo+0xd2>
	switch (nrf_family) {
   25b5c:	2301      	movs	r3, #1
   25b5e:	e7da      	b.n	25b16 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_LTE;
   25b60:	460b      	mov	r3, r1
   25b62:	e7d8      	b.n	25b16 <nrf91_socket_offload_getaddrinfo+0xd2>
	switch (proto) {
   25b64:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   25b68:	d1e1      	bne.n	25b2e <nrf91_socket_offload_getaddrinfo+0xea>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25b6a:	f44f 7381 	mov.w	r3, #258	; 0x102
   25b6e:	e025      	b.n	25bbc <nrf91_socket_offload_getaddrinfo+0x178>
	switch (proto) {
   25b70:	f240 2302 	movw	r3, #514	; 0x202
   25b74:	429a      	cmp	r2, r3
   25b76:	d007      	beq.n	25b88 <nrf91_socket_offload_getaddrinfo+0x144>
   25b78:	f240 2303 	movw	r3, #515	; 0x203
   25b7c:	429a      	cmp	r2, r3
   25b7e:	d003      	beq.n	25b88 <nrf91_socket_offload_getaddrinfo+0x144>
   25b80:	f240 2301 	movw	r3, #513	; 0x201
   25b84:	429a      	cmp	r2, r3
   25b86:	d1d2      	bne.n	25b2e <nrf91_socket_offload_getaddrinfo+0xea>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25b88:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   25b8a:	2902      	cmp	r1, #2
   25b8c:	d11c      	bne.n	25bc8 <nrf91_socket_offload_getaddrinfo+0x184>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   25b8e:	2008      	movs	r0, #8
   25b90:	f7fa fdd8 	bl	20744 <k_malloc>
   25b94:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   25b96:	b320      	cbz	r0, 25be2 <nrf91_socket_offload_getaddrinfo+0x19e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   25b98:	2308      	movs	r3, #8
   25b9a:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   25b9c:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   25b9e:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25ba0:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   25ba2:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   25ba4:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25ba6:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   25ba8:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   25baa:	f1b8 0f00 	cmp.w	r8, #0
   25bae:	d123      	bne.n	25bf8 <nrf91_socket_offload_getaddrinfo+0x1b4>
			*res = next_z_res;
   25bb0:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   25bb2:	46a0      	mov	r8, r4
   25bb4:	69f6      	ldr	r6, [r6, #28]
   25bb6:	e78a      	b.n	25ace <nrf91_socket_offload_getaddrinfo+0x8a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25bb8:	f240 1311 	movw	r3, #273	; 0x111
   25bbc:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   25bbe:	e7e4      	b.n	25b8a <nrf91_socket_offload_getaddrinfo+0x146>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25bc0:	2311      	movs	r3, #17
   25bc2:	e7fb      	b.n	25bbc <nrf91_socket_offload_getaddrinfo+0x178>
   25bc4:	2306      	movs	r3, #6
   25bc6:	e7f9      	b.n	25bbc <nrf91_socket_offload_getaddrinfo+0x178>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   25bc8:	290a      	cmp	r1, #10
   25bca:	d1b5      	bne.n	25b38 <nrf91_socket_offload_getaddrinfo+0xf4>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   25bcc:	2018      	movs	r0, #24
   25bce:	f7fa fdb9 	bl	20744 <k_malloc>
   25bd2:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   25bd4:	b128      	cbz	r0, 25be2 <nrf91_socket_offload_getaddrinfo+0x19e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25bd6:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   25bd8:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25bda:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   25bdc:	f7ff fee3 	bl	259a6 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   25be0:	e7e3      	b.n	25baa <nrf91_socket_offload_getaddrinfo+0x166>
			k_free(next_z_res);
   25be2:	4620      	mov	r0, r4
   25be4:	f000 fb54 	bl	26290 <k_free>
			retval = DNS_EAI_MEMORY;
   25be8:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   25bec:	6838      	ldr	r0, [r7, #0]
   25bee:	f7ff fea8 	bl	25942 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   25bf2:	2300      	movs	r3, #0
   25bf4:	603b      	str	r3, [r7, #0]
   25bf6:	e76b      	b.n	25ad0 <nrf91_socket_offload_getaddrinfo+0x8c>
			latest_z_res->ai_next = next_z_res;
   25bf8:	f8c8 4000 	str.w	r4, [r8]
   25bfc:	e7d9      	b.n	25bb2 <nrf91_socket_offload_getaddrinfo+0x16e>
			return DNS_EAI_SOCKTYPE;
   25bfe:	f06f 0506 	mvn.w	r5, #6
   25c02:	e755      	b.n	25ab0 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   25c04:	f06f 0508 	mvn.w	r5, #8
   25c08:	e752      	b.n	25ab0 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   25c0a:	f06f 0501 	mvn.w	r5, #1
   25c0e:	e74f      	b.n	25ab0 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   25c10:	f06f 0509 	mvn.w	r5, #9
   25c14:	e74c      	b.n	25ab0 <nrf91_socket_offload_getaddrinfo+0x6c>

00025c16 <z_to_nrf_ipv6>:
{
   25c16:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   25c18:	2124      	movs	r1, #36	; 0x24
   25c1a:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   25c1c:	8841      	ldrh	r1, [r0, #2]
{
   25c1e:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   25c20:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   25c22:	210a      	movs	r1, #10
{
   25c24:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   25c26:	6059      	str	r1, [r3, #4]
   25c28:	1d04      	adds	r4, r0, #4
   25c2a:	f103 0610 	add.w	r6, r3, #16
   25c2e:	f100 0714 	add.w	r7, r0, #20
   25c32:	4635      	mov	r5, r6
   25c34:	6820      	ldr	r0, [r4, #0]
   25c36:	6861      	ldr	r1, [r4, #4]
   25c38:	3408      	adds	r4, #8
   25c3a:	c503      	stmia	r5!, {r0, r1}
   25c3c:	42bc      	cmp	r4, r7
   25c3e:	462e      	mov	r6, r5
   25c40:	d1f7      	bne.n	25c32 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   25c42:	7d12      	ldrb	r2, [r2, #20]
   25c44:	621a      	str	r2, [r3, #32]
}
   25c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025c48 <nrf91_socket_offload_sendto>:
{
   25c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25c4c:	b08e      	sub	sp, #56	; 0x38
   25c4e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   25c50:	460e      	mov	r6, r1
   25c52:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   25c54:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   25c56:	b974      	cbnz	r4, 25c76 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   25c58:	4618      	mov	r0, r3
   25c5a:	9203      	str	r2, [sp, #12]
   25c5c:	f7ff fdbc 	bl	257d8 <z_to_nrf_flags>
   25c60:	4603      	mov	r3, r0
   25c62:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   25c66:	4631      	mov	r1, r6
   25c68:	4628      	mov	r0, r5
   25c6a:	9a03      	ldr	r2, [sp, #12]
   25c6c:	f7f8 fc50 	bl	1e510 <nrf_sendto>
}
   25c70:	b00e      	add	sp, #56	; 0x38
   25c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   25c76:	8823      	ldrh	r3, [r4, #0]
   25c78:	9203      	str	r2, [sp, #12]
   25c7a:	2b01      	cmp	r3, #1
   25c7c:	d111      	bne.n	25ca2 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   25c7e:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   25c80:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   25c82:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   25c86:	2302      	movs	r3, #2
   25c88:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25c8a:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   25c8c:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   25c8e:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25c92:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   25c94:	f7ff fda0 	bl	257d8 <z_to_nrf_flags>
   25c98:	9101      	str	r1, [sp, #4]
   25c9a:	a905      	add	r1, sp, #20
   25c9c:	4603      	mov	r3, r0
   25c9e:	9100      	str	r1, [sp, #0]
   25ca0:	e7e1      	b.n	25c66 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   25ca2:	2b02      	cmp	r3, #2
   25ca4:	d10d      	bne.n	25cc2 <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   25ca6:	f10d 0814 	add.w	r8, sp, #20
   25caa:	4641      	mov	r1, r8
   25cac:	4620      	mov	r0, r4
   25cae:	f7ff ffb2 	bl	25c16 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   25cb2:	4638      	mov	r0, r7
   25cb4:	f7ff fd90 	bl	257d8 <z_to_nrf_flags>
   25cb8:	2124      	movs	r1, #36	; 0x24
   25cba:	4603      	mov	r3, r0
   25cbc:	e9cd 8100 	strd	r8, r1, [sp]
   25cc0:	e7d1      	b.n	25c66 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   25cc2:	f7fe fb4f 	bl	24364 <__errno>
   25cc6:	2386      	movs	r3, #134	; 0x86
   25cc8:	6003      	str	r3, [r0, #0]
	return retval;
   25cca:	f04f 30ff 	mov.w	r0, #4294967295
   25cce:	e7cf      	b.n	25c70 <nrf91_socket_offload_sendto+0x28>

00025cd0 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   25cd0:	2300      	movs	r3, #0
{
   25cd2:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   25cd4:	e9cd 3300 	strd	r3, r3, [sp]
   25cd8:	f7ff ffb6 	bl	25c48 <nrf91_socket_offload_sendto>
}
   25cdc:	b003      	add	sp, #12
   25cde:	f85d fb04 	ldr.w	pc, [sp], #4

00025ce2 <nrf91_socket_offload_connect>:
{
   25ce2:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   25ce4:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   25ce6:	8808      	ldrh	r0, [r1, #0]
{
   25ce8:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   25cea:	2801      	cmp	r0, #1
{
   25cec:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   25cee:	d10f      	bne.n	25d10 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   25cf0:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   25cf2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   25cf4:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   25cf8:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25cfa:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   25cfc:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   25d00:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25d02:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   25d04:	4620      	mov	r0, r4
   25d06:	a901      	add	r1, sp, #4
   25d08:	f7f8 fc6e 	bl	1e5e8 <nrf_connect>
}
   25d0c:	b00a      	add	sp, #40	; 0x28
   25d0e:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   25d10:	2802      	cmp	r0, #2
   25d12:	d105      	bne.n	25d20 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   25d14:	4618      	mov	r0, r3
   25d16:	a901      	add	r1, sp, #4
   25d18:	f7ff ff7d 	bl	25c16 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   25d1c:	2224      	movs	r2, #36	; 0x24
   25d1e:	e7f1      	b.n	25d04 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   25d20:	4620      	mov	r0, r4
   25d22:	f7f8 fc61 	bl	1e5e8 <nrf_connect>
		if (retval < 0) {
   25d26:	2800      	cmp	r0, #0
   25d28:	daf0      	bge.n	25d0c <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   25d2a:	f7fe fb1b 	bl	24364 <__errno>
   25d2e:	2386      	movs	r3, #134	; 0x86
   25d30:	6003      	str	r3, [r0, #0]
   25d32:	f04f 30ff 	mov.w	r0, #4294967295
   25d36:	e7e9      	b.n	25d0c <nrf91_socket_offload_connect+0x2a>

00025d38 <nrf91_socket_offload_setsockopt>:
{
   25d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d3c:	461d      	mov	r5, r3
	switch (z_in_level) {
   25d3e:	f240 2302 	movw	r3, #514	; 0x202
{
   25d42:	b086      	sub	sp, #24
	switch (z_in_level) {
   25d44:	4299      	cmp	r1, r3
{
   25d46:	460c      	mov	r4, r1
   25d48:	4616      	mov	r6, r2
   25d4a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   25d4c:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   25d50:	d005      	beq.n	25d5e <nrf91_socket_offload_setsockopt+0x26>
   25d52:	dc1f      	bgt.n	25d94 <nrf91_socket_offload_setsockopt+0x5c>
   25d54:	2901      	cmp	r1, #1
   25d56:	d002      	beq.n	25d5e <nrf91_socket_offload_setsockopt+0x26>
   25d58:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   25d5c:	d125      	bne.n	25daa <nrf91_socket_offload_setsockopt+0x72>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   25d5e:	4631      	mov	r1, r6
   25d60:	4620      	mov	r0, r4
   25d62:	aa03      	add	r2, sp, #12
   25d64:	f7f0 f8fe 	bl	15f64 <z_to_nrf_optname>
   25d68:	2800      	cmp	r0, #0
   25d6a:	db1e      	blt.n	25daa <nrf91_socket_offload_setsockopt+0x72>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   25d6c:	2c01      	cmp	r4, #1
   25d6e:	d115      	bne.n	25d9c <nrf91_socket_offload_setsockopt+0x64>
   25d70:	2e14      	cmp	r6, #20
   25d72:	d105      	bne.n	25d80 <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(struct nrf_timeval);
   25d74:	2708      	movs	r7, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   25d76:	682b      	ldr	r3, [r5, #0]
   25d78:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   25d7a:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   25d7c:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   25d7e:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   25d80:	462b      	mov	r3, r5
   25d82:	4621      	mov	r1, r4
   25d84:	4640      	mov	r0, r8
   25d86:	9a03      	ldr	r2, [sp, #12]
   25d88:	9700      	str	r7, [sp, #0]
   25d8a:	f7f8 fc77 	bl	1e67c <nrf_setsockopt>
}
   25d8e:	b006      	add	sp, #24
   25d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   25d94:	f240 2303 	movw	r3, #515	; 0x203
   25d98:	4299      	cmp	r1, r3
   25d9a:	e7df      	b.n	25d5c <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   25d9c:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   25da0:	d1ee      	bne.n	25d80 <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   25da2:	2e07      	cmp	r6, #7
   25da4:	bf08      	it	eq
   25da6:	2701      	moveq	r7, #1
   25da8:	e7ea      	b.n	25d80 <nrf91_socket_offload_setsockopt+0x48>
	errno = ENOPROTOOPT;
   25daa:	f7fe fadb 	bl	24364 <__errno>
   25dae:	236d      	movs	r3, #109	; 0x6d
   25db0:	6003      	str	r3, [r0, #0]
   25db2:	f04f 30ff 	mov.w	r0, #4294967295
   25db6:	e7ea      	b.n	25d8e <nrf91_socket_offload_setsockopt+0x56>

00025db8 <nrf91_socket_offload_bind>:
{
   25db8:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   25dba:	880a      	ldrh	r2, [r1, #0]
{
   25dbc:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   25dbe:	2a01      	cmp	r2, #1
{
   25dc0:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   25dc2:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   25dc6:	d10f      	bne.n	25de8 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   25dc8:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   25dca:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   25dcc:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   25dd0:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25dd2:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   25dd4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   25dd8:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25dda:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   25ddc:	4620      	mov	r0, r4
   25dde:	a901      	add	r1, sp, #4
   25de0:	f7f8 fc3a 	bl	1e658 <nrf_bind>
}
   25de4:	b00a      	add	sp, #40	; 0x28
   25de6:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   25de8:	2a02      	cmp	r2, #2
   25dea:	d105      	bne.n	25df8 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   25dec:	4618      	mov	r0, r3
   25dee:	a901      	add	r1, sp, #4
   25df0:	f7ff ff11 	bl	25c16 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   25df4:	2224      	movs	r2, #36	; 0x24
   25df6:	e7f1      	b.n	25ddc <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   25df8:	f7fe fab4 	bl	24364 <__errno>
   25dfc:	2386      	movs	r3, #134	; 0x86
   25dfe:	6003      	str	r3, [r0, #0]
   25e00:	f04f 30ff 	mov.w	r0, #4294967295
   25e04:	e7ee      	b.n	25de4 <nrf91_socket_offload_bind+0x2c>

00025e06 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   25e06:	280d      	cmp	r0, #13
   25e08:	d004      	beq.n	25e14 <is_lfcr+0xe>
   25e0a:	f1a0 030a 	sub.w	r3, r0, #10
   25e0e:	4258      	negs	r0, r3
   25e10:	4158      	adcs	r0, r3
   25e12:	4770      	bx	lr
		return true;
   25e14:	2001      	movs	r0, #1
}
   25e16:	4770      	bx	lr

00025e18 <skip_command_prefix>:
{
   25e18:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   25e1a:	6801      	ldr	r1, [r0, #0]
{
   25e1c:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   25e1e:	1c8b      	adds	r3, r1, #2
   25e20:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   25e22:	788c      	ldrb	r4, [r1, #2]
   25e24:	4620      	mov	r0, r4
   25e26:	f7ff ffee 	bl	25e06 <is_lfcr>
   25e2a:	b910      	cbnz	r0, 25e32 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   25e2c:	b10c      	cbz	r4, 25e32 <skip_command_prefix+0x1a>
	(*cmd)++;
   25e2e:	3103      	adds	r1, #3
   25e30:	6011      	str	r1, [r2, #0]
}
   25e32:	bd10      	pop	{r4, pc}

00025e34 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   25e34:	6813      	ldr	r3, [r2, #0]
   25e36:	f7f0 bf55 	b.w	16ce4 <at_parser_max_params_from_str>

00025e3a <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   25e3a:	b507      	push	{r0, r1, r2, lr}
   25e3c:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   25e3e:	f7f0 fec1 	bl	16bc4 <is_command>
   25e42:	b178      	cbz	r0, 25e64 <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   25e44:	a801      	add	r0, sp, #4
   25e46:	f7ff ffe7 	bl	25e18 <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   25e4a:	9901      	ldr	r1, [sp, #4]
   25e4c:	780a      	ldrb	r2, [r1, #0]
   25e4e:	4610      	mov	r0, r2
   25e50:	f7f0 fdca 	bl	169e8 <is_valid_notification_char>
   25e54:	b948      	cbnz	r0, 25e6a <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   25e56:	2a3d      	cmp	r2, #61	; 0x3d
   25e58:	d114      	bne.n	25e84 <at_parser_cmd_type_get+0x4a>
   25e5a:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   25e5c:	2b3f      	cmp	r3, #63	; 0x3f
   25e5e:	bf14      	ite	ne
   25e60:	2001      	movne	r0, #1
   25e62:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   25e64:	b003      	add	sp, #12
   25e66:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   25e6a:	3101      	adds	r1, #1
   25e6c:	9101      	str	r1, [sp, #4]
   25e6e:	e7ec      	b.n	25e4a <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   25e70:	4610      	mov	r0, r2
   25e72:	f7ff ffc8 	bl	25e06 <is_lfcr>
   25e76:	b918      	cbnz	r0, 25e80 <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   25e78:	fab2 f082 	clz	r0, r2
   25e7c:	0940      	lsrs	r0, r0, #5
   25e7e:	e7f1      	b.n	25e64 <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   25e80:	2001      	movs	r0, #1
   25e82:	e7ef      	b.n	25e64 <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   25e84:	2a3f      	cmp	r2, #63	; 0x3f
   25e86:	d1f3      	bne.n	25e70 <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   25e88:	2002      	movs	r0, #2
   25e8a:	e7eb      	b.n	25e64 <at_parser_cmd_type_get+0x2a>

00025e8c <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   25e8c:	6803      	ldr	r3, [r0, #0]
   25e8e:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   25e90:	bf83      	ittte	hi
   25e92:	230c      	movhi	r3, #12
   25e94:	6840      	ldrhi	r0, [r0, #4]
   25e96:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   25e9a:	2000      	movls	r0, #0
}
   25e9c:	4770      	bx	lr

00025e9e <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   25e9e:	7803      	ldrb	r3, [r0, #0]
   25ea0:	2b01      	cmp	r3, #1
   25ea2:	d006      	beq.n	25eb2 <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   25ea4:	2b02      	cmp	r3, #2
   25ea6:	d006      	beq.n	25eb6 <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   25ea8:	3b03      	subs	r3, #3
   25eaa:	2b01      	cmp	r3, #1
   25eac:	d805      	bhi.n	25eba <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   25eae:	6840      	ldr	r0, [r0, #4]
   25eb0:	4770      	bx	lr
		return sizeof(u16_t);
   25eb2:	2002      	movs	r0, #2
   25eb4:	4770      	bx	lr
		return sizeof(u32_t);
   25eb6:	2004      	movs	r0, #4
   25eb8:	4770      	bx	lr
	}

	return 0;
   25eba:	2000      	movs	r0, #0
}
   25ebc:	4770      	bx	lr

00025ebe <at_param_clear>:
{
   25ebe:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   25ec0:	7803      	ldrb	r3, [r0, #0]
{
   25ec2:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   25ec4:	3b03      	subs	r3, #3
   25ec6:	2b01      	cmp	r3, #1
   25ec8:	d802      	bhi.n	25ed0 <at_param_clear+0x12>
		k_free(param->value.str_val);
   25eca:	6880      	ldr	r0, [r0, #8]
   25ecc:	f000 f9e0 	bl	26290 <k_free>
	param->value.int_val = 0;
   25ed0:	2300      	movs	r3, #0
   25ed2:	60a3      	str	r3, [r4, #8]
}
   25ed4:	bd10      	pop	{r4, pc}

00025ed6 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   25ed6:	b538      	push	{r3, r4, r5, lr}
   25ed8:	460d      	mov	r5, r1
	if (list == NULL) {
   25eda:	4604      	mov	r4, r0
   25edc:	b140      	cbz	r0, 25ef0 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   25ede:	210c      	movs	r1, #12
   25ee0:	4628      	mov	r0, r5
   25ee2:	f000 f9da 	bl	2629a <k_calloc>
   25ee6:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   25ee8:	b128      	cbz	r0, 25ef6 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   25eea:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   25eec:	6025      	str	r5, [r4, #0]
}
   25eee:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25ef0:	f06f 0015 	mvn.w	r0, #21
   25ef4:	e7fb      	b.n	25eee <at_params_list_init+0x18>
		return -ENOMEM;
   25ef6:	f06f 000b 	mvn.w	r0, #11
   25efa:	e7f8      	b.n	25eee <at_params_list_init+0x18>

00025efc <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   25efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (list == NULL || list->params == NULL) {
   25f00:	4604      	mov	r4, r0
   25f02:	b140      	cbz	r0, 25f16 <at_params_list_clear+0x1a>
   25f04:	6843      	ldr	r3, [r0, #4]
   25f06:	b133      	cbz	r3, 25f16 <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   25f08:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   25f0a:	f04f 0a0c 	mov.w	sl, #12
__ssp_bos_icheck3(memset, void *, int)
   25f0e:	462e      	mov	r6, r5
	for (size_t i = 0; i < list->param_count; ++i) {
   25f10:	6823      	ldr	r3, [r4, #0]
   25f12:	429d      	cmp	r5, r3
   25f14:	d301      	bcc.n	25f1a <at_params_list_clear+0x1e>
		at_param_init(&params[i]);
	}
}
   25f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		at_param_clear(&params[i]);
   25f1a:	fb0a f805 	mul.w	r8, sl, r5
   25f1e:	f8d4 9004 	ldr.w	r9, [r4, #4]
	for (size_t i = 0; i < list->param_count; ++i) {
   25f22:	3501      	adds	r5, #1
		at_param_clear(&params[i]);
   25f24:	eb09 0708 	add.w	r7, r9, r8
   25f28:	4638      	mov	r0, r7
   25f2a:	f7ff ffc8 	bl	25ebe <at_param_clear>
   25f2e:	f849 6008 	str.w	r6, [r9, r8]
   25f32:	607e      	str	r6, [r7, #4]
   25f34:	60be      	str	r6, [r7, #8]
	for (size_t i = 0; i < list->param_count; ++i) {
   25f36:	e7eb      	b.n	25f10 <at_params_list_clear+0x14>

00025f38 <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   25f38:	b538      	push	{r3, r4, r5, lr}
   25f3a:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   25f3c:	b160      	cbz	r0, 25f58 <at_params_short_put+0x20>
   25f3e:	6843      	ldr	r3, [r0, #4]
   25f40:	b153      	cbz	r3, 25f58 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25f42:	f7ff ffa3 	bl	25e8c <at_params_get>

	if (param == NULL) {
   25f46:	4604      	mov	r4, r0
   25f48:	b130      	cbz	r0, 25f58 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   25f4a:	f7ff ffb8 	bl	25ebe <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   25f4e:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   25f50:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   25f52:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   25f54:	60a5      	str	r5, [r4, #8]
}
   25f56:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25f58:	f06f 0015 	mvn.w	r0, #21
   25f5c:	e7fb      	b.n	25f56 <at_params_short_put+0x1e>

00025f5e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   25f5e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   25f60:	b160      	cbz	r0, 25f7c <at_params_empty_put+0x1e>
   25f62:	6843      	ldr	r3, [r0, #4]
   25f64:	b153      	cbz	r3, 25f7c <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25f66:	f7ff ff91 	bl	25e8c <at_params_get>

	if (param == NULL) {
   25f6a:	4604      	mov	r4, r0
   25f6c:	b130      	cbz	r0, 25f7c <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   25f6e:	f7ff ffa6 	bl	25ebe <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   25f72:	2305      	movs	r3, #5
	param->value.int_val = 0;
   25f74:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   25f76:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   25f78:	60a0      	str	r0, [r4, #8]

	return 0;
}
   25f7a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25f7c:	f06f 0015 	mvn.w	r0, #21
   25f80:	e7fb      	b.n	25f7a <at_params_empty_put+0x1c>

00025f82 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   25f82:	b538      	push	{r3, r4, r5, lr}
   25f84:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   25f86:	b160      	cbz	r0, 25fa2 <at_params_int_put+0x20>
   25f88:	6843      	ldr	r3, [r0, #4]
   25f8a:	b153      	cbz	r3, 25fa2 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25f8c:	f7ff ff7e 	bl	25e8c <at_params_get>

	if (param == NULL) {
   25f90:	4604      	mov	r4, r0
   25f92:	b130      	cbz	r0, 25fa2 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   25f94:	f7ff ff93 	bl	25ebe <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   25f98:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   25f9a:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   25f9c:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   25f9e:	60a5      	str	r5, [r4, #8]
}
   25fa0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25fa2:	f06f 0015 	mvn.w	r0, #21
   25fa6:	e7fb      	b.n	25fa0 <at_params_int_put+0x1e>

00025fa8 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   25fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25faa:	4617      	mov	r7, r2
   25fac:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   25fae:	b1c0      	cbz	r0, 25fe2 <at_params_string_put+0x3a>
   25fb0:	6843      	ldr	r3, [r0, #4]
   25fb2:	b1b3      	cbz	r3, 25fe2 <at_params_string_put+0x3a>
   25fb4:	b1aa      	cbz	r2, 25fe2 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25fb6:	f7ff ff69 	bl	25e8c <at_params_get>

	if (param == NULL) {
   25fba:	4604      	mov	r4, r0
   25fbc:	b188      	cbz	r0, 25fe2 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   25fbe:	1c68      	adds	r0, r5, #1
   25fc0:	f7fa fbc0 	bl	20744 <k_malloc>

	if (param_value == NULL) {
   25fc4:	4606      	mov	r6, r0
   25fc6:	b178      	cbz	r0, 25fe8 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25fc8:	462a      	mov	r2, r5
   25fca:	4639      	mov	r1, r7
   25fcc:	f000 fd1b 	bl	26a06 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   25fd0:	4620      	mov	r0, r4
   25fd2:	f7ff ff74 	bl	25ebe <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   25fd6:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   25fd8:	2000      	movs	r0, #0
	param->size = str_len;
   25fda:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   25fdc:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   25fde:	60a6      	str	r6, [r4, #8]
}
   25fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   25fe2:	f06f 0015 	mvn.w	r0, #21
   25fe6:	e7fb      	b.n	25fe0 <at_params_string_put+0x38>
		return -ENOMEM;
   25fe8:	f06f 000b 	mvn.w	r0, #11
   25fec:	e7f8      	b.n	25fe0 <at_params_string_put+0x38>

00025fee <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   25fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ff0:	4617      	mov	r7, r2
   25ff2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   25ff4:	b1c0      	cbz	r0, 26028 <at_params_array_put+0x3a>
   25ff6:	6843      	ldr	r3, [r0, #4]
   25ff8:	b1b3      	cbz	r3, 26028 <at_params_array_put+0x3a>
   25ffa:	b1aa      	cbz	r2, 26028 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25ffc:	f7ff ff46 	bl	25e8c <at_params_get>

	if (param == NULL) {
   26000:	4604      	mov	r4, r0
   26002:	b188      	cbz	r0, 26028 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   26004:	4628      	mov	r0, r5
   26006:	f7fa fb9d 	bl	20744 <k_malloc>

	if (param_value == NULL) {
   2600a:	4606      	mov	r6, r0
   2600c:	b178      	cbz	r0, 2602e <at_params_array_put+0x40>
   2600e:	462a      	mov	r2, r5
   26010:	4639      	mov	r1, r7
   26012:	f000 fcf8 	bl	26a06 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   26016:	4620      	mov	r0, r4
   26018:	f7ff ff51 	bl	25ebe <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   2601c:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   2601e:	2000      	movs	r0, #0
	param->size = array_len;
   26020:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   26022:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   26024:	60a6      	str	r6, [r4, #8]
}
   26026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   26028:	f06f 0015 	mvn.w	r0, #21
   2602c:	e7fb      	b.n	26026 <at_params_array_put+0x38>
		return -ENOMEM;
   2602e:	f06f 000b 	mvn.w	r0, #11
   26032:	e7f8      	b.n	26026 <at_params_array_put+0x38>

00026034 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   26034:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   26036:	b160      	cbz	r0, 26052 <at_params_short_get+0x1e>
   26038:	6843      	ldr	r3, [r0, #4]
   2603a:	b153      	cbz	r3, 26052 <at_params_short_get+0x1e>
   2603c:	b14a      	cbz	r2, 26052 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2603e:	f7ff ff25 	bl	25e8c <at_params_get>

	if (param == NULL) {
   26042:	b130      	cbz	r0, 26052 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   26044:	7803      	ldrb	r3, [r0, #0]
   26046:	2b01      	cmp	r3, #1
   26048:	d103      	bne.n	26052 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   2604a:	6883      	ldr	r3, [r0, #8]
	return 0;
   2604c:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   2604e:	8013      	strh	r3, [r2, #0]
}
   26050:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26052:	f06f 0015 	mvn.w	r0, #21
   26056:	e7fb      	b.n	26050 <at_params_short_get+0x1c>

00026058 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   26058:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   2605a:	b168      	cbz	r0, 26078 <at_params_int_get+0x20>
   2605c:	6843      	ldr	r3, [r0, #4]
   2605e:	b15b      	cbz	r3, 26078 <at_params_int_get+0x20>
   26060:	b152      	cbz	r2, 26078 <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26062:	f7ff ff13 	bl	25e8c <at_params_get>

	if (param == NULL) {
   26066:	b138      	cbz	r0, 26078 <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   26068:	7803      	ldrb	r3, [r0, #0]
   2606a:	3b01      	subs	r3, #1
   2606c:	2b01      	cmp	r3, #1
   2606e:	d803      	bhi.n	26078 <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   26070:	6883      	ldr	r3, [r0, #8]
	return 0;
   26072:	2000      	movs	r0, #0
	*value = param->value.int_val;
   26074:	6013      	str	r3, [r2, #0]
}
   26076:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26078:	f06f 0015 	mvn.w	r0, #21
   2607c:	e7fb      	b.n	26076 <at_params_int_get+0x1e>

0002607e <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2607e:	b570      	push	{r4, r5, r6, lr}
   26080:	4616      	mov	r6, r2
   26082:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   26084:	b1c0      	cbz	r0, 260b8 <at_params_string_get+0x3a>
   26086:	6843      	ldr	r3, [r0, #4]
   26088:	b1b3      	cbz	r3, 260b8 <at_params_string_get+0x3a>
   2608a:	b1aa      	cbz	r2, 260b8 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   2608c:	b1a4      	cbz	r4, 260b8 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2608e:	f7ff fefd 	bl	25e8c <at_params_get>

	if (param == NULL) {
   26092:	4601      	mov	r1, r0
   26094:	b180      	cbz	r0, 260b8 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   26096:	7803      	ldrb	r3, [r0, #0]
   26098:	2b03      	cmp	r3, #3
   2609a:	d10d      	bne.n	260b8 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   2609c:	f7ff feff 	bl	25e9e <at_param_size>

	if (*len < param_len) {
   260a0:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   260a2:	4605      	mov	r5, r0
	if (*len < param_len) {
   260a4:	4283      	cmp	r3, r0
   260a6:	d30a      	bcc.n	260be <at_params_string_get+0x40>
   260a8:	4602      	mov	r2, r0
   260aa:	6889      	ldr	r1, [r1, #8]
   260ac:	4630      	mov	r0, r6
   260ae:	f000 fcaa 	bl	26a06 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   260b2:	2000      	movs	r0, #0
	*len = param_len;
   260b4:	6025      	str	r5, [r4, #0]
}
   260b6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   260b8:	f06f 0015 	mvn.w	r0, #21
   260bc:	e7fb      	b.n	260b6 <at_params_string_get+0x38>
		return -ENOMEM;
   260be:	f06f 000b 	mvn.w	r0, #11
   260c2:	e7f8      	b.n	260b6 <at_params_string_get+0x38>

000260c4 <at_params_valid_count_get>:
	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   260c4:	4602      	mov	r2, r0
{
   260c6:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   260c8:	b170      	cbz	r0, 260e8 <at_params_valid_count_get+0x24>
   260ca:	6840      	ldr	r0, [r0, #4]
   260cc:	b160      	cbz	r0, 260e8 <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   260ce:	6811      	ldr	r1, [r2, #0]
   260d0:	b141      	cbz	r1, 260e4 <at_params_valid_count_get+0x20>
   260d2:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   260d4:	7803      	ldrb	r3, [r0, #0]
   260d6:	b12b      	cbz	r3, 260e4 <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   260d8:	4610      	mov	r0, r2
		valid_i += 1;
   260da:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   260dc:	f7ff fed6 	bl	25e8c <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   260e0:	2800      	cmp	r0, #0
   260e2:	d1f7      	bne.n	260d4 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   260e4:	4608      	mov	r0, r1
   260e6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   260e8:	f06f 0115 	mvn.w	r1, #21
   260ec:	e7fa      	b.n	260e4 <at_params_valid_count_get+0x20>

000260ee <close>:
   260ee:	f7fd beb0 	b.w	23e52 <z_impl_zsock_close>

000260f2 <ftp_uninit>:

int ftp_uninit(void)
{
	return ftp_close();
   260f2:	f7f1 bceb 	b.w	17acc <ftp_close>

000260f6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   260f6:	f000 bab8 	b.w	2666a <z_impl_k_busy_wait>

000260fa <nrfx_timer_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   260fa:	2201      	movs	r2, #1
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   260fc:	6803      	ldr	r3, [r0, #0]
   260fe:	60da      	str	r2, [r3, #12]
}
   26100:	4770      	bx	lr

00026102 <nrfx_timer_capture>:
                            nrf_timer_cc_channel_t cc_channel)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);

    nrf_timer_task_trigger(p_instance->p_reg,
   26102:	6802      	ldr	r2, [r0, #0]
   26104:	2001      	movs	r0, #1
    return (uint32_t)p_reg->CC[cc_channel];
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   26106:	008b      	lsls	r3, r1, #2
   26108:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2610a:	b2db      	uxtb	r3, r3
   2610c:	50d0      	str	r0, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
   2610e:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   26112:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
   26116:	4770      	bx	lr

00026118 <device_pm_control_nop>:
}
   26118:	2000      	movs	r0, #0
   2611a:	4770      	bx	lr

0002611c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2611c:	f7fe b870 	b.w	24200 <z_clock_idle_exit>

00026120 <k_heap_init>:
{
   26120:	b410      	push	{r4}
   26122:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   26126:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2612a:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2612e:	f7fd bac8 	b.w	236c2 <sys_heap_init>

00026132 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   26132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26136:	4605      	mov	r5, r0
   26138:	b085      	sub	sp, #20
   2613a:	460f      	mov	r7, r1
	s64_t now, end = z_timeout_end_calc(timeout);
   2613c:	4610      	mov	r0, r2
   2613e:	4619      	mov	r1, r3
   26140:	f000 fae1 	bl	26706 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   26144:	f105 0b14 	add.w	fp, r5, #20
	s64_t now, end = z_timeout_end_calc(timeout);
   26148:	9002      	str	r0, [sp, #8]
   2614a:	468a      	mov	sl, r1
	__asm__ volatile(
   2614c:	f04f 0320 	mov.w	r3, #32
   26150:	f3ef 8411 	mrs	r4, BASEPRI
   26154:	f383 8811 	msr	BASEPRI, r3
   26158:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2615c:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   26160:	4639      	mov	r1, r7
   26162:	4628      	mov	r0, r5
   26164:	f7fd fa54 	bl	23610 <sys_heap_alloc>
   26168:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   2616a:	f7fb fac3 	bl	216f4 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2616e:	9b03      	ldr	r3, [sp, #12]
   26170:	b13b      	cbz	r3, 26182 <k_heap_alloc+0x50>
	__asm__ volatile(
   26172:	f384 8811 	msr	BASEPRI, r4
   26176:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2617a:	4618      	mov	r0, r3
   2617c:	b005      	add	sp, #20
   2617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   26182:	9a02      	ldr	r2, [sp, #8]
   26184:	ebb2 0800 	subs.w	r8, r2, r0
   26188:	eb6a 0901 	sbc.w	r9, sl, r1
   2618c:	f1b8 0f01 	cmp.w	r8, #1
   26190:	f179 0200 	sbcs.w	r2, r9, #0
   26194:	dbed      	blt.n	26172 <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   26196:	4632      	mov	r2, r6
   26198:	4621      	mov	r1, r4
   2619a:	4658      	mov	r0, fp
   2619c:	e9cd 8900 	strd	r8, r9, [sp]
   261a0:	f7fa ff26 	bl	20ff0 <z_pend_curr>
	__asm__ volatile(
   261a4:	f04f 0320 	mov.w	r3, #32
   261a8:	f3ef 8411 	mrs	r4, BASEPRI
   261ac:	f383 8811 	msr	BASEPRI, r3
   261b0:	f3bf 8f6f 	isb	sy
   261b4:	e7d4      	b.n	26160 <k_heap_alloc+0x2e>

000261b6 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   261b6:	b538      	push	{r3, r4, r5, lr}
   261b8:	4604      	mov	r4, r0
   261ba:	f04f 0320 	mov.w	r3, #32
   261be:	f3ef 8511 	mrs	r5, BASEPRI
   261c2:	f383 8811 	msr	BASEPRI, r3
   261c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   261ca:	f7fd f96b 	bl	234a4 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   261ce:	f104 000c 	add.w	r0, r4, #12
   261d2:	f000 fa24 	bl	2661e <z_unpend_all>
   261d6:	b130      	cbz	r0, 261e6 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   261d8:	4629      	mov	r1, r5
   261da:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   261de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   261e2:	f000 b931 	b.w	26448 <z_reschedule>
	__asm__ volatile(
   261e6:	f385 8811 	msr	BASEPRI, r5
   261ea:	f3bf 8f6f 	isb	sy
}
   261ee:	bd38      	pop	{r3, r4, r5, pc}

000261f0 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   261f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   261f2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   261f6:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   261f8:	6800      	ldr	r0, [r0, #0]
{
   261fa:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   261fc:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   261fe:	4632      	mov	r2, r6
   26200:	463b      	mov	r3, r7
   26202:	4621      	mov	r1, r4
   26204:	f7ff ff95 	bl	26132 <k_heap_alloc>
   26208:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   2620a:	b144      	cbz	r4, 2621e <k_mem_pool_alloc+0x2e>
   2620c:	b938      	cbnz	r0, 2621e <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   2620e:	ea56 0307 	orrs.w	r3, r6, r7
   26212:	bf0c      	ite	eq
   26214:	f06f 000b 	mvneq.w	r0, #11
   26218:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   2621c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2621e:	2000      	movs	r0, #0
   26220:	e7fc      	b.n	2621c <k_mem_pool_alloc+0x2c>

00026222 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   26222:	e9d0 1000 	ldrd	r1, r0, [r0]
   26226:	f7ff bfc6 	b.w	261b6 <k_heap_free>

0002622a <k_mem_slab_init>:
{
   2622a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2622c:	2400      	movs	r4, #0
   2622e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26230:	ea41 0402 	orr.w	r4, r1, r2
   26234:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   26238:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2623c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2623e:	d10c      	bne.n	2625a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   26240:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26242:	42a3      	cmp	r3, r4
   26244:	d103      	bne.n	2624e <k_mem_slab_init+0x24>
   26246:	e9c0 0000 	strd	r0, r0, [r0]
}
   2624a:	2000      	movs	r0, #0
}
   2624c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2624e:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26250:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   26252:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   26254:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   26256:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   26258:	e7f3      	b.n	26242 <k_mem_slab_init+0x18>
		return -EINVAL;
   2625a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2625e:	e7f5      	b.n	2624c <k_mem_slab_init+0x22>

00026260 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   26260:	2208      	movs	r2, #8
{
   26262:	b530      	push	{r4, r5, lr}
   26264:	188a      	adds	r2, r1, r2
   26266:	b085      	sub	sp, #20
   26268:	d207      	bcs.n	2627a <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2626a:	2400      	movs	r4, #0
   2626c:	2500      	movs	r5, #0
   2626e:	a902      	add	r1, sp, #8
   26270:	e9cd 4500 	strd	r4, r5, [sp]
   26274:	f7ff ffbc 	bl	261f0 <k_mem_pool_alloc>
   26278:	b110      	cbz	r0, 26280 <k_mem_pool_malloc+0x20>
		return NULL;
   2627a:	2000      	movs	r0, #0
}
   2627c:	b005      	add	sp, #20
   2627e:	bd30      	pop	{r4, r5, pc}
   26280:	9a02      	ldr	r2, [sp, #8]
   26282:	ab02      	add	r3, sp, #8
   26284:	cb03      	ldmia	r3!, {r0, r1}
   26286:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   26288:	9802      	ldr	r0, [sp, #8]
   2628a:	6051      	str	r1, [r2, #4]
   2628c:	3008      	adds	r0, #8
   2628e:	e7f5      	b.n	2627c <k_mem_pool_malloc+0x1c>

00026290 <k_free>:
	if (ptr != NULL) {
   26290:	b110      	cbz	r0, 26298 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   26292:	3808      	subs	r0, #8
   26294:	f7ff bfc5 	b.w	26222 <k_mem_pool_free_id>
}
   26298:	4770      	bx	lr

0002629a <k_calloc>:
{
   2629a:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   2629c:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   262a0:	b118      	cbz	r0, 262aa <k_calloc+0x10>
   262a2:	fbb2 f0f0 	udiv	r0, r2, r0
   262a6:	4281      	cmp	r1, r0
   262a8:	d10c      	bne.n	262c4 <k_calloc+0x2a>
	ret = k_malloc(bounds);
   262aa:	4610      	mov	r0, r2
   262ac:	9201      	str	r2, [sp, #4]
   262ae:	f7fa fa49 	bl	20744 <k_malloc>
	if (ret != NULL) {
   262b2:	4604      	mov	r4, r0
   262b4:	b118      	cbz	r0, 262be <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   262b6:	2100      	movs	r1, #0
   262b8:	9a01      	ldr	r2, [sp, #4]
   262ba:	f000 fbb1 	bl	26a20 <memset>
}
   262be:	4620      	mov	r0, r4
   262c0:	b002      	add	sp, #8
   262c2:	bd10      	pop	{r4, pc}
		return NULL;
   262c4:	2400      	movs	r4, #0
   262c6:	e7fa      	b.n	262be <k_calloc+0x24>

000262c8 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   262c8:	2300      	movs	r3, #0
   262ca:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   262ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   262d2:	4618      	mov	r0, r3
   262d4:	4770      	bx	lr

000262d6 <queue_insert>:
{
   262d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   262da:	4604      	mov	r4, r0
   262dc:	460d      	mov	r5, r1
   262de:	4690      	mov	r8, r2
   262e0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   262e2:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   262e6:	f04f 0320 	mov.w	r3, #32
   262ea:	f3ef 8711 	mrs	r7, BASEPRI
   262ee:	f383 8811 	msr	BASEPRI, r3
   262f2:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   262f6:	4630      	mov	r0, r6
   262f8:	f000 f964 	bl	265c4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   262fc:	b158      	cbz	r0, 26316 <queue_insert+0x40>
   262fe:	2400      	movs	r4, #0
   26300:	f8c0 8014 	str.w	r8, [r0, #20]
   26304:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
   26306:	f000 f8e7 	bl	264d8 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2630a:	4630      	mov	r0, r6
   2630c:	4639      	mov	r1, r7
   2630e:	f000 f89b 	bl	26448 <z_reschedule>
	return 0;
   26312:	2000      	movs	r0, #0
   26314:	e00c      	b.n	26330 <queue_insert+0x5a>
	if (alloc) {
   26316:	f1b9 0f00 	cmp.w	r9, #0
   2631a:	d01b      	beq.n	26354 <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   2631c:	2008      	movs	r0, #8
   2631e:	f7fa fa17 	bl	20750 <z_thread_malloc>
		if (anode == NULL) {
   26322:	b938      	cbnz	r0, 26334 <queue_insert+0x5e>
	__asm__ volatile(
   26324:	f387 8811 	msr	BASEPRI, r7
   26328:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2632c:	f06f 000b 	mvn.w	r0, #11
}
   26330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   26334:	2301      	movs	r3, #1
		anode->data = data;
   26336:	f8c0 8004 	str.w	r8, [r0, #4]
   2633a:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2633c:	6803      	ldr	r3, [r0, #0]
   2633e:	f003 0203 	and.w	r2, r3, #3
   26342:	b95d      	cbnz	r5, 2635c <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26344:	6823      	ldr	r3, [r4, #0]
   26346:	4313      	orrs	r3, r2
   26348:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2634a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2634c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2634e:	b973      	cbnz	r3, 2636e <queue_insert+0x98>
	list->tail = node;
   26350:	6060      	str	r0, [r4, #4]
}
   26352:	e00c      	b.n	2636e <queue_insert+0x98>
}
   26354:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   26356:	f8c8 9000 	str.w	r9, [r8]
}
   2635a:	e7ef      	b.n	2633c <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2635c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2635e:	f033 0303 	bics.w	r3, r3, #3
   26362:	d110      	bne.n	26386 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26364:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   26366:	6862      	ldr	r2, [r4, #4]
   26368:	b93a      	cbnz	r2, 2637a <queue_insert+0xa4>
	list->head = node;
   2636a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2636e:	2104      	movs	r1, #4
   26370:	f104 0010 	add.w	r0, r4, #16
   26374:	f000 fb18 	bl	269a8 <z_handle_obj_poll_events>
   26378:	e7c7      	b.n	2630a <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2637a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2637c:	f003 0303 	and.w	r3, r3, #3
   26380:	4303      	orrs	r3, r0
   26382:	6013      	str	r3, [r2, #0]
   26384:	e7e4      	b.n	26350 <queue_insert+0x7a>
   26386:	4313      	orrs	r3, r2
   26388:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2638a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2638c:	f003 0303 	and.w	r3, r3, #3
   26390:	4303      	orrs	r3, r0
   26392:	602b      	str	r3, [r5, #0]
}
   26394:	e7eb      	b.n	2636e <queue_insert+0x98>

00026396 <z_queue_node_peek>:
{
   26396:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   26398:	4604      	mov	r4, r0
   2639a:	b130      	cbz	r0, 263aa <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2639c:	6802      	ldr	r2, [r0, #0]
   2639e:	0793      	lsls	r3, r2, #30
   263a0:	d003      	beq.n	263aa <z_queue_node_peek+0x14>
		ret = anode->data;
   263a2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   263a4:	b109      	cbz	r1, 263aa <z_queue_node_peek+0x14>
			k_free(anode);
   263a6:	f7ff ff73 	bl	26290 <k_free>
}
   263aa:	4620      	mov	r0, r4
   263ac:	bd10      	pop	{r4, pc}

000263ae <z_impl_k_queue_init>:
	list->head = NULL;
   263ae:	2300      	movs	r3, #0
	list->tail = NULL;
   263b0:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   263b4:	f100 0308 	add.w	r3, r0, #8
   263b8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   263bc:	f100 0310 	add.w	r3, r0, #16
   263c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   263c4:	4770      	bx	lr

000263c6 <k_queue_append>:
{
   263c6:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   263c8:	2300      	movs	r3, #0
   263ca:	6841      	ldr	r1, [r0, #4]
   263cc:	f7ff bf83 	b.w	262d6 <queue_insert>

000263d0 <z_swap_irqlock>:
{
   263d0:	b507      	push	{r0, r1, r2, lr}
   263d2:	9001      	str	r0, [sp, #4]
	z_check_stack_sentinel();
   263d4:	f7fa ff90 	bl	212f8 <z_check_stack_sentinel>
	ret = arch_swap(key);
   263d8:	9801      	ldr	r0, [sp, #4]
}
   263da:	b003      	add	sp, #12
   263dc:	f85d eb04 	ldr.w	lr, [sp], #4
	ret = arch_swap(key);
   263e0:	f7ed bc94 	b.w	13d0c <arch_swap>

000263e4 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   263e4:	f990 000e 	ldrsb.w	r0, [r0, #14]
   263e8:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   263ec:	4298      	cmp	r0, r3
   263ee:	bfac      	ite	ge
   263f0:	2000      	movge	r0, #0
   263f2:	2001      	movlt	r0, #1
   263f4:	4770      	bx	lr

000263f6 <z_find_first_thread_to_unpend>:
{
   263f6:	b510      	push	{r4, lr}
	__asm__ volatile(
   263f8:	f04f 0320 	mov.w	r3, #32
   263fc:	f3ef 8411 	mrs	r4, BASEPRI
   26400:	f383 8811 	msr	BASEPRI, r3
   26404:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   26408:	f000 f85c 	bl	264c4 <z_priq_dumb_best>
	__asm__ volatile(
   2640c:	f384 8811 	msr	BASEPRI, r4
   26410:	f3bf 8f6f 	isb	sy
}
   26414:	bd10      	pop	{r4, pc}

00026416 <z_unpend_thread_no_timeout>:
{
   26416:	b538      	push	{r3, r4, r5, lr}
   26418:	4604      	mov	r4, r0
	__asm__ volatile(
   2641a:	f04f 0320 	mov.w	r3, #32
   2641e:	f3ef 8511 	mrs	r5, BASEPRI
   26422:	f383 8811 	msr	BASEPRI, r3
   26426:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2642a:	4601      	mov	r1, r0
   2642c:	6880      	ldr	r0, [r0, #8]
   2642e:	f7fa fba3 	bl	20b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26432:	7b63      	ldrb	r3, [r4, #13]
   26434:	f023 0302 	bic.w	r3, r3, #2
   26438:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   2643a:	2300      	movs	r3, #0
   2643c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2643e:	f385 8811 	msr	BASEPRI, r5
   26442:	f3bf 8f6f 	isb	sy
}
   26446:	bd38      	pop	{r3, r4, r5, pc}

00026448 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26448:	b921      	cbnz	r1, 26454 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2644a:	f3ef 8005 	mrs	r0, IPSR
   2644e:	b908      	cbnz	r0, 26454 <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   26450:	f7ff bfbe 	b.w	263d0 <z_swap_irqlock>
   26454:	f381 8811 	msr	BASEPRI, r1
   26458:	f3bf 8f6f 	isb	sy
}
   2645c:	4770      	bx	lr

0002645e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2645e:	4603      	mov	r3, r0
   26460:	b920      	cbnz	r0, 2646c <z_reschedule_irqlock+0xe>
   26462:	f3ef 8205 	mrs	r2, IPSR
   26466:	b90a      	cbnz	r2, 2646c <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   26468:	f7ff bfb2 	b.w	263d0 <z_swap_irqlock>
   2646c:	f383 8811 	msr	BASEPRI, r3
   26470:	f3bf 8f6f 	isb	sy
}
   26474:	4770      	bx	lr

00026476 <z_reschedule_unlocked>:
	__asm__ volatile(
   26476:	f04f 0320 	mov.w	r3, #32
   2647a:	f3ef 8011 	mrs	r0, BASEPRI
   2647e:	f383 8811 	msr	BASEPRI, r3
   26482:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26486:	f7ff bfea 	b.w	2645e <z_reschedule_irqlock>

0002648a <z_unpend_thread>:
{
   2648a:	b510      	push	{r4, lr}
   2648c:	4601      	mov	r1, r0
   2648e:	f04f 0320 	mov.w	r3, #32
   26492:	f3ef 8411 	mrs	r4, BASEPRI
   26496:	f383 8811 	msr	BASEPRI, r3
   2649a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2649e:	6880      	ldr	r0, [r0, #8]
   264a0:	f7fa fb6a 	bl	20b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   264a4:	7b4b      	ldrb	r3, [r1, #13]
   264a6:	f023 0302 	bic.w	r3, r3, #2
   264aa:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   264ac:	2300      	movs	r3, #0
   264ae:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   264b0:	f384 8811 	msr	BASEPRI, r4
   264b4:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   264b8:	f101 0018 	add.w	r0, r1, #24
}
   264bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   264c0:	f000 b8da 	b.w	26678 <z_abort_timeout>

000264c4 <z_priq_dumb_best>:
	return list->head == list;
   264c4:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   264c6:	4298      	cmp	r0, r3
   264c8:	d004      	beq.n	264d4 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   264ca:	2b00      	cmp	r3, #0
   264cc:	bf38      	it	cc
   264ce:	2300      	movcc	r3, #0
   264d0:	4618      	mov	r0, r3
   264d2:	4770      	bx	lr
	struct k_thread *thread = NULL;
   264d4:	2000      	movs	r0, #0
}
   264d6:	4770      	bx	lr

000264d8 <z_ready_thread>:
{
   264d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   264da:	f04f 0320 	mov.w	r3, #32
   264de:	f3ef 8411 	mrs	r4, BASEPRI
   264e2:	f383 8811 	msr	BASEPRI, r3
   264e6:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   264ea:	f7fa fb9b 	bl	20c24 <ready_thread>
	__asm__ volatile(
   264ee:	f384 8811 	msr	BASEPRI, r4
   264f2:	f3bf 8f6f 	isb	sy
}
   264f6:	bd10      	pop	{r4, pc}

000264f8 <z_thread_timeout>:
{
   264f8:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   264fa:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   264fe:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   26500:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   26504:	b1c3      	cbz	r3, 26538 <z_thread_timeout+0x40>
	__asm__ volatile(
   26506:	f04f 0320 	mov.w	r3, #32
   2650a:	f3ef 8511 	mrs	r5, BASEPRI
   2650e:	f383 8811 	msr	BASEPRI, r3
   26512:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   26516:	f850 0c10 	ldr.w	r0, [r0, #-16]
   2651a:	f7fa fb2d 	bl	20b78 <z_priq_dumb_remove>
   2651e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   26522:	f023 0302 	bic.w	r3, r3, #2
   26526:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   2652a:	2300      	movs	r3, #0
   2652c:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   26530:	f385 8811 	msr	BASEPRI, r5
   26534:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26538:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   2653c:	4608      	mov	r0, r1
   2653e:	f023 0314 	bic.w	r3, r3, #20
   26542:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   26546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   2654a:	f7ff bfc5 	b.w	264d8 <z_ready_thread>

0002654e <z_remove_thread_from_ready_q>:
{
   2654e:	b510      	push	{r4, lr}
	__asm__ volatile(
   26550:	f04f 0320 	mov.w	r3, #32
   26554:	f3ef 8411 	mrs	r4, BASEPRI
   26558:	f383 8811 	msr	BASEPRI, r3
   2655c:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   26560:	f7fa fcd8 	bl	20f14 <unready_thread>
	__asm__ volatile(
   26564:	f384 8811 	msr	BASEPRI, r4
   26568:	f3bf 8f6f 	isb	sy
}
   2656c:	bd10      	pop	{r4, pc}

0002656e <add_to_waitq_locked>:
{
   2656e:	b538      	push	{r3, r4, r5, lr}
   26570:	4604      	mov	r4, r0
   26572:	460d      	mov	r5, r1
	unready_thread(thread);
   26574:	f7fa fcce 	bl	20f14 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   26578:	7b63      	ldrb	r3, [r4, #13]
   2657a:	f043 0302 	orr.w	r3, r3, #2
   2657e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26580:	b1c5      	cbz	r5, 265b4 <add_to_waitq_locked+0x46>
	return list->head == list;
   26582:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   26584:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26586:	429d      	cmp	r5, r3
   26588:	bf08      	it	eq
   2658a:	2300      	moveq	r3, #0
   2658c:	2b00      	cmp	r3, #0
   2658e:	bf38      	it	cc
   26590:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26592:	b183      	cbz	r3, 265b6 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   26594:	f994 100e 	ldrsb.w	r1, [r4, #14]
   26598:	f993 200e 	ldrsb.w	r2, [r3, #14]
   2659c:	4291      	cmp	r1, r2
   2659e:	db04      	blt.n	265aa <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   265a0:	686a      	ldr	r2, [r5, #4]
   265a2:	429a      	cmp	r2, r3
   265a4:	d007      	beq.n	265b6 <add_to_waitq_locked+0x48>
   265a6:	681b      	ldr	r3, [r3, #0]
   265a8:	e7f3      	b.n	26592 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   265aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   265ac:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   265b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   265b2:	605c      	str	r4, [r3, #4]
}
   265b4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   265b6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   265b8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   265ba:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   265bc:	686b      	ldr	r3, [r5, #4]
   265be:	601c      	str	r4, [r3, #0]
	list->tail = node;
   265c0:	606c      	str	r4, [r5, #4]
   265c2:	e7f7      	b.n	265b4 <add_to_waitq_locked+0x46>

000265c4 <z_unpend_first_thread>:
{
   265c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   265c6:	f04f 0320 	mov.w	r3, #32
   265ca:	f3ef 8211 	mrs	r2, BASEPRI
   265ce:	f383 8811 	msr	BASEPRI, r3
   265d2:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   265d6:	f7ff ff75 	bl	264c4 <z_priq_dumb_best>
   265da:	4604      	mov	r4, r0
	__asm__ volatile(
   265dc:	f382 8811 	msr	BASEPRI, r2
   265e0:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   265e4:	b1c8      	cbz	r0, 2661a <z_unpend_first_thread+0x56>
	__asm__ volatile(
   265e6:	f04f 0320 	mov.w	r3, #32
   265ea:	f3ef 8511 	mrs	r5, BASEPRI
   265ee:	f383 8811 	msr	BASEPRI, r3
   265f2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   265f6:	4601      	mov	r1, r0
   265f8:	6880      	ldr	r0, [r0, #8]
   265fa:	f7fa fabd 	bl	20b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   265fe:	7b63      	ldrb	r3, [r4, #13]
   26600:	f023 0302 	bic.w	r3, r3, #2
   26604:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   26606:	2300      	movs	r3, #0
   26608:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2660a:	f385 8811 	msr	BASEPRI, r5
   2660e:	f3bf 8f6f 	isb	sy
   26612:	f104 0018 	add.w	r0, r4, #24
   26616:	f000 f82f 	bl	26678 <z_abort_timeout>
}
   2661a:	4620      	mov	r0, r4
   2661c:	bd38      	pop	{r3, r4, r5, pc}

0002661e <z_unpend_all>:
{
   2661e:	b538      	push	{r3, r4, r5, lr}
   26620:	4605      	mov	r5, r0
	int need_sched = 0;
   26622:	2000      	movs	r0, #0
	return list->head == list;
   26624:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26626:	42a5      	cmp	r5, r4
   26628:	d000      	beq.n	2662c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2662a:	b904      	cbnz	r4, 2662e <z_unpend_all+0x10>
}
   2662c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2662e:	4620      	mov	r0, r4
   26630:	f7ff ff2b 	bl	2648a <z_unpend_thread>
		z_ready_thread(thread);
   26634:	4620      	mov	r0, r4
   26636:	f7ff ff4f 	bl	264d8 <z_ready_thread>
		need_sched = 1;
   2663a:	2001      	movs	r0, #1
   2663c:	e7f2      	b.n	26624 <z_unpend_all+0x6>

0002663e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2663e:	b15a      	cbz	r2, 26658 <z_impl_k_sem_init+0x1a>
   26640:	428a      	cmp	r2, r1
   26642:	d309      	bcc.n	26658 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   26644:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   26648:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2664c:	e9c0 0000 	strd	r0, r0, [r0]
   26650:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   26654:	2000      	movs	r0, #0
   26656:	4770      	bx	lr
		return -EINVAL;
   26658:	f06f 0015 	mvn.w	r0, #21
}
   2665c:	4770      	bx	lr

0002665e <k_is_in_isr>:
   2665e:	f3ef 8005 	mrs	r0, IPSR
}
   26662:	3800      	subs	r0, #0
   26664:	bf18      	it	ne
   26666:	2001      	movne	r0, #1
   26668:	4770      	bx	lr

0002666a <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2666a:	f7ec b97f 	b.w	1296c <arch_busy_wait>

0002666e <z_impl_k_thread_name_set>:
}
   2666e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   26672:	4770      	bx	lr

00026674 <k_thread_name_get>:
}
   26674:	2000      	movs	r0, #0
   26676:	4770      	bx	lr

00026678 <z_abort_timeout>:
{
   26678:	b510      	push	{r4, lr}
	__asm__ volatile(
   2667a:	f04f 0220 	mov.w	r2, #32
   2667e:	f3ef 8411 	mrs	r4, BASEPRI
   26682:	f382 8811 	msr	BASEPRI, r2
   26686:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2668a:	6803      	ldr	r3, [r0, #0]
   2668c:	b13b      	cbz	r3, 2669e <z_abort_timeout+0x26>
			remove_timeout(to);
   2668e:	f7fa ff33 	bl	214f8 <remove_timeout>
			ret = 0;
   26692:	2000      	movs	r0, #0
	__asm__ volatile(
   26694:	f384 8811 	msr	BASEPRI, r4
   26698:	f3bf 8f6f 	isb	sy
}
   2669c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2669e:	f06f 0015 	mvn.w	r0, #21
   266a2:	e7f7      	b.n	26694 <z_abort_timeout+0x1c>

000266a4 <z_get_next_timeout_expiry>:
{
   266a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   266a6:	f04f 0320 	mov.w	r3, #32
   266aa:	f3ef 8411 	mrs	r4, BASEPRI
   266ae:	f383 8811 	msr	BASEPRI, r3
   266b2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   266b6:	f7fa ff33 	bl	21520 <next_timeout>
	__asm__ volatile(
   266ba:	f384 8811 	msr	BASEPRI, r4
   266be:	f3bf 8f6f 	isb	sy
}
   266c2:	bd10      	pop	{r4, pc}

000266c4 <z_set_timeout_expiry>:
{
   266c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   266c6:	4604      	mov	r4, r0
   266c8:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   266ca:	f04f 0320 	mov.w	r3, #32
   266ce:	f3ef 8511 	mrs	r5, BASEPRI
   266d2:	f383 8811 	msr	BASEPRI, r3
   266d6:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   266da:	f7fa ff21 	bl	21520 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   266de:	2801      	cmp	r0, #1
   266e0:	dd05      	ble.n	266ee <z_set_timeout_expiry+0x2a>
   266e2:	42a0      	cmp	r0, r4
   266e4:	9901      	ldr	r1, [sp, #4]
   266e6:	dd02      	ble.n	266ee <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   266e8:	4620      	mov	r0, r4
   266ea:	f7ed f9bd 	bl	13a68 <z_clock_set_timeout>
	__asm__ volatile(
   266ee:	f385 8811 	msr	BASEPRI, r5
   266f2:	f3bf 8f6f 	isb	sy
}
   266f6:	b003      	add	sp, #12
   266f8:	bd30      	pop	{r4, r5, pc}

000266fa <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   266fa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   266fc:	f7fa fffa 	bl	216f4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   26700:	bd08      	pop	{r3, pc}

00026702 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   26702:	f7fa bff7 	b.w	216f4 <z_tick_get>

00026706 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   26706:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26708:	1c4b      	adds	r3, r1, #1
   2670a:	bf08      	it	eq
   2670c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   26710:	4604      	mov	r4, r0
   26712:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26714:	d013      	beq.n	2673e <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26716:	ea54 0105 	orrs.w	r1, r4, r5
   2671a:	d103      	bne.n	26724 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   2671c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   26720:	f7fa bfe8 	b.w	216f4 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   26724:	f06f 0101 	mvn.w	r1, #1
   26728:	1a0a      	subs	r2, r1, r0
   2672a:	f04f 31ff 	mov.w	r1, #4294967295
   2672e:	eb61 0305 	sbc.w	r3, r1, r5
   26732:	2a00      	cmp	r2, #0
   26734:	f173 0100 	sbcs.w	r1, r3, #0
   26738:	db02      	blt.n	26740 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2673a:	4610      	mov	r0, r2
   2673c:	4619      	mov	r1, r3
}
   2673e:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   26740:	f7fa ffd8 	bl	216f4 <z_tick_get>
   26744:	2c01      	cmp	r4, #1
   26746:	f175 0300 	sbcs.w	r3, r5, #0
   2674a:	bfbc      	itt	lt
   2674c:	2401      	movlt	r4, #1
   2674e:	2500      	movlt	r5, #0
   26750:	1820      	adds	r0, r4, r0
   26752:	eb45 0101 	adc.w	r1, r5, r1
   26756:	e7f2      	b.n	2673e <z_timeout_end_calc+0x38>

00026758 <k_timer_init>:
	timer->status = 0U;
   26758:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2675a:	e9c0 1206 	strd	r1, r2, [r0, #24]
   2675e:	f100 0210 	add.w	r2, r0, #16
   26762:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   26766:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2676a:	6283      	str	r3, [r0, #40]	; 0x28
	timer->user_data = NULL;
   2676c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   2676e:	4770      	bx	lr

00026770 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   26770:	b510      	push	{r4, lr}
   26772:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   26774:	f7ff ff80 	bl	26678 <z_abort_timeout>

	if (inactive) {
   26778:	b9d8      	cbnz	r0, 267b2 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2677a:	69e3      	ldr	r3, [r4, #28]
   2677c:	b10b      	cbz	r3, 26782 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2677e:	4620      	mov	r0, r4
   26780:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   26782:	f104 0010 	add.w	r0, r4, #16
   26786:	2100      	movs	r1, #0
   26788:	f7ff fe35 	bl	263f6 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2678c:	4604      	mov	r4, r0
   2678e:	b180      	cbz	r0, 267b2 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   26790:	f7ff fe41 	bl	26416 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   26794:	4620      	mov	r0, r4
   26796:	f7ff fe9f 	bl	264d8 <z_ready_thread>
	__asm__ volatile(
   2679a:	f04f 0320 	mov.w	r3, #32
   2679e:	f3ef 8011 	mrs	r0, BASEPRI
   267a2:	f383 8811 	msr	BASEPRI, r3
   267a6:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   267aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   267ae:	f7ff be56 	b.w	2645e <z_reschedule_irqlock>
   267b2:	bd10      	pop	{r4, pc}

000267b4 <clear_event_registrations>:
	while (num_events--) {
   267b4:	2314      	movs	r3, #20
{
   267b6:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   267b8:	2400      	movs	r4, #0
   267ba:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   267be:	4281      	cmp	r1, r0
   267c0:	d100      	bne.n	267c4 <clear_event_registrations+0x10>
}
   267c2:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   267c4:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   267c8:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   267cc:	f003 030f 	and.w	r3, r3, #15
   267d0:	2b02      	cmp	r3, #2
   267d2:	d80a      	bhi.n	267ea <clear_event_registrations+0x36>
   267d4:	b15b      	cbz	r3, 267ee <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   267d6:	f851 3c14 	ldr.w	r3, [r1, #-20]
   267da:	b143      	cbz	r3, 267ee <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   267dc:	f851 5c10 	ldr.w	r5, [r1, #-16]
   267e0:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   267e2:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   267e4:	e941 4405 	strd	r4, r4, [r1, #-20]
	sys_dnode_init(node);
}
   267e8:	e001      	b.n	267ee <clear_event_registrations+0x3a>
	switch (event->type) {
   267ea:	2b04      	cmp	r3, #4
   267ec:	d0f3      	beq.n	267d6 <clear_event_registrations+0x22>
	__asm__ volatile(
   267ee:	f382 8811 	msr	BASEPRI, r2
   267f2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   267f6:	f04f 0320 	mov.w	r3, #32
   267fa:	f3ef 8211 	mrs	r2, BASEPRI
   267fe:	f383 8811 	msr	BASEPRI, r3
   26802:	f3bf 8f6f 	isb	sy
   26806:	3914      	subs	r1, #20
   26808:	e7d9      	b.n	267be <clear_event_registrations+0xa>

0002680a <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   2680a:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2680c:	6884      	ldr	r4, [r0, #8]
{
   2680e:	4605      	mov	r5, r0
   26810:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   26812:	b19c      	cbz	r4, 2683c <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   26814:	68a3      	ldr	r3, [r4, #8]
   26816:	b95b      	cbnz	r3, 26830 <signal_poll_event+0x26>
	int retcode = 0;
   26818:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   2681a:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2681c:	2300      	movs	r3, #0
   2681e:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   26820:	68eb      	ldr	r3, [r5, #12]
   26822:	f3c3 3104 	ubfx	r1, r3, #12, #5
   26826:	430e      	orrs	r6, r1
   26828:	f366 3310 	bfi	r3, r6, #12, #5
   2682c:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   2682e:	e004      	b.n	2683a <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   26830:	4798      	blx	r3
		poller->is_polling = false;
   26832:	2300      	movs	r3, #0
		if (retcode < 0) {
   26834:	2800      	cmp	r0, #0
		poller->is_polling = false;
   26836:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   26838:	daf0      	bge.n	2681c <signal_poll_event+0x12>
}
   2683a:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2683c:	4620      	mov	r0, r4
   2683e:	e7ed      	b.n	2681c <signal_poll_event+0x12>

00026840 <k_poll_poller_cb>:
{
   26840:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   26842:	6883      	ldr	r3, [r0, #8]
{
   26844:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   26846:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   26848:	7b63      	ldrb	r3, [r4, #13]
   2684a:	079a      	lsls	r2, r3, #30
   2684c:	d50e      	bpl.n	2686c <k_poll_poller_cb+0x2c>
	if (z_is_thread_timeout_expired(thread)) {
   2684e:	6a23      	ldr	r3, [r4, #32]
   26850:	3302      	adds	r3, #2
   26852:	d014      	beq.n	2687e <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   26854:	4620      	mov	r0, r4
   26856:	f7ff fe18 	bl	2648a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2685a:	2d08      	cmp	r5, #8
   2685c:	bf0c      	ite	eq
   2685e:	f06f 0303 	mvneq.w	r3, #3
   26862:	2300      	movne	r3, #0
   26864:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   26866:	7b63      	ldrb	r3, [r4, #13]
   26868:	06db      	lsls	r3, r3, #27
   2686a:	d001      	beq.n	26870 <k_poll_poller_cb+0x30>
		return 0;
   2686c:	2000      	movs	r0, #0
}
   2686e:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   26870:	69a5      	ldr	r5, [r4, #24]
   26872:	2d00      	cmp	r5, #0
   26874:	d1fa      	bne.n	2686c <k_poll_poller_cb+0x2c>
	z_ready_thread(thread);
   26876:	4620      	mov	r0, r4
   26878:	f7ff fe2e 	bl	264d8 <z_ready_thread>
	return 0;
   2687c:	e7f6      	b.n	2686c <k_poll_poller_cb+0x2c>
		return -EAGAIN;
   2687e:	f06f 000a 	mvn.w	r0, #10
   26882:	e7f4      	b.n	2686e <k_poll_poller_cb+0x2e>

00026884 <add_event>:
{
   26884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26886:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26888:	e9d0 2300 	ldrd	r2, r3, [r0]
   2688c:	4290      	cmp	r0, r2
   2688e:	4604      	mov	r4, r0
   26890:	460d      	mov	r5, r1
   26892:	d106      	bne.n	268a2 <add_event+0x1e>
	node->prev = list->tail;
   26894:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   26896:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   26898:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2689a:	6863      	ldr	r3, [r4, #4]
   2689c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2689e:	6065      	str	r5, [r4, #4]
}
   268a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   268a2:	2b00      	cmp	r3, #0
   268a4:	d0f6      	beq.n	26894 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   268a6:	689b      	ldr	r3, [r3, #8]
   268a8:	6879      	ldr	r1, [r7, #4]
   268aa:	6858      	ldr	r0, [r3, #4]
   268ac:	f7ff fd9a 	bl	263e4 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   268b0:	2800      	cmp	r0, #0
   268b2:	d1ef      	bne.n	26894 <add_event+0x10>
	return list->head == list;
   268b4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   268b6:	42b4      	cmp	r4, r6
   268b8:	d0ec      	beq.n	26894 <add_event+0x10>
   268ba:	2e00      	cmp	r6, #0
   268bc:	bf38      	it	cc
   268be:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   268c0:	2e00      	cmp	r6, #0
   268c2:	d0e7      	beq.n	26894 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   268c4:	68b3      	ldr	r3, [r6, #8]
   268c6:	6878      	ldr	r0, [r7, #4]
   268c8:	6859      	ldr	r1, [r3, #4]
   268ca:	f7ff fd8b 	bl	263e4 <z_is_t1_higher_prio_than_t2>
   268ce:	b128      	cbz	r0, 268dc <add_event+0x58>
	node->prev = successor->prev;
   268d0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   268d2:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   268d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   268d8:	6075      	str	r5, [r6, #4]
			return;
   268da:	e7e1      	b.n	268a0 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   268dc:	6863      	ldr	r3, [r4, #4]
   268de:	42b3      	cmp	r3, r6
   268e0:	d0d8      	beq.n	26894 <add_event+0x10>
   268e2:	6836      	ldr	r6, [r6, #0]
   268e4:	e7ec      	b.n	268c0 <add_event+0x3c>

000268e6 <register_events>:
{
   268e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   268ea:	f04f 0a00 	mov.w	sl, #0
{
   268ee:	460e      	mov	r6, r1
   268f0:	4614      	mov	r4, r2
   268f2:	461f      	mov	r7, r3
   268f4:	4683      	mov	fp, r0
	int events_registered = 0;
   268f6:	4655      	mov	r5, sl
	event->poller = NULL;
   268f8:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   268fa:	45b2      	cmp	sl, r6
   268fc:	db02      	blt.n	26904 <register_events+0x1e>
}
   268fe:	4628      	mov	r0, r5
   26900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26904:	f04f 0320 	mov.w	r3, #32
   26908:	f3ef 8911 	mrs	r9, BASEPRI
   2690c:	f383 8811 	msr	BASEPRI, r3
   26910:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   26914:	f89b 200d 	ldrb.w	r2, [fp, #13]
   26918:	f002 020f 	and.w	r2, r2, #15
   2691c:	2a02      	cmp	r2, #2
   2691e:	d006      	beq.n	2692e <register_events+0x48>
   26920:	2a04      	cmp	r2, #4
   26922:	d008      	beq.n	26936 <register_events+0x50>
   26924:	2a01      	cmp	r2, #1
   26926:	d120      	bne.n	2696a <register_events+0x84>
		if (event->signal->signaled != 0U) {
   26928:	f8db 3010 	ldr.w	r3, [fp, #16]
   2692c:	e001      	b.n	26932 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   2692e:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   26932:	689b      	ldr	r3, [r3, #8]
   26934:	e002      	b.n	2693c <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   26936:	f8db 3010 	ldr.w	r3, [fp, #16]
   2693a:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   2693c:	b1ab      	cbz	r3, 2696a <register_events+0x84>
	event->state |= state;
   2693e:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   26942:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   26946:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2694a:	430a      	orrs	r2, r1
   2694c:	f362 3310 	bfi	r3, r2, #12, #5
   26950:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   26954:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   26958:	f389 8811 	msr	BASEPRI, r9
   2695c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   26960:	f10a 0a01 	add.w	sl, sl, #1
   26964:	f10b 0b14 	add.w	fp, fp, #20
   26968:	e7c7      	b.n	268fa <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   2696a:	2f00      	cmp	r7, #0
   2696c:	d1f4      	bne.n	26958 <register_events+0x72>
   2696e:	7823      	ldrb	r3, [r4, #0]
   26970:	2b00      	cmp	r3, #0
   26972:	d0f1      	beq.n	26958 <register_events+0x72>
	switch (event->type) {
   26974:	f89b 300d 	ldrb.w	r3, [fp, #13]
   26978:	f003 030f 	and.w	r3, r3, #15
   2697c:	2b02      	cmp	r3, #2
   2697e:	d008      	beq.n	26992 <register_events+0xac>
   26980:	2b04      	cmp	r3, #4
   26982:	d006      	beq.n	26992 <register_events+0xac>
   26984:	2b01      	cmp	r3, #1
   26986:	d10b      	bne.n	269a0 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   26988:	4622      	mov	r2, r4
   2698a:	4659      	mov	r1, fp
   2698c:	f8db 0010 	ldr.w	r0, [fp, #16]
   26990:	e004      	b.n	2699c <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   26992:	4622      	mov	r2, r4
   26994:	4659      	mov	r1, fp
   26996:	f8db 0010 	ldr.w	r0, [fp, #16]
   2699a:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2699c:	f7ff ff72 	bl	26884 <add_event>
	event->poller = poller;
   269a0:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   269a4:	3501      	adds	r5, #1
   269a6:	e7d7      	b.n	26958 <register_events+0x72>

000269a8 <z_handle_obj_poll_events>:

void z_handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   269a8:	4603      	mov	r3, r0
	return list->head == list;
   269aa:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   269ac:	4283      	cmp	r3, r0
   269ae:	d008      	beq.n	269c2 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   269b0:	e9d0 3200 	ldrd	r3, r2, [r0]
   269b4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   269b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   269b8:	2300      	movs	r3, #0
	node->prev = NULL;
   269ba:	e9c0 3300 	strd	r3, r3, [r0]
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   269be:	f7ff bf24 	b.w	2680a <signal_poll_event>
	}
}
   269c2:	4770      	bx	lr

000269c4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   269c4:	4770      	bx	lr

000269c6 <atoi>:
   269c6:	220a      	movs	r2, #10
   269c8:	2100      	movs	r1, #0
   269ca:	f7fb bd09 	b.w	223e0 <strtol>

000269ce <memchr>:
   269ce:	b2c9      	uxtb	r1, r1
   269d0:	4402      	add	r2, r0
   269d2:	b510      	push	{r4, lr}
   269d4:	4290      	cmp	r0, r2
   269d6:	4603      	mov	r3, r0
   269d8:	d101      	bne.n	269de <memchr+0x10>
   269da:	2300      	movs	r3, #0
   269dc:	e003      	b.n	269e6 <memchr+0x18>
   269de:	781c      	ldrb	r4, [r3, #0]
   269e0:	3001      	adds	r0, #1
   269e2:	428c      	cmp	r4, r1
   269e4:	d1f6      	bne.n	269d4 <memchr+0x6>
   269e6:	4618      	mov	r0, r3
   269e8:	bd10      	pop	{r4, pc}

000269ea <memcmp>:
   269ea:	b530      	push	{r4, r5, lr}
   269ec:	3901      	subs	r1, #1
   269ee:	2400      	movs	r4, #0
   269f0:	42a2      	cmp	r2, r4
   269f2:	d101      	bne.n	269f8 <memcmp+0xe>
   269f4:	2000      	movs	r0, #0
   269f6:	e005      	b.n	26a04 <memcmp+0x1a>
   269f8:	5d03      	ldrb	r3, [r0, r4]
   269fa:	3401      	adds	r4, #1
   269fc:	5d0d      	ldrb	r5, [r1, r4]
   269fe:	42ab      	cmp	r3, r5
   26a00:	d0f6      	beq.n	269f0 <memcmp+0x6>
   26a02:	1b58      	subs	r0, r3, r5
   26a04:	bd30      	pop	{r4, r5, pc}

00026a06 <memcpy>:
   26a06:	440a      	add	r2, r1
   26a08:	1e43      	subs	r3, r0, #1
   26a0a:	4291      	cmp	r1, r2
   26a0c:	d100      	bne.n	26a10 <memcpy+0xa>
   26a0e:	4770      	bx	lr
   26a10:	b510      	push	{r4, lr}
   26a12:	f811 4b01 	ldrb.w	r4, [r1], #1
   26a16:	4291      	cmp	r1, r2
   26a18:	f803 4f01 	strb.w	r4, [r3, #1]!
   26a1c:	d1f9      	bne.n	26a12 <memcpy+0xc>
   26a1e:	bd10      	pop	{r4, pc}

00026a20 <memset>:
   26a20:	4402      	add	r2, r0
   26a22:	4603      	mov	r3, r0
   26a24:	4293      	cmp	r3, r2
   26a26:	d100      	bne.n	26a2a <memset+0xa>
   26a28:	4770      	bx	lr
   26a2a:	f803 1b01 	strb.w	r1, [r3], #1
   26a2e:	e7f9      	b.n	26a24 <memset+0x4>

00026a30 <__memset_chk>:
   26a30:	429a      	cmp	r2, r3
   26a32:	b508      	push	{r3, lr}
   26a34:	d901      	bls.n	26a3a <__memset_chk+0xa>
   26a36:	f7fb fe4f 	bl	226d8 <__chk_fail>
   26a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26a3e:	f7ff bfef 	b.w	26a20 <memset>

00026a42 <__sfputc_r>:
   26a42:	6893      	ldr	r3, [r2, #8]
   26a44:	3b01      	subs	r3, #1
   26a46:	2b00      	cmp	r3, #0
   26a48:	6093      	str	r3, [r2, #8]
   26a4a:	b410      	push	{r4}
   26a4c:	da08      	bge.n	26a60 <__sfputc_r+0x1e>
   26a4e:	6994      	ldr	r4, [r2, #24]
   26a50:	42a3      	cmp	r3, r4
   26a52:	db01      	blt.n	26a58 <__sfputc_r+0x16>
   26a54:	290a      	cmp	r1, #10
   26a56:	d103      	bne.n	26a60 <__sfputc_r+0x1e>
   26a58:	f85d 4b04 	ldr.w	r4, [sp], #4
   26a5c:	f7fb bd7c 	b.w	22558 <__swbuf_r>
   26a60:	6813      	ldr	r3, [r2, #0]
   26a62:	1c58      	adds	r0, r3, #1
   26a64:	6010      	str	r0, [r2, #0]
   26a66:	4608      	mov	r0, r1
   26a68:	7019      	strb	r1, [r3, #0]
   26a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   26a6e:	4770      	bx	lr

00026a70 <__sfputs_r>:
   26a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a72:	4606      	mov	r6, r0
   26a74:	460f      	mov	r7, r1
   26a76:	4614      	mov	r4, r2
   26a78:	18d5      	adds	r5, r2, r3
   26a7a:	42ac      	cmp	r4, r5
   26a7c:	d101      	bne.n	26a82 <__sfputs_r+0x12>
   26a7e:	2000      	movs	r0, #0
   26a80:	e007      	b.n	26a92 <__sfputs_r+0x22>
   26a82:	463a      	mov	r2, r7
   26a84:	f814 1b01 	ldrb.w	r1, [r4], #1
   26a88:	4630      	mov	r0, r6
   26a8a:	f7ff ffda 	bl	26a42 <__sfputc_r>
   26a8e:	1c43      	adds	r3, r0, #1
   26a90:	d1f3      	bne.n	26a7a <__sfputs_r+0xa>
   26a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026a94 <__cvt>:
   26a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   26a98:	ec55 4b10 	vmov	r4, r5, d0
   26a9c:	2d00      	cmp	r5, #0
   26a9e:	460e      	mov	r6, r1
   26aa0:	4619      	mov	r1, r3
   26aa2:	462b      	mov	r3, r5
   26aa4:	bfb4      	ite	lt
   26aa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   26aaa:	2300      	movge	r3, #0
   26aac:	4691      	mov	r9, r2
   26aae:	bfbf      	itttt	lt
   26ab0:	4622      	movlt	r2, r4
   26ab2:	461d      	movlt	r5, r3
   26ab4:	232d      	movlt	r3, #45	; 0x2d
   26ab6:	4614      	movlt	r4, r2
   26ab8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   26abc:	700b      	strb	r3, [r1, #0]
   26abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26ac0:	f023 0820 	bic.w	r8, r3, #32
   26ac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   26ac8:	d005      	beq.n	26ad6 <__cvt+0x42>
   26aca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   26ace:	d100      	bne.n	26ad2 <__cvt+0x3e>
   26ad0:	3601      	adds	r6, #1
   26ad2:	2102      	movs	r1, #2
   26ad4:	e000      	b.n	26ad8 <__cvt+0x44>
   26ad6:	2103      	movs	r1, #3
   26ad8:	ab03      	add	r3, sp, #12
   26ada:	4632      	mov	r2, r6
   26adc:	9301      	str	r3, [sp, #4]
   26ade:	ab02      	add	r3, sp, #8
   26ae0:	ec45 4b10 	vmov	d0, r4, r5
   26ae4:	9300      	str	r3, [sp, #0]
   26ae6:	4653      	mov	r3, sl
   26ae8:	f7e6 f9ca 	bl	ce80 <_dtoa_r>
   26aec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   26af0:	4607      	mov	r7, r0
   26af2:	d102      	bne.n	26afa <__cvt+0x66>
   26af4:	f019 0f01 	tst.w	r9, #1
   26af8:	d022      	beq.n	26b40 <__cvt+0xac>
   26afa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   26afe:	eb07 0906 	add.w	r9, r7, r6
   26b02:	d110      	bne.n	26b26 <__cvt+0x92>
   26b04:	783b      	ldrb	r3, [r7, #0]
   26b06:	2b30      	cmp	r3, #48	; 0x30
   26b08:	d10a      	bne.n	26b20 <__cvt+0x8c>
   26b0a:	2200      	movs	r2, #0
   26b0c:	2300      	movs	r3, #0
   26b0e:	4620      	mov	r0, r4
   26b10:	4629      	mov	r1, r5
   26b12:	f7e6 f933 	bl	cd7c <__aeabi_dcmpeq>
   26b16:	b918      	cbnz	r0, 26b20 <__cvt+0x8c>
   26b18:	f1c6 0601 	rsb	r6, r6, #1
   26b1c:	f8ca 6000 	str.w	r6, [sl]
   26b20:	f8da 3000 	ldr.w	r3, [sl]
   26b24:	4499      	add	r9, r3
   26b26:	2200      	movs	r2, #0
   26b28:	2300      	movs	r3, #0
   26b2a:	4620      	mov	r0, r4
   26b2c:	4629      	mov	r1, r5
   26b2e:	f7e6 f925 	bl	cd7c <__aeabi_dcmpeq>
   26b32:	b108      	cbz	r0, 26b38 <__cvt+0xa4>
   26b34:	f8cd 900c 	str.w	r9, [sp, #12]
   26b38:	2230      	movs	r2, #48	; 0x30
   26b3a:	9b03      	ldr	r3, [sp, #12]
   26b3c:	454b      	cmp	r3, r9
   26b3e:	d307      	bcc.n	26b50 <__cvt+0xbc>
   26b40:	9b03      	ldr	r3, [sp, #12]
   26b42:	4638      	mov	r0, r7
   26b44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26b46:	1bdb      	subs	r3, r3, r7
   26b48:	6013      	str	r3, [r2, #0]
   26b4a:	b004      	add	sp, #16
   26b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26b50:	1c59      	adds	r1, r3, #1
   26b52:	9103      	str	r1, [sp, #12]
   26b54:	701a      	strb	r2, [r3, #0]
   26b56:	e7f0      	b.n	26b3a <__cvt+0xa6>

00026b58 <__exponent>:
   26b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26b5a:	2900      	cmp	r1, #0
   26b5c:	4603      	mov	r3, r0
   26b5e:	bfb8      	it	lt
   26b60:	4249      	neglt	r1, r1
   26b62:	f803 2b02 	strb.w	r2, [r3], #2
   26b66:	bfb4      	ite	lt
   26b68:	222d      	movlt	r2, #45	; 0x2d
   26b6a:	222b      	movge	r2, #43	; 0x2b
   26b6c:	2909      	cmp	r1, #9
   26b6e:	7042      	strb	r2, [r0, #1]
   26b70:	dd2a      	ble.n	26bc8 <__exponent+0x70>
   26b72:	f10d 0407 	add.w	r4, sp, #7
   26b76:	270a      	movs	r7, #10
   26b78:	46a4      	mov	ip, r4
   26b7a:	460a      	mov	r2, r1
   26b7c:	46a6      	mov	lr, r4
   26b7e:	3c01      	subs	r4, #1
   26b80:	2a63      	cmp	r2, #99	; 0x63
   26b82:	fb91 f6f7 	sdiv	r6, r1, r7
   26b86:	fb07 1516 	mls	r5, r7, r6, r1
   26b8a:	4631      	mov	r1, r6
   26b8c:	f105 0530 	add.w	r5, r5, #48	; 0x30
   26b90:	f80e 5c01 	strb.w	r5, [lr, #-1]
   26b94:	dcf1      	bgt.n	26b7a <__exponent+0x22>
   26b96:	3130      	adds	r1, #48	; 0x30
   26b98:	f1ae 0502 	sub.w	r5, lr, #2
   26b9c:	f804 1c01 	strb.w	r1, [r4, #-1]
   26ba0:	1c44      	adds	r4, r0, #1
   26ba2:	4629      	mov	r1, r5
   26ba4:	4561      	cmp	r1, ip
   26ba6:	d30a      	bcc.n	26bbe <__exponent+0x66>
   26ba8:	f10d 0209 	add.w	r2, sp, #9
   26bac:	eba2 020e 	sub.w	r2, r2, lr
   26bb0:	4565      	cmp	r5, ip
   26bb2:	bf88      	it	hi
   26bb4:	2200      	movhi	r2, #0
   26bb6:	4413      	add	r3, r2
   26bb8:	1a18      	subs	r0, r3, r0
   26bba:	b003      	add	sp, #12
   26bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
   26bc2:	f804 2f01 	strb.w	r2, [r4, #1]!
   26bc6:	e7ed      	b.n	26ba4 <__exponent+0x4c>
   26bc8:	2330      	movs	r3, #48	; 0x30
   26bca:	3130      	adds	r1, #48	; 0x30
   26bcc:	7083      	strb	r3, [r0, #2]
   26bce:	1d03      	adds	r3, r0, #4
   26bd0:	70c1      	strb	r1, [r0, #3]
   26bd2:	e7f1      	b.n	26bb8 <__exponent+0x60>

00026bd4 <_printf_common>:
   26bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26bd8:	4616      	mov	r6, r2
   26bda:	4699      	mov	r9, r3
   26bdc:	688a      	ldr	r2, [r1, #8]
   26bde:	4607      	mov	r7, r0
   26be0:	690b      	ldr	r3, [r1, #16]
   26be2:	460c      	mov	r4, r1
   26be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
   26be8:	4293      	cmp	r3, r2
   26bea:	bfb8      	it	lt
   26bec:	4613      	movlt	r3, r2
   26bee:	6033      	str	r3, [r6, #0]
   26bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   26bf4:	b10a      	cbz	r2, 26bfa <_printf_common+0x26>
   26bf6:	3301      	adds	r3, #1
   26bf8:	6033      	str	r3, [r6, #0]
   26bfa:	6823      	ldr	r3, [r4, #0]
   26bfc:	0699      	lsls	r1, r3, #26
   26bfe:	bf42      	ittt	mi
   26c00:	6833      	ldrmi	r3, [r6, #0]
   26c02:	3302      	addmi	r3, #2
   26c04:	6033      	strmi	r3, [r6, #0]
   26c06:	6825      	ldr	r5, [r4, #0]
   26c08:	f015 0506 	ands.w	r5, r5, #6
   26c0c:	d106      	bne.n	26c1c <_printf_common+0x48>
   26c0e:	f104 0a19 	add.w	sl, r4, #25
   26c12:	68e3      	ldr	r3, [r4, #12]
   26c14:	6832      	ldr	r2, [r6, #0]
   26c16:	1a9b      	subs	r3, r3, r2
   26c18:	42ab      	cmp	r3, r5
   26c1a:	dc29      	bgt.n	26c70 <_printf_common+0x9c>
   26c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   26c20:	1e13      	subs	r3, r2, #0
   26c22:	6822      	ldr	r2, [r4, #0]
   26c24:	bf18      	it	ne
   26c26:	2301      	movne	r3, #1
   26c28:	0692      	lsls	r2, r2, #26
   26c2a:	d42e      	bmi.n	26c8a <_printf_common+0xb6>
   26c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   26c30:	4649      	mov	r1, r9
   26c32:	4638      	mov	r0, r7
   26c34:	47c0      	blx	r8
   26c36:	3001      	adds	r0, #1
   26c38:	d021      	beq.n	26c7e <_printf_common+0xaa>
   26c3a:	6823      	ldr	r3, [r4, #0]
   26c3c:	341a      	adds	r4, #26
   26c3e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   26c42:	f003 0306 	and.w	r3, r3, #6
   26c46:	6832      	ldr	r2, [r6, #0]
   26c48:	2600      	movs	r6, #0
   26c4a:	2b04      	cmp	r3, #4
   26c4c:	f854 3c12 	ldr.w	r3, [r4, #-18]
   26c50:	bf08      	it	eq
   26c52:	1aad      	subeq	r5, r5, r2
   26c54:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   26c58:	bf14      	ite	ne
   26c5a:	2500      	movne	r5, #0
   26c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   26c60:	4293      	cmp	r3, r2
   26c62:	bfc4      	itt	gt
   26c64:	1a9b      	subgt	r3, r3, r2
   26c66:	18ed      	addgt	r5, r5, r3
   26c68:	42b5      	cmp	r5, r6
   26c6a:	d11a      	bne.n	26ca2 <_printf_common+0xce>
   26c6c:	2000      	movs	r0, #0
   26c6e:	e008      	b.n	26c82 <_printf_common+0xae>
   26c70:	2301      	movs	r3, #1
   26c72:	4652      	mov	r2, sl
   26c74:	4649      	mov	r1, r9
   26c76:	4638      	mov	r0, r7
   26c78:	47c0      	blx	r8
   26c7a:	3001      	adds	r0, #1
   26c7c:	d103      	bne.n	26c86 <_printf_common+0xb2>
   26c7e:	f04f 30ff 	mov.w	r0, #4294967295
   26c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26c86:	3501      	adds	r5, #1
   26c88:	e7c3      	b.n	26c12 <_printf_common+0x3e>
   26c8a:	18e1      	adds	r1, r4, r3
   26c8c:	1c5a      	adds	r2, r3, #1
   26c8e:	2030      	movs	r0, #48	; 0x30
   26c90:	3302      	adds	r3, #2
   26c92:	4422      	add	r2, r4
   26c94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   26c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   26c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   26ca0:	e7c4      	b.n	26c2c <_printf_common+0x58>
   26ca2:	2301      	movs	r3, #1
   26ca4:	4622      	mov	r2, r4
   26ca6:	4649      	mov	r1, r9
   26ca8:	4638      	mov	r0, r7
   26caa:	47c0      	blx	r8
   26cac:	3001      	adds	r0, #1
   26cae:	d0e6      	beq.n	26c7e <_printf_common+0xaa>
   26cb0:	3601      	adds	r6, #1
   26cb2:	e7d9      	b.n	26c68 <_printf_common+0x94>

00026cb4 <__sprintf_chk>:
   26cb4:	b408      	push	{r3}
   26cb6:	b517      	push	{r0, r1, r2, r4, lr}
   26cb8:	ab05      	add	r3, sp, #20
   26cba:	1e14      	subs	r4, r2, #0
   26cbc:	f853 1b04 	ldr.w	r1, [r3], #4
   26cc0:	9301      	str	r3, [sp, #4]
   26cc2:	da07      	bge.n	26cd4 <__sprintf_chk+0x20>
   26cc4:	461a      	mov	r2, r3
   26cc6:	f7fb fc3d 	bl	22544 <vsiprintf>
   26cca:	b003      	add	sp, #12
   26ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26cd0:	b001      	add	sp, #4
   26cd2:	4770      	bx	lr
   26cd4:	460a      	mov	r2, r1
   26cd6:	4621      	mov	r1, r4
   26cd8:	f7fb fc10 	bl	224fc <vsniprintf>
   26cdc:	2800      	cmp	r0, #0
   26cde:	dbf4      	blt.n	26cca <__sprintf_chk+0x16>
   26ce0:	42a0      	cmp	r0, r4
   26ce2:	d3f2      	bcc.n	26cca <__sprintf_chk+0x16>
   26ce4:	f7fb fcf8 	bl	226d8 <__chk_fail>

00026ce8 <strchr>:
   26ce8:	b2c9      	uxtb	r1, r1
   26cea:	4603      	mov	r3, r0
   26cec:	f810 2b01 	ldrb.w	r2, [r0], #1
   26cf0:	b11a      	cbz	r2, 26cfa <strchr+0x12>
   26cf2:	428a      	cmp	r2, r1
   26cf4:	d1f9      	bne.n	26cea <strchr+0x2>
   26cf6:	4618      	mov	r0, r3
   26cf8:	4770      	bx	lr
   26cfa:	2900      	cmp	r1, #0
   26cfc:	bf18      	it	ne
   26cfe:	2300      	movne	r3, #0
   26d00:	e7f9      	b.n	26cf6 <strchr+0xe>

00026d02 <strcpy>:
   26d02:	4603      	mov	r3, r0
   26d04:	f811 2b01 	ldrb.w	r2, [r1], #1
   26d08:	f803 2b01 	strb.w	r2, [r3], #1
   26d0c:	2a00      	cmp	r2, #0
   26d0e:	d1f9      	bne.n	26d04 <strcpy+0x2>
   26d10:	4770      	bx	lr

00026d12 <__strcpy_chk>:
   26d12:	b570      	push	{r4, r5, r6, lr}
   26d14:	4605      	mov	r5, r0
   26d16:	4608      	mov	r0, r1
   26d18:	4616      	mov	r6, r2
   26d1a:	460c      	mov	r4, r1
   26d1c:	f7e6 f8a8 	bl	ce70 <strlen>
   26d20:	1c42      	adds	r2, r0, #1
   26d22:	42b2      	cmp	r2, r6
   26d24:	d901      	bls.n	26d2a <__strcpy_chk+0x18>
   26d26:	f7fb fcd7 	bl	226d8 <__chk_fail>
   26d2a:	42ac      	cmp	r4, r5
   26d2c:	d804      	bhi.n	26d38 <__strcpy_chk+0x26>
   26d2e:	18a3      	adds	r3, r4, r2
   26d30:	429d      	cmp	r5, r3
   26d32:	d3f8      	bcc.n	26d26 <__strcpy_chk+0x14>
   26d34:	42ac      	cmp	r4, r5
   26d36:	d102      	bne.n	26d3e <__strcpy_chk+0x2c>
   26d38:	18ab      	adds	r3, r5, r2
   26d3a:	429c      	cmp	r4, r3
   26d3c:	d3f3      	bcc.n	26d26 <__strcpy_chk+0x14>
   26d3e:	4621      	mov	r1, r4
   26d40:	4628      	mov	r0, r5
   26d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26d46:	f7ff be5e 	b.w	26a06 <memcpy>

00026d4a <strncmp>:
   26d4a:	b510      	push	{r4, lr}
   26d4c:	b16a      	cbz	r2, 26d6a <strncmp+0x20>
   26d4e:	3901      	subs	r1, #1
   26d50:	1884      	adds	r4, r0, r2
   26d52:	f810 3b01 	ldrb.w	r3, [r0], #1
   26d56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26d5a:	4293      	cmp	r3, r2
   26d5c:	d103      	bne.n	26d66 <strncmp+0x1c>
   26d5e:	42a0      	cmp	r0, r4
   26d60:	d001      	beq.n	26d66 <strncmp+0x1c>
   26d62:	2b00      	cmp	r3, #0
   26d64:	d1f5      	bne.n	26d52 <strncmp+0x8>
   26d66:	1a98      	subs	r0, r3, r2
   26d68:	bd10      	pop	{r4, pc}
   26d6a:	4610      	mov	r0, r2
   26d6c:	e7fc      	b.n	26d68 <strncmp+0x1e>

00026d6e <strncpy>:
   26d6e:	3901      	subs	r1, #1
   26d70:	4603      	mov	r3, r0
   26d72:	b510      	push	{r4, lr}
   26d74:	b132      	cbz	r2, 26d84 <strncpy+0x16>
   26d76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26d7a:	3a01      	subs	r2, #1
   26d7c:	f803 4b01 	strb.w	r4, [r3], #1
   26d80:	2c00      	cmp	r4, #0
   26d82:	d1f7      	bne.n	26d74 <strncpy+0x6>
   26d84:	441a      	add	r2, r3
   26d86:	2100      	movs	r1, #0
   26d88:	4293      	cmp	r3, r2
   26d8a:	d100      	bne.n	26d8e <strncpy+0x20>
   26d8c:	bd10      	pop	{r4, pc}
   26d8e:	f803 1b01 	strb.w	r1, [r3], #1
   26d92:	e7f9      	b.n	26d88 <strncpy+0x1a>

00026d94 <__strncpy_chk>:
   26d94:	429a      	cmp	r2, r3
   26d96:	b508      	push	{r3, lr}
   26d98:	d901      	bls.n	26d9e <__strncpy_chk+0xa>
   26d9a:	f7fb fc9d 	bl	226d8 <__chk_fail>
   26d9e:	4281      	cmp	r1, r0
   26da0:	d804      	bhi.n	26dac <__strncpy_chk+0x18>
   26da2:	188b      	adds	r3, r1, r2
   26da4:	4298      	cmp	r0, r3
   26da6:	d3f8      	bcc.n	26d9a <__strncpy_chk+0x6>
   26da8:	4281      	cmp	r1, r0
   26daa:	d102      	bne.n	26db2 <__strncpy_chk+0x1e>
   26dac:	1883      	adds	r3, r0, r2
   26dae:	4299      	cmp	r1, r3
   26db0:	d3f3      	bcc.n	26d9a <__strncpy_chk+0x6>
   26db2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26db6:	f7ff bfda 	b.w	26d6e <strncpy>

00026dba <strrchr>:
   26dba:	b538      	push	{r3, r4, r5, lr}
   26dbc:	4603      	mov	r3, r0
   26dbe:	460c      	mov	r4, r1
   26dc0:	b969      	cbnz	r1, 26dde <strrchr+0x24>
   26dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26dc6:	f7ff bf8f 	b.w	26ce8 <strchr>
   26dca:	1c43      	adds	r3, r0, #1
   26dcc:	4605      	mov	r5, r0
   26dce:	4621      	mov	r1, r4
   26dd0:	4618      	mov	r0, r3
   26dd2:	f7ff ff89 	bl	26ce8 <strchr>
   26dd6:	2800      	cmp	r0, #0
   26dd8:	d1f7      	bne.n	26dca <strrchr+0x10>
   26dda:	4628      	mov	r0, r5
   26ddc:	bd38      	pop	{r3, r4, r5, pc}
   26dde:	2500      	movs	r5, #0
   26de0:	e7f5      	b.n	26dce <strrchr+0x14>

00026de2 <strstr>:
   26de2:	b5f0      	push	{r4, r5, r6, r7, lr}
   26de4:	780c      	ldrb	r4, [r1, #0]
   26de6:	b164      	cbz	r4, 26e02 <strstr+0x20>
   26de8:	4603      	mov	r3, r0
   26dea:	781a      	ldrb	r2, [r3, #0]
   26dec:	4618      	mov	r0, r3
   26dee:	1c5e      	adds	r6, r3, #1
   26df0:	b90a      	cbnz	r2, 26df6 <strstr+0x14>
   26df2:	4610      	mov	r0, r2
   26df4:	e005      	b.n	26e02 <strstr+0x20>
   26df6:	4294      	cmp	r4, r2
   26df8:	d108      	bne.n	26e0c <strstr+0x2a>
   26dfa:	460d      	mov	r5, r1
   26dfc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   26e00:	b902      	cbnz	r2, 26e04 <strstr+0x22>
   26e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26e04:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   26e08:	4297      	cmp	r7, r2
   26e0a:	d0f7      	beq.n	26dfc <strstr+0x1a>
   26e0c:	4633      	mov	r3, r6
   26e0e:	e7ec      	b.n	26dea <strstr+0x8>

00026e10 <_vsniprintf_r>:
   26e10:	b530      	push	{r4, r5, lr}
   26e12:	1e14      	subs	r4, r2, #0
   26e14:	4605      	mov	r5, r0
   26e16:	b09b      	sub	sp, #108	; 0x6c
   26e18:	4618      	mov	r0, r3
   26e1a:	da05      	bge.n	26e28 <_vsniprintf_r+0x18>
   26e1c:	238b      	movs	r3, #139	; 0x8b
   26e1e:	f04f 30ff 	mov.w	r0, #4294967295
   26e22:	602b      	str	r3, [r5, #0]
   26e24:	b01b      	add	sp, #108	; 0x6c
   26e26:	bd30      	pop	{r4, r5, pc}
   26e28:	f44f 7302 	mov.w	r3, #520	; 0x208
   26e2c:	4602      	mov	r2, r0
   26e2e:	9100      	str	r1, [sp, #0]
   26e30:	4628      	mov	r0, r5
   26e32:	f8ad 300c 	strh.w	r3, [sp, #12]
   26e36:	bf14      	ite	ne
   26e38:	f104 33ff 	addne.w	r3, r4, #4294967295
   26e3c:	4623      	moveq	r3, r4
   26e3e:	9104      	str	r1, [sp, #16]
   26e40:	4669      	mov	r1, sp
   26e42:	9302      	str	r3, [sp, #8]
   26e44:	9305      	str	r3, [sp, #20]
   26e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26e4a:	f8ad 300e 	strh.w	r3, [sp, #14]
   26e4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   26e50:	f7fb ff2a 	bl	22ca8 <_svfiprintf_r>
   26e54:	1c43      	adds	r3, r0, #1
   26e56:	bfbc      	itt	lt
   26e58:	238b      	movlt	r3, #139	; 0x8b
   26e5a:	602b      	strlt	r3, [r5, #0]
   26e5c:	2c00      	cmp	r4, #0
   26e5e:	d0e1      	beq.n	26e24 <_vsniprintf_r+0x14>
   26e60:	9b00      	ldr	r3, [sp, #0]
   26e62:	2200      	movs	r2, #0
   26e64:	701a      	strb	r2, [r3, #0]
   26e66:	e7dd      	b.n	26e24 <_vsniprintf_r+0x14>

00026e68 <abort>:
   26e68:	2006      	movs	r0, #6
   26e6a:	b508      	push	{r3, lr}
   26e6c:	f7fc f82c 	bl	22ec8 <raise>
   26e70:	2001      	movs	r0, #1
   26e72:	f7ed fd9d 	bl	149b0 <_exit>

00026e76 <quorem>:
   26e76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e7a:	6903      	ldr	r3, [r0, #16]
   26e7c:	4607      	mov	r7, r0
   26e7e:	690c      	ldr	r4, [r1, #16]
   26e80:	42a3      	cmp	r3, r4
   26e82:	f2c0 8085 	blt.w	26f90 <quorem+0x11a>
   26e86:	3c01      	subs	r4, #1
   26e88:	f100 0514 	add.w	r5, r0, #20
   26e8c:	f101 0814 	add.w	r8, r1, #20
   26e90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   26e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   26e98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   26e9c:	9301      	str	r3, [sp, #4]
   26e9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   26ea2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   26ea6:	3301      	adds	r3, #1
   26ea8:	429a      	cmp	r2, r3
   26eaa:	fbb2 f6f3 	udiv	r6, r2, r3
   26eae:	d333      	bcc.n	26f18 <quorem+0xa2>
   26eb0:	f04f 0e00 	mov.w	lr, #0
   26eb4:	4640      	mov	r0, r8
   26eb6:	46ac      	mov	ip, r5
   26eb8:	46f2      	mov	sl, lr
   26eba:	f850 2b04 	ldr.w	r2, [r0], #4
   26ebe:	b293      	uxth	r3, r2
   26ec0:	4581      	cmp	r9, r0
   26ec2:	ea4f 4212 	mov.w	r2, r2, lsr #16
   26ec6:	fb06 e303 	mla	r3, r6, r3, lr
   26eca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   26ece:	b29b      	uxth	r3, r3
   26ed0:	fb06 e202 	mla	r2, r6, r2, lr
   26ed4:	ebaa 0303 	sub.w	r3, sl, r3
   26ed8:	f8dc a000 	ldr.w	sl, [ip]
   26edc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   26ee0:	fa1f fa8a 	uxth.w	sl, sl
   26ee4:	4453      	add	r3, sl
   26ee6:	fa1f fa82 	uxth.w	sl, r2
   26eea:	f8dc 2000 	ldr.w	r2, [ip]
   26eee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   26ef2:	eb02 4223 	add.w	r2, r2, r3, asr #16
   26ef6:	b29b      	uxth	r3, r3
   26ef8:	ea4f 4a22 	mov.w	sl, r2, asr #16
   26efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   26f00:	f84c 3b04 	str.w	r3, [ip], #4
   26f04:	d2d9      	bcs.n	26eba <quorem+0x44>
   26f06:	f855 300b 	ldr.w	r3, [r5, fp]
   26f0a:	b92b      	cbnz	r3, 26f18 <quorem+0xa2>
   26f0c:	9b01      	ldr	r3, [sp, #4]
   26f0e:	3b04      	subs	r3, #4
   26f10:	429d      	cmp	r5, r3
   26f12:	461a      	mov	r2, r3
   26f14:	d330      	bcc.n	26f78 <quorem+0x102>
   26f16:	613c      	str	r4, [r7, #16]
   26f18:	4638      	mov	r0, r7
   26f1a:	f000 fa8e 	bl	2743a <__mcmp>
   26f1e:	2800      	cmp	r0, #0
   26f20:	db26      	blt.n	26f70 <quorem+0xfa>
   26f22:	3601      	adds	r6, #1
   26f24:	4628      	mov	r0, r5
   26f26:	f04f 0c00 	mov.w	ip, #0
   26f2a:	f858 1b04 	ldr.w	r1, [r8], #4
   26f2e:	f8d0 e000 	ldr.w	lr, [r0]
   26f32:	b28b      	uxth	r3, r1
   26f34:	45c1      	cmp	r9, r8
   26f36:	fa1f f28e 	uxth.w	r2, lr
   26f3a:	ebac 0303 	sub.w	r3, ip, r3
   26f3e:	4413      	add	r3, r2
   26f40:	ea4f 4211 	mov.w	r2, r1, lsr #16
   26f44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   26f48:	eb02 4223 	add.w	r2, r2, r3, asr #16
   26f4c:	b29b      	uxth	r3, r3
   26f4e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   26f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   26f56:	f840 3b04 	str.w	r3, [r0], #4
   26f5a:	d2e6      	bcs.n	26f2a <quorem+0xb4>
   26f5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   26f60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   26f64:	b922      	cbnz	r2, 26f70 <quorem+0xfa>
   26f66:	3b04      	subs	r3, #4
   26f68:	429d      	cmp	r5, r3
   26f6a:	461a      	mov	r2, r3
   26f6c:	d30a      	bcc.n	26f84 <quorem+0x10e>
   26f6e:	613c      	str	r4, [r7, #16]
   26f70:	4630      	mov	r0, r6
   26f72:	b003      	add	sp, #12
   26f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f78:	6812      	ldr	r2, [r2, #0]
   26f7a:	3b04      	subs	r3, #4
   26f7c:	2a00      	cmp	r2, #0
   26f7e:	d1ca      	bne.n	26f16 <quorem+0xa0>
   26f80:	3c01      	subs	r4, #1
   26f82:	e7c5      	b.n	26f10 <quorem+0x9a>
   26f84:	6812      	ldr	r2, [r2, #0]
   26f86:	3b04      	subs	r3, #4
   26f88:	2a00      	cmp	r2, #0
   26f8a:	d1f0      	bne.n	26f6e <quorem+0xf8>
   26f8c:	3c01      	subs	r4, #1
   26f8e:	e7eb      	b.n	26f68 <quorem+0xf2>
   26f90:	2000      	movs	r0, #0
   26f92:	e7ee      	b.n	26f72 <quorem+0xfc>

00026f94 <__sfmoreglue>:
   26f94:	b570      	push	{r4, r5, r6, lr}
   26f96:	1e4a      	subs	r2, r1, #1
   26f98:	2568      	movs	r5, #104	; 0x68
   26f9a:	460e      	mov	r6, r1
   26f9c:	4355      	muls	r5, r2
   26f9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   26fa2:	f7fb fe27 	bl	22bf4 <_malloc_r>
   26fa6:	4604      	mov	r4, r0
   26fa8:	b140      	cbz	r0, 26fbc <__sfmoreglue+0x28>
   26faa:	2100      	movs	r1, #0
   26fac:	f105 0268 	add.w	r2, r5, #104	; 0x68
   26fb0:	e9c0 1600 	strd	r1, r6, [r0]
   26fb4:	300c      	adds	r0, #12
   26fb6:	60a0      	str	r0, [r4, #8]
   26fb8:	f7ff fd32 	bl	26a20 <memset>
   26fbc:	4620      	mov	r0, r4
   26fbe:	bd70      	pop	{r4, r5, r6, pc}

00026fc0 <_fwalk_reent>:
   26fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26fc4:	4606      	mov	r6, r0
   26fc6:	4688      	mov	r8, r1
   26fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
   26fcc:	2700      	movs	r7, #0
   26fce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   26fd2:	f1b9 0901 	subs.w	r9, r9, #1
   26fd6:	d505      	bpl.n	26fe4 <_fwalk_reent+0x24>
   26fd8:	6824      	ldr	r4, [r4, #0]
   26fda:	2c00      	cmp	r4, #0
   26fdc:	d1f7      	bne.n	26fce <_fwalk_reent+0xe>
   26fde:	4638      	mov	r0, r7
   26fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26fe4:	89ab      	ldrh	r3, [r5, #12]
   26fe6:	2b01      	cmp	r3, #1
   26fe8:	d907      	bls.n	26ffa <_fwalk_reent+0x3a>
   26fea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   26fee:	3301      	adds	r3, #1
   26ff0:	d003      	beq.n	26ffa <_fwalk_reent+0x3a>
   26ff2:	4629      	mov	r1, r5
   26ff4:	4630      	mov	r0, r6
   26ff6:	47c0      	blx	r8
   26ff8:	4307      	orrs	r7, r0
   26ffa:	3568      	adds	r5, #104	; 0x68
   26ffc:	e7e9      	b.n	26fd2 <_fwalk_reent+0x12>

00026ffe <__retarget_lock_init_recursive>:
   26ffe:	4770      	bx	lr

00027000 <__retarget_lock_acquire_recursive>:
   27000:	4770      	bx	lr

00027002 <__retarget_lock_release_recursive>:
   27002:	4770      	bx	lr

00027004 <__swhatbuf_r>:
   27004:	b570      	push	{r4, r5, r6, lr}
   27006:	460e      	mov	r6, r1
   27008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2700c:	b096      	sub	sp, #88	; 0x58
   2700e:	4614      	mov	r4, r2
   27010:	2900      	cmp	r1, #0
   27012:	461d      	mov	r5, r3
   27014:	da07      	bge.n	27026 <__swhatbuf_r+0x22>
   27016:	2300      	movs	r3, #0
   27018:	602b      	str	r3, [r5, #0]
   2701a:	89b3      	ldrh	r3, [r6, #12]
   2701c:	061a      	lsls	r2, r3, #24
   2701e:	d410      	bmi.n	27042 <__swhatbuf_r+0x3e>
   27020:	f44f 6380 	mov.w	r3, #1024	; 0x400
   27024:	e00e      	b.n	27044 <__swhatbuf_r+0x40>
   27026:	466a      	mov	r2, sp
   27028:	f7fb ff8a 	bl	22f40 <_fstat_r>
   2702c:	2800      	cmp	r0, #0
   2702e:	dbf2      	blt.n	27016 <__swhatbuf_r+0x12>
   27030:	9a01      	ldr	r2, [sp, #4]
   27032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   27036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   2703a:	425a      	negs	r2, r3
   2703c:	415a      	adcs	r2, r3
   2703e:	602a      	str	r2, [r5, #0]
   27040:	e7ee      	b.n	27020 <__swhatbuf_r+0x1c>
   27042:	2340      	movs	r3, #64	; 0x40
   27044:	2000      	movs	r0, #0
   27046:	6023      	str	r3, [r4, #0]
   27048:	b016      	add	sp, #88	; 0x58
   2704a:	bd70      	pop	{r4, r5, r6, pc}

0002704c <memmove>:
   2704c:	4288      	cmp	r0, r1
   2704e:	b510      	push	{r4, lr}
   27050:	eb01 0402 	add.w	r4, r1, r2
   27054:	d902      	bls.n	2705c <memmove+0x10>
   27056:	4284      	cmp	r4, r0
   27058:	4623      	mov	r3, r4
   2705a:	d807      	bhi.n	2706c <memmove+0x20>
   2705c:	1e43      	subs	r3, r0, #1
   2705e:	42a1      	cmp	r1, r4
   27060:	d008      	beq.n	27074 <memmove+0x28>
   27062:	f811 2b01 	ldrb.w	r2, [r1], #1
   27066:	f803 2f01 	strb.w	r2, [r3, #1]!
   2706a:	e7f8      	b.n	2705e <memmove+0x12>
   2706c:	4402      	add	r2, r0
   2706e:	4601      	mov	r1, r0
   27070:	428a      	cmp	r2, r1
   27072:	d100      	bne.n	27076 <memmove+0x2a>
   27074:	bd10      	pop	{r4, pc}
   27076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2707a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2707e:	e7f7      	b.n	27070 <memmove+0x24>

00027080 <_Balloc>:
   27080:	b570      	push	{r4, r5, r6, lr}
   27082:	6a46      	ldr	r6, [r0, #36]	; 0x24
   27084:	4604      	mov	r4, r0
   27086:	460d      	mov	r5, r1
   27088:	b93e      	cbnz	r6, 2709a <_Balloc+0x1a>
   2708a:	2010      	movs	r0, #16
   2708c:	f7fb fd0c 	bl	22aa8 <malloc>
   27090:	6260      	str	r0, [r4, #36]	; 0x24
   27092:	6006      	str	r6, [r0, #0]
   27094:	60c6      	str	r6, [r0, #12]
   27096:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2709a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2709c:	68f3      	ldr	r3, [r6, #12]
   2709e:	b183      	cbz	r3, 270c2 <_Balloc+0x42>
   270a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   270a2:	68db      	ldr	r3, [r3, #12]
   270a4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   270a8:	b9b8      	cbnz	r0, 270da <_Balloc+0x5a>
   270aa:	2101      	movs	r1, #1
   270ac:	4620      	mov	r0, r4
   270ae:	fa01 f605 	lsl.w	r6, r1, r5
   270b2:	1d72      	adds	r2, r6, #5
   270b4:	0092      	lsls	r2, r2, #2
   270b6:	f000 faa9 	bl	2760c <_calloc_r>
   270ba:	b160      	cbz	r0, 270d6 <_Balloc+0x56>
   270bc:	e9c0 5601 	strd	r5, r6, [r0, #4]
   270c0:	e00e      	b.n	270e0 <_Balloc+0x60>
   270c2:	2221      	movs	r2, #33	; 0x21
   270c4:	2104      	movs	r1, #4
   270c6:	4620      	mov	r0, r4
   270c8:	f000 faa0 	bl	2760c <_calloc_r>
   270cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   270ce:	60f0      	str	r0, [r6, #12]
   270d0:	68db      	ldr	r3, [r3, #12]
   270d2:	2b00      	cmp	r3, #0
   270d4:	d1e4      	bne.n	270a0 <_Balloc+0x20>
   270d6:	2000      	movs	r0, #0
   270d8:	bd70      	pop	{r4, r5, r6, pc}
   270da:	6802      	ldr	r2, [r0, #0]
   270dc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   270e0:	2300      	movs	r3, #0
   270e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
   270e6:	e7f7      	b.n	270d8 <_Balloc+0x58>

000270e8 <_Bfree>:
   270e8:	b570      	push	{r4, r5, r6, lr}
   270ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
   270ec:	4605      	mov	r5, r0
   270ee:	460c      	mov	r4, r1
   270f0:	b93e      	cbnz	r6, 27102 <_Bfree+0x1a>
   270f2:	2010      	movs	r0, #16
   270f4:	f7fb fcd8 	bl	22aa8 <malloc>
   270f8:	6268      	str	r0, [r5, #36]	; 0x24
   270fa:	6006      	str	r6, [r0, #0]
   270fc:	60c6      	str	r6, [r0, #12]
   270fe:	e9c0 6601 	strd	r6, r6, [r0, #4]
   27102:	b13c      	cbz	r4, 27114 <_Bfree+0x2c>
   27104:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27106:	6862      	ldr	r2, [r4, #4]
   27108:	68db      	ldr	r3, [r3, #12]
   2710a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2710e:	6021      	str	r1, [r4, #0]
   27110:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   27114:	bd70      	pop	{r4, r5, r6, pc}

00027116 <__multadd>:
   27116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2711a:	4607      	mov	r7, r0
   2711c:	4698      	mov	r8, r3
   2711e:	460c      	mov	r4, r1
   27120:	690e      	ldr	r6, [r1, #16]
   27122:	f101 0014 	add.w	r0, r1, #20
   27126:	2300      	movs	r3, #0
   27128:	6805      	ldr	r5, [r0, #0]
   2712a:	3301      	adds	r3, #1
   2712c:	b2a9      	uxth	r1, r5
   2712e:	429e      	cmp	r6, r3
   27130:	ea4f 4515 	mov.w	r5, r5, lsr #16
   27134:	fb02 8101 	mla	r1, r2, r1, r8
   27138:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   2713c:	b289      	uxth	r1, r1
   2713e:	fb02 c505 	mla	r5, r2, r5, ip
   27142:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   27146:	ea4f 4815 	mov.w	r8, r5, lsr #16
   2714a:	f840 1b04 	str.w	r1, [r0], #4
   2714e:	dceb      	bgt.n	27128 <__multadd+0x12>
   27150:	f1b8 0f00 	cmp.w	r8, #0
   27154:	d01b      	beq.n	2718e <__multadd+0x78>
   27156:	68a3      	ldr	r3, [r4, #8]
   27158:	42b3      	cmp	r3, r6
   2715a:	dc12      	bgt.n	27182 <__multadd+0x6c>
   2715c:	6861      	ldr	r1, [r4, #4]
   2715e:	4638      	mov	r0, r7
   27160:	3101      	adds	r1, #1
   27162:	f7ff ff8d 	bl	27080 <_Balloc>
   27166:	6922      	ldr	r2, [r4, #16]
   27168:	4605      	mov	r5, r0
   2716a:	f104 010c 	add.w	r1, r4, #12
   2716e:	3202      	adds	r2, #2
   27170:	300c      	adds	r0, #12
   27172:	0092      	lsls	r2, r2, #2
   27174:	f7ff fc47 	bl	26a06 <memcpy>
   27178:	4621      	mov	r1, r4
   2717a:	462c      	mov	r4, r5
   2717c:	4638      	mov	r0, r7
   2717e:	f7ff ffb3 	bl	270e8 <_Bfree>
   27182:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   27186:	3601      	adds	r6, #1
   27188:	f8c3 8014 	str.w	r8, [r3, #20]
   2718c:	6126      	str	r6, [r4, #16]
   2718e:	4620      	mov	r0, r4
   27190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027194 <__hi0bits>:
   27194:	0c03      	lsrs	r3, r0, #16
   27196:	041b      	lsls	r3, r3, #16
   27198:	b9d3      	cbnz	r3, 271d0 <__hi0bits+0x3c>
   2719a:	0400      	lsls	r0, r0, #16
   2719c:	2310      	movs	r3, #16
   2719e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   271a2:	bf04      	itt	eq
   271a4:	0200      	lsleq	r0, r0, #8
   271a6:	3308      	addeq	r3, #8
   271a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   271ac:	bf04      	itt	eq
   271ae:	0100      	lsleq	r0, r0, #4
   271b0:	3304      	addeq	r3, #4
   271b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   271b6:	bf04      	itt	eq
   271b8:	0080      	lsleq	r0, r0, #2
   271ba:	3302      	addeq	r3, #2
   271bc:	2800      	cmp	r0, #0
   271be:	db05      	blt.n	271cc <__hi0bits+0x38>
   271c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   271c4:	f103 0301 	add.w	r3, r3, #1
   271c8:	bf08      	it	eq
   271ca:	2320      	moveq	r3, #32
   271cc:	4618      	mov	r0, r3
   271ce:	4770      	bx	lr
   271d0:	2300      	movs	r3, #0
   271d2:	e7e4      	b.n	2719e <__hi0bits+0xa>

000271d4 <__lo0bits>:
   271d4:	6803      	ldr	r3, [r0, #0]
   271d6:	4601      	mov	r1, r0
   271d8:	f013 0207 	ands.w	r2, r3, #7
   271dc:	d00b      	beq.n	271f6 <__lo0bits+0x22>
   271de:	07da      	lsls	r2, r3, #31
   271e0:	d424      	bmi.n	2722c <__lo0bits+0x58>
   271e2:	0798      	lsls	r0, r3, #30
   271e4:	bf47      	ittee	mi
   271e6:	085b      	lsrmi	r3, r3, #1
   271e8:	2001      	movmi	r0, #1
   271ea:	089b      	lsrpl	r3, r3, #2
   271ec:	2002      	movpl	r0, #2
   271ee:	bf4c      	ite	mi
   271f0:	600b      	strmi	r3, [r1, #0]
   271f2:	600b      	strpl	r3, [r1, #0]
   271f4:	4770      	bx	lr
   271f6:	b298      	uxth	r0, r3
   271f8:	b9b0      	cbnz	r0, 27228 <__lo0bits+0x54>
   271fa:	0c1b      	lsrs	r3, r3, #16
   271fc:	2010      	movs	r0, #16
   271fe:	f013 0fff 	tst.w	r3, #255	; 0xff
   27202:	bf04      	itt	eq
   27204:	0a1b      	lsreq	r3, r3, #8
   27206:	3008      	addeq	r0, #8
   27208:	071a      	lsls	r2, r3, #28
   2720a:	bf04      	itt	eq
   2720c:	091b      	lsreq	r3, r3, #4
   2720e:	3004      	addeq	r0, #4
   27210:	079a      	lsls	r2, r3, #30
   27212:	bf04      	itt	eq
   27214:	089b      	lsreq	r3, r3, #2
   27216:	3002      	addeq	r0, #2
   27218:	07da      	lsls	r2, r3, #31
   2721a:	d403      	bmi.n	27224 <__lo0bits+0x50>
   2721c:	085b      	lsrs	r3, r3, #1
   2721e:	f100 0001 	add.w	r0, r0, #1
   27222:	d005      	beq.n	27230 <__lo0bits+0x5c>
   27224:	600b      	str	r3, [r1, #0]
   27226:	4770      	bx	lr
   27228:	4610      	mov	r0, r2
   2722a:	e7e8      	b.n	271fe <__lo0bits+0x2a>
   2722c:	2000      	movs	r0, #0
   2722e:	4770      	bx	lr
   27230:	2020      	movs	r0, #32
   27232:	4770      	bx	lr

00027234 <__i2b>:
   27234:	b510      	push	{r4, lr}
   27236:	460c      	mov	r4, r1
   27238:	2101      	movs	r1, #1
   2723a:	f7ff ff21 	bl	27080 <_Balloc>
   2723e:	2201      	movs	r2, #1
   27240:	6144      	str	r4, [r0, #20]
   27242:	6102      	str	r2, [r0, #16]
   27244:	bd10      	pop	{r4, pc}

00027246 <__multiply>:
   27246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2724a:	4615      	mov	r5, r2
   2724c:	690a      	ldr	r2, [r1, #16]
   2724e:	460c      	mov	r4, r1
   27250:	b085      	sub	sp, #20
   27252:	692b      	ldr	r3, [r5, #16]
   27254:	429a      	cmp	r2, r3
   27256:	bfbe      	ittt	lt
   27258:	460b      	movlt	r3, r1
   2725a:	462c      	movlt	r4, r5
   2725c:	461d      	movlt	r5, r3
   2725e:	6927      	ldr	r7, [r4, #16]
   27260:	68a3      	ldr	r3, [r4, #8]
   27262:	f8d5 9010 	ldr.w	r9, [r5, #16]
   27266:	6861      	ldr	r1, [r4, #4]
   27268:	eb07 0609 	add.w	r6, r7, r9
   2726c:	42b3      	cmp	r3, r6
   2726e:	bfb8      	it	lt
   27270:	3101      	addlt	r1, #1
   27272:	f7ff ff05 	bl	27080 <_Balloc>
   27276:	f100 0114 	add.w	r1, r0, #20
   2727a:	2200      	movs	r2, #0
   2727c:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   27280:	460b      	mov	r3, r1
   27282:	4543      	cmp	r3, r8
   27284:	d31d      	bcc.n	272c2 <__multiply+0x7c>
   27286:	f104 0314 	add.w	r3, r4, #20
   2728a:	f105 0214 	add.w	r2, r5, #20
   2728e:	f104 0515 	add.w	r5, r4, #21
   27292:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   27296:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   2729a:	9302      	str	r3, [sp, #8]
   2729c:	1b3b      	subs	r3, r7, r4
   2729e:	3b15      	subs	r3, #21
   272a0:	f023 0303 	bic.w	r3, r3, #3
   272a4:	3304      	adds	r3, #4
   272a6:	42af      	cmp	r7, r5
   272a8:	bf38      	it	cc
   272aa:	2304      	movcc	r3, #4
   272ac:	9301      	str	r3, [sp, #4]
   272ae:	9b02      	ldr	r3, [sp, #8]
   272b0:	9203      	str	r2, [sp, #12]
   272b2:	4293      	cmp	r3, r2
   272b4:	d808      	bhi.n	272c8 <__multiply+0x82>
   272b6:	2e00      	cmp	r6, #0
   272b8:	dc5a      	bgt.n	27370 <__multiply+0x12a>
   272ba:	6106      	str	r6, [r0, #16]
   272bc:	b005      	add	sp, #20
   272be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272c2:	f843 2b04 	str.w	r2, [r3], #4
   272c6:	e7dc      	b.n	27282 <__multiply+0x3c>
   272c8:	f8b2 a000 	ldrh.w	sl, [r2]
   272cc:	f1ba 0f00 	cmp.w	sl, #0
   272d0:	d024      	beq.n	2731c <__multiply+0xd6>
   272d2:	f104 0e14 	add.w	lr, r4, #20
   272d6:	4689      	mov	r9, r1
   272d8:	f04f 0c00 	mov.w	ip, #0
   272dc:	f85e 5b04 	ldr.w	r5, [lr], #4
   272e0:	f8d9 b000 	ldr.w	fp, [r9]
   272e4:	b2ab      	uxth	r3, r5
   272e6:	4577      	cmp	r7, lr
   272e8:	fa1f fb8b 	uxth.w	fp, fp
   272ec:	fb0a b303 	mla	r3, sl, r3, fp
   272f0:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   272f4:	f8d9 5000 	ldr.w	r5, [r9]
   272f8:	4463      	add	r3, ip
   272fa:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   272fe:	fb0a c50b 	mla	r5, sl, fp, ip
   27302:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   27306:	b29b      	uxth	r3, r3
   27308:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   2730c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   27310:	f849 3b04 	str.w	r3, [r9], #4
   27314:	d8e2      	bhi.n	272dc <__multiply+0x96>
   27316:	9b01      	ldr	r3, [sp, #4]
   27318:	f841 c003 	str.w	ip, [r1, r3]
   2731c:	9b03      	ldr	r3, [sp, #12]
   2731e:	3204      	adds	r2, #4
   27320:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   27324:	f1b9 0f00 	cmp.w	r9, #0
   27328:	d020      	beq.n	2736c <__multiply+0x126>
   2732a:	680b      	ldr	r3, [r1, #0]
   2732c:	f104 0c14 	add.w	ip, r4, #20
   27330:	468e      	mov	lr, r1
   27332:	f04f 0a00 	mov.w	sl, #0
   27336:	f8bc 5000 	ldrh.w	r5, [ip]
   2733a:	b29b      	uxth	r3, r3
   2733c:	f8be b002 	ldrh.w	fp, [lr, #2]
   27340:	fb09 b505 	mla	r5, r9, r5, fp
   27344:	44aa      	add	sl, r5
   27346:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   2734a:	f84e 3b04 	str.w	r3, [lr], #4
   2734e:	f85c 3b04 	ldr.w	r3, [ip], #4
   27352:	f8be 5000 	ldrh.w	r5, [lr]
   27356:	0c1b      	lsrs	r3, r3, #16
   27358:	4567      	cmp	r7, ip
   2735a:	fb09 5303 	mla	r3, r9, r3, r5
   2735e:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   27362:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   27366:	d8e6      	bhi.n	27336 <__multiply+0xf0>
   27368:	9d01      	ldr	r5, [sp, #4]
   2736a:	514b      	str	r3, [r1, r5]
   2736c:	3104      	adds	r1, #4
   2736e:	e79e      	b.n	272ae <__multiply+0x68>
   27370:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   27374:	2b00      	cmp	r3, #0
   27376:	d1a0      	bne.n	272ba <__multiply+0x74>
   27378:	3e01      	subs	r6, #1
   2737a:	e79c      	b.n	272b6 <__multiply+0x70>

0002737c <__lshift>:
   2737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27380:	460c      	mov	r4, r1
   27382:	4607      	mov	r7, r0
   27384:	4691      	mov	r9, r2
   27386:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2738a:	6923      	ldr	r3, [r4, #16]
   2738c:	6849      	ldr	r1, [r1, #4]
   2738e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   27392:	68a3      	ldr	r3, [r4, #8]
   27394:	f108 0601 	add.w	r6, r8, #1
   27398:	42b3      	cmp	r3, r6
   2739a:	db3f      	blt.n	2741c <__lshift+0xa0>
   2739c:	4638      	mov	r0, r7
   2739e:	f7ff fe6f 	bl	27080 <_Balloc>
   273a2:	2300      	movs	r3, #0
   273a4:	4605      	mov	r5, r0
   273a6:	f100 0114 	add.w	r1, r0, #20
   273aa:	f100 0210 	add.w	r2, r0, #16
   273ae:	4618      	mov	r0, r3
   273b0:	4553      	cmp	r3, sl
   273b2:	db36      	blt.n	27422 <__lshift+0xa6>
   273b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   273b8:	f104 0314 	add.w	r3, r4, #20
   273bc:	6920      	ldr	r0, [r4, #16]
   273be:	f019 091f 	ands.w	r9, r9, #31
   273c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   273c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   273ca:	d02e      	beq.n	2742a <__lshift+0xae>
   273cc:	f1c9 0e20 	rsb	lr, r9, #32
   273d0:	468a      	mov	sl, r1
   273d2:	2200      	movs	r2, #0
   273d4:	6818      	ldr	r0, [r3, #0]
   273d6:	fa00 f009 	lsl.w	r0, r0, r9
   273da:	4302      	orrs	r2, r0
   273dc:	f84a 2b04 	str.w	r2, [sl], #4
   273e0:	f853 2b04 	ldr.w	r2, [r3], #4
   273e4:	459c      	cmp	ip, r3
   273e6:	fa22 f20e 	lsr.w	r2, r2, lr
   273ea:	d8f3      	bhi.n	273d4 <__lshift+0x58>
   273ec:	ebac 0304 	sub.w	r3, ip, r4
   273f0:	f104 0015 	add.w	r0, r4, #21
   273f4:	3b15      	subs	r3, #21
   273f6:	f023 0303 	bic.w	r3, r3, #3
   273fa:	3304      	adds	r3, #4
   273fc:	4560      	cmp	r0, ip
   273fe:	bf88      	it	hi
   27400:	2304      	movhi	r3, #4
   27402:	50ca      	str	r2, [r1, r3]
   27404:	b10a      	cbz	r2, 2740a <__lshift+0x8e>
   27406:	f108 0602 	add.w	r6, r8, #2
   2740a:	3e01      	subs	r6, #1
   2740c:	4638      	mov	r0, r7
   2740e:	4621      	mov	r1, r4
   27410:	612e      	str	r6, [r5, #16]
   27412:	f7ff fe69 	bl	270e8 <_Bfree>
   27416:	4628      	mov	r0, r5
   27418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2741c:	3101      	adds	r1, #1
   2741e:	005b      	lsls	r3, r3, #1
   27420:	e7ba      	b.n	27398 <__lshift+0x1c>
   27422:	3301      	adds	r3, #1
   27424:	f842 0f04 	str.w	r0, [r2, #4]!
   27428:	e7c2      	b.n	273b0 <__lshift+0x34>
   2742a:	3904      	subs	r1, #4
   2742c:	f853 2b04 	ldr.w	r2, [r3], #4
   27430:	459c      	cmp	ip, r3
   27432:	f841 2f04 	str.w	r2, [r1, #4]!
   27436:	d8f9      	bhi.n	2742c <__lshift+0xb0>
   27438:	e7e7      	b.n	2740a <__lshift+0x8e>

0002743a <__mcmp>:
   2743a:	6902      	ldr	r2, [r0, #16]
   2743c:	b530      	push	{r4, r5, lr}
   2743e:	690c      	ldr	r4, [r1, #16]
   27440:	1b12      	subs	r2, r2, r4
   27442:	d10e      	bne.n	27462 <__mcmp+0x28>
   27444:	f100 0314 	add.w	r3, r0, #20
   27448:	3114      	adds	r1, #20
   2744a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   2744e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   27452:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   27456:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2745a:	42a5      	cmp	r5, r4
   2745c:	d003      	beq.n	27466 <__mcmp+0x2c>
   2745e:	d305      	bcc.n	2746c <__mcmp+0x32>
   27460:	2201      	movs	r2, #1
   27462:	4610      	mov	r0, r2
   27464:	bd30      	pop	{r4, r5, pc}
   27466:	4283      	cmp	r3, r0
   27468:	d3f3      	bcc.n	27452 <__mcmp+0x18>
   2746a:	e7fa      	b.n	27462 <__mcmp+0x28>
   2746c:	f04f 32ff 	mov.w	r2, #4294967295
   27470:	e7f7      	b.n	27462 <__mcmp+0x28>

00027472 <__mdiff>:
   27472:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27476:	460c      	mov	r4, r1
   27478:	4606      	mov	r6, r0
   2747a:	4611      	mov	r1, r2
   2747c:	4692      	mov	sl, r2
   2747e:	4620      	mov	r0, r4
   27480:	f7ff ffdb 	bl	2743a <__mcmp>
   27484:	1e05      	subs	r5, r0, #0
   27486:	d108      	bne.n	2749a <__mdiff+0x28>
   27488:	4629      	mov	r1, r5
   2748a:	4630      	mov	r0, r6
   2748c:	f7ff fdf8 	bl	27080 <_Balloc>
   27490:	2301      	movs	r3, #1
   27492:	e9c0 3504 	strd	r3, r5, [r0, #16]
   27496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2749a:	bfa3      	ittte	ge
   2749c:	4653      	movge	r3, sl
   2749e:	46a2      	movge	sl, r4
   274a0:	2500      	movge	r5, #0
   274a2:	2501      	movlt	r5, #1
   274a4:	bfa8      	it	ge
   274a6:	461c      	movge	r4, r3
   274a8:	f8da 1004 	ldr.w	r1, [sl, #4]
   274ac:	4630      	mov	r0, r6
   274ae:	f7ff fde7 	bl	27080 <_Balloc>
   274b2:	f104 0914 	add.w	r9, r4, #20
   274b6:	f8da 7010 	ldr.w	r7, [sl, #16]
   274ba:	f100 0814 	add.w	r8, r0, #20
   274be:	6926      	ldr	r6, [r4, #16]
   274c0:	f10a 0210 	add.w	r2, sl, #16
   274c4:	60c5      	str	r5, [r0, #12]
   274c6:	f10a 0514 	add.w	r5, sl, #20
   274ca:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   274ce:	46c2      	mov	sl, r8
   274d0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   274d4:	f04f 0c00 	mov.w	ip, #0
   274d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   274dc:	f859 3b04 	ldr.w	r3, [r9], #4
   274e0:	fa1f f18b 	uxth.w	r1, fp
   274e4:	454e      	cmp	r6, r9
   274e6:	4461      	add	r1, ip
   274e8:	fa1f fc83 	uxth.w	ip, r3
   274ec:	ea4f 4313 	mov.w	r3, r3, lsr #16
   274f0:	eba1 010c 	sub.w	r1, r1, ip
   274f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   274f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
   274fc:	b289      	uxth	r1, r1
   274fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
   27502:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   27506:	f84a 3b04 	str.w	r3, [sl], #4
   2750a:	d8e5      	bhi.n	274d8 <__mdiff+0x66>
   2750c:	1b33      	subs	r3, r6, r4
   2750e:	3415      	adds	r4, #21
   27510:	3b15      	subs	r3, #21
   27512:	f023 0303 	bic.w	r3, r3, #3
   27516:	3304      	adds	r3, #4
   27518:	42a6      	cmp	r6, r4
   2751a:	bf38      	it	cc
   2751c:	2304      	movcc	r3, #4
   2751e:	441d      	add	r5, r3
   27520:	4443      	add	r3, r8
   27522:	462c      	mov	r4, r5
   27524:	461e      	mov	r6, r3
   27526:	4574      	cmp	r4, lr
   27528:	d30e      	bcc.n	27548 <__mdiff+0xd6>
   2752a:	f10e 0203 	add.w	r2, lr, #3
   2752e:	1b52      	subs	r2, r2, r5
   27530:	3d03      	subs	r5, #3
   27532:	f022 0203 	bic.w	r2, r2, #3
   27536:	45ae      	cmp	lr, r5
   27538:	bf38      	it	cc
   2753a:	2200      	movcc	r2, #0
   2753c:	441a      	add	r2, r3
   2753e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   27542:	b18b      	cbz	r3, 27568 <__mdiff+0xf6>
   27544:	6107      	str	r7, [r0, #16]
   27546:	e7a6      	b.n	27496 <__mdiff+0x24>
   27548:	f854 8b04 	ldr.w	r8, [r4], #4
   2754c:	fa1f f288 	uxth.w	r2, r8
   27550:	4462      	add	r2, ip
   27552:	1411      	asrs	r1, r2, #16
   27554:	b292      	uxth	r2, r2
   27556:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   2755a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   2755e:	ea4f 4c21 	mov.w	ip, r1, asr #16
   27562:	f846 2b04 	str.w	r2, [r6], #4
   27566:	e7de      	b.n	27526 <__mdiff+0xb4>
   27568:	3f01      	subs	r7, #1
   2756a:	e7e8      	b.n	2753e <__mdiff+0xcc>

0002756c <__d2b>:
   2756c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27570:	ec57 6b10 	vmov	r6, r7, d0
   27574:	f3c7 550a 	ubfx	r5, r7, #20, #11
   27578:	4689      	mov	r9, r1
   2757a:	2101      	movs	r1, #1
   2757c:	4690      	mov	r8, r2
   2757e:	f7ff fd7f 	bl	27080 <_Balloc>
   27582:	f3c7 0313 	ubfx	r3, r7, #0, #20
   27586:	4604      	mov	r4, r0
   27588:	bb35      	cbnz	r5, 275d8 <__d2b+0x6c>
   2758a:	2e00      	cmp	r6, #0
   2758c:	9301      	str	r3, [sp, #4]
   2758e:	d028      	beq.n	275e2 <__d2b+0x76>
   27590:	4668      	mov	r0, sp
   27592:	9600      	str	r6, [sp, #0]
   27594:	f7ff fe1e 	bl	271d4 <__lo0bits>
   27598:	9900      	ldr	r1, [sp, #0]
   2759a:	b300      	cbz	r0, 275de <__d2b+0x72>
   2759c:	9a01      	ldr	r2, [sp, #4]
   2759e:	f1c0 0320 	rsb	r3, r0, #32
   275a2:	fa02 f303 	lsl.w	r3, r2, r3
   275a6:	40c2      	lsrs	r2, r0
   275a8:	430b      	orrs	r3, r1
   275aa:	9201      	str	r2, [sp, #4]
   275ac:	6163      	str	r3, [r4, #20]
   275ae:	9b01      	ldr	r3, [sp, #4]
   275b0:	2b00      	cmp	r3, #0
   275b2:	61a3      	str	r3, [r4, #24]
   275b4:	bf14      	ite	ne
   275b6:	2202      	movne	r2, #2
   275b8:	2201      	moveq	r2, #1
   275ba:	6122      	str	r2, [r4, #16]
   275bc:	b1d5      	cbz	r5, 275f4 <__d2b+0x88>
   275be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   275c2:	4405      	add	r5, r0
   275c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   275c8:	f8c9 5000 	str.w	r5, [r9]
   275cc:	f8c8 0000 	str.w	r0, [r8]
   275d0:	4620      	mov	r0, r4
   275d2:	b003      	add	sp, #12
   275d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   275d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   275dc:	e7d5      	b.n	2758a <__d2b+0x1e>
   275de:	6161      	str	r1, [r4, #20]
   275e0:	e7e5      	b.n	275ae <__d2b+0x42>
   275e2:	a801      	add	r0, sp, #4
   275e4:	f7ff fdf6 	bl	271d4 <__lo0bits>
   275e8:	9b01      	ldr	r3, [sp, #4]
   275ea:	2201      	movs	r2, #1
   275ec:	3020      	adds	r0, #32
   275ee:	6163      	str	r3, [r4, #20]
   275f0:	6122      	str	r2, [r4, #16]
   275f2:	e7e3      	b.n	275bc <__d2b+0x50>
   275f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   275f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   275fc:	f8c9 0000 	str.w	r0, [r9]
   27600:	6918      	ldr	r0, [r3, #16]
   27602:	f7ff fdc7 	bl	27194 <__hi0bits>
   27606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2760a:	e7df      	b.n	275cc <__d2b+0x60>

0002760c <_calloc_r>:
   2760c:	434a      	muls	r2, r1
   2760e:	b513      	push	{r0, r1, r4, lr}
   27610:	4611      	mov	r1, r2
   27612:	9201      	str	r2, [sp, #4]
   27614:	f7fb faee 	bl	22bf4 <_malloc_r>
   27618:	4604      	mov	r4, r0
   2761a:	b118      	cbz	r0, 27624 <_calloc_r+0x18>
   2761c:	9a01      	ldr	r2, [sp, #4]
   2761e:	2100      	movs	r1, #0
   27620:	f7ff f9fe 	bl	26a20 <memset>
   27624:	4620      	mov	r0, r4
   27626:	b002      	add	sp, #8
   27628:	bd10      	pop	{r4, pc}

0002762a <_realloc_r>:
   2762a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2762c:	4607      	mov	r7, r0
   2762e:	4614      	mov	r4, r2
   27630:	460e      	mov	r6, r1
   27632:	b921      	cbnz	r1, 2763e <_realloc_r+0x14>
   27634:	4611      	mov	r1, r2
   27636:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2763a:	f7fb badb 	b.w	22bf4 <_malloc_r>
   2763e:	b922      	cbnz	r2, 2764a <_realloc_r+0x20>
   27640:	4625      	mov	r5, r4
   27642:	f7fb fa87 	bl	22b54 <_free_r>
   27646:	4628      	mov	r0, r5
   27648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2764a:	f000 f8ee 	bl	2782a <_malloc_usable_size_r>
   2764e:	42a0      	cmp	r0, r4
   27650:	d20f      	bcs.n	27672 <_realloc_r+0x48>
   27652:	4621      	mov	r1, r4
   27654:	4638      	mov	r0, r7
   27656:	f7fb facd 	bl	22bf4 <_malloc_r>
   2765a:	4605      	mov	r5, r0
   2765c:	2800      	cmp	r0, #0
   2765e:	d0f2      	beq.n	27646 <_realloc_r+0x1c>
   27660:	4631      	mov	r1, r6
   27662:	4622      	mov	r2, r4
   27664:	f7ff f9cf 	bl	26a06 <memcpy>
   27668:	4631      	mov	r1, r6
   2766a:	4638      	mov	r0, r7
   2766c:	f7fb fa72 	bl	22b54 <_free_r>
   27670:	e7e9      	b.n	27646 <_realloc_r+0x1c>
   27672:	4635      	mov	r5, r6
   27674:	e7e7      	b.n	27646 <_realloc_r+0x1c>

00027676 <__ssputs_r>:
   27676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2767a:	688e      	ldr	r6, [r1, #8]
   2767c:	4682      	mov	sl, r0
   2767e:	460c      	mov	r4, r1
   27680:	4690      	mov	r8, r2
   27682:	429e      	cmp	r6, r3
   27684:	461f      	mov	r7, r3
   27686:	d838      	bhi.n	276fa <__ssputs_r+0x84>
   27688:	898a      	ldrh	r2, [r1, #12]
   2768a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2768e:	d032      	beq.n	276f6 <__ssputs_r+0x80>
   27690:	6825      	ldr	r5, [r4, #0]
   27692:	3301      	adds	r3, #1
   27694:	6909      	ldr	r1, [r1, #16]
   27696:	eba5 0901 	sub.w	r9, r5, r1
   2769a:	6965      	ldr	r5, [r4, #20]
   2769c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   276a0:	444b      	add	r3, r9
   276a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   276a6:	106d      	asrs	r5, r5, #1
   276a8:	429d      	cmp	r5, r3
   276aa:	bf38      	it	cc
   276ac:	461d      	movcc	r5, r3
   276ae:	0553      	lsls	r3, r2, #21
   276b0:	d531      	bpl.n	27716 <__ssputs_r+0xa0>
   276b2:	4629      	mov	r1, r5
   276b4:	f7fb fa9e 	bl	22bf4 <_malloc_r>
   276b8:	4606      	mov	r6, r0
   276ba:	b950      	cbnz	r0, 276d2 <__ssputs_r+0x5c>
   276bc:	230c      	movs	r3, #12
   276be:	f04f 30ff 	mov.w	r0, #4294967295
   276c2:	f8ca 3000 	str.w	r3, [sl]
   276c6:	89a3      	ldrh	r3, [r4, #12]
   276c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   276cc:	81a3      	strh	r3, [r4, #12]
   276ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   276d2:	464a      	mov	r2, r9
   276d4:	6921      	ldr	r1, [r4, #16]
   276d6:	f7ff f996 	bl	26a06 <memcpy>
   276da:	89a3      	ldrh	r3, [r4, #12]
   276dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   276e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   276e4:	81a3      	strh	r3, [r4, #12]
   276e6:	6126      	str	r6, [r4, #16]
   276e8:	444e      	add	r6, r9
   276ea:	6165      	str	r5, [r4, #20]
   276ec:	eba5 0509 	sub.w	r5, r5, r9
   276f0:	6026      	str	r6, [r4, #0]
   276f2:	463e      	mov	r6, r7
   276f4:	60a5      	str	r5, [r4, #8]
   276f6:	42be      	cmp	r6, r7
   276f8:	d900      	bls.n	276fc <__ssputs_r+0x86>
   276fa:	463e      	mov	r6, r7
   276fc:	4632      	mov	r2, r6
   276fe:	4641      	mov	r1, r8
   27700:	6820      	ldr	r0, [r4, #0]
   27702:	f7ff fca3 	bl	2704c <memmove>
   27706:	68a3      	ldr	r3, [r4, #8]
   27708:	6822      	ldr	r2, [r4, #0]
   2770a:	2000      	movs	r0, #0
   2770c:	1b9b      	subs	r3, r3, r6
   2770e:	4432      	add	r2, r6
   27710:	60a3      	str	r3, [r4, #8]
   27712:	6022      	str	r2, [r4, #0]
   27714:	e7db      	b.n	276ce <__ssputs_r+0x58>
   27716:	462a      	mov	r2, r5
   27718:	f7ff ff87 	bl	2762a <_realloc_r>
   2771c:	4606      	mov	r6, r0
   2771e:	2800      	cmp	r0, #0
   27720:	d1e1      	bne.n	276e6 <__ssputs_r+0x70>
   27722:	6921      	ldr	r1, [r4, #16]
   27724:	4650      	mov	r0, sl
   27726:	f7fb fa15 	bl	22b54 <_free_r>
   2772a:	e7c7      	b.n	276bc <__ssputs_r+0x46>

0002772c <_raise_r>:
   2772c:	291f      	cmp	r1, #31
   2772e:	b538      	push	{r3, r4, r5, lr}
   27730:	4604      	mov	r4, r0
   27732:	460d      	mov	r5, r1
   27734:	d904      	bls.n	27740 <_raise_r+0x14>
   27736:	2316      	movs	r3, #22
   27738:	6003      	str	r3, [r0, #0]
   2773a:	f04f 30ff 	mov.w	r0, #4294967295
   2773e:	bd38      	pop	{r3, r4, r5, pc}
   27740:	6c42      	ldr	r2, [r0, #68]	; 0x44
   27742:	b112      	cbz	r2, 2774a <_raise_r+0x1e>
   27744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   27748:	b94b      	cbnz	r3, 2775e <_raise_r+0x32>
   2774a:	4620      	mov	r0, r4
   2774c:	f000 f816 	bl	2777c <_getpid_r>
   27750:	462a      	mov	r2, r5
   27752:	4601      	mov	r1, r0
   27754:	4620      	mov	r0, r4
   27756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2775a:	f7fb bbbd 	b.w	22ed8 <_kill_r>
   2775e:	2b01      	cmp	r3, #1
   27760:	d00a      	beq.n	27778 <_raise_r+0x4c>
   27762:	1c59      	adds	r1, r3, #1
   27764:	d103      	bne.n	2776e <_raise_r+0x42>
   27766:	2316      	movs	r3, #22
   27768:	6003      	str	r3, [r0, #0]
   2776a:	2001      	movs	r0, #1
   2776c:	e7e7      	b.n	2773e <_raise_r+0x12>
   2776e:	2400      	movs	r4, #0
   27770:	4628      	mov	r0, r5
   27772:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   27776:	4798      	blx	r3
   27778:	2000      	movs	r0, #0
   2777a:	e7e0      	b.n	2773e <_raise_r+0x12>

0002777c <_getpid_r>:
   2777c:	f7fc bdeb 	b.w	24356 <_getpid>

00027780 <__sread>:
   27780:	b510      	push	{r4, lr}
   27782:	460c      	mov	r4, r1
   27784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27788:	f7fb fc1a 	bl	22fc0 <_read_r>
   2778c:	2800      	cmp	r0, #0
   2778e:	bfab      	itete	ge
   27790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   27792:	89a3      	ldrhlt	r3, [r4, #12]
   27794:	181b      	addge	r3, r3, r0
   27796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2779a:	bfac      	ite	ge
   2779c:	6563      	strge	r3, [r4, #84]	; 0x54
   2779e:	81a3      	strhlt	r3, [r4, #12]
   277a0:	bd10      	pop	{r4, pc}

000277a2 <__swrite>:
   277a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   277a6:	461f      	mov	r7, r3
   277a8:	898b      	ldrh	r3, [r1, #12]
   277aa:	4605      	mov	r5, r0
   277ac:	460c      	mov	r4, r1
   277ae:	05db      	lsls	r3, r3, #23
   277b0:	4616      	mov	r6, r2
   277b2:	d505      	bpl.n	277c0 <__swrite+0x1e>
   277b4:	2302      	movs	r3, #2
   277b6:	2200      	movs	r2, #0
   277b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   277bc:	f7fb fbe2 	bl	22f84 <_lseek_r>
   277c0:	89a3      	ldrh	r3, [r4, #12]
   277c2:	4632      	mov	r2, r6
   277c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   277c8:	4628      	mov	r0, r5
   277ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   277ce:	81a3      	strh	r3, [r4, #12]
   277d0:	463b      	mov	r3, r7
   277d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   277d6:	f7fb bb91 	b.w	22efc <_write_r>

000277da <__sseek>:
   277da:	b510      	push	{r4, lr}
   277dc:	460c      	mov	r4, r1
   277de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   277e2:	f7fb fbcf 	bl	22f84 <_lseek_r>
   277e6:	1c43      	adds	r3, r0, #1
   277e8:	89a3      	ldrh	r3, [r4, #12]
   277ea:	bf15      	itete	ne
   277ec:	6560      	strne	r0, [r4, #84]	; 0x54
   277ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   277f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   277f6:	81a3      	strheq	r3, [r4, #12]
   277f8:	bf18      	it	ne
   277fa:	81a3      	strhne	r3, [r4, #12]
   277fc:	bd10      	pop	{r4, pc}

000277fe <__sclose>:
   277fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27802:	f7fb bb8d 	b.w	22f20 <_close_r>

00027806 <__ascii_mbtowc>:
   27806:	b082      	sub	sp, #8
   27808:	b901      	cbnz	r1, 2780c <__ascii_mbtowc+0x6>
   2780a:	a901      	add	r1, sp, #4
   2780c:	b142      	cbz	r2, 27820 <__ascii_mbtowc+0x1a>
   2780e:	b14b      	cbz	r3, 27824 <__ascii_mbtowc+0x1e>
   27810:	7813      	ldrb	r3, [r2, #0]
   27812:	600b      	str	r3, [r1, #0]
   27814:	7812      	ldrb	r2, [r2, #0]
   27816:	1e10      	subs	r0, r2, #0
   27818:	bf18      	it	ne
   2781a:	2001      	movne	r0, #1
   2781c:	b002      	add	sp, #8
   2781e:	4770      	bx	lr
   27820:	4610      	mov	r0, r2
   27822:	e7fb      	b.n	2781c <__ascii_mbtowc+0x16>
   27824:	f06f 0001 	mvn.w	r0, #1
   27828:	e7f8      	b.n	2781c <__ascii_mbtowc+0x16>

0002782a <_malloc_usable_size_r>:
   2782a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2782e:	1f18      	subs	r0, r3, #4
   27830:	2b00      	cmp	r3, #0
   27832:	bfbc      	itt	lt
   27834:	580b      	ldrlt	r3, [r1, r0]
   27836:	18c0      	addlt	r0, r0, r3
   27838:	4770      	bx	lr

0002783a <__ascii_wctomb>:
   2783a:	b149      	cbz	r1, 27850 <__ascii_wctomb+0x16>
   2783c:	2aff      	cmp	r2, #255	; 0xff
   2783e:	bf8d      	iteet	hi
   27840:	238a      	movhi	r3, #138	; 0x8a
   27842:	2001      	movls	r0, #1
   27844:	700a      	strbls	r2, [r1, #0]
   27846:	6003      	strhi	r3, [r0, #0]
   27848:	bf88      	it	hi
   2784a:	f04f 30ff 	movhi.w	r0, #4294967295
   2784e:	4770      	bx	lr
   27850:	4608      	mov	r0, r1
   27852:	4770      	bx	lr
